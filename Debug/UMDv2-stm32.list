
UMDv2-stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb50  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  0800bd28  0800bd28  0001bd28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be04  0800be04  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800be04  0800be04  0001be04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be0c  0800be0c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be0c  0800be0c  0001be0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be10  0800be10  0001be10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800be14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b00  200001e8  0800bffc  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ce8  0800bffc  00021ce8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004451b  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007b18  00000000  00000000  00064733  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001e60  00000000  00000000  0006c250  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001b58  00000000  00000000  0006e0b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002f376  00000000  00000000  0006fc08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00023de5  00000000  00000000  0009ef7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ebe2d  00000000  00000000  000c2d63  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001aeb90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009240  00000000  00000000  001aec0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001e8 	.word	0x200001e8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800bd10 	.word	0x0800bd10

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001ec 	.word	0x200001ec
 8000214:	0800bd10 	.word	0x0800bd10

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_uldivmod>:
 8000228:	b953      	cbnz	r3, 8000240 <__aeabi_uldivmod+0x18>
 800022a:	b94a      	cbnz	r2, 8000240 <__aeabi_uldivmod+0x18>
 800022c:	2900      	cmp	r1, #0
 800022e:	bf08      	it	eq
 8000230:	2800      	cmpeq	r0, #0
 8000232:	bf1c      	itt	ne
 8000234:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000238:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800023c:	f000 b972 	b.w	8000524 <__aeabi_idiv0>
 8000240:	f1ad 0c08 	sub.w	ip, sp, #8
 8000244:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000248:	f000 f806 	bl	8000258 <__udivmoddi4>
 800024c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000254:	b004      	add	sp, #16
 8000256:	4770      	bx	lr

08000258 <__udivmoddi4>:
 8000258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800025c:	9e08      	ldr	r6, [sp, #32]
 800025e:	4604      	mov	r4, r0
 8000260:	4688      	mov	r8, r1
 8000262:	2b00      	cmp	r3, #0
 8000264:	d14b      	bne.n	80002fe <__udivmoddi4+0xa6>
 8000266:	428a      	cmp	r2, r1
 8000268:	4615      	mov	r5, r2
 800026a:	d967      	bls.n	800033c <__udivmoddi4+0xe4>
 800026c:	fab2 f282 	clz	r2, r2
 8000270:	b14a      	cbz	r2, 8000286 <__udivmoddi4+0x2e>
 8000272:	f1c2 0720 	rsb	r7, r2, #32
 8000276:	fa01 f302 	lsl.w	r3, r1, r2
 800027a:	fa20 f707 	lsr.w	r7, r0, r7
 800027e:	4095      	lsls	r5, r2
 8000280:	ea47 0803 	orr.w	r8, r7, r3
 8000284:	4094      	lsls	r4, r2
 8000286:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800028a:	0c23      	lsrs	r3, r4, #16
 800028c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000290:	fa1f fc85 	uxth.w	ip, r5
 8000294:	fb0e 8817 	mls	r8, lr, r7, r8
 8000298:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800029c:	fb07 f10c 	mul.w	r1, r7, ip
 80002a0:	4299      	cmp	r1, r3
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x60>
 80002a4:	18eb      	adds	r3, r5, r3
 80002a6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002aa:	f080 811b 	bcs.w	80004e4 <__udivmoddi4+0x28c>
 80002ae:	4299      	cmp	r1, r3
 80002b0:	f240 8118 	bls.w	80004e4 <__udivmoddi4+0x28c>
 80002b4:	3f02      	subs	r7, #2
 80002b6:	442b      	add	r3, r5
 80002b8:	1a5b      	subs	r3, r3, r1
 80002ba:	b2a4      	uxth	r4, r4
 80002bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002cc:	45a4      	cmp	ip, r4
 80002ce:	d909      	bls.n	80002e4 <__udivmoddi4+0x8c>
 80002d0:	192c      	adds	r4, r5, r4
 80002d2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002d6:	f080 8107 	bcs.w	80004e8 <__udivmoddi4+0x290>
 80002da:	45a4      	cmp	ip, r4
 80002dc:	f240 8104 	bls.w	80004e8 <__udivmoddi4+0x290>
 80002e0:	3802      	subs	r0, #2
 80002e2:	442c      	add	r4, r5
 80002e4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e8:	eba4 040c 	sub.w	r4, r4, ip
 80002ec:	2700      	movs	r7, #0
 80002ee:	b11e      	cbz	r6, 80002f8 <__udivmoddi4+0xa0>
 80002f0:	40d4      	lsrs	r4, r2
 80002f2:	2300      	movs	r3, #0
 80002f4:	e9c6 4300 	strd	r4, r3, [r6]
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	428b      	cmp	r3, r1
 8000300:	d909      	bls.n	8000316 <__udivmoddi4+0xbe>
 8000302:	2e00      	cmp	r6, #0
 8000304:	f000 80eb 	beq.w	80004de <__udivmoddi4+0x286>
 8000308:	2700      	movs	r7, #0
 800030a:	e9c6 0100 	strd	r0, r1, [r6]
 800030e:	4638      	mov	r0, r7
 8000310:	4639      	mov	r1, r7
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	fab3 f783 	clz	r7, r3
 800031a:	2f00      	cmp	r7, #0
 800031c:	d147      	bne.n	80003ae <__udivmoddi4+0x156>
 800031e:	428b      	cmp	r3, r1
 8000320:	d302      	bcc.n	8000328 <__udivmoddi4+0xd0>
 8000322:	4282      	cmp	r2, r0
 8000324:	f200 80fa 	bhi.w	800051c <__udivmoddi4+0x2c4>
 8000328:	1a84      	subs	r4, r0, r2
 800032a:	eb61 0303 	sbc.w	r3, r1, r3
 800032e:	2001      	movs	r0, #1
 8000330:	4698      	mov	r8, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d0e0      	beq.n	80002f8 <__udivmoddi4+0xa0>
 8000336:	e9c6 4800 	strd	r4, r8, [r6]
 800033a:	e7dd      	b.n	80002f8 <__udivmoddi4+0xa0>
 800033c:	b902      	cbnz	r2, 8000340 <__udivmoddi4+0xe8>
 800033e:	deff      	udf	#255	; 0xff
 8000340:	fab2 f282 	clz	r2, r2
 8000344:	2a00      	cmp	r2, #0
 8000346:	f040 808f 	bne.w	8000468 <__udivmoddi4+0x210>
 800034a:	1b49      	subs	r1, r1, r5
 800034c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000350:	fa1f f885 	uxth.w	r8, r5
 8000354:	2701      	movs	r7, #1
 8000356:	fbb1 fcfe 	udiv	ip, r1, lr
 800035a:	0c23      	lsrs	r3, r4, #16
 800035c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb08 f10c 	mul.w	r1, r8, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x124>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x122>
 8000374:	4299      	cmp	r1, r3
 8000376:	f200 80cd 	bhi.w	8000514 <__udivmoddi4+0x2bc>
 800037a:	4684      	mov	ip, r0
 800037c:	1a59      	subs	r1, r3, r1
 800037e:	b2a3      	uxth	r3, r4
 8000380:	fbb1 f0fe 	udiv	r0, r1, lr
 8000384:	fb0e 1410 	mls	r4, lr, r0, r1
 8000388:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800038c:	fb08 f800 	mul.w	r8, r8, r0
 8000390:	45a0      	cmp	r8, r4
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0x14c>
 8000394:	192c      	adds	r4, r5, r4
 8000396:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x14a>
 800039c:	45a0      	cmp	r8, r4
 800039e:	f200 80b6 	bhi.w	800050e <__udivmoddi4+0x2b6>
 80003a2:	4618      	mov	r0, r3
 80003a4:	eba4 0408 	sub.w	r4, r4, r8
 80003a8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003ac:	e79f      	b.n	80002ee <__udivmoddi4+0x96>
 80003ae:	f1c7 0c20 	rsb	ip, r7, #32
 80003b2:	40bb      	lsls	r3, r7
 80003b4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003b8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003bc:	fa01 f407 	lsl.w	r4, r1, r7
 80003c0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003c4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003c8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003cc:	4325      	orrs	r5, r4
 80003ce:	fbb3 f9f8 	udiv	r9, r3, r8
 80003d2:	0c2c      	lsrs	r4, r5, #16
 80003d4:	fb08 3319 	mls	r3, r8, r9, r3
 80003d8:	fa1f fa8e 	uxth.w	sl, lr
 80003dc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003e0:	fb09 f40a 	mul.w	r4, r9, sl
 80003e4:	429c      	cmp	r4, r3
 80003e6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ea:	fa00 f107 	lsl.w	r1, r0, r7
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b0>
 80003f0:	eb1e 0303 	adds.w	r3, lr, r3
 80003f4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003f8:	f080 8087 	bcs.w	800050a <__udivmoddi4+0x2b2>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f240 8084 	bls.w	800050a <__udivmoddi4+0x2b2>
 8000402:	f1a9 0902 	sub.w	r9, r9, #2
 8000406:	4473      	add	r3, lr
 8000408:	1b1b      	subs	r3, r3, r4
 800040a:	b2ad      	uxth	r5, r5
 800040c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000410:	fb08 3310 	mls	r3, r8, r0, r3
 8000414:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000418:	fb00 fa0a 	mul.w	sl, r0, sl
 800041c:	45a2      	cmp	sl, r4
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1da>
 8000420:	eb1e 0404 	adds.w	r4, lr, r4
 8000424:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000428:	d26b      	bcs.n	8000502 <__udivmoddi4+0x2aa>
 800042a:	45a2      	cmp	sl, r4
 800042c:	d969      	bls.n	8000502 <__udivmoddi4+0x2aa>
 800042e:	3802      	subs	r0, #2
 8000430:	4474      	add	r4, lr
 8000432:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000436:	fba0 8902 	umull	r8, r9, r0, r2
 800043a:	eba4 040a 	sub.w	r4, r4, sl
 800043e:	454c      	cmp	r4, r9
 8000440:	46c2      	mov	sl, r8
 8000442:	464b      	mov	r3, r9
 8000444:	d354      	bcc.n	80004f0 <__udivmoddi4+0x298>
 8000446:	d051      	beq.n	80004ec <__udivmoddi4+0x294>
 8000448:	2e00      	cmp	r6, #0
 800044a:	d069      	beq.n	8000520 <__udivmoddi4+0x2c8>
 800044c:	ebb1 050a 	subs.w	r5, r1, sl
 8000450:	eb64 0403 	sbc.w	r4, r4, r3
 8000454:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000458:	40fd      	lsrs	r5, r7
 800045a:	40fc      	lsrs	r4, r7
 800045c:	ea4c 0505 	orr.w	r5, ip, r5
 8000460:	e9c6 5400 	strd	r5, r4, [r6]
 8000464:	2700      	movs	r7, #0
 8000466:	e747      	b.n	80002f8 <__udivmoddi4+0xa0>
 8000468:	f1c2 0320 	rsb	r3, r2, #32
 800046c:	fa20 f703 	lsr.w	r7, r0, r3
 8000470:	4095      	lsls	r5, r2
 8000472:	fa01 f002 	lsl.w	r0, r1, r2
 8000476:	fa21 f303 	lsr.w	r3, r1, r3
 800047a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800047e:	4338      	orrs	r0, r7
 8000480:	0c01      	lsrs	r1, r0, #16
 8000482:	fbb3 f7fe 	udiv	r7, r3, lr
 8000486:	fa1f f885 	uxth.w	r8, r5
 800048a:	fb0e 3317 	mls	r3, lr, r7, r3
 800048e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000492:	fb07 f308 	mul.w	r3, r7, r8
 8000496:	428b      	cmp	r3, r1
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d907      	bls.n	80004ae <__udivmoddi4+0x256>
 800049e:	1869      	adds	r1, r5, r1
 80004a0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004a4:	d22f      	bcs.n	8000506 <__udivmoddi4+0x2ae>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d92d      	bls.n	8000506 <__udivmoddi4+0x2ae>
 80004aa:	3f02      	subs	r7, #2
 80004ac:	4429      	add	r1, r5
 80004ae:	1acb      	subs	r3, r1, r3
 80004b0:	b281      	uxth	r1, r0
 80004b2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004be:	fb00 f308 	mul.w	r3, r0, r8
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d907      	bls.n	80004d6 <__udivmoddi4+0x27e>
 80004c6:	1869      	adds	r1, r5, r1
 80004c8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004cc:	d217      	bcs.n	80004fe <__udivmoddi4+0x2a6>
 80004ce:	428b      	cmp	r3, r1
 80004d0:	d915      	bls.n	80004fe <__udivmoddi4+0x2a6>
 80004d2:	3802      	subs	r0, #2
 80004d4:	4429      	add	r1, r5
 80004d6:	1ac9      	subs	r1, r1, r3
 80004d8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004dc:	e73b      	b.n	8000356 <__udivmoddi4+0xfe>
 80004de:	4637      	mov	r7, r6
 80004e0:	4630      	mov	r0, r6
 80004e2:	e709      	b.n	80002f8 <__udivmoddi4+0xa0>
 80004e4:	4607      	mov	r7, r0
 80004e6:	e6e7      	b.n	80002b8 <__udivmoddi4+0x60>
 80004e8:	4618      	mov	r0, r3
 80004ea:	e6fb      	b.n	80002e4 <__udivmoddi4+0x8c>
 80004ec:	4541      	cmp	r1, r8
 80004ee:	d2ab      	bcs.n	8000448 <__udivmoddi4+0x1f0>
 80004f0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004f4:	eb69 020e 	sbc.w	r2, r9, lr
 80004f8:	3801      	subs	r0, #1
 80004fa:	4613      	mov	r3, r2
 80004fc:	e7a4      	b.n	8000448 <__udivmoddi4+0x1f0>
 80004fe:	4660      	mov	r0, ip
 8000500:	e7e9      	b.n	80004d6 <__udivmoddi4+0x27e>
 8000502:	4618      	mov	r0, r3
 8000504:	e795      	b.n	8000432 <__udivmoddi4+0x1da>
 8000506:	4667      	mov	r7, ip
 8000508:	e7d1      	b.n	80004ae <__udivmoddi4+0x256>
 800050a:	4681      	mov	r9, r0
 800050c:	e77c      	b.n	8000408 <__udivmoddi4+0x1b0>
 800050e:	3802      	subs	r0, #2
 8000510:	442c      	add	r4, r5
 8000512:	e747      	b.n	80003a4 <__udivmoddi4+0x14c>
 8000514:	f1ac 0c02 	sub.w	ip, ip, #2
 8000518:	442b      	add	r3, r5
 800051a:	e72f      	b.n	800037c <__udivmoddi4+0x124>
 800051c:	4638      	mov	r0, r7
 800051e:	e708      	b.n	8000332 <__udivmoddi4+0xda>
 8000520:	4637      	mov	r7, r6
 8000522:	e6e9      	b.n	80002f8 <__udivmoddi4+0xa0>

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800052c:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <HAL_Init+0x40>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a0d      	ldr	r2, [pc, #52]	; (8000568 <HAL_Init+0x40>)
 8000532:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000536:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000538:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <HAL_Init+0x40>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a0a      	ldr	r2, [pc, #40]	; (8000568 <HAL_Init+0x40>)
 800053e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000542:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000544:	4b08      	ldr	r3, [pc, #32]	; (8000568 <HAL_Init+0x40>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a07      	ldr	r2, [pc, #28]	; (8000568 <HAL_Init+0x40>)
 800054a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800054e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000550:	2003      	movs	r0, #3
 8000552:	f000 fcf7 	bl	8000f44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000556:	2000      	movs	r0, #0
 8000558:	f000 f808 	bl	800056c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800055c:	f00a f9b4 	bl	800a8c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000560:	2300      	movs	r3, #0
}
 8000562:	4618      	mov	r0, r3
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40023c00 	.word	0x40023c00

0800056c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000574:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <HAL_InitTick+0x54>)
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <HAL_InitTick+0x58>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	4619      	mov	r1, r3
 800057e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000582:	fbb3 f3f1 	udiv	r3, r3, r1
 8000586:	fbb2 f3f3 	udiv	r3, r2, r3
 800058a:	4618      	mov	r0, r3
 800058c:	f000 fd0f 	bl	8000fae <HAL_SYSTICK_Config>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000596:	2301      	movs	r3, #1
 8000598:	e00e      	b.n	80005b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	2b0f      	cmp	r3, #15
 800059e:	d80a      	bhi.n	80005b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005a0:	2200      	movs	r2, #0
 80005a2:	6879      	ldr	r1, [r7, #4]
 80005a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005a8:	f000 fcd7 	bl	8000f5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005ac:	4a06      	ldr	r2, [pc, #24]	; (80005c8 <HAL_InitTick+0x5c>)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005b2:	2300      	movs	r3, #0
 80005b4:	e000      	b.n	80005b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005b6:	2301      	movs	r3, #1
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20000118 	.word	0x20000118
 80005c4:	20000004 	.word	0x20000004
 80005c8:	20000000 	.word	0x20000000

080005cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <HAL_IncTick+0x20>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	461a      	mov	r2, r3
 80005d6:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <HAL_IncTick+0x24>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4413      	add	r3, r2
 80005dc:	4a04      	ldr	r2, [pc, #16]	; (80005f0 <HAL_IncTick+0x24>)
 80005de:	6013      	str	r3, [r2, #0]
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	20000004 	.word	0x20000004
 80005f0:	200002d0 	.word	0x200002d0

080005f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  return uwTick;
 80005f8:	4b03      	ldr	r3, [pc, #12]	; (8000608 <HAL_GetTick+0x14>)
 80005fa:	681b      	ldr	r3, [r3, #0]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	200002d0 	.word	0x200002d0

0800060c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000614:	f7ff ffee 	bl	80005f4 <HAL_GetTick>
 8000618:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000624:	d005      	beq.n	8000632 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <HAL_Delay+0x40>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	461a      	mov	r2, r3
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	4413      	add	r3, r2
 8000630:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000632:	bf00      	nop
 8000634:	f7ff ffde 	bl	80005f4 <HAL_GetTick>
 8000638:	4602      	mov	r2, r0
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	1ad3      	subs	r3, r2, r3
 800063e:	68fa      	ldr	r2, [r7, #12]
 8000640:	429a      	cmp	r2, r3
 8000642:	d8f7      	bhi.n	8000634 <HAL_Delay+0x28>
  {
  }
}
 8000644:	bf00      	nop
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000004 	.word	0x20000004

08000650 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000658:	2300      	movs	r3, #0
 800065a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d101      	bne.n	8000666 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000662:	2301      	movs	r3, #1
 8000664:	e033      	b.n	80006ce <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066a:	2b00      	cmp	r3, #0
 800066c:	d109      	bne.n	8000682 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800066e:	6878      	ldr	r0, [r7, #4]
 8000670:	f009 f8be 	bl	80097f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2200      	movs	r2, #0
 8000678:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2200      	movs	r2, #0
 800067e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000686:	f003 0310 	and.w	r3, r3, #16
 800068a:	2b00      	cmp	r3, #0
 800068c:	d118      	bne.n	80006c0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000692:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000696:	f023 0302 	bic.w	r3, r3, #2
 800069a:	f043 0202 	orr.w	r2, r3, #2
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80006a2:	6878      	ldr	r0, [r7, #4]
 80006a4:	f000 fa82 	bl	8000bac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2200      	movs	r2, #0
 80006ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b2:	f023 0303 	bic.w	r3, r3, #3
 80006b6:	f043 0201 	orr.w	r2, r3, #1
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	641a      	str	r2, [r3, #64]	; 0x40
 80006be:	e001      	b.n	80006c4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80006c0:	2301      	movs	r3, #1
 80006c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2200      	movs	r2, #0
 80006c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80006cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3710      	adds	r7, #16
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
	...

080006d8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d101      	bne.n	80006f2 <HAL_ADC_Start+0x1a>
 80006ee:	2302      	movs	r3, #2
 80006f0:	e08a      	b.n	8000808 <HAL_ADC_Start+0x130>
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	2201      	movs	r2, #1
 80006f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	689b      	ldr	r3, [r3, #8]
 8000700:	f003 0301 	and.w	r3, r3, #1
 8000704:	2b01      	cmp	r3, #1
 8000706:	d018      	beq.n	800073a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	689a      	ldr	r2, [r3, #8]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f042 0201 	orr.w	r2, r2, #1
 8000716:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000718:	4b3e      	ldr	r3, [pc, #248]	; (8000814 <HAL_ADC_Start+0x13c>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a3e      	ldr	r2, [pc, #248]	; (8000818 <HAL_ADC_Start+0x140>)
 800071e:	fba2 2303 	umull	r2, r3, r2, r3
 8000722:	0c9a      	lsrs	r2, r3, #18
 8000724:	4613      	mov	r3, r2
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	4413      	add	r3, r2
 800072a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800072c:	e002      	b.n	8000734 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	3b01      	subs	r3, #1
 8000732:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d1f9      	bne.n	800072e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	689b      	ldr	r3, [r3, #8]
 8000740:	f003 0301 	and.w	r3, r3, #1
 8000744:	2b01      	cmp	r3, #1
 8000746:	d15e      	bne.n	8000806 <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000750:	f023 0301 	bic.w	r3, r3, #1
 8000754:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000766:	2b00      	cmp	r3, #0
 8000768:	d007      	beq.n	800077a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000772:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000786:	d106      	bne.n	8000796 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078c:	f023 0206 	bic.w	r2, r3, #6
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	645a      	str	r2, [r3, #68]	; 0x44
 8000794:	e002      	b.n	800079c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2200      	movs	r2, #0
 800079a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2200      	movs	r2, #0
 80007a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80007a4:	4b1d      	ldr	r3, [pc, #116]	; (800081c <HAL_ADC_Start+0x144>)
 80007a6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80007b0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	f003 031f 	and.w	r3, r3, #31
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d10f      	bne.n	80007de <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	689b      	ldr	r3, [r3, #8]
 80007c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d11c      	bne.n	8000806 <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	689a      	ldr	r2, [r3, #8]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	e013      	b.n	8000806 <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a0f      	ldr	r2, [pc, #60]	; (8000820 <HAL_ADC_Start+0x148>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d10e      	bne.n	8000806 <HAL_ADC_Start+0x12e>
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	689b      	ldr	r3, [r3, #8]
 80007ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d107      	bne.n	8000806 <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	689a      	ldr	r2, [r3, #8]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000804:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8000806:	2300      	movs	r3, #0
}
 8000808:	4618      	mov	r0, r3
 800080a:	3714      	adds	r7, #20
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	20000118 	.word	0x20000118
 8000818:	431bde83 	.word	0x431bde83
 800081c:	40012300 	.word	0x40012300
 8000820:	40012000 	.word	0x40012000

08000824 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	689b      	ldr	r3, [r3, #8]
 8000838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800083c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000840:	d113      	bne.n	800086a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	689b      	ldr	r3, [r3, #8]
 8000848:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800084c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000850:	d10b      	bne.n	800086a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000856:	f043 0220 	orr.w	r2, r3, #32
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2200      	movs	r2, #0
 8000862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8000866:	2301      	movs	r3, #1
 8000868:	e05c      	b.n	8000924 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800086a:	f7ff fec3 	bl	80005f4 <HAL_GetTick>
 800086e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000870:	e01a      	b.n	80008a8 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000878:	d016      	beq.n	80008a8 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d007      	beq.n	8000890 <HAL_ADC_PollForConversion+0x6c>
 8000880:	f7ff feb8 	bl	80005f4 <HAL_GetTick>
 8000884:	4602      	mov	r2, r0
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	683a      	ldr	r2, [r7, #0]
 800088c:	429a      	cmp	r2, r3
 800088e:	d20b      	bcs.n	80008a8 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000894:	f043 0204 	orr.w	r2, r3, #4
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2200      	movs	r2, #0
 80008a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80008a4:	2303      	movs	r3, #3
 80008a6:	e03d      	b.n	8000924 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	2b02      	cmp	r3, #2
 80008b4:	d1dd      	bne.n	8000872 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f06f 0212 	mvn.w	r2, #18
 80008be:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	689b      	ldr	r3, [r3, #8]
 80008d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d123      	bne.n	8000922 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d11f      	bne.n	8000922 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d006      	beq.n	80008fe <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	689b      	ldr	r3, [r3, #8]
 80008f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d111      	bne.n	8000922 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000912:	2b00      	cmp	r3, #0
 8000914:	d105      	bne.n	8000922 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	f043 0201 	orr.w	r2, r3, #1
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000922:	2300      	movs	r3, #0
}
 8000924:	4618      	mov	r0, r3
 8000926:	3710      	adds	r7, #16
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800093a:	4618      	mov	r0, r3
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
	...

08000948 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000952:	2300      	movs	r3, #0
 8000954:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800095c:	2b01      	cmp	r3, #1
 800095e:	d101      	bne.n	8000964 <HAL_ADC_ConfigChannel+0x1c>
 8000960:	2302      	movs	r3, #2
 8000962:	e113      	b.n	8000b8c <HAL_ADC_ConfigChannel+0x244>
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2201      	movs	r2, #1
 8000968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b09      	cmp	r3, #9
 8000972:	d925      	bls.n	80009c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	68d9      	ldr	r1, [r3, #12]
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	b29b      	uxth	r3, r3
 8000980:	461a      	mov	r2, r3
 8000982:	4613      	mov	r3, r2
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	4413      	add	r3, r2
 8000988:	3b1e      	subs	r3, #30
 800098a:	2207      	movs	r2, #7
 800098c:	fa02 f303 	lsl.w	r3, r2, r3
 8000990:	43da      	mvns	r2, r3
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	400a      	ands	r2, r1
 8000998:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	68d9      	ldr	r1, [r3, #12]
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	689a      	ldr	r2, [r3, #8]
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	4618      	mov	r0, r3
 80009ac:	4603      	mov	r3, r0
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	4403      	add	r3, r0
 80009b2:	3b1e      	subs	r3, #30
 80009b4:	409a      	lsls	r2, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	430a      	orrs	r2, r1
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	e022      	b.n	8000a06 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	6919      	ldr	r1, [r3, #16]
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	b29b      	uxth	r3, r3
 80009cc:	461a      	mov	r2, r3
 80009ce:	4613      	mov	r3, r2
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	4413      	add	r3, r2
 80009d4:	2207      	movs	r2, #7
 80009d6:	fa02 f303 	lsl.w	r3, r2, r3
 80009da:	43da      	mvns	r2, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	400a      	ands	r2, r1
 80009e2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	6919      	ldr	r1, [r3, #16]
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	689a      	ldr	r2, [r3, #8]
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	b29b      	uxth	r3, r3
 80009f4:	4618      	mov	r0, r3
 80009f6:	4603      	mov	r3, r0
 80009f8:	005b      	lsls	r3, r3, #1
 80009fa:	4403      	add	r3, r0
 80009fc:	409a      	lsls	r2, r3
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	430a      	orrs	r2, r1
 8000a04:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	2b06      	cmp	r3, #6
 8000a0c:	d824      	bhi.n	8000a58 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	685a      	ldr	r2, [r3, #4]
 8000a18:	4613      	mov	r3, r2
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	4413      	add	r3, r2
 8000a1e:	3b05      	subs	r3, #5
 8000a20:	221f      	movs	r2, #31
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	43da      	mvns	r2, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	400a      	ands	r2, r1
 8000a2e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	685a      	ldr	r2, [r3, #4]
 8000a42:	4613      	mov	r3, r2
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	4413      	add	r3, r2
 8000a48:	3b05      	subs	r3, #5
 8000a4a:	fa00 f203 	lsl.w	r2, r0, r3
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	430a      	orrs	r2, r1
 8000a54:	635a      	str	r2, [r3, #52]	; 0x34
 8000a56:	e04c      	b.n	8000af2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	2b0c      	cmp	r3, #12
 8000a5e:	d824      	bhi.n	8000aaa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685a      	ldr	r2, [r3, #4]
 8000a6a:	4613      	mov	r3, r2
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	4413      	add	r3, r2
 8000a70:	3b23      	subs	r3, #35	; 0x23
 8000a72:	221f      	movs	r2, #31
 8000a74:	fa02 f303 	lsl.w	r3, r2, r3
 8000a78:	43da      	mvns	r2, r3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	400a      	ands	r2, r1
 8000a80:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	4618      	mov	r0, r3
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685a      	ldr	r2, [r3, #4]
 8000a94:	4613      	mov	r3, r2
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	4413      	add	r3, r2
 8000a9a:	3b23      	subs	r3, #35	; 0x23
 8000a9c:	fa00 f203 	lsl.w	r2, r0, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	430a      	orrs	r2, r1
 8000aa6:	631a      	str	r2, [r3, #48]	; 0x30
 8000aa8:	e023      	b.n	8000af2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	685a      	ldr	r2, [r3, #4]
 8000ab4:	4613      	mov	r3, r2
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	4413      	add	r3, r2
 8000aba:	3b41      	subs	r3, #65	; 0x41
 8000abc:	221f      	movs	r2, #31
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	43da      	mvns	r2, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	400a      	ands	r2, r1
 8000aca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	4618      	mov	r0, r3
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685a      	ldr	r2, [r3, #4]
 8000ade:	4613      	mov	r3, r2
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	4413      	add	r3, r2
 8000ae4:	3b41      	subs	r3, #65	; 0x41
 8000ae6:	fa00 f203 	lsl.w	r2, r0, r3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	430a      	orrs	r2, r1
 8000af0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000af2:	4b29      	ldr	r3, [pc, #164]	; (8000b98 <HAL_ADC_ConfigChannel+0x250>)
 8000af4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a28      	ldr	r2, [pc, #160]	; (8000b9c <HAL_ADC_ConfigChannel+0x254>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d10f      	bne.n	8000b20 <HAL_ADC_ConfigChannel+0x1d8>
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b12      	cmp	r3, #18
 8000b06:	d10b      	bne.n	8000b20 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a1d      	ldr	r2, [pc, #116]	; (8000b9c <HAL_ADC_ConfigChannel+0x254>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d12b      	bne.n	8000b82 <HAL_ADC_ConfigChannel+0x23a>
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a1c      	ldr	r2, [pc, #112]	; (8000ba0 <HAL_ADC_ConfigChannel+0x258>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d003      	beq.n	8000b3c <HAL_ADC_ConfigChannel+0x1f4>
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b11      	cmp	r3, #17
 8000b3a:	d122      	bne.n	8000b82 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a11      	ldr	r2, [pc, #68]	; (8000ba0 <HAL_ADC_ConfigChannel+0x258>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d111      	bne.n	8000b82 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000b5e:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <HAL_ADC_ConfigChannel+0x25c>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a11      	ldr	r2, [pc, #68]	; (8000ba8 <HAL_ADC_ConfigChannel+0x260>)
 8000b64:	fba2 2303 	umull	r2, r3, r2, r3
 8000b68:	0c9a      	lsrs	r2, r3, #18
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	4413      	add	r3, r2
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000b74:	e002      	b.n	8000b7c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	3b01      	subs	r3, #1
 8000b7a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d1f9      	bne.n	8000b76 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2200      	movs	r2, #0
 8000b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000b8a:	2300      	movs	r3, #0
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	40012300 	.word	0x40012300
 8000b9c:	40012000 	.word	0x40012000
 8000ba0:	10000012 	.word	0x10000012
 8000ba4:	20000118 	.word	0x20000118
 8000ba8:	431bde83 	.word	0x431bde83

08000bac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000bb4:	4b79      	ldr	r3, [pc, #484]	; (8000d9c <ADC_Init+0x1f0>)
 8000bb6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	685a      	ldr	r2, [r3, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	431a      	orrs	r2, r3
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	685a      	ldr	r2, [r3, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000be0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	6859      	ldr	r1, [r3, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	691b      	ldr	r3, [r3, #16]
 8000bec:	021a      	lsls	r2, r3, #8
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	685a      	ldr	r2, [r3, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000c04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	6859      	ldr	r1, [r3, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	689a      	ldr	r2, [r3, #8]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	430a      	orrs	r2, r1
 8000c16:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	689a      	ldr	r2, [r3, #8]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	6899      	ldr	r1, [r3, #8]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	68da      	ldr	r2, [r3, #12]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	430a      	orrs	r2, r1
 8000c38:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c3e:	4a58      	ldr	r2, [pc, #352]	; (8000da0 <ADC_Init+0x1f4>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d022      	beq.n	8000c8a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	689a      	ldr	r2, [r3, #8]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000c52:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	6899      	ldr	r1, [r3, #8]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	430a      	orrs	r2, r1
 8000c64:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	689a      	ldr	r2, [r3, #8]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000c74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	6899      	ldr	r1, [r3, #8]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	430a      	orrs	r2, r1
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	e00f      	b.n	8000caa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	689a      	ldr	r2, [r3, #8]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000c98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	689a      	ldr	r2, [r3, #8]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000ca8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	689a      	ldr	r2, [r3, #8]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f022 0202 	bic.w	r2, r2, #2
 8000cb8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	6899      	ldr	r1, [r3, #8]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	7e1b      	ldrb	r3, [r3, #24]
 8000cc4:	005a      	lsls	r2, r3, #1
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	430a      	orrs	r2, r1
 8000ccc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d01b      	beq.n	8000d10 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	685a      	ldr	r2, [r3, #4]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000ce6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	685a      	ldr	r2, [r3, #4]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000cf6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	6859      	ldr	r1, [r3, #4]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d02:	3b01      	subs	r3, #1
 8000d04:	035a      	lsls	r2, r3, #13
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	e007      	b.n	8000d20 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	685a      	ldr	r2, [r3, #4]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000d1e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000d2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	69db      	ldr	r3, [r3, #28]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	051a      	lsls	r2, r3, #20
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	430a      	orrs	r2, r1
 8000d44:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	689a      	ldr	r2, [r3, #8]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000d54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	6899      	ldr	r1, [r3, #8]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000d62:	025a      	lsls	r2, r3, #9
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	430a      	orrs	r2, r1
 8000d6a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	689a      	ldr	r2, [r3, #8]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	6899      	ldr	r1, [r3, #8]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	695b      	ldr	r3, [r3, #20]
 8000d86:	029a      	lsls	r2, r3, #10
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	430a      	orrs	r2, r1
 8000d8e:	609a      	str	r2, [r3, #8]
}
 8000d90:	bf00      	nop
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	40012300 	.word	0x40012300
 8000da0:	0f000001 	.word	0x0f000001

08000da4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db4:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <__NVIC_SetPriorityGrouping+0x44>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dba:	68ba      	ldr	r2, [r7, #8]
 8000dbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dd6:	4a04      	ldr	r2, [pc, #16]	; (8000de8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	60d3      	str	r3, [r2, #12]
}
 8000ddc:	bf00      	nop
 8000dde:	3714      	adds	r7, #20
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df0:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <__NVIC_GetPriorityGrouping+0x18>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	0a1b      	lsrs	r3, r3, #8
 8000df6:	f003 0307 	and.w	r3, r3, #7
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	db0b      	blt.n	8000e32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	f003 021f 	and.w	r2, r3, #31
 8000e20:	4907      	ldr	r1, [pc, #28]	; (8000e40 <__NVIC_EnableIRQ+0x38>)
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	095b      	lsrs	r3, r3, #5
 8000e28:	2001      	movs	r0, #1
 8000e2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e32:	bf00      	nop
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	e000e100 	.word	0xe000e100

08000e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	6039      	str	r1, [r7, #0]
 8000e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	db0a      	blt.n	8000e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	490c      	ldr	r1, [pc, #48]	; (8000e90 <__NVIC_SetPriority+0x4c>)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	0112      	lsls	r2, r2, #4
 8000e64:	b2d2      	uxtb	r2, r2
 8000e66:	440b      	add	r3, r1
 8000e68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e6c:	e00a      	b.n	8000e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	b2da      	uxtb	r2, r3
 8000e72:	4908      	ldr	r1, [pc, #32]	; (8000e94 <__NVIC_SetPriority+0x50>)
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	f003 030f 	and.w	r3, r3, #15
 8000e7a:	3b04      	subs	r3, #4
 8000e7c:	0112      	lsls	r2, r2, #4
 8000e7e:	b2d2      	uxtb	r2, r2
 8000e80:	440b      	add	r3, r1
 8000e82:	761a      	strb	r2, [r3, #24]
}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000e100 	.word	0xe000e100
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b089      	sub	sp, #36	; 0x24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	f1c3 0307 	rsb	r3, r3, #7
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	bf28      	it	cs
 8000eb6:	2304      	movcs	r3, #4
 8000eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	2b06      	cmp	r3, #6
 8000ec0:	d902      	bls.n	8000ec8 <NVIC_EncodePriority+0x30>
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3b03      	subs	r3, #3
 8000ec6:	e000      	b.n	8000eca <NVIC_EncodePriority+0x32>
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ecc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43da      	mvns	r2, r3
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	401a      	ands	r2, r3
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eea:	43d9      	mvns	r1, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef0:	4313      	orrs	r3, r2
         );
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3724      	adds	r7, #36	; 0x24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
	...

08000f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f10:	d301      	bcc.n	8000f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f12:	2301      	movs	r3, #1
 8000f14:	e00f      	b.n	8000f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f16:	4a0a      	ldr	r2, [pc, #40]	; (8000f40 <SysTick_Config+0x40>)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f1e:	210f      	movs	r1, #15
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f24:	f7ff ff8e 	bl	8000e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <SysTick_Config+0x40>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f2e:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <SysTick_Config+0x40>)
 8000f30:	2207      	movs	r2, #7
 8000f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	e000e010 	.word	0xe000e010

08000f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff ff29 	bl	8000da4 <__NVIC_SetPriorityGrouping>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b086      	sub	sp, #24
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	4603      	mov	r3, r0
 8000f62:	60b9      	str	r1, [r7, #8]
 8000f64:	607a      	str	r2, [r7, #4]
 8000f66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f6c:	f7ff ff3e 	bl	8000dec <__NVIC_GetPriorityGrouping>
 8000f70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	68b9      	ldr	r1, [r7, #8]
 8000f76:	6978      	ldr	r0, [r7, #20]
 8000f78:	f7ff ff8e 	bl	8000e98 <NVIC_EncodePriority>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f82:	4611      	mov	r1, r2
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ff5d 	bl	8000e44 <__NVIC_SetPriority>
}
 8000f8a:	bf00      	nop
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	4603      	mov	r3, r0
 8000f9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ff31 	bl	8000e08 <__NVIC_EnableIRQ>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff ffa2 	bl	8000f00 <SysTick_Config>
 8000fbc:	4603      	mov	r3, r0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d101      	bne.n	8000fd8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e011      	b.n	8000ffc <HAL_CRC_Init+0x36>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	795b      	ldrb	r3, [r3, #5]
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d105      	bne.n	8000fee <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f008 fceb 	bl	80099c4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2202      	movs	r2, #2
 8000ff2:	715a      	strb	r2, [r3, #5]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000ffa:	2300      	movs	r3, #0
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001004:	b480      	push	{r7}
 8001006:	b089      	sub	sp, #36	; 0x24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001016:	2300      	movs	r3, #0
 8001018:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
 800101e:	e165      	b.n	80012ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001020:	2201      	movs	r2, #1
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	697a      	ldr	r2, [r7, #20]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	429a      	cmp	r2, r3
 800103a:	f040 8154 	bne.w	80012e6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	2b02      	cmp	r3, #2
 8001044:	d003      	beq.n	800104e <HAL_GPIO_Init+0x4a>
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	2b12      	cmp	r3, #18
 800104c:	d123      	bne.n	8001096 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	08da      	lsrs	r2, r3, #3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3208      	adds	r2, #8
 8001056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	220f      	movs	r2, #15
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4013      	ands	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	691a      	ldr	r2, [r3, #16]
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	f003 0307 	and.w	r3, r3, #7
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4313      	orrs	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	08da      	lsrs	r2, r3, #3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3208      	adds	r2, #8
 8001090:	69b9      	ldr	r1, [r7, #24]
 8001092:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	2203      	movs	r2, #3
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 0203 	and.w	r2, r3, #3
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d00b      	beq.n	80010ea <HAL_GPIO_Init+0xe6>
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d007      	beq.n	80010ea <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010de:	2b11      	cmp	r3, #17
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	2b12      	cmp	r3, #18
 80010e8:	d130      	bne.n	800114c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	2203      	movs	r2, #3
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43db      	mvns	r3, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4013      	ands	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	68da      	ldr	r2, [r3, #12]
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4313      	orrs	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001120:	2201      	movs	r2, #1
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4013      	ands	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	091b      	lsrs	r3, r3, #4
 8001136:	f003 0201 	and.w	r2, r3, #1
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	2203      	movs	r2, #3
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	689a      	ldr	r2, [r3, #8]
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001184:	2b00      	cmp	r3, #0
 8001186:	f000 80ae 	beq.w	80012e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b5c      	ldr	r3, [pc, #368]	; (8001300 <HAL_GPIO_Init+0x2fc>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	4a5b      	ldr	r2, [pc, #364]	; (8001300 <HAL_GPIO_Init+0x2fc>)
 8001194:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001198:	6453      	str	r3, [r2, #68]	; 0x44
 800119a:	4b59      	ldr	r3, [pc, #356]	; (8001300 <HAL_GPIO_Init+0x2fc>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011a6:	4a57      	ldr	r2, [pc, #348]	; (8001304 <HAL_GPIO_Init+0x300>)
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	089b      	lsrs	r3, r3, #2
 80011ac:	3302      	adds	r3, #2
 80011ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	f003 0303 	and.w	r3, r3, #3
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	220f      	movs	r2, #15
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43db      	mvns	r3, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4013      	ands	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a4e      	ldr	r2, [pc, #312]	; (8001308 <HAL_GPIO_Init+0x304>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d025      	beq.n	800121e <HAL_GPIO_Init+0x21a>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a4d      	ldr	r2, [pc, #308]	; (800130c <HAL_GPIO_Init+0x308>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d01f      	beq.n	800121a <HAL_GPIO_Init+0x216>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a4c      	ldr	r2, [pc, #304]	; (8001310 <HAL_GPIO_Init+0x30c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d019      	beq.n	8001216 <HAL_GPIO_Init+0x212>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a4b      	ldr	r2, [pc, #300]	; (8001314 <HAL_GPIO_Init+0x310>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d013      	beq.n	8001212 <HAL_GPIO_Init+0x20e>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a4a      	ldr	r2, [pc, #296]	; (8001318 <HAL_GPIO_Init+0x314>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d00d      	beq.n	800120e <HAL_GPIO_Init+0x20a>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a49      	ldr	r2, [pc, #292]	; (800131c <HAL_GPIO_Init+0x318>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d007      	beq.n	800120a <HAL_GPIO_Init+0x206>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a48      	ldr	r2, [pc, #288]	; (8001320 <HAL_GPIO_Init+0x31c>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d101      	bne.n	8001206 <HAL_GPIO_Init+0x202>
 8001202:	2306      	movs	r3, #6
 8001204:	e00c      	b.n	8001220 <HAL_GPIO_Init+0x21c>
 8001206:	2307      	movs	r3, #7
 8001208:	e00a      	b.n	8001220 <HAL_GPIO_Init+0x21c>
 800120a:	2305      	movs	r3, #5
 800120c:	e008      	b.n	8001220 <HAL_GPIO_Init+0x21c>
 800120e:	2304      	movs	r3, #4
 8001210:	e006      	b.n	8001220 <HAL_GPIO_Init+0x21c>
 8001212:	2303      	movs	r3, #3
 8001214:	e004      	b.n	8001220 <HAL_GPIO_Init+0x21c>
 8001216:	2302      	movs	r3, #2
 8001218:	e002      	b.n	8001220 <HAL_GPIO_Init+0x21c>
 800121a:	2301      	movs	r3, #1
 800121c:	e000      	b.n	8001220 <HAL_GPIO_Init+0x21c>
 800121e:	2300      	movs	r3, #0
 8001220:	69fa      	ldr	r2, [r7, #28]
 8001222:	f002 0203 	and.w	r2, r2, #3
 8001226:	0092      	lsls	r2, r2, #2
 8001228:	4093      	lsls	r3, r2
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4313      	orrs	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001230:	4934      	ldr	r1, [pc, #208]	; (8001304 <HAL_GPIO_Init+0x300>)
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	089b      	lsrs	r3, r3, #2
 8001236:	3302      	adds	r3, #2
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800123e:	4b39      	ldr	r3, [pc, #228]	; (8001324 <HAL_GPIO_Init+0x320>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	4313      	orrs	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001262:	4a30      	ldr	r2, [pc, #192]	; (8001324 <HAL_GPIO_Init+0x320>)
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001268:	4b2e      	ldr	r3, [pc, #184]	; (8001324 <HAL_GPIO_Init+0x320>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d003      	beq.n	800128c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	4313      	orrs	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800128c:	4a25      	ldr	r2, [pc, #148]	; (8001324 <HAL_GPIO_Init+0x320>)
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001292:	4b24      	ldr	r3, [pc, #144]	; (8001324 <HAL_GPIO_Init+0x320>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012b6:	4a1b      	ldr	r2, [pc, #108]	; (8001324 <HAL_GPIO_Init+0x320>)
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012bc:	4b19      	ldr	r3, [pc, #100]	; (8001324 <HAL_GPIO_Init+0x320>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	4313      	orrs	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012e0:	4a10      	ldr	r2, [pc, #64]	; (8001324 <HAL_GPIO_Init+0x320>)
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3301      	adds	r3, #1
 80012ea:	61fb      	str	r3, [r7, #28]
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	2b0f      	cmp	r3, #15
 80012f0:	f67f ae96 	bls.w	8001020 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012f4:	bf00      	nop
 80012f6:	3724      	adds	r7, #36	; 0x24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	40023800 	.word	0x40023800
 8001304:	40013800 	.word	0x40013800
 8001308:	40020000 	.word	0x40020000
 800130c:	40020400 	.word	0x40020400
 8001310:	40020800 	.word	0x40020800
 8001314:	40020c00 	.word	0x40020c00
 8001318:	40021000 	.word	0x40021000
 800131c:	40021400 	.word	0x40021400
 8001320:	40021800 	.word	0x40021800
 8001324:	40013c00 	.word	0x40013c00

08001328 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	691a      	ldr	r2, [r3, #16]
 8001338:	887b      	ldrh	r3, [r7, #2]
 800133a:	4013      	ands	r3, r2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d002      	beq.n	8001346 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001340:	2301      	movs	r3, #1
 8001342:	73fb      	strb	r3, [r7, #15]
 8001344:	e001      	b.n	800134a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001346:	2300      	movs	r3, #0
 8001348:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800134a:	7bfb      	ldrb	r3, [r7, #15]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	460b      	mov	r3, r1
 8001362:	807b      	strh	r3, [r7, #2]
 8001364:	4613      	mov	r3, r2
 8001366:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001368:	787b      	ldrb	r3, [r7, #1]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800136e:	887a      	ldrh	r2, [r7, #2]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001374:	e003      	b.n	800137e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001376:	887b      	ldrh	r3, [r7, #2]
 8001378:	041a      	lsls	r2, r3, #16
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	619a      	str	r2, [r3, #24]
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
	...

0800138c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e10f      	b.n	80015be <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d106      	bne.n	80013b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f008 ff0e 	bl	800a1d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2224      	movs	r2, #36	; 0x24
 80013bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f022 0201 	bic.w	r2, r2, #1
 80013ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013d0:	f001 fd02 	bl	8002dd8 <HAL_RCC_GetPCLK1Freq>
 80013d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	4a7b      	ldr	r2, [pc, #492]	; (80015c8 <HAL_I2C_Init+0x23c>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d807      	bhi.n	80013f0 <HAL_I2C_Init+0x64>
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4a7a      	ldr	r2, [pc, #488]	; (80015cc <HAL_I2C_Init+0x240>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	bf94      	ite	ls
 80013e8:	2301      	movls	r3, #1
 80013ea:	2300      	movhi	r3, #0
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	e006      	b.n	80013fe <HAL_I2C_Init+0x72>
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4a77      	ldr	r2, [pc, #476]	; (80015d0 <HAL_I2C_Init+0x244>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	bf94      	ite	ls
 80013f8:	2301      	movls	r3, #1
 80013fa:	2300      	movhi	r3, #0
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e0db      	b.n	80015be <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	4a72      	ldr	r2, [pc, #456]	; (80015d4 <HAL_I2C_Init+0x248>)
 800140a:	fba2 2303 	umull	r2, r3, r2, r3
 800140e:	0c9b      	lsrs	r3, r3, #18
 8001410:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	68ba      	ldr	r2, [r7, #8]
 8001422:	430a      	orrs	r2, r1
 8001424:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6a1b      	ldr	r3, [r3, #32]
 800142c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	4a64      	ldr	r2, [pc, #400]	; (80015c8 <HAL_I2C_Init+0x23c>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d802      	bhi.n	8001440 <HAL_I2C_Init+0xb4>
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	3301      	adds	r3, #1
 800143e:	e009      	b.n	8001454 <HAL_I2C_Init+0xc8>
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001446:	fb02 f303 	mul.w	r3, r2, r3
 800144a:	4a63      	ldr	r2, [pc, #396]	; (80015d8 <HAL_I2C_Init+0x24c>)
 800144c:	fba2 2303 	umull	r2, r3, r2, r3
 8001450:	099b      	lsrs	r3, r3, #6
 8001452:	3301      	adds	r3, #1
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	6812      	ldr	r2, [r2, #0]
 8001458:	430b      	orrs	r3, r1
 800145a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001466:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	4956      	ldr	r1, [pc, #344]	; (80015c8 <HAL_I2C_Init+0x23c>)
 8001470:	428b      	cmp	r3, r1
 8001472:	d80d      	bhi.n	8001490 <HAL_I2C_Init+0x104>
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	1e59      	subs	r1, r3, #1
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001482:	3301      	adds	r3, #1
 8001484:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001488:	2b04      	cmp	r3, #4
 800148a:	bf38      	it	cc
 800148c:	2304      	movcc	r3, #4
 800148e:	e04f      	b.n	8001530 <HAL_I2C_Init+0x1a4>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d111      	bne.n	80014bc <HAL_I2C_Init+0x130>
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	1e58      	subs	r0, r3, #1
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6859      	ldr	r1, [r3, #4]
 80014a0:	460b      	mov	r3, r1
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	440b      	add	r3, r1
 80014a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80014aa:	3301      	adds	r3, #1
 80014ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	bf0c      	ite	eq
 80014b4:	2301      	moveq	r3, #1
 80014b6:	2300      	movne	r3, #0
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	e012      	b.n	80014e2 <HAL_I2C_Init+0x156>
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	1e58      	subs	r0, r3, #1
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6859      	ldr	r1, [r3, #4]
 80014c4:	460b      	mov	r3, r1
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	440b      	add	r3, r1
 80014ca:	0099      	lsls	r1, r3, #2
 80014cc:	440b      	add	r3, r1
 80014ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80014d2:	3301      	adds	r3, #1
 80014d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014d8:	2b00      	cmp	r3, #0
 80014da:	bf0c      	ite	eq
 80014dc:	2301      	moveq	r3, #1
 80014de:	2300      	movne	r3, #0
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <HAL_I2C_Init+0x15e>
 80014e6:	2301      	movs	r3, #1
 80014e8:	e022      	b.n	8001530 <HAL_I2C_Init+0x1a4>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d10e      	bne.n	8001510 <HAL_I2C_Init+0x184>
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	1e58      	subs	r0, r3, #1
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6859      	ldr	r1, [r3, #4]
 80014fa:	460b      	mov	r3, r1
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	440b      	add	r3, r1
 8001500:	fbb0 f3f3 	udiv	r3, r0, r3
 8001504:	3301      	adds	r3, #1
 8001506:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800150a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800150e:	e00f      	b.n	8001530 <HAL_I2C_Init+0x1a4>
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	1e58      	subs	r0, r3, #1
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6859      	ldr	r1, [r3, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	440b      	add	r3, r1
 800151e:	0099      	lsls	r1, r3, #2
 8001520:	440b      	add	r3, r1
 8001522:	fbb0 f3f3 	udiv	r3, r0, r3
 8001526:	3301      	adds	r3, #1
 8001528:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800152c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001530:	6879      	ldr	r1, [r7, #4]
 8001532:	6809      	ldr	r1, [r1, #0]
 8001534:	4313      	orrs	r3, r2
 8001536:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	69da      	ldr	r2, [r3, #28]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a1b      	ldr	r3, [r3, #32]
 800154a:	431a      	orrs	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	430a      	orrs	r2, r1
 8001552:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800155e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	6911      	ldr	r1, [r2, #16]
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	68d2      	ldr	r2, [r2, #12]
 800156a:	4311      	orrs	r1, r2
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	6812      	ldr	r2, [r2, #0]
 8001570:	430b      	orrs	r3, r1
 8001572:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	695a      	ldr	r2, [r3, #20]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	431a      	orrs	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	430a      	orrs	r2, r1
 800158e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f042 0201 	orr.w	r2, r2, #1
 800159e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2220      	movs	r2, #32
 80015aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	000186a0 	.word	0x000186a0
 80015cc:	001e847f 	.word	0x001e847f
 80015d0:	003d08ff 	.word	0x003d08ff
 80015d4:	431bde83 	.word	0x431bde83
 80015d8:	10624dd3 	.word	0x10624dd3

080015dc <HAL_NOR_Init>:
  * @param  Timing pointer to NOR control timing structure 
  * @param  ExtTiming pointer to NOR extended mode timing structure    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
  /* Check the NOR handle parameter */
  if(hnor == NULL)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <HAL_NOR_Init+0x16>
  {
     return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e043      	b.n	800167a <HAL_NOR_Init+0x9e>
  }
  
  if(hnor->State == HAL_NOR_STATE_RESET)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d106      	bne.n	800160c <HAL_NOR_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 8001606:	68f8      	ldr	r0, [r7, #12]
 8001608:	f008 fc3a 	bl	8009e80 <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }
  
  /* Initialize NOR control Interface */
  FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	3308      	adds	r3, #8
 8001614:	4619      	mov	r1, r3
 8001616:	4610      	mov	r0, r2
 8001618:	f003 fd4c 	bl	80050b4 <FSMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank); 
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	6818      	ldr	r0, [r3, #0]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	461a      	mov	r2, r3
 8001626:	68b9      	ldr	r1, [r7, #8]
 8001628:	f003 fdb4 	bl	8005194 <FSMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6858      	ldr	r0, [r3, #4]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001638:	6879      	ldr	r1, [r7, #4]
 800163a:	f003 fdff 	bl	800523c <FSMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	68fa      	ldr	r2, [r7, #12]
 8001644:	6892      	ldr	r2, [r2, #8]
 8001646:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	6892      	ldr	r2, [r2, #8]
 8001652:	f041 0101 	orr.w	r1, r1, #1
 8001656:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d103      	bne.n	800166a <HAL_NOR_Init+0x8e>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 8001662:	4b08      	ldr	r3, [pc, #32]	; (8001684 <HAL_NOR_Init+0xa8>)
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	e002      	b.n	8001670 <HAL_NOR_Init+0x94>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 800166a:	4b06      	ldr	r3, [pc, #24]	; (8001684 <HAL_NOR_Init+0xa8>)
 800166c:	2201      	movs	r2, #1
 800166e:	601a      	str	r2, [r3, #0]
  }

  /* Check the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY; 
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2201      	movs	r2, #1
 8001674:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  return HAL_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000204 	.word	0x20000204

08001688 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800168a:	b08f      	sub	sp, #60	; 0x3c
 800168c:	af0a      	add	r7, sp, #40	; 0x28
 800168e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d101      	bne.n	800169a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e116      	b.n	80018c8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d106      	bne.n	80016ba <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f009 fc6d 	bl	800af94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2203      	movs	r2, #3
 80016be:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d102      	bne.n	80016d4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f004 fc64 	bl	8005fa6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	603b      	str	r3, [r7, #0]
 80016e4:	687e      	ldr	r6, [r7, #4]
 80016e6:	466d      	mov	r5, sp
 80016e8:	f106 0410 	add.w	r4, r6, #16
 80016ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80016fc:	1d33      	adds	r3, r6, #4
 80016fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001700:	6838      	ldr	r0, [r7, #0]
 8001702:	f004 fb3b 	bl	8005d7c <USB_CoreInit>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d005      	beq.n	8001718 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2202      	movs	r2, #2
 8001710:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e0d7      	b.n	80018c8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2100      	movs	r1, #0
 800171e:	4618      	mov	r0, r3
 8001720:	f004 fc52 	bl	8005fc8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001724:	2300      	movs	r3, #0
 8001726:	73fb      	strb	r3, [r7, #15]
 8001728:	e04a      	b.n	80017c0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800172a:	7bfa      	ldrb	r2, [r7, #15]
 800172c:	6879      	ldr	r1, [r7, #4]
 800172e:	4613      	mov	r3, r2
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	1a9b      	subs	r3, r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	440b      	add	r3, r1
 8001738:	333d      	adds	r3, #61	; 0x3d
 800173a:	2201      	movs	r2, #1
 800173c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800173e:	7bfa      	ldrb	r2, [r7, #15]
 8001740:	6879      	ldr	r1, [r7, #4]
 8001742:	4613      	mov	r3, r2
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	1a9b      	subs	r3, r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	440b      	add	r3, r1
 800174c:	333c      	adds	r3, #60	; 0x3c
 800174e:	7bfa      	ldrb	r2, [r7, #15]
 8001750:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001752:	7bfa      	ldrb	r2, [r7, #15]
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	b298      	uxth	r0, r3
 8001758:	6879      	ldr	r1, [r7, #4]
 800175a:	4613      	mov	r3, r2
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	1a9b      	subs	r3, r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	440b      	add	r3, r1
 8001764:	3342      	adds	r3, #66	; 0x42
 8001766:	4602      	mov	r2, r0
 8001768:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800176a:	7bfa      	ldrb	r2, [r7, #15]
 800176c:	6879      	ldr	r1, [r7, #4]
 800176e:	4613      	mov	r3, r2
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	1a9b      	subs	r3, r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	440b      	add	r3, r1
 8001778:	333f      	adds	r3, #63	; 0x3f
 800177a:	2200      	movs	r2, #0
 800177c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800177e:	7bfa      	ldrb	r2, [r7, #15]
 8001780:	6879      	ldr	r1, [r7, #4]
 8001782:	4613      	mov	r3, r2
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	1a9b      	subs	r3, r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	440b      	add	r3, r1
 800178c:	3344      	adds	r3, #68	; 0x44
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001792:	7bfa      	ldrb	r2, [r7, #15]
 8001794:	6879      	ldr	r1, [r7, #4]
 8001796:	4613      	mov	r3, r2
 8001798:	00db      	lsls	r3, r3, #3
 800179a:	1a9b      	subs	r3, r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	440b      	add	r3, r1
 80017a0:	3348      	adds	r3, #72	; 0x48
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80017a6:	7bfa      	ldrb	r2, [r7, #15]
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	4613      	mov	r3, r2
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	1a9b      	subs	r3, r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	440b      	add	r3, r1
 80017b4:	3350      	adds	r3, #80	; 0x50
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017ba:	7bfb      	ldrb	r3, [r7, #15]
 80017bc:	3301      	adds	r3, #1
 80017be:	73fb      	strb	r3, [r7, #15]
 80017c0:	7bfa      	ldrb	r2, [r7, #15]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d3af      	bcc.n	800172a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017ca:	2300      	movs	r3, #0
 80017cc:	73fb      	strb	r3, [r7, #15]
 80017ce:	e044      	b.n	800185a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80017d0:	7bfa      	ldrb	r2, [r7, #15]
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	4613      	mov	r3, r2
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	1a9b      	subs	r3, r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	440b      	add	r3, r1
 80017de:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80017e6:	7bfa      	ldrb	r2, [r7, #15]
 80017e8:	6879      	ldr	r1, [r7, #4]
 80017ea:	4613      	mov	r3, r2
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	1a9b      	subs	r3, r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	440b      	add	r3, r1
 80017f4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80017f8:	7bfa      	ldrb	r2, [r7, #15]
 80017fa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80017fc:	7bfa      	ldrb	r2, [r7, #15]
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	4613      	mov	r3, r2
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	1a9b      	subs	r3, r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	440b      	add	r3, r1
 800180a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800180e:	2200      	movs	r2, #0
 8001810:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001812:	7bfa      	ldrb	r2, [r7, #15]
 8001814:	6879      	ldr	r1, [r7, #4]
 8001816:	4613      	mov	r3, r2
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	1a9b      	subs	r3, r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	440b      	add	r3, r1
 8001820:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001828:	7bfa      	ldrb	r2, [r7, #15]
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	4613      	mov	r3, r2
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	1a9b      	subs	r3, r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	440b      	add	r3, r1
 8001836:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800183e:	7bfa      	ldrb	r2, [r7, #15]
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	4613      	mov	r3, r2
 8001844:	00db      	lsls	r3, r3, #3
 8001846:	1a9b      	subs	r3, r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	440b      	add	r3, r1
 800184c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001854:	7bfb      	ldrb	r3, [r7, #15]
 8001856:	3301      	adds	r3, #1
 8001858:	73fb      	strb	r3, [r7, #15]
 800185a:	7bfa      	ldrb	r2, [r7, #15]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	429a      	cmp	r2, r3
 8001862:	d3b5      	bcc.n	80017d0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	603b      	str	r3, [r7, #0]
 800186a:	687e      	ldr	r6, [r7, #4]
 800186c:	466d      	mov	r5, sp
 800186e:	f106 0410 	add.w	r4, r6, #16
 8001872:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001874:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001876:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001878:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800187a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800187e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001882:	1d33      	adds	r3, r6, #4
 8001884:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001886:	6838      	ldr	r0, [r7, #0]
 8001888:	f004 fbc8 	bl	800601c <USB_DevInit>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d005      	beq.n	800189e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2202      	movs	r2, #2
 8001896:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e014      	b.n	80018c8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2201      	movs	r2, #1
 80018aa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d102      	bne.n	80018bc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f001 f898 	bl	80029ec <HAL_PCDEx_ActivateLPM>
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f005 fbb0 	bl	8007026 <USB_DevDisconnect>

  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018d0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d101      	bne.n	80018ec <HAL_PCD_Start+0x1c>
 80018e8:	2302      	movs	r3, #2
 80018ea:	e020      	b.n	800192e <HAL_PCD_Start+0x5e>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2201      	movs	r2, #1
 80018f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d109      	bne.n	8001910 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001900:	2b01      	cmp	r3, #1
 8001902:	d005      	beq.n	8001910 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001908:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f005 fb6e 	bl	8006ff6 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f004 fb30 	bl	8005f84 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001936:	b590      	push	{r4, r7, lr}
 8001938:	b08d      	sub	sp, #52	; 0x34
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001944:	6a3b      	ldr	r3, [r7, #32]
 8001946:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f005 fc15 	bl	800717c <USB_GetMode>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	f040 83bb 	bne.w	80020d0 <HAL_PCD_IRQHandler+0x79a>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f005 fb79 	bl	8007056 <USB_ReadInterrupts>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	f000 83b1 	beq.w	80020ce <HAL_PCD_IRQHandler+0x798>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f005 fb70 	bl	8007056 <USB_ReadInterrupts>
 8001976:	4603      	mov	r3, r0
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b02      	cmp	r3, #2
 800197e:	d107      	bne.n	8001990 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	695a      	ldr	r2, [r3, #20]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f002 0202 	and.w	r2, r2, #2
 800198e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f005 fb5e 	bl	8007056 <USB_ReadInterrupts>
 800199a:	4603      	mov	r3, r0
 800199c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019a0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80019a4:	d17b      	bne.n	8001a9e <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 80019a6:	2300      	movs	r3, #0
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f005 fb64 	bl	800707c <USB_ReadDevAllOutEpInterrupt>
 80019b4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80019b6:	e06f      	b.n	8001a98 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 80019b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d064      	beq.n	8001a8c <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019c8:	b2d2      	uxtb	r2, r2
 80019ca:	4611      	mov	r1, r2
 80019cc:	4618      	mov	r0, r3
 80019ce:	f005 fb89 	bl	80070e4 <USB_ReadDevOutEPInterrupt>
 80019d2:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d00c      	beq.n	80019f8 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	015a      	lsls	r2, r3, #5
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	4413      	add	r3, r2
 80019e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019ea:	461a      	mov	r2, r3
 80019ec:	2301      	movs	r3, #1
 80019ee:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80019f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f000 fe3a 	bl	800266c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	f003 0308 	and.w	r3, r3, #8
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d00c      	beq.n	8001a1c <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001a02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 ff39 	bl	800287c <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	015a      	lsls	r2, r3, #5
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	4413      	add	r3, r2
 8001a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a16:	461a      	mov	r2, r3
 8001a18:	2308      	movs	r3, #8
 8001a1a:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	f003 0310 	and.w	r3, r3, #16
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d008      	beq.n	8001a38 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	015a      	lsls	r2, r3, #5
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a32:	461a      	mov	r2, r3
 8001a34:	2310      	movs	r3, #16
 8001a36:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	f003 0320 	and.w	r3, r3, #32
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d015      	beq.n	8001a6e <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d108      	bne.n	8001a5c <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6818      	ldr	r0, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001a54:	461a      	mov	r2, r3
 8001a56:	2101      	movs	r1, #1
 8001a58:	f005 fbd4 	bl	8007204 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	015a      	lsls	r2, r3, #5
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	4413      	add	r3, r2
 8001a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a68:	461a      	mov	r2, r3
 8001a6a:	2320      	movs	r3, #32
 8001a6c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d009      	beq.n	8001a8c <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7a:	015a      	lsls	r2, r3, #5
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	4413      	add	r3, r2
 8001a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a84:	461a      	mov	r2, r3
 8001a86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a8a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8e:	3301      	adds	r3, #1
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a94:	085b      	lsrs	r3, r3, #1
 8001a96:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d18c      	bne.n	80019b8 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f005 fad7 	bl	8007056 <USB_ReadInterrupts>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001ab2:	f040 80c4 	bne.w	8001c3e <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f005 faf8 	bl	80070b0 <USB_ReadDevAllInEpInterrupt>
 8001ac0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001ac6:	e0b6      	b.n	8001c36 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 80ab 	beq.w	8001c2a <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	4611      	mov	r1, r2
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f005 fb1e 	bl	8007120 <USB_ReadDevInEPInterrupt>
 8001ae4:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d05b      	beq.n	8001ba8 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	f003 030f 	and.w	r3, r3, #15
 8001af6:	2201      	movs	r2, #1
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69f9      	ldr	r1, [r7, #28]
 8001b0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001b10:	4013      	ands	r3, r2
 8001b12:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b16:	015a      	lsls	r2, r3, #5
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b20:	461a      	mov	r2, r3
 8001b22:	2301      	movs	r3, #1
 8001b24:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d11b      	bne.n	8001b66 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b32:	4613      	mov	r3, r2
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	1a9b      	subs	r3, r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	440b      	add	r3, r1
 8001b3c:	3348      	adds	r3, #72	; 0x48
 8001b3e:	6819      	ldr	r1, [r3, #0]
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b44:	4613      	mov	r3, r2
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	1a9b      	subs	r3, r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4403      	add	r3, r0
 8001b4e:	3344      	adds	r3, #68	; 0x44
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4419      	add	r1, r3
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b58:	4613      	mov	r3, r2
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	1a9b      	subs	r3, r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4403      	add	r3, r0
 8001b62:	3348      	adds	r3, #72	; 0x48
 8001b64:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f009 faaa 	bl	800b0c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d116      	bne.n	8001ba8 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d113      	bne.n	8001ba8 <HAL_PCD_IRQHandler+0x272>
 8001b80:	6879      	ldr	r1, [r7, #4]
 8001b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b84:	4613      	mov	r3, r2
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	1a9b      	subs	r3, r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	440b      	add	r3, r1
 8001b8e:	3350      	adds	r3, #80	; 0x50
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d108      	bne.n	8001ba8 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6818      	ldr	r0, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	f005 fb2e 	bl	8007204 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d008      	beq.n	8001bc4 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb4:	015a      	lsls	r2, r3, #5
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	4413      	add	r3, r2
 8001bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	2308      	movs	r3, #8
 8001bc2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	f003 0310 	and.w	r3, r3, #16
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d008      	beq.n	8001be0 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	015a      	lsls	r2, r3, #5
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bda:	461a      	mov	r2, r3
 8001bdc:	2310      	movs	r3, #16
 8001bde:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d008      	beq.n	8001bfc <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	015a      	lsls	r2, r3, #5
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	2340      	movs	r3, #64	; 0x40
 8001bfa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d008      	beq.n	8001c18 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	015a      	lsls	r2, r3, #5
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c12:	461a      	mov	r2, r3
 8001c14:	2302      	movs	r3, #2
 8001c16:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001c22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 fc94 	bl	8002552 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c32:	085b      	lsrs	r3, r3, #1
 8001c34:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f47f af45 	bne.w	8001ac8 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f005 fa07 	bl	8007056 <USB_ReadInterrupts>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001c4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c52:	d122      	bne.n	8001c9a <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	69fa      	ldr	r2, [r7, #28]
 8001c5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c62:	f023 0301 	bic.w	r3, r3, #1
 8001c66:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d108      	bne.n	8001c84 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 fed9 	bl	8002a34 <HAL_PCDEx_LPM_Callback>
 8001c82:	e002      	b.n	8001c8a <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f009 fa8b 	bl	800b1a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	695a      	ldr	r2, [r3, #20]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001c98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f005 f9d9 	bl	8007056 <USB_ReadInterrupts>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001caa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cae:	d112      	bne.n	8001cd6 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d102      	bne.n	8001cc6 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f009 fa47 	bl	800b154 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	695a      	ldr	r2, [r3, #20]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001cd4:	615a      	str	r2, [r3, #20]
    }
    #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f005 f9bb 	bl	8007056 <USB_ReadInterrupts>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ce6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001cea:	d121      	bne.n	8001d30 <HAL_PCD_IRQHandler+0x3fa>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	695a      	ldr	r2, [r3, #20]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001cfa:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d111      	bne.n	8001d2a <HAL_PCD_IRQHandler+0x3f4>
      {
        hpcd->LPM_State = LPM_L1;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d14:	089b      	lsrs	r3, r3, #2
 8001d16:	f003 020f 	and.w	r2, r3, #15
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001d20:	2101      	movs	r1, #1
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 fe86 	bl	8002a34 <HAL_PCDEx_LPM_Callback>
 8001d28:	e002      	b.n	8001d30 <HAL_PCD_IRQHandler+0x3fa>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f009 fa12 	bl	800b154 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f005 f98e 	bl	8007056 <USB_ReadInterrupts>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d44:	f040 80a7 	bne.w	8001e96 <HAL_PCD_IRQHandler+0x560>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	69fa      	ldr	r2, [r7, #28]
 8001d52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d56:	f023 0301 	bic.w	r3, r3, #1
 8001d5a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2110      	movs	r1, #16
 8001d62:	4618      	mov	r0, r3
 8001d64:	f004 fac6 	bl	80062f4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d68:	2300      	movs	r3, #0
 8001d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d6c:	e036      	b.n	8001ddc <HAL_PCD_IRQHandler+0x4a6>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d70:	015a      	lsls	r2, r3, #5
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	4413      	add	r3, r2
 8001d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001d80:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d84:	015a      	lsls	r2, r3, #5
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	4413      	add	r3, r2
 8001d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d92:	0151      	lsls	r1, r2, #5
 8001d94:	69fa      	ldr	r2, [r7, #28]
 8001d96:	440a      	add	r2, r1
 8001d98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001d9c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001da0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da4:	015a      	lsls	r2, r3, #5
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	4413      	add	r3, r2
 8001daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dae:	461a      	mov	r2, r3
 8001db0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001db4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db8:	015a      	lsls	r2, r3, #5
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dc6:	0151      	lsls	r1, r2, #5
 8001dc8:	69fa      	ldr	r2, [r7, #28]
 8001dca:	440a      	add	r2, r1
 8001dcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001dd0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001dd4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd8:	3301      	adds	r3, #1
 8001dda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d3c3      	bcc.n	8001d6e <HAL_PCD_IRQHandler+0x438>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	69fa      	ldr	r2, [r7, #28]
 8001df0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001df4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001df8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d016      	beq.n	8001e30 <HAL_PCD_IRQHandler+0x4fa>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e0c:	69fa      	ldr	r2, [r7, #28]
 8001e0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e12:	f043 030b 	orr.w	r3, r3, #11
 8001e16:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	69fa      	ldr	r2, [r7, #28]
 8001e24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e28:	f043 030b 	orr.w	r3, r3, #11
 8001e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e2e:	e015      	b.n	8001e5c <HAL_PCD_IRQHandler+0x526>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e36:	695b      	ldr	r3, [r3, #20]
 8001e38:	69fa      	ldr	r2, [r7, #28]
 8001e3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e3e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e42:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001e46:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	69fa      	ldr	r2, [r7, #28]
 8001e52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e56:	f043 030b 	orr.w	r3, r3, #11
 8001e5a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	69fa      	ldr	r2, [r7, #28]
 8001e66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e6a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001e6e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6818      	ldr	r0, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001e80:	461a      	mov	r2, r3
 8001e82:	f005 f9bf 	bl	8007204 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	695a      	ldr	r2, [r3, #20]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001e94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f005 f8db 	bl	8007056 <USB_ReadInterrupts>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ea6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001eaa:	d124      	bne.n	8001ef6 <HAL_PCD_IRQHandler+0x5c0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f005 f971 	bl	8007198 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f004 fa7b 	bl	80063b6 <USB_GetDevSpeed>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681c      	ldr	r4, [r3, #0]
 8001ecc:	f000 ff78 	bl	8002dc0 <HAL_RCC_GetHCLKFreq>
 8001ed0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4620      	mov	r0, r4
 8001edc:	f003 ffb0 	bl	8005e40 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f009 f918 	bl	800b116 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	695a      	ldr	r2, [r3, #20]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001ef4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f005 f8ab 	bl	8007056 <USB_ReadInterrupts>
 8001f00:	4603      	mov	r3, r0
 8001f02:	f003 0310 	and.w	r3, r3, #16
 8001f06:	2b10      	cmp	r3, #16
 8001f08:	d161      	bne.n	8001fce <HAL_PCD_IRQHandler+0x698>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	699a      	ldr	r2, [r3, #24]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 0210 	bic.w	r2, r2, #16
 8001f18:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001f1a:	6a3b      	ldr	r3, [r7, #32]
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	f003 020f 	and.w	r2, r3, #15
 8001f26:	4613      	mov	r3, r2
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	1a9b      	subs	r3, r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	4413      	add	r3, r2
 8001f36:	3304      	adds	r3, #4
 8001f38:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	0c5b      	lsrs	r3, r3, #17
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d124      	bne.n	8001f90 <HAL_PCD_IRQHandler+0x65a>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d035      	beq.n	8001fbe <HAL_PCD_IRQHandler+0x688>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	091b      	lsrs	r3, r3, #4
 8001f5a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	461a      	mov	r2, r3
 8001f64:	6a38      	ldr	r0, [r7, #32]
 8001f66:	f004 ff23 	bl	8006db0 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	68da      	ldr	r2, [r3, #12]
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	091b      	lsrs	r3, r3, #4
 8001f72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f76:	441a      	add	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	699a      	ldr	r2, [r3, #24]
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	091b      	lsrs	r3, r3, #4
 8001f84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f88:	441a      	add	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	619a      	str	r2, [r3, #24]
 8001f8e:	e016      	b.n	8001fbe <HAL_PCD_IRQHandler+0x688>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	0c5b      	lsrs	r3, r3, #17
 8001f94:	f003 030f 	and.w	r3, r3, #15
 8001f98:	2b06      	cmp	r3, #6
 8001f9a:	d110      	bne.n	8001fbe <HAL_PCD_IRQHandler+0x688>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001fa2:	2208      	movs	r2, #8
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	6a38      	ldr	r0, [r7, #32]
 8001fa8:	f004 ff02 	bl	8006db0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	699a      	ldr	r2, [r3, #24]
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	091b      	lsrs	r3, r3, #4
 8001fb4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fb8:	441a      	add	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	699a      	ldr	r2, [r3, #24]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f042 0210 	orr.w	r2, r2, #16
 8001fcc:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f005 f83f 	bl	8007056 <USB_ReadInterrupts>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b08      	cmp	r3, #8
 8001fe0:	d10a      	bne.n	8001ff8 <HAL_PCD_IRQHandler+0x6c2>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f009 f889 	bl	800b0fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	695a      	ldr	r2, [r3, #20]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f002 0208 	and.w	r2, r2, #8
 8001ff6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f005 f82a 	bl	8007056 <USB_ReadInterrupts>
 8002002:	4603      	mov	r3, r0
 8002004:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002008:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800200c:	d10f      	bne.n	800202e <HAL_PCD_IRQHandler+0x6f8>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800200e:	2300      	movs	r3, #0
 8002010:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002014:	b2db      	uxtb	r3, r3
 8002016:	4619      	mov	r1, r3
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f009 f8e1 	bl	800b1e0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	695a      	ldr	r2, [r3, #20]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800202c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f005 f80f 	bl	8007056 <USB_ReadInterrupts>
 8002038:	4603      	mov	r3, r0
 800203a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800203e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002042:	d10f      	bne.n	8002064 <HAL_PCD_IRQHandler+0x72e>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002044:	2300      	movs	r3, #0
 8002046:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204a:	b2db      	uxtb	r3, r3
 800204c:	4619      	mov	r1, r3
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f009 f8b4 	bl	800b1bc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	695a      	ldr	r2, [r3, #20]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002062:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f004 fff4 	bl	8007056 <USB_ReadInterrupts>
 800206e:	4603      	mov	r3, r0
 8002070:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002078:	d10a      	bne.n	8002090 <HAL_PCD_IRQHandler+0x75a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f009 f8c2 	bl	800b204 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	695a      	ldr	r2, [r3, #20]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800208e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f004 ffde 	bl	8007056 <USB_ReadInterrupts>
 800209a:	4603      	mov	r3, r0
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b04      	cmp	r3, #4
 80020a2:	d115      	bne.n	80020d0 <HAL_PCD_IRQHandler+0x79a>
    {
      temp = hpcd->Instance->GOTGINT;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	f003 0304 	and.w	r3, r3, #4
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d002      	beq.n	80020bc <HAL_PCD_IRQHandler+0x786>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f009 f8b2 	bl	800b220 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6859      	ldr	r1, [r3, #4]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	430a      	orrs	r2, r1
 80020ca:	605a      	str	r2, [r3, #4]
 80020cc:	e000      	b.n	80020d0 <HAL_PCD_IRQHandler+0x79a>
      return;
 80020ce:	bf00      	nop
    }
  }
}
 80020d0:	3734      	adds	r7, #52	; 0x34
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd90      	pop	{r4, r7, pc}

080020d6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	460b      	mov	r3, r1
 80020e0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d101      	bne.n	80020f0 <HAL_PCD_SetAddress+0x1a>
 80020ec:	2302      	movs	r3, #2
 80020ee:	e013      	b.n	8002118 <HAL_PCD_SetAddress+0x42>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	78fa      	ldrb	r2, [r7, #3]
 80020fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	78fa      	ldrb	r2, [r7, #3]
 8002106:	4611      	mov	r1, r2
 8002108:	4618      	mov	r0, r3
 800210a:	f004 ff4e 	bl	8006faa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	4608      	mov	r0, r1
 800212a:	4611      	mov	r1, r2
 800212c:	461a      	mov	r2, r3
 800212e:	4603      	mov	r3, r0
 8002130:	70fb      	strb	r3, [r7, #3]
 8002132:	460b      	mov	r3, r1
 8002134:	803b      	strh	r3, [r7, #0]
 8002136:	4613      	mov	r3, r2
 8002138:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800213a:	2300      	movs	r3, #0
 800213c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800213e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002142:	2b00      	cmp	r3, #0
 8002144:	da0f      	bge.n	8002166 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002146:	78fb      	ldrb	r3, [r7, #3]
 8002148:	f003 020f 	and.w	r2, r3, #15
 800214c:	4613      	mov	r3, r2
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	1a9b      	subs	r3, r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	3338      	adds	r3, #56	; 0x38
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	4413      	add	r3, r2
 800215a:	3304      	adds	r3, #4
 800215c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2201      	movs	r2, #1
 8002162:	705a      	strb	r2, [r3, #1]
 8002164:	e00f      	b.n	8002186 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002166:	78fb      	ldrb	r3, [r7, #3]
 8002168:	f003 020f 	and.w	r2, r3, #15
 800216c:	4613      	mov	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	1a9b      	subs	r3, r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	4413      	add	r3, r2
 800217c:	3304      	adds	r3, #4
 800217e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2200      	movs	r2, #0
 8002184:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002186:	78fb      	ldrb	r3, [r7, #3]
 8002188:	f003 030f 	and.w	r3, r3, #15
 800218c:	b2da      	uxtb	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002192:	883a      	ldrh	r2, [r7, #0]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	78ba      	ldrb	r2, [r7, #2]
 800219c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	785b      	ldrb	r3, [r3, #1]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d004      	beq.n	80021b0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80021b0:	78bb      	ldrb	r3, [r7, #2]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d102      	bne.n	80021bc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d101      	bne.n	80021ca <HAL_PCD_EP_Open+0xaa>
 80021c6:	2302      	movs	r3, #2
 80021c8:	e00e      	b.n	80021e8 <HAL_PCD_EP_Open+0xc8>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68f9      	ldr	r1, [r7, #12]
 80021d8:	4618      	mov	r0, r3
 80021da:	f004 f911 	bl	8006400 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80021e6:	7afb      	ldrb	r3, [r7, #11]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	460b      	mov	r3, r1
 80021fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002200:	2b00      	cmp	r3, #0
 8002202:	da0f      	bge.n	8002224 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002204:	78fb      	ldrb	r3, [r7, #3]
 8002206:	f003 020f 	and.w	r2, r3, #15
 800220a:	4613      	mov	r3, r2
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	1a9b      	subs	r3, r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	3338      	adds	r3, #56	; 0x38
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	4413      	add	r3, r2
 8002218:	3304      	adds	r3, #4
 800221a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2201      	movs	r2, #1
 8002220:	705a      	strb	r2, [r3, #1]
 8002222:	e00f      	b.n	8002244 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002224:	78fb      	ldrb	r3, [r7, #3]
 8002226:	f003 020f 	and.w	r2, r3, #15
 800222a:	4613      	mov	r3, r2
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	1a9b      	subs	r3, r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	4413      	add	r3, r2
 800223a:	3304      	adds	r3, #4
 800223c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002244:	78fb      	ldrb	r3, [r7, #3]
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	b2da      	uxtb	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002256:	2b01      	cmp	r3, #1
 8002258:	d101      	bne.n	800225e <HAL_PCD_EP_Close+0x6e>
 800225a:	2302      	movs	r3, #2
 800225c:	e00e      	b.n	800227c <HAL_PCD_EP_Close+0x8c>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68f9      	ldr	r1, [r7, #12]
 800226c:	4618      	mov	r0, r3
 800226e:	f004 f94f 	bl	8006510 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3710      	adds	r7, #16
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	607a      	str	r2, [r7, #4]
 800228e:	603b      	str	r3, [r7, #0]
 8002290:	460b      	mov	r3, r1
 8002292:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002294:	7afb      	ldrb	r3, [r7, #11]
 8002296:	f003 020f 	and.w	r2, r3, #15
 800229a:	4613      	mov	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	1a9b      	subs	r3, r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	4413      	add	r3, r2
 80022aa:	3304      	adds	r3, #4
 80022ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	2200      	movs	r2, #0
 80022be:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	2200      	movs	r2, #0
 80022c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022c6:	7afb      	ldrb	r3, [r7, #11]
 80022c8:	f003 030f 	and.w	r3, r3, #15
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d102      	bne.n	80022e0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022e0:	7afb      	ldrb	r3, [r7, #11]
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d109      	bne.n	80022fe <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6818      	ldr	r0, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	461a      	mov	r2, r3
 80022f6:	6979      	ldr	r1, [r7, #20]
 80022f8:	f004 fbd2 	bl	8006aa0 <USB_EP0StartXfer>
 80022fc:	e008      	b.n	8002310 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6818      	ldr	r0, [r3, #0]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	b2db      	uxtb	r3, r3
 8002308:	461a      	mov	r2, r3
 800230a:	6979      	ldr	r1, [r7, #20]
 800230c:	f004 f984 	bl	8006618 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3718      	adds	r7, #24
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
 8002322:	460b      	mov	r3, r1
 8002324:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002326:	78fb      	ldrb	r3, [r7, #3]
 8002328:	f003 020f 	and.w	r2, r3, #15
 800232c:	6879      	ldr	r1, [r7, #4]
 800232e:	4613      	mov	r3, r2
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	1a9b      	subs	r3, r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	440b      	add	r3, r1
 8002338:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800233c:	681b      	ldr	r3, [r3, #0]
}
 800233e:	4618      	mov	r0, r3
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b086      	sub	sp, #24
 800234e:	af00      	add	r7, sp, #0
 8002350:	60f8      	str	r0, [r7, #12]
 8002352:	607a      	str	r2, [r7, #4]
 8002354:	603b      	str	r3, [r7, #0]
 8002356:	460b      	mov	r3, r1
 8002358:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800235a:	7afb      	ldrb	r3, [r7, #11]
 800235c:	f003 020f 	and.w	r2, r3, #15
 8002360:	4613      	mov	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	1a9b      	subs	r3, r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	3338      	adds	r3, #56	; 0x38
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	4413      	add	r3, r2
 800236e:	3304      	adds	r3, #4
 8002370:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	2200      	movs	r2, #0
 8002382:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	2201      	movs	r2, #1
 8002388:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800238a:	7afb      	ldrb	r3, [r7, #11]
 800238c:	f003 030f 	and.w	r3, r3, #15
 8002390:	b2da      	uxtb	r2, r3
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d102      	bne.n	80023a4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023a4:	7afb      	ldrb	r3, [r7, #11]
 80023a6:	f003 030f 	and.w	r3, r3, #15
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d109      	bne.n	80023c2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6818      	ldr	r0, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	461a      	mov	r2, r3
 80023ba:	6979      	ldr	r1, [r7, #20]
 80023bc:	f004 fb70 	bl	8006aa0 <USB_EP0StartXfer>
 80023c0:	e008      	b.n	80023d4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6818      	ldr	r0, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	461a      	mov	r2, r3
 80023ce:	6979      	ldr	r1, [r7, #20]
 80023d0:	f004 f922 	bl	8006618 <USB_EPStartXfer>
  }

  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3718      	adds	r7, #24
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b084      	sub	sp, #16
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
 80023e6:	460b      	mov	r3, r1
 80023e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80023ea:	78fb      	ldrb	r3, [r7, #3]
 80023ec:	f003 020f 	and.w	r2, r3, #15
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d901      	bls.n	80023fc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e050      	b.n	800249e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002400:	2b00      	cmp	r3, #0
 8002402:	da0f      	bge.n	8002424 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002404:	78fb      	ldrb	r3, [r7, #3]
 8002406:	f003 020f 	and.w	r2, r3, #15
 800240a:	4613      	mov	r3, r2
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	1a9b      	subs	r3, r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	3338      	adds	r3, #56	; 0x38
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	4413      	add	r3, r2
 8002418:	3304      	adds	r3, #4
 800241a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2201      	movs	r2, #1
 8002420:	705a      	strb	r2, [r3, #1]
 8002422:	e00d      	b.n	8002440 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002424:	78fa      	ldrb	r2, [r7, #3]
 8002426:	4613      	mov	r3, r2
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	1a9b      	subs	r3, r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	4413      	add	r3, r2
 8002436:	3304      	adds	r3, #4
 8002438:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2201      	movs	r2, #1
 8002444:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002446:	78fb      	ldrb	r3, [r7, #3]
 8002448:	f003 030f 	and.w	r3, r3, #15
 800244c:	b2da      	uxtb	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002458:	2b01      	cmp	r3, #1
 800245a:	d101      	bne.n	8002460 <HAL_PCD_EP_SetStall+0x82>
 800245c:	2302      	movs	r3, #2
 800245e:	e01e      	b.n	800249e <HAL_PCD_EP_SetStall+0xc0>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	68f9      	ldr	r1, [r7, #12]
 800246e:	4618      	mov	r0, r3
 8002470:	f004 fcc7 	bl	8006e02 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002474:	78fb      	ldrb	r3, [r7, #3]
 8002476:	f003 030f 	and.w	r3, r3, #15
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10a      	bne.n	8002494 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6818      	ldr	r0, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	b2d9      	uxtb	r1, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800248e:	461a      	mov	r2, r3
 8002490:	f004 feb8 	bl	8007204 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b084      	sub	sp, #16
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
 80024ae:	460b      	mov	r3, r1
 80024b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80024b2:	78fb      	ldrb	r3, [r7, #3]
 80024b4:	f003 020f 	and.w	r2, r3, #15
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d901      	bls.n	80024c4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e042      	b.n	800254a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	da0f      	bge.n	80024ec <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024cc:	78fb      	ldrb	r3, [r7, #3]
 80024ce:	f003 020f 	and.w	r2, r3, #15
 80024d2:	4613      	mov	r3, r2
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	1a9b      	subs	r3, r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	3338      	adds	r3, #56	; 0x38
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	4413      	add	r3, r2
 80024e0:	3304      	adds	r3, #4
 80024e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2201      	movs	r2, #1
 80024e8:	705a      	strb	r2, [r3, #1]
 80024ea:	e00f      	b.n	800250c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024ec:	78fb      	ldrb	r3, [r7, #3]
 80024ee:	f003 020f 	and.w	r2, r3, #15
 80024f2:	4613      	mov	r3, r2
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	1a9b      	subs	r3, r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	4413      	add	r3, r2
 8002502:	3304      	adds	r3, #4
 8002504:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002512:	78fb      	ldrb	r3, [r7, #3]
 8002514:	f003 030f 	and.w	r3, r3, #15
 8002518:	b2da      	uxtb	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002524:	2b01      	cmp	r3, #1
 8002526:	d101      	bne.n	800252c <HAL_PCD_EP_ClrStall+0x86>
 8002528:	2302      	movs	r3, #2
 800252a:	e00e      	b.n	800254a <HAL_PCD_EP_ClrStall+0xa4>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68f9      	ldr	r1, [r7, #12]
 800253a:	4618      	mov	r0, r3
 800253c:	f004 fccf 	bl	8006ede <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b08a      	sub	sp, #40	; 0x28
 8002556:	af02      	add	r7, sp, #8
 8002558:	6078      	str	r0, [r7, #4]
 800255a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	4613      	mov	r3, r2
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	1a9b      	subs	r3, r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	3338      	adds	r3, #56	; 0x38
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	4413      	add	r3, r2
 8002576:	3304      	adds	r3, #4
 8002578:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	699a      	ldr	r2, [r3, #24]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	429a      	cmp	r2, r3
 8002584:	d901      	bls.n	800258a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e06c      	b.n	8002664 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	695a      	ldr	r2, [r3, #20]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	69fa      	ldr	r2, [r7, #28]
 800259c:	429a      	cmp	r2, r3
 800259e:	d902      	bls.n	80025a6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	3303      	adds	r3, #3
 80025aa:	089b      	lsrs	r3, r3, #2
 80025ac:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80025ae:	e02b      	b.n	8002608 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	695a      	ldr	r2, [r3, #20]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	69fa      	ldr	r2, [r7, #28]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d902      	bls.n	80025cc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	3303      	adds	r3, #3
 80025d0:	089b      	lsrs	r3, r3, #2
 80025d2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	68d9      	ldr	r1, [r3, #12]
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	b2da      	uxtb	r2, r3
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	4603      	mov	r3, r0
 80025ea:	6978      	ldr	r0, [r7, #20]
 80025ec:	f004 fbab 	bl	8006d46 <USB_WritePacket>

    ep->xfer_buff  += len;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	68da      	ldr	r2, [r3, #12]
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	441a      	add	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	699a      	ldr	r2, [r3, #24]
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	441a      	add	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	015a      	lsls	r2, r3, #5
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	4413      	add	r3, r2
 8002610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	b29b      	uxth	r3, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	429a      	cmp	r2, r3
 800261c:	d809      	bhi.n	8002632 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	699a      	ldr	r2, [r3, #24]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002626:	429a      	cmp	r2, r3
 8002628:	d203      	bcs.n	8002632 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1be      	bne.n	80025b0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	695a      	ldr	r2, [r3, #20]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	429a      	cmp	r2, r3
 800263c:	d811      	bhi.n	8002662 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	f003 030f 	and.w	r3, r3, #15
 8002644:	2201      	movs	r2, #1
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002652:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	43db      	mvns	r3, r3
 8002658:	6939      	ldr	r1, [r7, #16]
 800265a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800265e:	4013      	ands	r3, r2
 8002660:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3720      	adds	r7, #32
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	333c      	adds	r3, #60	; 0x3c
 8002684:	3304      	adds	r3, #4
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	015a      	lsls	r2, r3, #5
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4413      	add	r3, r2
 8002692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	f040 80b3 	bne.w	800280a <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	f003 0308 	and.w	r3, r3, #8
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d028      	beq.n	8002700 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	4a70      	ldr	r2, [pc, #448]	; (8002874 <PCD_EP_OutXfrComplete_int+0x208>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d90e      	bls.n	80026d4 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d009      	beq.n	80026d4 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	015a      	lsls	r2, r3, #5
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	4413      	add	r3, r2
 80026c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026cc:	461a      	mov	r2, r3
 80026ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026d2:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f008 fcc9 	bl	800b06c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6818      	ldr	r0, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80026e4:	461a      	mov	r2, r3
 80026e6:	2101      	movs	r1, #1
 80026e8:	f004 fd8c 	bl	8007204 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	015a      	lsls	r2, r3, #5
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026f8:	461a      	mov	r2, r3
 80026fa:	2308      	movs	r3, #8
 80026fc:	6093      	str	r3, [r2, #8]
 80026fe:	e0b3      	b.n	8002868 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	f003 0320 	and.w	r3, r3, #32
 8002706:	2b00      	cmp	r3, #0
 8002708:	d009      	beq.n	800271e <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	015a      	lsls	r2, r3, #5
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	4413      	add	r3, r2
 8002712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002716:	461a      	mov	r2, r3
 8002718:	2320      	movs	r3, #32
 800271a:	6093      	str	r3, [r2, #8]
 800271c:	e0a4      	b.n	8002868 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002724:	2b00      	cmp	r3, #0
 8002726:	f040 809f 	bne.w	8002868 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	4a51      	ldr	r2, [pc, #324]	; (8002874 <PCD_EP_OutXfrComplete_int+0x208>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d90f      	bls.n	8002752 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00a      	beq.n	8002752 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	015a      	lsls	r2, r3, #5
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	4413      	add	r3, r2
 8002744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002748:	461a      	mov	r2, r3
 800274a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800274e:	6093      	str	r3, [r2, #8]
 8002750:	e08a      	b.n	8002868 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	4613      	mov	r3, r2
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	1a9b      	subs	r3, r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	440b      	add	r3, r1
 8002760:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002764:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	0159      	lsls	r1, r3, #5
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	440b      	add	r3, r1
 800276e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002778:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	4613      	mov	r3, r2
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	1a9b      	subs	r3, r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	4403      	add	r3, r0
 8002788:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800278c:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	4613      	mov	r3, r2
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	1a9b      	subs	r3, r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	440b      	add	r3, r1
 800279c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80027a0:	6819      	ldr	r1, [r3, #0]
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	4613      	mov	r3, r2
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	1a9b      	subs	r3, r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4403      	add	r3, r0
 80027b0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4419      	add	r1, r3
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	4613      	mov	r3, r2
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	1a9b      	subs	r3, r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4403      	add	r3, r0
 80027c6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80027ca:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	4619      	mov	r1, r3
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f008 fc5c 	bl	800b090 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d144      	bne.n	8002868 <PCD_EP_OutXfrComplete_int+0x1fc>
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	4613      	mov	r3, r2
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	1a9b      	subs	r3, r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	440b      	add	r3, r1
 80027ec:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d138      	bne.n	8002868 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6818      	ldr	r0, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002800:	461a      	mov	r2, r3
 8002802:	2101      	movs	r1, #1
 8002804:	f004 fcfe 	bl	8007204 <USB_EP0_OutStart>
 8002808:	e02e      	b.n	8002868 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	4a1a      	ldr	r2, [pc, #104]	; (8002878 <PCD_EP_OutXfrComplete_int+0x20c>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d124      	bne.n	800285c <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00a      	beq.n	8002832 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	015a      	lsls	r2, r3, #5
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	4413      	add	r3, r2
 8002824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002828:	461a      	mov	r2, r3
 800282a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800282e:	6093      	str	r3, [r2, #8]
 8002830:	e01a      	b.n	8002868 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	f003 0320 	and.w	r3, r3, #32
 8002838:	2b00      	cmp	r3, #0
 800283a:	d008      	beq.n	800284e <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	015a      	lsls	r2, r3, #5
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	4413      	add	r3, r2
 8002844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002848:	461a      	mov	r2, r3
 800284a:	2320      	movs	r3, #32
 800284c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	b2db      	uxtb	r3, r3
 8002852:	4619      	mov	r1, r3
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f008 fc1b 	bl	800b090 <HAL_PCD_DataOutStageCallback>
 800285a:	e005      	b.n	8002868 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	b2db      	uxtb	r3, r3
 8002860:	4619      	mov	r1, r3
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f008 fc14 	bl	800b090 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3718      	adds	r7, #24
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	4f54300a 	.word	0x4f54300a
 8002878:	4f54310a 	.word	0x4f54310a

0800287c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	333c      	adds	r3, #60	; 0x3c
 8002894:	3304      	adds	r3, #4
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	015a      	lsls	r2, r3, #5
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	4413      	add	r3, r2
 80028a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d113      	bne.n	80028da <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	4a1f      	ldr	r2, [pc, #124]	; (8002934 <PCD_EP_OutSetupPacket_int+0xb8>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d922      	bls.n	8002900 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d01d      	beq.n	8002900 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	015a      	lsls	r2, r3, #5
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	4413      	add	r3, r2
 80028cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028d0:	461a      	mov	r2, r3
 80028d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028d6:	6093      	str	r3, [r2, #8]
 80028d8:	e012      	b.n	8002900 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	4a16      	ldr	r2, [pc, #88]	; (8002938 <PCD_EP_OutSetupPacket_int+0xbc>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d10e      	bne.n	8002900 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d009      	beq.n	8002900 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	015a      	lsls	r2, r3, #5
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	4413      	add	r3, r2
 80028f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028f8:	461a      	mov	r2, r3
 80028fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028fe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f008 fbb3 	bl	800b06c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	4a0a      	ldr	r2, [pc, #40]	; (8002934 <PCD_EP_OutSetupPacket_int+0xb8>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d90c      	bls.n	8002928 <PCD_EP_OutSetupPacket_int+0xac>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d108      	bne.n	8002928 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6818      	ldr	r0, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002920:	461a      	mov	r2, r3
 8002922:	2101      	movs	r1, #1
 8002924:	f004 fc6e 	bl	8007204 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3718      	adds	r7, #24
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	4f54300a 	.word	0x4f54300a
 8002938:	4f54310a 	.word	0x4f54310a

0800293c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	460b      	mov	r3, r1
 8002946:	70fb      	strb	r3, [r7, #3]
 8002948:	4613      	mov	r3, r2
 800294a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002952:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002954:	78fb      	ldrb	r3, [r7, #3]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d107      	bne.n	800296a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800295a:	883b      	ldrh	r3, [r7, #0]
 800295c:	0419      	lsls	r1, r3, #16
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68ba      	ldr	r2, [r7, #8]
 8002964:	430a      	orrs	r2, r1
 8002966:	629a      	str	r2, [r3, #40]	; 0x28
 8002968:	e028      	b.n	80029bc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002970:	0c1b      	lsrs	r3, r3, #16
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	4413      	add	r3, r2
 8002976:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002978:	2300      	movs	r3, #0
 800297a:	73fb      	strb	r3, [r7, #15]
 800297c:	e00d      	b.n	800299a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	7bfb      	ldrb	r3, [r7, #15]
 8002984:	3340      	adds	r3, #64	; 0x40
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4413      	add	r3, r2
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	0c1b      	lsrs	r3, r3, #16
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	4413      	add	r3, r2
 8002992:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002994:	7bfb      	ldrb	r3, [r7, #15]
 8002996:	3301      	adds	r3, #1
 8002998:	73fb      	strb	r3, [r7, #15]
 800299a:	7bfa      	ldrb	r2, [r7, #15]
 800299c:	78fb      	ldrb	r3, [r7, #3]
 800299e:	3b01      	subs	r3, #1
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d3ec      	bcc.n	800297e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80029a4:	883b      	ldrh	r3, [r7, #0]
 80029a6:	0418      	lsls	r0, r3, #16
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6819      	ldr	r1, [r3, #0]
 80029ac:	78fb      	ldrb	r3, [r7, #3]
 80029ae:	3b01      	subs	r3, #1
 80029b0:	68ba      	ldr	r2, [r7, #8]
 80029b2:	4302      	orrs	r2, r0
 80029b4:	3340      	adds	r3, #64	; 0x40
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
 80029d2:	460b      	mov	r3, r1
 80029d4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	887a      	ldrh	r2, [r7, #2]
 80029dc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a1e:	f043 0303 	orr.w	r3, r3, #3
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e0ca      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a60:	4b67      	ldr	r3, [pc, #412]	; (8002c00 <HAL_RCC_ClockConfig+0x1b4>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 030f 	and.w	r3, r3, #15
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d90c      	bls.n	8002a88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6e:	4b64      	ldr	r3, [pc, #400]	; (8002c00 <HAL_RCC_ClockConfig+0x1b4>)
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a76:	4b62      	ldr	r3, [pc, #392]	; (8002c00 <HAL_RCC_ClockConfig+0x1b4>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 030f 	and.w	r3, r3, #15
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d001      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e0b6      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d020      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d005      	beq.n	8002aac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002aa0:	4b58      	ldr	r3, [pc, #352]	; (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	4a57      	ldr	r2, [pc, #348]	; (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002aaa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0308 	and.w	r3, r3, #8
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d005      	beq.n	8002ac4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ab8:	4b52      	ldr	r3, [pc, #328]	; (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	4a51      	ldr	r2, [pc, #324]	; (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002abe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ac2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac4:	4b4f      	ldr	r3, [pc, #316]	; (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	494c      	ldr	r1, [pc, #304]	; (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d044      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d107      	bne.n	8002afa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aea:	4b46      	ldr	r3, [pc, #280]	; (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d119      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e07d      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d003      	beq.n	8002b0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b06:	2b03      	cmp	r3, #3
 8002b08:	d107      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b0a:	4b3e      	ldr	r3, [pc, #248]	; (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d109      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e06d      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b1a:	4b3a      	ldr	r3, [pc, #232]	; (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e065      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b2a:	4b36      	ldr	r3, [pc, #216]	; (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f023 0203 	bic.w	r2, r3, #3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	4933      	ldr	r1, [pc, #204]	; (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b3c:	f7fd fd5a 	bl	80005f4 <HAL_GetTick>
 8002b40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b42:	e00a      	b.n	8002b5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b44:	f7fd fd56 	bl	80005f4 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e04d      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b5a:	4b2a      	ldr	r3, [pc, #168]	; (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 020c 	and.w	r2, r3, #12
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d1eb      	bne.n	8002b44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b6c:	4b24      	ldr	r3, [pc, #144]	; (8002c00 <HAL_RCC_ClockConfig+0x1b4>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 030f 	and.w	r3, r3, #15
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d20c      	bcs.n	8002b94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b7a:	4b21      	ldr	r3, [pc, #132]	; (8002c00 <HAL_RCC_ClockConfig+0x1b4>)
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b82:	4b1f      	ldr	r3, [pc, #124]	; (8002c00 <HAL_RCC_ClockConfig+0x1b4>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 030f 	and.w	r3, r3, #15
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d001      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e030      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d008      	beq.n	8002bb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba0:	4b18      	ldr	r3, [pc, #96]	; (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	4915      	ldr	r1, [pc, #84]	; (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d009      	beq.n	8002bd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bbe:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	490d      	ldr	r1, [pc, #52]	; (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bd2:	f000 f81d 	bl	8002c10 <HAL_RCC_GetSysClockFreq>
 8002bd6:	4601      	mov	r1, r0
 8002bd8:	4b0a      	ldr	r3, [pc, #40]	; (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	091b      	lsrs	r3, r3, #4
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	4a09      	ldr	r2, [pc, #36]	; (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002be4:	5cd3      	ldrb	r3, [r2, r3]
 8002be6:	fa21 f303 	lsr.w	r3, r1, r3
 8002bea:	4a08      	ldr	r2, [pc, #32]	; (8002c0c <HAL_RCC_ClockConfig+0x1c0>)
 8002bec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002bee:	2000      	movs	r0, #0
 8002bf0:	f7fd fcbc 	bl	800056c <HAL_InitTick>

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40023c00 	.word	0x40023c00
 8002c04:	40023800 	.word	0x40023800
 8002c08:	0800bda8 	.word	0x0800bda8
 8002c0c:	20000118 	.word	0x20000118

08002c10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c16:	2300      	movs	r3, #0
 8002c18:	607b      	str	r3, [r7, #4]
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60fb      	str	r3, [r7, #12]
 8002c1e:	2300      	movs	r3, #0
 8002c20:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002c22:	2300      	movs	r3, #0
 8002c24:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c26:	4b63      	ldr	r3, [pc, #396]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 030c 	and.w	r3, r3, #12
 8002c2e:	2b04      	cmp	r3, #4
 8002c30:	d007      	beq.n	8002c42 <HAL_RCC_GetSysClockFreq+0x32>
 8002c32:	2b08      	cmp	r3, #8
 8002c34:	d008      	beq.n	8002c48 <HAL_RCC_GetSysClockFreq+0x38>
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f040 80b4 	bne.w	8002da4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c3c:	4b5e      	ldr	r3, [pc, #376]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002c3e:	60bb      	str	r3, [r7, #8]
       break;
 8002c40:	e0b3      	b.n	8002daa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c42:	4b5e      	ldr	r3, [pc, #376]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002c44:	60bb      	str	r3, [r7, #8]
      break;
 8002c46:	e0b0      	b.n	8002daa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c48:	4b5a      	ldr	r3, [pc, #360]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c50:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c52:	4b58      	ldr	r3, [pc, #352]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d04a      	beq.n	8002cf4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c5e:	4b55      	ldr	r3, [pc, #340]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	099b      	lsrs	r3, r3, #6
 8002c64:	f04f 0400 	mov.w	r4, #0
 8002c68:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c6c:	f04f 0200 	mov.w	r2, #0
 8002c70:	ea03 0501 	and.w	r5, r3, r1
 8002c74:	ea04 0602 	and.w	r6, r4, r2
 8002c78:	4629      	mov	r1, r5
 8002c7a:	4632      	mov	r2, r6
 8002c7c:	f04f 0300 	mov.w	r3, #0
 8002c80:	f04f 0400 	mov.w	r4, #0
 8002c84:	0154      	lsls	r4, r2, #5
 8002c86:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c8a:	014b      	lsls	r3, r1, #5
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4622      	mov	r2, r4
 8002c90:	1b49      	subs	r1, r1, r5
 8002c92:	eb62 0206 	sbc.w	r2, r2, r6
 8002c96:	f04f 0300 	mov.w	r3, #0
 8002c9a:	f04f 0400 	mov.w	r4, #0
 8002c9e:	0194      	lsls	r4, r2, #6
 8002ca0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002ca4:	018b      	lsls	r3, r1, #6
 8002ca6:	1a5b      	subs	r3, r3, r1
 8002ca8:	eb64 0402 	sbc.w	r4, r4, r2
 8002cac:	f04f 0100 	mov.w	r1, #0
 8002cb0:	f04f 0200 	mov.w	r2, #0
 8002cb4:	00e2      	lsls	r2, r4, #3
 8002cb6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002cba:	00d9      	lsls	r1, r3, #3
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	4614      	mov	r4, r2
 8002cc0:	195b      	adds	r3, r3, r5
 8002cc2:	eb44 0406 	adc.w	r4, r4, r6
 8002cc6:	f04f 0100 	mov.w	r1, #0
 8002cca:	f04f 0200 	mov.w	r2, #0
 8002cce:	0262      	lsls	r2, r4, #9
 8002cd0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002cd4:	0259      	lsls	r1, r3, #9
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	4614      	mov	r4, r2
 8002cda:	4618      	mov	r0, r3
 8002cdc:	4621      	mov	r1, r4
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f04f 0400 	mov.w	r4, #0
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	4623      	mov	r3, r4
 8002ce8:	f7fd fa9e 	bl	8000228 <__aeabi_uldivmod>
 8002cec:	4603      	mov	r3, r0
 8002cee:	460c      	mov	r4, r1
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	e049      	b.n	8002d88 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cf4:	4b2f      	ldr	r3, [pc, #188]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	099b      	lsrs	r3, r3, #6
 8002cfa:	f04f 0400 	mov.w	r4, #0
 8002cfe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d02:	f04f 0200 	mov.w	r2, #0
 8002d06:	ea03 0501 	and.w	r5, r3, r1
 8002d0a:	ea04 0602 	and.w	r6, r4, r2
 8002d0e:	4629      	mov	r1, r5
 8002d10:	4632      	mov	r2, r6
 8002d12:	f04f 0300 	mov.w	r3, #0
 8002d16:	f04f 0400 	mov.w	r4, #0
 8002d1a:	0154      	lsls	r4, r2, #5
 8002d1c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d20:	014b      	lsls	r3, r1, #5
 8002d22:	4619      	mov	r1, r3
 8002d24:	4622      	mov	r2, r4
 8002d26:	1b49      	subs	r1, r1, r5
 8002d28:	eb62 0206 	sbc.w	r2, r2, r6
 8002d2c:	f04f 0300 	mov.w	r3, #0
 8002d30:	f04f 0400 	mov.w	r4, #0
 8002d34:	0194      	lsls	r4, r2, #6
 8002d36:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d3a:	018b      	lsls	r3, r1, #6
 8002d3c:	1a5b      	subs	r3, r3, r1
 8002d3e:	eb64 0402 	sbc.w	r4, r4, r2
 8002d42:	f04f 0100 	mov.w	r1, #0
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	00e2      	lsls	r2, r4, #3
 8002d4c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d50:	00d9      	lsls	r1, r3, #3
 8002d52:	460b      	mov	r3, r1
 8002d54:	4614      	mov	r4, r2
 8002d56:	195b      	adds	r3, r3, r5
 8002d58:	eb44 0406 	adc.w	r4, r4, r6
 8002d5c:	f04f 0100 	mov.w	r1, #0
 8002d60:	f04f 0200 	mov.w	r2, #0
 8002d64:	02a2      	lsls	r2, r4, #10
 8002d66:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002d6a:	0299      	lsls	r1, r3, #10
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	4614      	mov	r4, r2
 8002d70:	4618      	mov	r0, r3
 8002d72:	4621      	mov	r1, r4
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f04f 0400 	mov.w	r4, #0
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	4623      	mov	r3, r4
 8002d7e:	f7fd fa53 	bl	8000228 <__aeabi_uldivmod>
 8002d82:	4603      	mov	r3, r0
 8002d84:	460c      	mov	r4, r1
 8002d86:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d88:	4b0a      	ldr	r3, [pc, #40]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	0c1b      	lsrs	r3, r3, #16
 8002d8e:	f003 0303 	and.w	r3, r3, #3
 8002d92:	3301      	adds	r3, #1
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da0:	60bb      	str	r3, [r7, #8]
      break;
 8002da2:	e002      	b.n	8002daa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002da4:	4b04      	ldr	r3, [pc, #16]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002da6:	60bb      	str	r3, [r7, #8]
      break;
 8002da8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002daa:	68bb      	ldr	r3, [r7, #8]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002db4:	40023800 	.word	0x40023800
 8002db8:	00f42400 	.word	0x00f42400
 8002dbc:	007a1200 	.word	0x007a1200

08002dc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dc4:	4b03      	ldr	r3, [pc, #12]	; (8002dd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	20000118 	.word	0x20000118

08002dd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ddc:	f7ff fff0 	bl	8002dc0 <HAL_RCC_GetHCLKFreq>
 8002de0:	4601      	mov	r1, r0
 8002de2:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	0a9b      	lsrs	r3, r3, #10
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	4a03      	ldr	r2, [pc, #12]	; (8002dfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dee:	5cd3      	ldrb	r3, [r2, r3]
 8002df0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	0800bdb8 	.word	0x0800bdb8

08002e00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e04:	f7ff ffdc 	bl	8002dc0 <HAL_RCC_GetHCLKFreq>
 8002e08:	4601      	mov	r1, r0
 8002e0a:	4b05      	ldr	r3, [pc, #20]	; (8002e20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	0b5b      	lsrs	r3, r3, #13
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	4a03      	ldr	r2, [pc, #12]	; (8002e24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e16:	5cd3      	ldrb	r3, [r2, r3]
 8002e18:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40023800 	.word	0x40023800
 8002e24:	0800bdb8 	.word	0x0800bdb8

08002e28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b088      	sub	sp, #32
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e30:	2300      	movs	r3, #0
 8002e32:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d010      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002e4c:	4b7a      	ldr	r3, [pc, #488]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002e4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e52:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	4977      	ldr	r1, [pc, #476]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d010      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002e7a:	4b6f      	ldr	r3, [pc, #444]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002e7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e80:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	496b      	ldr	r1, [pc, #428]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d101      	bne.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d022      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8002ea8:	4b63      	ldr	r3, [pc, #396]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002eaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002eae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eb6:	4960      	ldr	r1, [pc, #384]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ece:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ed2:	d10c      	bne.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8002ed4:	4b58      	ldr	r3, [pc, #352]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002ed6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002eda:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	021b      	lsls	r3, r3, #8
 8002ee6:	4954      	ldr	r1, [pc, #336]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d022      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8002efa:	4b4f      	ldr	r3, [pc, #316]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002efc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f00:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f08:	494b      	ldr	r1, [pc, #300]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f24:	d10c      	bne.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8002f26:	4b44      	ldr	r3, [pc, #272]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002f28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f2c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	695b      	ldr	r3, [r3, #20]
 8002f34:	3b01      	subs	r3, #1
 8002f36:	021b      	lsls	r3, r3, #8
 8002f38:	493f      	ldr	r1, [pc, #252]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0308 	and.w	r3, r3, #8
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 808a 	beq.w	8003062 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	4b39      	ldr	r3, [pc, #228]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	4a38      	ldr	r2, [pc, #224]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f5e:	4b36      	ldr	r3, [pc, #216]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002f6a:	4b34      	ldr	r3, [pc, #208]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a33      	ldr	r2, [pc, #204]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8002f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f74:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f76:	f7fd fb3d 	bl	80005f4 <HAL_GetTick>
 8002f7a:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002f7c:	e008      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002f7e:	f7fd fb39 	bl	80005f4 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e1d1      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002f90:	4b2a      	ldr	r3, [pc, #168]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d0f0      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f9c:	4b26      	ldr	r3, [pc, #152]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fa4:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d02f      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d028      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fba:	4b1f      	ldr	r3, [pc, #124]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fc2:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fc4:	4b1e      	ldr	r3, [pc, #120]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fca:	4b1d      	ldr	r3, [pc, #116]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002fd0:	4a19      	ldr	r2, [pc, #100]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002fd6:	4b18      	ldr	r3, [pc, #96]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d114      	bne.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002fe2:	f7fd fb07 	bl	80005f4 <HAL_GetTick>
 8002fe6:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe8:	e00a      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fea:	f7fd fb03 	bl	80005f4 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e199      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003000:	4b0d      	ldr	r3, [pc, #52]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0ee      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003010:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003014:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003018:	d114      	bne.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800301a:	4b07      	ldr	r3, [pc, #28]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003026:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800302a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800302e:	4902      	ldr	r1, [pc, #8]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003030:	4313      	orrs	r3, r2
 8003032:	608b      	str	r3, [r1, #8]
 8003034:	e00c      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8003036:	bf00      	nop
 8003038:	40023800 	.word	0x40023800
 800303c:	40007000 	.word	0x40007000
 8003040:	42470e40 	.word	0x42470e40
 8003044:	4b89      	ldr	r3, [pc, #548]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	4a88      	ldr	r2, [pc, #544]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800304a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800304e:	6093      	str	r3, [r2, #8]
 8003050:	4b86      	ldr	r3, [pc, #536]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003052:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800305c:	4983      	ldr	r1, [pc, #524]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800305e:	4313      	orrs	r3, r2
 8003060:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0304 	and.w	r3, r3, #4
 800306a:	2b00      	cmp	r3, #0
 800306c:	d004      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8003074:	4b7e      	ldr	r3, [pc, #504]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8003076:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0310 	and.w	r3, r3, #16
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00a      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003084:	4b79      	ldr	r3, [pc, #484]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003086:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800308a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003092:	4976      	ldr	r1, [pc, #472]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003094:	4313      	orrs	r3, r2
 8003096:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0320 	and.w	r3, r3, #32
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d011      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80030a6:	4b71      	ldr	r3, [pc, #452]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80030a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030ac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b4:	496d      	ldr	r1, [pc, #436]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030c4:	d101      	bne.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 80030c6:	2301      	movs	r3, #1
 80030c8:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00a      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80030d6:	4b65      	ldr	r3, [pc, #404]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80030d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030dc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e4:	4961      	ldr	r1, [pc, #388]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d004      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2b80      	cmp	r3, #128	; 0x80
 80030f8:	f040 80c6 	bne.w	8003288 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80030fc:	4b5d      	ldr	r3, [pc, #372]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003102:	f7fd fa77 	bl	80005f4 <HAL_GetTick>
 8003106:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003108:	e008      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800310a:	f7fd fa73 	bl	80005f4 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e10b      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800311c:	4b53      	ldr	r3, [pc, #332]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1f0      	bne.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8003128:	4a53      	ldr	r2, [pc, #332]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800312e:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	2b00      	cmp	r3, #0
 800313a:	d003      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d023      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d019      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8003160:	2b00      	cmp	r3, #0
 8003162:	d004      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003168:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800316c:	d00e      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8003176:	2b00      	cmp	r3, #0
 8003178:	d019      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317e:	2b00      	cmp	r3, #0
 8003180:	d115      	bne.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x386>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003186:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800318a:	d110      	bne.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	019b      	lsls	r3, r3, #6
 8003196:	431a      	orrs	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	061b      	lsls	r3, r3, #24
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	071b      	lsls	r3, r3, #28
 80031a6:	4931      	ldr	r1, [pc, #196]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d009      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d026      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d122      	bne.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80031d6:	4b25      	ldr	r3, [pc, #148]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80031d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031dc:	0e1b      	lsrs	r3, r3, #24
 80031de:	f003 030f 	and.w	r3, r3, #15
 80031e2:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	019b      	lsls	r3, r3, #6
 80031ee:	431a      	orrs	r2, r3
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	061b      	lsls	r3, r3, #24
 80031f4:	431a      	orrs	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	071b      	lsls	r3, r3, #28
 80031fc:	491b      	ldr	r1, [pc, #108]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8003204:	4b19      	ldr	r3, [pc, #100]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003206:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800320a:	f023 021f 	bic.w	r2, r3, #31
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	3b01      	subs	r3, #1
 8003214:	4915      	ldr	r1, [pc, #84]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003216:	4313      	orrs	r3, r2
 8003218:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003224:	2b00      	cmp	r3, #0
 8003226:	d010      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	019b      	lsls	r3, r3, #6
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	061b      	lsls	r3, r3, #24
 800323a:	431a      	orrs	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	071b      	lsls	r3, r3, #28
 8003242:	490a      	ldr	r1, [pc, #40]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003244:	4313      	orrs	r3, r2
 8003246:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800324a:	4b0a      	ldr	r3, [pc, #40]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 800324c:	2201      	movs	r2, #1
 800324e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003250:	f7fd f9d0 	bl	80005f4 <HAL_GetTick>
 8003254:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003256:	e011      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003258:	f7fd f9cc 	bl	80005f4 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d90a      	bls.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e064      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800326a:	bf00      	nop
 800326c:	40023800 	.word	0x40023800
 8003270:	424711e0 	.word	0x424711e0
 8003274:	42470068 	.word	0x42470068
 8003278:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800327c:	4b2f      	ldr	r3, [pc, #188]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0e7      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00a      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003294:	4b29      	ldr	r3, [pc, #164]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003296:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800329a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a2:	4926      	ldr	r1, [pc, #152]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00a      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80032b6:	4b21      	ldr	r3, [pc, #132]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80032b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032bc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c4:	491d      	ldr	r1, [pc, #116]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00a      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80032d8:	4b18      	ldr	r3, [pc, #96]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80032da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e6:	4915      	ldr	r1, [pc, #84]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00a      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 80032fa:	4b10      	ldr	r3, [pc, #64]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80032fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003300:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003308:	490c      	ldr	r1, [pc, #48]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800330a:	4313      	orrs	r3, r2
 800330c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00a      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800331c:	4b07      	ldr	r3, [pc, #28]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800331e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003322:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332a:	4904      	ldr	r1, [pc, #16]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800332c:	4313      	orrs	r3, r2
 800332e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3720      	adds	r7, #32
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40023800 	.word	0x40023800

08003340 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003348:	2300      	movs	r3, #0
 800334a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	2b00      	cmp	r3, #0
 8003356:	d075      	beq.n	8003444 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003358:	4ba2      	ldr	r3, [pc, #648]	; (80035e4 <HAL_RCC_OscConfig+0x2a4>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f003 030c 	and.w	r3, r3, #12
 8003360:	2b04      	cmp	r3, #4
 8003362:	d00c      	beq.n	800337e <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003364:	4b9f      	ldr	r3, [pc, #636]	; (80035e4 <HAL_RCC_OscConfig+0x2a4>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800336c:	2b08      	cmp	r3, #8
 800336e:	d112      	bne.n	8003396 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003370:	4b9c      	ldr	r3, [pc, #624]	; (80035e4 <HAL_RCC_OscConfig+0x2a4>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003378:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800337c:	d10b      	bne.n	8003396 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800337e:	4b99      	ldr	r3, [pc, #612]	; (80035e4 <HAL_RCC_OscConfig+0x2a4>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d05b      	beq.n	8003442 <HAL_RCC_OscConfig+0x102>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d157      	bne.n	8003442 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e20b      	b.n	80037ae <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800339e:	d106      	bne.n	80033ae <HAL_RCC_OscConfig+0x6e>
 80033a0:	4b90      	ldr	r3, [pc, #576]	; (80035e4 <HAL_RCC_OscConfig+0x2a4>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a8f      	ldr	r2, [pc, #572]	; (80035e4 <HAL_RCC_OscConfig+0x2a4>)
 80033a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033aa:	6013      	str	r3, [r2, #0]
 80033ac:	e01d      	b.n	80033ea <HAL_RCC_OscConfig+0xaa>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033b6:	d10c      	bne.n	80033d2 <HAL_RCC_OscConfig+0x92>
 80033b8:	4b8a      	ldr	r3, [pc, #552]	; (80035e4 <HAL_RCC_OscConfig+0x2a4>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a89      	ldr	r2, [pc, #548]	; (80035e4 <HAL_RCC_OscConfig+0x2a4>)
 80033be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033c2:	6013      	str	r3, [r2, #0]
 80033c4:	4b87      	ldr	r3, [pc, #540]	; (80035e4 <HAL_RCC_OscConfig+0x2a4>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a86      	ldr	r2, [pc, #536]	; (80035e4 <HAL_RCC_OscConfig+0x2a4>)
 80033ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ce:	6013      	str	r3, [r2, #0]
 80033d0:	e00b      	b.n	80033ea <HAL_RCC_OscConfig+0xaa>
 80033d2:	4b84      	ldr	r3, [pc, #528]	; (80035e4 <HAL_RCC_OscConfig+0x2a4>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a83      	ldr	r2, [pc, #524]	; (80035e4 <HAL_RCC_OscConfig+0x2a4>)
 80033d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033dc:	6013      	str	r3, [r2, #0]
 80033de:	4b81      	ldr	r3, [pc, #516]	; (80035e4 <HAL_RCC_OscConfig+0x2a4>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a80      	ldr	r2, [pc, #512]	; (80035e4 <HAL_RCC_OscConfig+0x2a4>)
 80033e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033e8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d013      	beq.n	800341a <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f2:	f7fd f8ff 	bl	80005f4 <HAL_GetTick>
 80033f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033f8:	e008      	b.n	800340c <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033fa:	f7fd f8fb 	bl	80005f4 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b64      	cmp	r3, #100	; 0x64
 8003406:	d901      	bls.n	800340c <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e1d0      	b.n	80037ae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800340c:	4b75      	ldr	r3, [pc, #468]	; (80035e4 <HAL_RCC_OscConfig+0x2a4>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d0f0      	beq.n	80033fa <HAL_RCC_OscConfig+0xba>
 8003418:	e014      	b.n	8003444 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341a:	f7fd f8eb 	bl	80005f4 <HAL_GetTick>
 800341e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003420:	e008      	b.n	8003434 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003422:	f7fd f8e7 	bl	80005f4 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b64      	cmp	r3, #100	; 0x64
 800342e:	d901      	bls.n	8003434 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e1bc      	b.n	80037ae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003434:	4b6b      	ldr	r3, [pc, #428]	; (80035e4 <HAL_RCC_OscConfig+0x2a4>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1f0      	bne.n	8003422 <HAL_RCC_OscConfig+0xe2>
 8003440:	e000      	b.n	8003444 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003442:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d063      	beq.n	8003518 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003450:	4b64      	ldr	r3, [pc, #400]	; (80035e4 <HAL_RCC_OscConfig+0x2a4>)
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f003 030c 	and.w	r3, r3, #12
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00b      	beq.n	8003474 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800345c:	4b61      	ldr	r3, [pc, #388]	; (80035e4 <HAL_RCC_OscConfig+0x2a4>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003464:	2b08      	cmp	r3, #8
 8003466:	d11c      	bne.n	80034a2 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003468:	4b5e      	ldr	r3, [pc, #376]	; (80035e4 <HAL_RCC_OscConfig+0x2a4>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d116      	bne.n	80034a2 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003474:	4b5b      	ldr	r3, [pc, #364]	; (80035e4 <HAL_RCC_OscConfig+0x2a4>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d005      	beq.n	800348c <HAL_RCC_OscConfig+0x14c>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d001      	beq.n	800348c <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e190      	b.n	80037ae <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800348c:	4b55      	ldr	r3, [pc, #340]	; (80035e4 <HAL_RCC_OscConfig+0x2a4>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	4952      	ldr	r1, [pc, #328]	; (80035e4 <HAL_RCC_OscConfig+0x2a4>)
 800349c:	4313      	orrs	r3, r2
 800349e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034a0:	e03a      	b.n	8003518 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d020      	beq.n	80034ec <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034aa:	4b4f      	ldr	r3, [pc, #316]	; (80035e8 <HAL_RCC_OscConfig+0x2a8>)
 80034ac:	2201      	movs	r2, #1
 80034ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b0:	f7fd f8a0 	bl	80005f4 <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034b8:	f7fd f89c 	bl	80005f4 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e171      	b.n	80037ae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ca:	4b46      	ldr	r3, [pc, #280]	; (80035e4 <HAL_RCC_OscConfig+0x2a4>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d0f0      	beq.n	80034b8 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d6:	4b43      	ldr	r3, [pc, #268]	; (80035e4 <HAL_RCC_OscConfig+0x2a4>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	493f      	ldr	r1, [pc, #252]	; (80035e4 <HAL_RCC_OscConfig+0x2a4>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	600b      	str	r3, [r1, #0]
 80034ea:	e015      	b.n	8003518 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ec:	4b3e      	ldr	r3, [pc, #248]	; (80035e8 <HAL_RCC_OscConfig+0x2a8>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f2:	f7fd f87f 	bl	80005f4 <HAL_GetTick>
 80034f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034f8:	e008      	b.n	800350c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034fa:	f7fd f87b 	bl	80005f4 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e150      	b.n	80037ae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800350c:	4b35      	ldr	r3, [pc, #212]	; (80035e4 <HAL_RCC_OscConfig+0x2a4>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1f0      	bne.n	80034fa <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0308 	and.w	r3, r3, #8
 8003520:	2b00      	cmp	r3, #0
 8003522:	d030      	beq.n	8003586 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d016      	beq.n	800355a <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800352c:	4b2f      	ldr	r3, [pc, #188]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 800352e:	2201      	movs	r2, #1
 8003530:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003532:	f7fd f85f 	bl	80005f4 <HAL_GetTick>
 8003536:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003538:	e008      	b.n	800354c <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800353a:	f7fd f85b 	bl	80005f4 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e130      	b.n	80037ae <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800354c:	4b25      	ldr	r3, [pc, #148]	; (80035e4 <HAL_RCC_OscConfig+0x2a4>)
 800354e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d0f0      	beq.n	800353a <HAL_RCC_OscConfig+0x1fa>
 8003558:	e015      	b.n	8003586 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800355a:	4b24      	ldr	r3, [pc, #144]	; (80035ec <HAL_RCC_OscConfig+0x2ac>)
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003560:	f7fd f848 	bl	80005f4 <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003568:	f7fd f844 	bl	80005f4 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e119      	b.n	80037ae <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800357a:	4b1a      	ldr	r3, [pc, #104]	; (80035e4 <HAL_RCC_OscConfig+0x2a4>)
 800357c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1f0      	bne.n	8003568 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0304 	and.w	r3, r3, #4
 800358e:	2b00      	cmp	r3, #0
 8003590:	f000 809f 	beq.w	80036d2 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003594:	2300      	movs	r3, #0
 8003596:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003598:	4b12      	ldr	r3, [pc, #72]	; (80035e4 <HAL_RCC_OscConfig+0x2a4>)
 800359a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10f      	bne.n	80035c4 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035a4:	2300      	movs	r3, #0
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	4b0e      	ldr	r3, [pc, #56]	; (80035e4 <HAL_RCC_OscConfig+0x2a4>)
 80035aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ac:	4a0d      	ldr	r2, [pc, #52]	; (80035e4 <HAL_RCC_OscConfig+0x2a4>)
 80035ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035b2:	6413      	str	r3, [r2, #64]	; 0x40
 80035b4:	4b0b      	ldr	r3, [pc, #44]	; (80035e4 <HAL_RCC_OscConfig+0x2a4>)
 80035b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035bc:	60fb      	str	r3, [r7, #12]
 80035be:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80035c0:	2301      	movs	r3, #1
 80035c2:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c4:	4b0a      	ldr	r3, [pc, #40]	; (80035f0 <HAL_RCC_OscConfig+0x2b0>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d120      	bne.n	8003612 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035d0:	4b07      	ldr	r3, [pc, #28]	; (80035f0 <HAL_RCC_OscConfig+0x2b0>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a06      	ldr	r2, [pc, #24]	; (80035f0 <HAL_RCC_OscConfig+0x2b0>)
 80035d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035dc:	f7fd f80a 	bl	80005f4 <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e2:	e010      	b.n	8003606 <HAL_RCC_OscConfig+0x2c6>
 80035e4:	40023800 	.word	0x40023800
 80035e8:	42470000 	.word	0x42470000
 80035ec:	42470e80 	.word	0x42470e80
 80035f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035f4:	f7fc fffe 	bl	80005f4 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e0d3      	b.n	80037ae <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003606:	4b6c      	ldr	r3, [pc, #432]	; (80037b8 <HAL_RCC_OscConfig+0x478>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0f0      	beq.n	80035f4 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d106      	bne.n	8003628 <HAL_RCC_OscConfig+0x2e8>
 800361a:	4b68      	ldr	r3, [pc, #416]	; (80037bc <HAL_RCC_OscConfig+0x47c>)
 800361c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361e:	4a67      	ldr	r2, [pc, #412]	; (80037bc <HAL_RCC_OscConfig+0x47c>)
 8003620:	f043 0301 	orr.w	r3, r3, #1
 8003624:	6713      	str	r3, [r2, #112]	; 0x70
 8003626:	e01c      	b.n	8003662 <HAL_RCC_OscConfig+0x322>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	2b05      	cmp	r3, #5
 800362e:	d10c      	bne.n	800364a <HAL_RCC_OscConfig+0x30a>
 8003630:	4b62      	ldr	r3, [pc, #392]	; (80037bc <HAL_RCC_OscConfig+0x47c>)
 8003632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003634:	4a61      	ldr	r2, [pc, #388]	; (80037bc <HAL_RCC_OscConfig+0x47c>)
 8003636:	f043 0304 	orr.w	r3, r3, #4
 800363a:	6713      	str	r3, [r2, #112]	; 0x70
 800363c:	4b5f      	ldr	r3, [pc, #380]	; (80037bc <HAL_RCC_OscConfig+0x47c>)
 800363e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003640:	4a5e      	ldr	r2, [pc, #376]	; (80037bc <HAL_RCC_OscConfig+0x47c>)
 8003642:	f043 0301 	orr.w	r3, r3, #1
 8003646:	6713      	str	r3, [r2, #112]	; 0x70
 8003648:	e00b      	b.n	8003662 <HAL_RCC_OscConfig+0x322>
 800364a:	4b5c      	ldr	r3, [pc, #368]	; (80037bc <HAL_RCC_OscConfig+0x47c>)
 800364c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364e:	4a5b      	ldr	r2, [pc, #364]	; (80037bc <HAL_RCC_OscConfig+0x47c>)
 8003650:	f023 0301 	bic.w	r3, r3, #1
 8003654:	6713      	str	r3, [r2, #112]	; 0x70
 8003656:	4b59      	ldr	r3, [pc, #356]	; (80037bc <HAL_RCC_OscConfig+0x47c>)
 8003658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365a:	4a58      	ldr	r2, [pc, #352]	; (80037bc <HAL_RCC_OscConfig+0x47c>)
 800365c:	f023 0304 	bic.w	r3, r3, #4
 8003660:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d015      	beq.n	8003696 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800366a:	f7fc ffc3 	bl	80005f4 <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003670:	e00a      	b.n	8003688 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003672:	f7fc ffbf 	bl	80005f4 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003680:	4293      	cmp	r3, r2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e092      	b.n	80037ae <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003688:	4b4c      	ldr	r3, [pc, #304]	; (80037bc <HAL_RCC_OscConfig+0x47c>)
 800368a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d0ee      	beq.n	8003672 <HAL_RCC_OscConfig+0x332>
 8003694:	e014      	b.n	80036c0 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003696:	f7fc ffad 	bl	80005f4 <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800369c:	e00a      	b.n	80036b4 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800369e:	f7fc ffa9 	bl	80005f4 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d901      	bls.n	80036b4 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e07c      	b.n	80037ae <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036b4:	4b41      	ldr	r3, [pc, #260]	; (80037bc <HAL_RCC_OscConfig+0x47c>)
 80036b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1ee      	bne.n	800369e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036c0:	7dfb      	ldrb	r3, [r7, #23]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d105      	bne.n	80036d2 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036c6:	4b3d      	ldr	r3, [pc, #244]	; (80037bc <HAL_RCC_OscConfig+0x47c>)
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	4a3c      	ldr	r2, [pc, #240]	; (80037bc <HAL_RCC_OscConfig+0x47c>)
 80036cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d068      	beq.n	80037ac <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036da:	4b38      	ldr	r3, [pc, #224]	; (80037bc <HAL_RCC_OscConfig+0x47c>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 030c 	and.w	r3, r3, #12
 80036e2:	2b08      	cmp	r3, #8
 80036e4:	d060      	beq.n	80037a8 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d145      	bne.n	800377a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ee:	4b34      	ldr	r3, [pc, #208]	; (80037c0 <HAL_RCC_OscConfig+0x480>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f4:	f7fc ff7e 	bl	80005f4 <HAL_GetTick>
 80036f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036fa:	e008      	b.n	800370e <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036fc:	f7fc ff7a 	bl	80005f4 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b02      	cmp	r3, #2
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e04f      	b.n	80037ae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800370e:	4b2b      	ldr	r3, [pc, #172]	; (80037bc <HAL_RCC_OscConfig+0x47c>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1f0      	bne.n	80036fc <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	69da      	ldr	r2, [r3, #28]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	431a      	orrs	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003728:	019b      	lsls	r3, r3, #6
 800372a:	431a      	orrs	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003730:	085b      	lsrs	r3, r3, #1
 8003732:	3b01      	subs	r3, #1
 8003734:	041b      	lsls	r3, r3, #16
 8003736:	431a      	orrs	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373c:	061b      	lsls	r3, r3, #24
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003744:	071b      	lsls	r3, r3, #28
 8003746:	491d      	ldr	r1, [pc, #116]	; (80037bc <HAL_RCC_OscConfig+0x47c>)
 8003748:	4313      	orrs	r3, r2
 800374a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800374c:	4b1c      	ldr	r3, [pc, #112]	; (80037c0 <HAL_RCC_OscConfig+0x480>)
 800374e:	2201      	movs	r2, #1
 8003750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003752:	f7fc ff4f 	bl	80005f4 <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003758:	e008      	b.n	800376c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800375a:	f7fc ff4b 	bl	80005f4 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d901      	bls.n	800376c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e020      	b.n	80037ae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800376c:	4b13      	ldr	r3, [pc, #76]	; (80037bc <HAL_RCC_OscConfig+0x47c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d0f0      	beq.n	800375a <HAL_RCC_OscConfig+0x41a>
 8003778:	e018      	b.n	80037ac <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800377a:	4b11      	ldr	r3, [pc, #68]	; (80037c0 <HAL_RCC_OscConfig+0x480>)
 800377c:	2200      	movs	r2, #0
 800377e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003780:	f7fc ff38 	bl	80005f4 <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003788:	f7fc ff34 	bl	80005f4 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e009      	b.n	80037ae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800379a:	4b08      	ldr	r3, [pc, #32]	; (80037bc <HAL_RCC_OscConfig+0x47c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1f0      	bne.n	8003788 <HAL_RCC_OscConfig+0x448>
 80037a6:	e001      	b.n	80037ac <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e000      	b.n	80037ae <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3718      	adds	r7, #24
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	40007000 	.word	0x40007000
 80037bc:	40023800 	.word	0x40023800
 80037c0:	42470060 	.word	0x42470060

080037c4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e01d      	b.n	8003812 <HAL_SD_Init+0x4e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d105      	bne.n	80037ee <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f006 ff87 	bl	800a6fc <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2203      	movs	r2, #3
 80037f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f810 	bl	800381c <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
	...

0800381c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800381c:	b5b0      	push	{r4, r5, r7, lr}
 800381e:	b08e      	sub	sp, #56	; 0x38
 8003820:	af04      	add	r7, sp, #16
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003824:	2300      	movs	r3, #0
 8003826:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003828:	2300      	movs	r3, #0
 800382a:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800382c:	2300      	movs	r3, #0
 800382e:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003830:	2300      	movs	r3, #0
 8003832:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003834:	2300      	movs	r3, #0
 8003836:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003838:	2300      	movs	r3, #0
 800383a:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800383c:	2376      	movs	r3, #118	; 0x76
 800383e:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681d      	ldr	r5, [r3, #0]
 8003844:	466c      	mov	r4, sp
 8003846:	f107 0318 	add.w	r3, r7, #24
 800384a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800384e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003852:	f107 030c 	add.w	r3, r7, #12
 8003856:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003858:	4628      	mov	r0, r5
 800385a:	f001 fd2f 	bl	80052bc <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd); 
 800385e:	4b1c      	ldr	r3, [pc, #112]	; (80038d0 <HAL_SD_InitCard+0xb4>)
 8003860:	2200      	movs	r2, #0
 8003862:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4618      	mov	r0, r3
 800386a:	f001 fd70 	bl	800534e <SDIO_PowerState_ON>
  
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800386e:	4b18      	ldr	r3, [pc, #96]	; (80038d0 <HAL_SD_InitCard+0xb4>)
 8003870:	2201      	movs	r2, #1
 8003872:	601a      	str	r2, [r3, #0]
  
  /* Required power up waiting time before starting the SD initialization 
  sequence */
  HAL_Delay(2U);
 8003874:	2002      	movs	r0, #2
 8003876:	f7fc fec9 	bl	800060c <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 fee6 	bl	800464c <SD_PowerON>
 8003880:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8003882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00b      	beq.n	80038a0 <HAL_SD_InitCard+0x84>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003896:	431a      	orrs	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e013      	b.n	80038c8 <HAL_SD_InitCard+0xac>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 fe0a 	bl	80044ba <SD_InitCard>
 80038a6:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80038a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00b      	beq.n	80038c6 <HAL_SD_InitCard+0xaa>
  {
    hsd->State = HAL_SD_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038bc:	431a      	orrs	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e000      	b.n	80038c8 <HAL_SD_InitCard+0xac>
  }

  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3728      	adds	r7, #40	; 0x28
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bdb0      	pop	{r4, r5, r7, pc}
 80038d0:	422580a0 	.word	0x422580a0

080038d4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80038d4:	b590      	push	{r4, r7, lr}
 80038d6:	b08f      	sub	sp, #60	; 0x3c
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
 80038e0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80038e2:	2300      	movs	r3, #0
 80038e4:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 80038e6:	f7fc fe85 	bl	80005f4 <HAL_GetTick>
 80038ea:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0U, *tempbuff = (uint32_t *)pData;
 80038ec:	2300      	movs	r3, #0
 80038ee:	633b      	str	r3, [r7, #48]	; 0x30
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d107      	bne.n	800390a <HAL_SD_ReadBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e176      	b.n	8003bf8 <HAL_SD_ReadBlocks+0x324>
  }
 
  if(hsd->State == HAL_SD_STATE_READY)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b01      	cmp	r3, #1
 8003914:	f040 8169 	bne.w	8003bea <HAL_SD_ReadBlocks+0x316>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	441a      	add	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003928:	429a      	cmp	r2, r3
 800392a:	d907      	bls.n	800393c <HAL_SD_ReadBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003930:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e15d      	b.n	8003bf8 <HAL_SD_ReadBlocks+0x324>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2203      	movs	r2, #3
 8003940:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2200      	movs	r2, #0
 800394a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003950:	2b01      	cmp	r3, #1
 8003952:	d002      	beq.n	800395a <HAL_SD_ReadBlocks+0x86>
    {
      BlockAdd *= 512U;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	025b      	lsls	r3, r3, #9
 8003958:	607b      	str	r3, [r7, #4]
    }
      
    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003962:	4618      	mov	r0, r3
 8003964:	f001 fd87 	bl	8005476 <SDMMC_CmdBlockLength>
 8003968:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 800396a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800396c:	2b00      	cmp	r3, #0
 800396e:	d010      	beq.n	8003992 <HAL_SD_ReadBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);      
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003978:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800397e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003980:	431a      	orrs	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e132      	b.n	8003bf8 <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003992:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003996:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	025b      	lsls	r3, r3, #9
 800399c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800399e:	2390      	movs	r3, #144	; 0x90
 80039a0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80039a2:	2302      	movs	r3, #2
 80039a4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80039a6:	2300      	movs	r3, #0
 80039a8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 80039aa:	2301      	movs	r3, #1
 80039ac:	627b      	str	r3, [r7, #36]	; 0x24
    SDIO_ConfigData(hsd->Instance, &config);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f107 0210 	add.w	r2, r7, #16
 80039b6:	4611      	mov	r1, r2
 80039b8:	4618      	mov	r0, r3
 80039ba:	f001 fd30 	bl	800541e <SDIO_ConfigData>
    
    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d90a      	bls.n	80039da <HAL_SD_ReadBlocks+0x106>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2202      	movs	r2, #2
 80039c8:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	6879      	ldr	r1, [r7, #4]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f001 fd98 	bl	8005506 <SDMMC_CmdReadMultiBlock>
 80039d6:	6378      	str	r0, [r7, #52]	; 0x34
 80039d8:	e009      	b.n	80039ee <HAL_SD_ReadBlocks+0x11a>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2201      	movs	r2, #1
 80039de:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6879      	ldr	r1, [r7, #4]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f001 fd69 	bl	80054be <SDMMC_CmdReadSingleBlock>
 80039ec:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80039ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d04a      	beq.n	8003a8a <HAL_SD_ReadBlocks+0x1b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80039fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a04:	431a      	orrs	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e0f0      	b.n	8003bf8 <HAL_SD_ReadBlocks+0x324>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d016      	beq.n	8003a52 <HAL_SD_ReadBlocks+0x17e>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003a24:	2300      	movs	r3, #0
 8003a26:	633b      	str	r3, [r7, #48]	; 0x30
 8003a28:	e00d      	b.n	8003a46 <HAL_SD_ReadBlocks+0x172>
        {
          *(tempbuff + count) = SDIO_ReadFIFO(hsd->Instance);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6819      	ldr	r1, [r3, #0]
 8003a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a34:	18d4      	adds	r4, r2, r3
 8003a36:	4608      	mov	r0, r1
 8003a38:	f001 fc6b 	bl	8005312 <SDIO_ReadFIFO>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	6023      	str	r3, [r4, #0]
        for(count = 0U; count < 8U; count++)
 8003a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a42:	3301      	adds	r3, #1
 8003a44:	633b      	str	r3, [r7, #48]	; 0x30
 8003a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a48:	2b07      	cmp	r3, #7
 8003a4a:	d9ee      	bls.n	8003a2a <HAL_SD_ReadBlocks+0x156>
        }
        tempbuff += 8U;
 8003a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a4e:	3320      	adds	r3, #32
 8003a50:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8003a52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d007      	beq.n	8003a68 <HAL_SD_ReadBlocks+0x194>
 8003a58:	f7fc fdcc 	bl	80005f4 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d810      	bhi.n	8003a8a <HAL_SD_ReadBlocks+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003a70:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a76:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e0b6      	b.n	8003bf8 <HAL_SD_ReadBlocks+0x324>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a90:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d0be      	beq.n	8003a16 <HAL_SD_ReadBlocks+0x142>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d020      	beq.n	8003ae8 <HAL_SD_ReadBlocks+0x214>
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d91d      	bls.n	8003ae8 <HAL_SD_ReadBlocks+0x214>
    {    
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab0:	2b03      	cmp	r3, #3
 8003ab2:	d019      	beq.n	8003ae8 <HAL_SD_ReadBlocks+0x214>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f001 fd91 	bl	80055e0 <SDMMC_CmdStopTransfer>
 8003abe:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8003ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d010      	beq.n	8003ae8 <HAL_SD_ReadBlocks+0x214>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003ace:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e087      	b.n	8003bf8 <HAL_SD_ReadBlocks+0x324>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aee:	f003 0308 	and.w	r3, r3, #8
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d010      	beq.n	8003b18 <HAL_SD_ReadBlocks+0x244>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003afe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b04:	f043 0208 	orr.w	r2, r3, #8
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e06f      	b.n	8003bf8 <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d010      	beq.n	8003b48 <HAL_SD_ReadBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003b2e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b34:	f043 0202 	orr.w	r2, r3, #2
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e057      	b.n	8003bf8 <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b4e:	f003 0320 	and.w	r3, r3, #32
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d037      	beq.n	8003bc6 <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003b5e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b64:	f043 0220 	orr.w	r2, r3, #32
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e03f      	b.n	8003bf8 <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
    {
      *tempbuff = SDIO_ReadFIFO(hsd->Instance);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f001 fbc8 	bl	8005312 <SDIO_ReadFIFO>
 8003b82:	4602      	mov	r2, r0
 8003b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b86:	601a      	str	r2, [r3, #0]
      tempbuff++;
 8003b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8a:	3304      	adds	r3, #4
 8003b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8003b8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d007      	beq.n	8003ba4 <HAL_SD_ReadBlocks+0x2d0>
 8003b94:	f7fc fd2e 	bl	80005f4 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d810      	bhi.n	8003bc6 <HAL_SD_ReadBlocks+0x2f2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);        
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003bac:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e018      	b.n	8003bf8 <HAL_SD_ReadBlocks+0x324>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1d1      	bne.n	8003b78 <HAL_SD_ReadBlocks+0x2a4>
      }
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003bdc:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8003be6:	2300      	movs	r3, #0
 8003be8:	e006      	b.n	8003bf8 <HAL_SD_ReadBlocks+0x324>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
  }
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	373c      	adds	r7, #60	; 0x3c
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd90      	pop	{r4, r7, pc}

08003c00 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b08e      	sub	sp, #56	; 0x38
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
 8003c0c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 8003c12:	f7fc fcef 	bl	80005f4 <HAL_GetTick>
 8003c16:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0U;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t *tempbuff = (uint32_t *)pData;
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d107      	bne.n	8003c36 <HAL_SD_WriteBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e147      	b.n	8003ec6 <HAL_SD_WriteBlocks+0x2c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	f040 813a 	bne.w	8003eb8 <HAL_SD_WriteBlocks+0x2b8>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	441a      	add	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d907      	bls.n	8003c68 <HAL_SD_WriteBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e12e      	b.n	8003ec6 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2203      	movs	r2, #3
 8003c6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2200      	movs	r2, #0
 8003c76:	62da      	str	r2, [r3, #44]	; 0x2c
     
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d002      	beq.n	8003c86 <HAL_SD_WriteBlocks+0x86>
    {
      BlockAdd *= 512U;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	025b      	lsls	r3, r3, #9
 8003c84:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f001 fbf1 	bl	8005476 <SDMMC_CmdBlockLength>
 8003c94:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d010      	beq.n	8003cbe <HAL_SD_WriteBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003ca4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cac:	431a      	orrs	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e103      	b.n	8003ec6 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d90a      	bls.n	8003cda <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f001 fc60 	bl	8005596 <SDMMC_CmdWriteMultiBlock>
 8003cd6:	6378      	str	r0, [r7, #52]	; 0x34
 8003cd8:	e009      	b.n	8003cee <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2210      	movs	r2, #16
 8003cde:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6879      	ldr	r1, [r7, #4]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f001 fc31 	bl	800554e <SDMMC_CmdWriteSingleBlock>
 8003cec:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d010      	beq.n	8003d16 <HAL_SD_WriteBlocks+0x116>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003cfc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d04:	431a      	orrs	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e0d7      	b.n	8003ec6 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003d16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d1a:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	025b      	lsls	r3, r3, #9
 8003d20:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003d22:	2390      	movs	r3, #144	; 0x90
 8003d24:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003d26:	2300      	movs	r3, #0
 8003d28:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	627b      	str	r3, [r7, #36]	; 0x24
    SDIO_ConfigData(hsd->Instance, &config);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f107 0210 	add.w	r2, r7, #16
 8003d3a:	4611      	mov	r1, r2
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f001 fb6e 	bl	800541e <SDIO_ConfigData>
    
    /* Write block(s) in polling mode */
#ifdef SDIO_STA_STBITERR
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003d42:	e037      	b.n	8003db4 <HAL_SD_WriteBlocks+0x1b4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d014      	beq.n	8003d7c <HAL_SD_WriteBlocks+0x17c>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003d52:	2300      	movs	r3, #0
 8003d54:	633b      	str	r3, [r7, #48]	; 0x30
 8003d56:	e00b      	b.n	8003d70 <HAL_SD_WriteBlocks+0x170>
        {
          SDIO_WriteFIFO(hsd->Instance, (tempbuff + count));
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6818      	ldr	r0, [r3, #0]
 8003d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d62:	4413      	add	r3, r2
 8003d64:	4619      	mov	r1, r3
 8003d66:	f001 fae1 	bl	800532c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	633b      	str	r3, [r7, #48]	; 0x30
 8003d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d72:	2b07      	cmp	r3, #7
 8003d74:	d9f0      	bls.n	8003d58 <HAL_SD_WriteBlocks+0x158>
        }
        tempbuff += 8U;
 8003d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d78:	3320      	adds	r3, #32
 8003d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8003d7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d007      	beq.n	8003d92 <HAL_SD_WriteBlocks+0x192>
 8003d82:	f7fc fc37 	bl	80005f4 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d810      	bhi.n	8003db4 <HAL_SD_WriteBlocks+0x1b4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003d9a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003da2:	431a      	orrs	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e088      	b.n	8003ec6 <HAL_SD_WriteBlocks+0x2c6>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dba:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d0c0      	beq.n	8003d44 <HAL_SD_WriteBlocks+0x144>
      }
    }
    
    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d020      	beq.n	8003e12 <HAL_SD_WriteBlocks+0x212>
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d91d      	bls.n	8003e12 <HAL_SD_WriteBlocks+0x212>
    { 
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dda:	2b03      	cmp	r3, #3
 8003ddc:	d019      	beq.n	8003e12 <HAL_SD_WriteBlocks+0x212>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f001 fbfc 	bl	80055e0 <SDMMC_CmdStopTransfer>
 8003de8:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8003dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d010      	beq.n	8003e12 <HAL_SD_WriteBlocks+0x212>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003df8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e00:	431a      	orrs	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e059      	b.n	8003ec6 <HAL_SD_WriteBlocks+0x2c6>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e18:	f003 0308 	and.w	r3, r3, #8
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d010      	beq.n	8003e42 <HAL_SD_WriteBlocks+0x242>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003e28:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2e:	f043 0208 	orr.w	r2, r3, #8
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e041      	b.n	8003ec6 <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d010      	beq.n	8003e72 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003e58:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5e:	f043 0202 	orr.w	r2, r3, #2
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e029      	b.n	8003ec6 <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e78:	f003 0310 	and.w	r3, r3, #16
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d010      	beq.n	8003ea2 <HAL_SD_WriteBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003e88:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8e:	f043 0210 	orr.w	r2, r3, #16
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e011      	b.n	8003ec6 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003eaa:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	e006      	b.n	8003ec6 <HAL_SD_WriteBlocks+0x2c6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
  }
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3738      	adds	r7, #56	; 0x38
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b085      	sub	sp, #20
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
 8003ed6:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ee0:	0e1b      	lsrs	r3, r3, #24
 8003ee2:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	099b      	lsrs	r3, r3, #6
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	f003 0303 	and.w	r3, r3, #3
 8003eee:	b2da      	uxtb	r2, r3
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	089b      	lsrs	r3, r3, #2
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	f003 030f 	and.w	r3, r3, #15
 8003efe:	b2da      	uxtb	r2, r3
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	f003 0303 	and.w	r3, r3, #3
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f16:	0c1b      	lsrs	r3, r3, #16
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	b2da      	uxtb	r2, r3
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f28:	0a1b      	lsrs	r3, r3, #8
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	b2da      	uxtb	r2, r3
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	b2da      	uxtb	r2, r3
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f4a:	0e1b      	lsrs	r3, r3, #24
 8003f4c:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	011b      	lsls	r3, r3, #4
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f5e:	0c1b      	lsrs	r3, r3, #16
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	88db      	ldrh	r3, [r3, #6]
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	091b      	lsrs	r3, r3, #4
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	f003 030f 	and.w	r3, r3, #15
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	4313      	orrs	r3, r2
 8003f78:	b29a      	uxth	r2, r3
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	f003 030f 	and.w	r3, r3, #15
 8003f86:	b2da      	uxtb	r2, r3
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f90:	0a1b      	lsrs	r3, r3, #8
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	09db      	lsrs	r3, r3, #7
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	099b      	lsrs	r3, r3, #6
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	095b      	lsrs	r3, r3, #5
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	091b      	lsrs	r3, r3, #4
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f040 8087 	bne.w	80040f4 <HAL_SD_GetCardCSD+0x226>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	029b      	lsls	r3, r3, #10
 8003fea:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2U;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	691a      	ldr	r2, [r3, #16]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	431a      	orrs	r2, r3
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800400c:	0e1b      	lsrs	r3, r3, #24
 800400e:	b2db      	uxtb	r3, r3
 8004010:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	691a      	ldr	r2, [r3, #16]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	099b      	lsrs	r3, r3, #6
 800401a:	f003 0303 	and.w	r3, r3, #3
 800401e:	431a      	orrs	r2, r3
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	08db      	lsrs	r3, r3, #3
 8004028:	b2db      	uxtb	r3, r3
 800402a:	f003 0307 	and.w	r3, r3, #7
 800402e:	b2da      	uxtb	r2, r3
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	b2db      	uxtb	r3, r3
 8004038:	f003 0307 	and.w	r3, r3, #7
 800403c:	b2da      	uxtb	r2, r3
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004046:	0c1b      	lsrs	r3, r3, #16
 8004048:	b2db      	uxtb	r3, r3
 800404a:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	095b      	lsrs	r3, r3, #5
 8004050:	b2db      	uxtb	r3, r3
 8004052:	f003 0307 	and.w	r3, r3, #7
 8004056:	b2da      	uxtb	r2, r3
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	089b      	lsrs	r3, r3, #2
 8004060:	b2db      	uxtb	r3, r3
 8004062:	f003 0307 	and.w	r3, r3, #7
 8004066:	b2da      	uxtb	r2, r3
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	b2db      	uxtb	r3, r3
 8004070:	005b      	lsls	r3, r3, #1
 8004072:	b2db      	uxtb	r3, r3
 8004074:	f003 0306 	and.w	r3, r3, #6
 8004078:	b2da      	uxtb	r2, r3
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004082:	0a1b      	lsrs	r3, r3, #8
 8004084:	b2db      	uxtb	r3, r3
 8004086:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	7e1b      	ldrb	r3, [r3, #24]
 800408c:	b2da      	uxtb	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	09db      	lsrs	r3, r3, #7
 8004092:	b2db      	uxtb	r3, r3
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	b2db      	uxtb	r3, r3
 800409a:	4313      	orrs	r3, r2
 800409c:	b2da      	uxtb	r2, r3
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	1c5a      	adds	r2, r3, #1
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	7e1b      	ldrb	r3, [r3, #24]
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	3302      	adds	r3, #2
 80040b4:	2201      	movs	r2, #1
 80040b6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80040be:	fb02 f203 	mul.w	r2, r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	7a1b      	ldrb	r3, [r3, #8]
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	461a      	mov	r2, r3
 80040ce:	2301      	movs	r3, #1
 80040d0:	fa03 f202 	lsl.w	r2, r3, r2
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80040e0:	0a52      	lsrs	r2, r2, #9
 80040e2:	fb02 f203 	mul.w	r2, r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040f0:	661a      	str	r2, [r3, #96]	; 0x60
 80040f2:	e04d      	b.n	8004190 <HAL_SD_GetCardCSD+0x2c2>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d138      	bne.n	800416e <HAL_SD_GetCardCSD+0x2a0>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004100:	b2db      	uxtb	r3, r3
 8004102:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	041b      	lsls	r3, r3, #16
 8004108:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004114:	0e1b      	lsrs	r3, r3, #24
 8004116:	b2db      	uxtb	r3, r3
 8004118:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8U);
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	691a      	ldr	r2, [r3, #16]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	021b      	lsls	r3, r3, #8
 8004122:	431a      	orrs	r2, r3
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800412c:	0c1b      	lsrs	r3, r3, #16
 800412e:	b2db      	uxtb	r3, r3
 8004130:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	691a      	ldr	r2, [r3, #16]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	431a      	orrs	r2, r3
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004142:	0a1b      	lsrs	r3, r3, #8
 8004144:	b2db      	uxtb	r3, r3
 8004146:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	3301      	adds	r3, #1
 800414e:	029a      	lsls	r2, r3, #10
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	655a      	str	r2, [r3, #84]	; 0x54
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004162:	659a      	str	r2, [r3, #88]	; 0x58
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	661a      	str	r2, [r3, #96]	; 0x60
 800416c:	e010      	b.n	8004190 <HAL_SD_GetCardCSD+0x2c2>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004176:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e0c1      	b.n	8004314 <HAL_SD_GetCardCSD+0x446>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	099b      	lsrs	r3, r3, #6
 8004194:	b2db      	uxtb	r3, r3
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	b2da      	uxtb	r2, r3
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80041ac:	b2da      	uxtb	r2, r3
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	7e9b      	ldrb	r3, [r3, #26]
 80041be:	b2da      	uxtb	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	09db      	lsrs	r3, r3, #7
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	4313      	orrs	r3, r2
 80041ce:	b2da      	uxtb	r2, r3
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e6:	0e1b      	lsrs	r3, r3, #24
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	09db      	lsrs	r3, r3, #7
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	b2da      	uxtb	r2, r3
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	095b      	lsrs	r3, r3, #5
 8004200:	b2db      	uxtb	r3, r3
 8004202:	f003 0303 	and.w	r3, r3, #3
 8004206:	b2da      	uxtb	r2, r3
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	089b      	lsrs	r3, r3, #2
 8004210:	b2db      	uxtb	r3, r3
 8004212:	f003 0307 	and.w	r3, r3, #7
 8004216:	b2da      	uxtb	r2, r3
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	b2db      	uxtb	r3, r3
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	b2db      	uxtb	r3, r3
 8004224:	f003 030c 	and.w	r3, r3, #12
 8004228:	b2da      	uxtb	r2, r3
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004232:	0c1b      	lsrs	r3, r3, #16
 8004234:	b2db      	uxtb	r3, r3
 8004236:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	7fdb      	ldrb	r3, [r3, #31]
 800423c:	b2da      	uxtb	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	099b      	lsrs	r3, r3, #6
 8004242:	b2db      	uxtb	r3, r3
 8004244:	f003 0303 	and.w	r3, r3, #3
 8004248:	b2db      	uxtb	r3, r3
 800424a:	4313      	orrs	r3, r2
 800424c:	b2da      	uxtb	r2, r3
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	095b      	lsrs	r3, r3, #5
 8004256:	b2db      	uxtb	r3, r3
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	b2da      	uxtb	r2, r3
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0U;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	b2db      	uxtb	r3, r3
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	b2da      	uxtb	r2, r3
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004280:	0a1b      	lsrs	r3, r3, #8
 8004282:	b2db      	uxtb	r3, r3
 8004284:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	09db      	lsrs	r3, r3, #7
 800428a:	b2db      	uxtb	r3, r3
 800428c:	f003 0301 	and.w	r3, r3, #1
 8004290:	b2da      	uxtb	r2, r3
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	099b      	lsrs	r3, r3, #6
 800429c:	b2db      	uxtb	r3, r3
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	095b      	lsrs	r3, r3, #5
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	b2da      	uxtb	r2, r3
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	091b      	lsrs	r3, r3, #4
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	b2da      	uxtb	r2, r3
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	089b      	lsrs	r3, r3, #2
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	f003 0303 	and.w	r3, r3, #3
 80042d8:	b2da      	uxtb	r2, r3
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	f003 0303 	and.w	r3, r3, #3
 80042e8:	b2da      	uxtb	r2, r3
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	085b      	lsrs	r3, r3, #1
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004302:	b2da      	uxtb	r2, r3
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3714      	adds	r7, #20
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004378:	b5b0      	push	{r4, r5, r7, lr}
 800437a:	b08e      	sub	sp, #56	; 0x38
 800437c:	af04      	add	r7, sp, #16
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004382:	2300      	movs	r3, #0
 8004384:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2203      	movs	r2, #3
 800438a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004392:	2b03      	cmp	r3, #3
 8004394:	d02e      	beq.n	80043f4 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800439c:	d106      	bne.n	80043ac <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	639a      	str	r2, [r3, #56]	; 0x38
 80043aa:	e029      	b.n	8004400 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043b2:	d10a      	bne.n	80043ca <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 fa1b 	bl	80047f0 <SD_WideBus_Enable>
 80043ba:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c2:	431a      	orrs	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	639a      	str	r2, [r3, #56]	; 0x38
 80043c8:	e01a      	b.n	8004400 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10a      	bne.n	80043e6 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 fa5a 	bl	800488a <SD_WideBus_Disable>
 80043d6:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043de:	431a      	orrs	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	639a      	str	r2, [r3, #56]	; 0x38
 80043e4:	e00c      	b.n	8004400 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	639a      	str	r2, [r3, #56]	; 0x38
 80043f2:	e005      	b.n	8004400 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00a      	beq.n	800441e <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004410:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e024      	b.n	8004468 <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	623b      	str	r3, [r7, #32]
    SDIO_Init(hsd->Instance, Init);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681d      	ldr	r5, [r3, #0]
 8004444:	466c      	mov	r4, sp
 8004446:	f107 0318 	add.w	r3, r7, #24
 800444a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800444e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004452:	f107 030c 	add.w	r3, r7, #12
 8004456:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004458:	4628      	mov	r0, r5
 800445a:	f000 ff2f 	bl	80052bc <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	3728      	adds	r7, #40	; 0x28
 800446c:	46bd      	mov	sp, r7
 800446e:	bdb0      	pop	{r4, r5, r7, pc}

08004470 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 8004478:	2304      	movs	r3, #4
 800447a:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800447c:	2300      	movs	r3, #0
 800447e:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 8004480:	2300      	movs	r3, #0
 8004482:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 8004484:	f107 030c 	add.w	r3, r7, #12
 8004488:	4619      	mov	r1, r3
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f986 	bl	800479c <SD_SendStatus>
 8004490:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d005      	beq.n	80044a4 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	431a      	orrs	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9U) & 0x0FU);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	0a5b      	lsrs	r3, r3, #9
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	f003 030f 	and.w	r3, r3, #15
 80044ae:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 80044b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3718      	adds	r7, #24
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80044ba:	b5b0      	push	{r4, r5, r7, lr}
 80044bc:	b094      	sub	sp, #80	; 0x50
 80044be:	af04      	add	r7, sp, #16
 80044c0:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80044c2:	2300      	movs	r3, #0
 80044c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1U;
 80044c6:	2301      	movs	r3, #1
 80044c8:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f000 ff4b 	bl	800536a <SDIO_GetPowerState>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d102      	bne.n	80044e0 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80044da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80044de:	e0b1      	b.n	8004644 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e4:	2b03      	cmp	r3, #3
 80044e6:	d02f      	beq.n	8004548 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f001 f991 	bl	8005814 <SDMMC_CmdSendCID>
 80044f2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80044f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <SD_InitCard+0x44>
    {
      return errorstate;
 80044fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044fc:	e0a2      	b.n	8004644 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2100      	movs	r1, #0
 8004504:	4618      	mov	r0, r3
 8004506:	f000 ff75 	bl	80053f4 <SDIO_GetResponse>
 800450a:	4602      	mov	r2, r0
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2104      	movs	r1, #4
 8004516:	4618      	mov	r0, r3
 8004518:	f000 ff6c 	bl	80053f4 <SDIO_GetResponse>
 800451c:	4602      	mov	r2, r0
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2108      	movs	r1, #8
 8004528:	4618      	mov	r0, r3
 800452a:	f000 ff63 	bl	80053f4 <SDIO_GetResponse>
 800452e:	4602      	mov	r2, r0
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	210c      	movs	r1, #12
 800453a:	4618      	mov	r0, r3
 800453c:	f000 ff5a 	bl	80053f4 <SDIO_GetResponse>
 8004540:	4602      	mov	r2, r0
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800454c:	2b03      	cmp	r3, #3
 800454e:	d00d      	beq.n	800456c <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f107 020e 	add.w	r2, r7, #14
 8004558:	4611      	mov	r1, r2
 800455a:	4618      	mov	r0, r3
 800455c:	f001 f99b 	bl	8005896 <SDMMC_CmdSetRelAdd>
 8004560:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004564:	2b00      	cmp	r3, #0
 8004566:	d001      	beq.n	800456c <SD_InitCard+0xb2>
    {
      return errorstate;
 8004568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800456a:	e06b      	b.n	8004644 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004570:	2b03      	cmp	r3, #3
 8004572:	d036      	beq.n	80045e2 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004574:	89fb      	ldrh	r3, [r7, #14]
 8004576:	461a      	mov	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004584:	041b      	lsls	r3, r3, #16
 8004586:	4619      	mov	r1, r3
 8004588:	4610      	mov	r0, r2
 800458a:	f001 f963 	bl	8005854 <SDMMC_CmdSendCSD>
 800458e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <SD_InitCard+0xe0>
    {
      return errorstate;
 8004596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004598:	e054      	b.n	8004644 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2100      	movs	r1, #0
 80045a0:	4618      	mov	r0, r3
 80045a2:	f000 ff27 	bl	80053f4 <SDIO_GetResponse>
 80045a6:	4602      	mov	r2, r0
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2104      	movs	r1, #4
 80045b2:	4618      	mov	r0, r3
 80045b4:	f000 ff1e 	bl	80053f4 <SDIO_GetResponse>
 80045b8:	4602      	mov	r2, r0
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2108      	movs	r1, #8
 80045c4:	4618      	mov	r0, r3
 80045c6:	f000 ff15 	bl	80053f4 <SDIO_GetResponse>
 80045ca:	4602      	mov	r2, r0
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	210c      	movs	r1, #12
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 ff0c 	bl	80053f4 <SDIO_GetResponse>
 80045dc:	4602      	mov	r2, r0
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2104      	movs	r1, #4
 80045e8:	4618      	mov	r0, r3
 80045ea:	f000 ff03 	bl	80053f4 <SDIO_GetResponse>
 80045ee:	4603      	mov	r3, r0
 80045f0:	0d1a      	lsrs	r2, r3, #20
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 80045f6:	f107 0310 	add.w	r3, r7, #16
 80045fa:	4619      	mov	r1, r3
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f7ff fc66 	bl	8003ece <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6819      	ldr	r1, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800460a:	041b      	lsls	r3, r3, #16
 800460c:	f04f 0400 	mov.w	r4, #0
 8004610:	461a      	mov	r2, r3
 8004612:	4623      	mov	r3, r4
 8004614:	4608      	mov	r0, r1
 8004616:	f001 f807 	bl	8005628 <SDMMC_CmdSelDesel>
 800461a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800461c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <SD_InitCard+0x16c>
  {
    return errorstate;
 8004622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004624:	e00e      	b.n	8004644 <SD_InitCard+0x18a>
  }

  /* Configure SDIO peripheral interface */     
  SDIO_Init(hsd->Instance, hsd->Init);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681d      	ldr	r5, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	466c      	mov	r4, sp
 800462e:	f103 0210 	add.w	r2, r3, #16
 8004632:	ca07      	ldmia	r2, {r0, r1, r2}
 8004634:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004638:	3304      	adds	r3, #4
 800463a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800463c:	4628      	mov	r0, r5
 800463e:	f000 fe3d 	bl	80052bc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3740      	adds	r7, #64	; 0x40
 8004648:	46bd      	mov	sp, r7
 800464a:	bdb0      	pop	{r4, r5, r7, pc}

0800464c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b086      	sub	sp, #24
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004654:	2300      	movs	r3, #0
 8004656:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004658:	2300      	movs	r3, #0
 800465a:	617b      	str	r3, [r7, #20]
 800465c:	2300      	movs	r3, #0
 800465e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004660:	2300      	movs	r3, #0
 8004662:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4618      	mov	r0, r3
 800466a:	f001 f802 	bl	8005672 <SDMMC_CmdGoIdleState>
 800466e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <SD_PowerON+0x2e>
  {
    return errorstate;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	e08c      	b.n	8004794 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4618      	mov	r0, r3
 8004680:	f001 f817 	bl	80056b2 <SDMMC_CmdOperCond>
 8004684:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d03d      	beq.n	8004708 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 8004692:	e032      	b.n	80046fa <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	1c5a      	adds	r2, r3, #1
 8004698:	60ba      	str	r2, [r7, #8]
 800469a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800469e:	4293      	cmp	r3, r2
 80046a0:	d102      	bne.n	80046a8 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80046a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046a6:	e075      	b.n	8004794 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2100      	movs	r1, #0
 80046ae:	4618      	mov	r0, r3
 80046b0:	f001 f820 	bl	80056f4 <SDMMC_CmdAppCommand>
 80046b4:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d002      	beq.n	80046c2 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80046bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80046c0:	e068      	b.n	8004794 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2100      	movs	r1, #0
 80046c8:	4618      	mov	r0, r3
 80046ca:	f001 f837 	bl	800573c <SDMMC_CmdAppOperCommand>
 80046ce:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d002      	beq.n	80046dc <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80046d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80046da:	e05b      	b.n	8004794 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2100      	movs	r1, #0
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 fe86 	bl	80053f4 <SDIO_GetResponse>
 80046e8:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	0fdb      	lsrs	r3, r3, #31
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d101      	bne.n	80046f6 <SD_PowerON+0xaa>
 80046f2:	2301      	movs	r3, #1
 80046f4:	e000      	b.n	80046f8 <SD_PowerON+0xac>
 80046f6:	2300      	movs	r3, #0
 80046f8:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d0c9      	beq.n	8004694 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	645a      	str	r2, [r3, #68]	; 0x44
 8004706:	e044      	b.n	8004792 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 800470e:	e031      	b.n	8004774 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	1c5a      	adds	r2, r3, #1
 8004714:	60ba      	str	r2, [r7, #8]
 8004716:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800471a:	4293      	cmp	r3, r2
 800471c:	d102      	bne.n	8004724 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800471e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004722:	e037      	b.n	8004794 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2100      	movs	r1, #0
 800472a:	4618      	mov	r0, r3
 800472c:	f000 ffe2 	bl	80056f4 <SDMMC_CmdAppCommand>
 8004730:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d001      	beq.n	800473c <SD_PowerON+0xf0>
      {
        return errorstate;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	e02b      	b.n	8004794 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004744:	4618      	mov	r0, r3
 8004746:	f000 fff9 	bl	800573c <SDMMC_CmdAppOperCommand>
 800474a:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <SD_PowerON+0x10a>
      {
        return errorstate;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	e01e      	b.n	8004794 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2100      	movs	r1, #0
 800475c:	4618      	mov	r0, r3
 800475e:	f000 fe49 	bl	80053f4 <SDIO_GetResponse>
 8004762:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	0fdb      	lsrs	r3, r3, #31
 8004768:	2b01      	cmp	r3, #1
 800476a:	d101      	bne.n	8004770 <SD_PowerON+0x124>
 800476c:	2301      	movs	r3, #1
 800476e:	e000      	b.n	8004772 <SD_PowerON+0x126>
 8004770:	2300      	movs	r3, #0
 8004772:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d0ca      	beq.n	8004710 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d003      	beq.n	800478c <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	645a      	str	r2, [r3, #68]	; 0x44
 800478a:	e002      	b.n	8004792 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3718      	adds	r7, #24
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80047a6:	2300      	movs	r3, #0
 80047a8:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d102      	bne.n	80047b6 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 80047b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047b4:	e018      	b.n	80047e8 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047be:	041b      	lsls	r3, r3, #16
 80047c0:	4619      	mov	r1, r3
 80047c2:	4610      	mov	r0, r2
 80047c4:	f001 f88a 	bl	80058dc <SDMMC_CmdSendStatus>
 80047c8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d001      	beq.n	80047d4 <SD_SendStatus+0x38>
  {
    return errorstate;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	e009      	b.n	80047e8 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2100      	movs	r1, #0
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 fe0a 	bl	80053f4 <SDIO_GetResponse>
 80047e0:	4602      	mov	r2, r0
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80047f8:	2300      	movs	r3, #0
 80047fa:	60fb      	str	r3, [r7, #12]
 80047fc:	2300      	movs	r3, #0
 80047fe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004800:	2300      	movs	r3, #0
 8004802:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2100      	movs	r1, #0
 800480a:	4618      	mov	r0, r3
 800480c:	f000 fdf2 	bl	80053f4 <SDIO_GetResponse>
 8004810:	4603      	mov	r3, r0
 8004812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004816:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800481a:	d102      	bne.n	8004822 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800481c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004820:	e02f      	b.n	8004882 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004822:	f107 030c 	add.w	r3, r7, #12
 8004826:	4619      	mov	r1, r3
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 f87b 	bl	8004924 <SD_FindSCR>
 800482e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	e023      	b.n	8004882 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d01c      	beq.n	800487e <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800484c:	041b      	lsls	r3, r3, #16
 800484e:	4619      	mov	r1, r3
 8004850:	4610      	mov	r0, r2
 8004852:	f000 ff4f 	bl	80056f4 <SDMMC_CmdAppCommand>
 8004856:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	e00f      	b.n	8004882 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2102      	movs	r1, #2
 8004868:	4618      	mov	r0, r3
 800486a:	f000 ff8c 	bl	8005786 <SDMMC_CmdBusWidth>
 800486e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	e003      	b.n	8004882 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 800487a:	2300      	movs	r3, #0
 800487c:	e001      	b.n	8004882 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800487e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004882:	4618      	mov	r0, r3
 8004884:	3718      	adds	r7, #24
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	b086      	sub	sp, #24
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004892:	2300      	movs	r3, #0
 8004894:	60fb      	str	r3, [r7, #12]
 8004896:	2300      	movs	r3, #0
 8004898:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800489a:	2300      	movs	r3, #0
 800489c:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2100      	movs	r1, #0
 80048a4:	4618      	mov	r0, r3
 80048a6:	f000 fda5 	bl	80053f4 <SDIO_GetResponse>
 80048aa:	4603      	mov	r3, r0
 80048ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048b4:	d102      	bne.n	80048bc <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80048b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80048ba:	e02f      	b.n	800491c <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80048bc:	f107 030c 	add.w	r3, r7, #12
 80048c0:	4619      	mov	r1, r3
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f82e 	bl	8004924 <SD_FindSCR>
 80048c8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d001      	beq.n	80048d4 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	e023      	b.n	800491c <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d01c      	beq.n	8004918 <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048e6:	041b      	lsls	r3, r3, #16
 80048e8:	4619      	mov	r1, r3
 80048ea:	4610      	mov	r0, r2
 80048ec:	f000 ff02 	bl	80056f4 <SDMMC_CmdAppCommand>
 80048f0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	e00f      	b.n	800491c <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2100      	movs	r1, #0
 8004902:	4618      	mov	r0, r3
 8004904:	f000 ff3f 	bl	8005786 <SDMMC_CmdBusWidth>
 8004908:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d001      	beq.n	8004914 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	e003      	b.n	800491c <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 8004914:	2300      	movs	r3, #0
 8004916:	e001      	b.n	800491c <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004918:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800491c:	4618      	mov	r0, r3
 800491e:	3718      	adds	r7, #24
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004924:	b590      	push	{r4, r7, lr}
 8004926:	b08f      	sub	sp, #60	; 0x3c
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800492e:	2300      	movs	r3, #0
 8004930:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8004932:	f7fb fe5f 	bl	80005f4 <HAL_GetTick>
 8004936:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0U;
 8004938:	2300      	movs	r3, #0
 800493a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800493c:	2300      	movs	r3, #0
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	2300      	movs	r3, #0
 8004942:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2108      	movs	r1, #8
 800494a:	4618      	mov	r0, r3
 800494c:	f000 fd93 	bl	8005476 <SDMMC_CmdBlockLength>
 8004950:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8004952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <SD_FindSCR+0x38>
  {
    return errorstate;
 8004958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495a:	e0a8      	b.n	8004aae <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004964:	041b      	lsls	r3, r3, #16
 8004966:	4619      	mov	r1, r3
 8004968:	4610      	mov	r0, r2
 800496a:	f000 fec3 	bl	80056f4 <SDMMC_CmdAppCommand>
 800496e:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8004970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004972:	2b00      	cmp	r3, #0
 8004974:	d001      	beq.n	800497a <SD_FindSCR+0x56>
  {
    return errorstate;
 8004976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004978:	e099      	b.n	8004aae <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800497a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800497e:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8U;
 8004980:	2308      	movs	r3, #8
 8004982:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004984:	2330      	movs	r3, #48	; 0x30
 8004986:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004988:	2302      	movs	r3, #2
 800498a:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800498c:	2300      	movs	r3, #0
 800498e:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004990:	2301      	movs	r3, #1
 8004992:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_ConfigData(hsd->Instance, &config);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f107 0214 	add.w	r2, r7, #20
 800499c:	4611      	mov	r1, r2
 800499e:	4618      	mov	r0, r3
 80049a0:	f000 fd3d 	bl	800541e <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4618      	mov	r0, r3
 80049aa:	f000 ff10 	bl	80057ce <SDMMC_CmdSendSCR>
 80049ae:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 80049b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d022      	beq.n	80049fc <SD_FindSCR+0xd8>
  {
    return errorstate;
 80049b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b8:	e079      	b.n	8004aae <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00e      	beq.n	80049e6 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6819      	ldr	r1, [r3, #0]
 80049cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	f107 020c 	add.w	r2, r7, #12
 80049d4:	18d4      	adds	r4, r2, r3
 80049d6:	4608      	mov	r0, r1
 80049d8:	f000 fc9b 	bl	8005312 <SDIO_ReadFIFO>
 80049dc:	4603      	mov	r3, r0
 80049de:	6023      	str	r3, [r4, #0]
      index++;
 80049e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049e2:	3301      	adds	r3, #1
 80049e4:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80049e6:	f7fb fe05 	bl	80005f4 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049f4:	d102      	bne.n	80049fc <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80049f6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80049fa:	e058      	b.n	8004aae <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a02:	f240 432a 	movw	r3, #1066	; 0x42a
 8004a06:	4013      	ands	r3, r2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d0d6      	beq.n	80049ba <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a12:	f003 0308 	and.w	r3, r3, #8
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d005      	beq.n	8004a26 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2208      	movs	r2, #8
 8004a20:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004a22:	2308      	movs	r3, #8
 8004a24:	e043      	b.n	8004aae <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a2c:	f003 0302 	and.w	r3, r3, #2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d005      	beq.n	8004a40 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2202      	movs	r2, #2
 8004a3a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	e036      	b.n	8004aae <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a46:	f003 0320 	and.w	r3, r3, #32
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d005      	beq.n	8004a5a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2220      	movs	r2, #32
 8004a54:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 8004a56:	2320      	movs	r3, #32
 8004a58:	e029      	b.n	8004aae <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004a62:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	061a      	lsls	r2, r3, #24
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	021b      	lsls	r3, r3, #8
 8004a6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a70:	431a      	orrs	r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	0a1b      	lsrs	r3, r3, #8
 8004a76:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8004a7a:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	3304      	adds	r3, #4
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8004a86:	430a      	orrs	r2, r1
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8004a88:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	061a      	lsls	r2, r3, #24
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	021b      	lsls	r3, r3, #8
 8004a92:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a96:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	0a1b      	lsrs	r3, r3, #8
 8004a9c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8004aa0:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	0e1b      	lsrs	r3, r3, #24
 8004aa6:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	373c      	adds	r7, #60	; 0x3c
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd90      	pop	{r4, r7, pc}

08004ab6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b082      	sub	sp, #8
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d101      	bne.n	8004ac8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e056      	b.n	8004b76 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d106      	bne.n	8004ae8 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f005 fea8 	bl	800a838 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2202      	movs	r2, #2
 8004aec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004afe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	431a      	orrs	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	431a      	orrs	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b24:	431a      	orrs	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a1b      	ldr	r3, [r3, #32]
 8004b30:	ea42 0103 	orr.w	r1, r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	0c1b      	lsrs	r3, r3, #16
 8004b46:	f003 0104 	and.w	r1, r3, #4
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	69da      	ldr	r2, [r3, #28]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3708      	adds	r7, #8
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b084      	sub	sp, #16
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	60f8      	str	r0, [r7, #12]
 8004b86:	60b9      	str	r1, [r7, #8]
 8004b88:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d101      	bne.n	8004b94 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e034      	b.n	8004bfe <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d106      	bne.n	8004bae <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f005 f973 	bl	8009e94 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	3308      	adds	r3, #8
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	4610      	mov	r0, r2
 8004bba:	f000 fa7b 	bl	80050b4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6818      	ldr	r0, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	68b9      	ldr	r1, [r7, #8]
 8004bca:	f000 fae3 	bl	8005194 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6858      	ldr	r0, [r3, #4]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	689a      	ldr	r2, [r3, #8]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bda:	6879      	ldr	r1, [r7, #4]
 8004bdc:	f000 fb2e 	bl	800523c <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	6892      	ldr	r2, [r2, #8]
 8004be8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	6892      	ldr	r2, [r2, #8]
 8004bf4:	f041 0101 	orr.w	r1, r1, #1
 8004bf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b082      	sub	sp, #8
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d101      	bne.n	8004c18 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e03f      	b.n	8004c98 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d106      	bne.n	8004c32 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f005 ff59 	bl	800aae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2224      	movs	r2, #36	; 0x24
 8004c36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68da      	ldr	r2, [r3, #12]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c48:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f828 	bl	8004ca0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	691a      	ldr	r2, [r3, #16]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c5e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	695a      	ldr	r2, [r3, #20]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c6e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68da      	ldr	r2, [r3, #12]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c7e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2220      	movs	r2, #32
 8004c92:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3708      	adds	r7, #8
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ca0:	b5b0      	push	{r4, r5, r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68da      	ldr	r2, [r3, #12]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	689a      	ldr	r2, [r3, #8]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	695b      	ldr	r3, [r3, #20]
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004ce0:	f023 030c 	bic.w	r3, r3, #12
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	6812      	ldr	r2, [r2, #0]
 8004ce8:	68f9      	ldr	r1, [r7, #12]
 8004cea:	430b      	orrs	r3, r1
 8004cec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	695b      	ldr	r3, [r3, #20]
 8004cf4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	699a      	ldr	r2, [r3, #24]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	69db      	ldr	r3, [r3, #28]
 8004d08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d0c:	f040 80e4 	bne.w	8004ed8 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4aab      	ldr	r2, [pc, #684]	; (8004fc4 <UART_SetConfig+0x324>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d004      	beq.n	8004d24 <UART_SetConfig+0x84>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4aaa      	ldr	r2, [pc, #680]	; (8004fc8 <UART_SetConfig+0x328>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d16c      	bne.n	8004dfe <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004d24:	f7fe f86c 	bl	8002e00 <HAL_RCC_GetPCLK2Freq>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	4413      	add	r3, r2
 8004d30:	009a      	lsls	r2, r3, #2
 8004d32:	441a      	add	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	005b      	lsls	r3, r3, #1
 8004d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d3e:	4aa3      	ldr	r2, [pc, #652]	; (8004fcc <UART_SetConfig+0x32c>)
 8004d40:	fba2 2303 	umull	r2, r3, r2, r3
 8004d44:	095b      	lsrs	r3, r3, #5
 8004d46:	011c      	lsls	r4, r3, #4
 8004d48:	f7fe f85a 	bl	8002e00 <HAL_RCC_GetPCLK2Freq>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	4613      	mov	r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	4413      	add	r3, r2
 8004d54:	009a      	lsls	r2, r3, #2
 8004d56:	441a      	add	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	005b      	lsls	r3, r3, #1
 8004d5e:	fbb2 f5f3 	udiv	r5, r2, r3
 8004d62:	f7fe f84d 	bl	8002e00 <HAL_RCC_GetPCLK2Freq>
 8004d66:	4602      	mov	r2, r0
 8004d68:	4613      	mov	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4413      	add	r3, r2
 8004d6e:	009a      	lsls	r2, r3, #2
 8004d70:	441a      	add	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	005b      	lsls	r3, r3, #1
 8004d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d7c:	4a93      	ldr	r2, [pc, #588]	; (8004fcc <UART_SetConfig+0x32c>)
 8004d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d82:	095b      	lsrs	r3, r3, #5
 8004d84:	2264      	movs	r2, #100	; 0x64
 8004d86:	fb02 f303 	mul.w	r3, r2, r3
 8004d8a:	1aeb      	subs	r3, r5, r3
 8004d8c:	00db      	lsls	r3, r3, #3
 8004d8e:	3332      	adds	r3, #50	; 0x32
 8004d90:	4a8e      	ldr	r2, [pc, #568]	; (8004fcc <UART_SetConfig+0x32c>)
 8004d92:	fba2 2303 	umull	r2, r3, r2, r3
 8004d96:	095b      	lsrs	r3, r3, #5
 8004d98:	005b      	lsls	r3, r3, #1
 8004d9a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d9e:	441c      	add	r4, r3
 8004da0:	f7fe f82e 	bl	8002e00 <HAL_RCC_GetPCLK2Freq>
 8004da4:	4602      	mov	r2, r0
 8004da6:	4613      	mov	r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4413      	add	r3, r2
 8004dac:	009a      	lsls	r2, r3, #2
 8004dae:	441a      	add	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	005b      	lsls	r3, r3, #1
 8004db6:	fbb2 f5f3 	udiv	r5, r2, r3
 8004dba:	f7fe f821 	bl	8002e00 <HAL_RCC_GetPCLK2Freq>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	4413      	add	r3, r2
 8004dc6:	009a      	lsls	r2, r3, #2
 8004dc8:	441a      	add	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd4:	4a7d      	ldr	r2, [pc, #500]	; (8004fcc <UART_SetConfig+0x32c>)
 8004dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dda:	095b      	lsrs	r3, r3, #5
 8004ddc:	2264      	movs	r2, #100	; 0x64
 8004dde:	fb02 f303 	mul.w	r3, r2, r3
 8004de2:	1aeb      	subs	r3, r5, r3
 8004de4:	00db      	lsls	r3, r3, #3
 8004de6:	3332      	adds	r3, #50	; 0x32
 8004de8:	4a78      	ldr	r2, [pc, #480]	; (8004fcc <UART_SetConfig+0x32c>)
 8004dea:	fba2 2303 	umull	r2, r3, r2, r3
 8004dee:	095b      	lsrs	r3, r3, #5
 8004df0:	f003 0207 	and.w	r2, r3, #7
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4422      	add	r2, r4
 8004dfa:	609a      	str	r2, [r3, #8]
 8004dfc:	e154      	b.n	80050a8 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004dfe:	f7fd ffeb 	bl	8002dd8 <HAL_RCC_GetPCLK1Freq>
 8004e02:	4602      	mov	r2, r0
 8004e04:	4613      	mov	r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4413      	add	r3, r2
 8004e0a:	009a      	lsls	r2, r3, #2
 8004e0c:	441a      	add	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	005b      	lsls	r3, r3, #1
 8004e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e18:	4a6c      	ldr	r2, [pc, #432]	; (8004fcc <UART_SetConfig+0x32c>)
 8004e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1e:	095b      	lsrs	r3, r3, #5
 8004e20:	011c      	lsls	r4, r3, #4
 8004e22:	f7fd ffd9 	bl	8002dd8 <HAL_RCC_GetPCLK1Freq>
 8004e26:	4602      	mov	r2, r0
 8004e28:	4613      	mov	r3, r2
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	4413      	add	r3, r2
 8004e2e:	009a      	lsls	r2, r3, #2
 8004e30:	441a      	add	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	005b      	lsls	r3, r3, #1
 8004e38:	fbb2 f5f3 	udiv	r5, r2, r3
 8004e3c:	f7fd ffcc 	bl	8002dd8 <HAL_RCC_GetPCLK1Freq>
 8004e40:	4602      	mov	r2, r0
 8004e42:	4613      	mov	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4413      	add	r3, r2
 8004e48:	009a      	lsls	r2, r3, #2
 8004e4a:	441a      	add	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	005b      	lsls	r3, r3, #1
 8004e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e56:	4a5d      	ldr	r2, [pc, #372]	; (8004fcc <UART_SetConfig+0x32c>)
 8004e58:	fba2 2303 	umull	r2, r3, r2, r3
 8004e5c:	095b      	lsrs	r3, r3, #5
 8004e5e:	2264      	movs	r2, #100	; 0x64
 8004e60:	fb02 f303 	mul.w	r3, r2, r3
 8004e64:	1aeb      	subs	r3, r5, r3
 8004e66:	00db      	lsls	r3, r3, #3
 8004e68:	3332      	adds	r3, #50	; 0x32
 8004e6a:	4a58      	ldr	r2, [pc, #352]	; (8004fcc <UART_SetConfig+0x32c>)
 8004e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e70:	095b      	lsrs	r3, r3, #5
 8004e72:	005b      	lsls	r3, r3, #1
 8004e74:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e78:	441c      	add	r4, r3
 8004e7a:	f7fd ffad 	bl	8002dd8 <HAL_RCC_GetPCLK1Freq>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	4613      	mov	r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	4413      	add	r3, r2
 8004e86:	009a      	lsls	r2, r3, #2
 8004e88:	441a      	add	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	005b      	lsls	r3, r3, #1
 8004e90:	fbb2 f5f3 	udiv	r5, r2, r3
 8004e94:	f7fd ffa0 	bl	8002dd8 <HAL_RCC_GetPCLK1Freq>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	4413      	add	r3, r2
 8004ea0:	009a      	lsls	r2, r3, #2
 8004ea2:	441a      	add	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	005b      	lsls	r3, r3, #1
 8004eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eae:	4a47      	ldr	r2, [pc, #284]	; (8004fcc <UART_SetConfig+0x32c>)
 8004eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb4:	095b      	lsrs	r3, r3, #5
 8004eb6:	2264      	movs	r2, #100	; 0x64
 8004eb8:	fb02 f303 	mul.w	r3, r2, r3
 8004ebc:	1aeb      	subs	r3, r5, r3
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	3332      	adds	r3, #50	; 0x32
 8004ec2:	4a42      	ldr	r2, [pc, #264]	; (8004fcc <UART_SetConfig+0x32c>)
 8004ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec8:	095b      	lsrs	r3, r3, #5
 8004eca:	f003 0207 	and.w	r2, r3, #7
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4422      	add	r2, r4
 8004ed4:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8004ed6:	e0e7      	b.n	80050a8 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a39      	ldr	r2, [pc, #228]	; (8004fc4 <UART_SetConfig+0x324>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d004      	beq.n	8004eec <UART_SetConfig+0x24c>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a38      	ldr	r2, [pc, #224]	; (8004fc8 <UART_SetConfig+0x328>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d171      	bne.n	8004fd0 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004eec:	f7fd ff88 	bl	8002e00 <HAL_RCC_GetPCLK2Freq>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	4413      	add	r3, r2
 8004ef8:	009a      	lsls	r2, r3, #2
 8004efa:	441a      	add	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f06:	4a31      	ldr	r2, [pc, #196]	; (8004fcc <UART_SetConfig+0x32c>)
 8004f08:	fba2 2303 	umull	r2, r3, r2, r3
 8004f0c:	095b      	lsrs	r3, r3, #5
 8004f0e:	011c      	lsls	r4, r3, #4
 8004f10:	f7fd ff76 	bl	8002e00 <HAL_RCC_GetPCLK2Freq>
 8004f14:	4602      	mov	r2, r0
 8004f16:	4613      	mov	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	4413      	add	r3, r2
 8004f1c:	009a      	lsls	r2, r3, #2
 8004f1e:	441a      	add	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	fbb2 f5f3 	udiv	r5, r2, r3
 8004f2a:	f7fd ff69 	bl	8002e00 <HAL_RCC_GetPCLK2Freq>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	4613      	mov	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4413      	add	r3, r2
 8004f36:	009a      	lsls	r2, r3, #2
 8004f38:	441a      	add	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f44:	4a21      	ldr	r2, [pc, #132]	; (8004fcc <UART_SetConfig+0x32c>)
 8004f46:	fba2 2303 	umull	r2, r3, r2, r3
 8004f4a:	095b      	lsrs	r3, r3, #5
 8004f4c:	2264      	movs	r2, #100	; 0x64
 8004f4e:	fb02 f303 	mul.w	r3, r2, r3
 8004f52:	1aeb      	subs	r3, r5, r3
 8004f54:	011b      	lsls	r3, r3, #4
 8004f56:	3332      	adds	r3, #50	; 0x32
 8004f58:	4a1c      	ldr	r2, [pc, #112]	; (8004fcc <UART_SetConfig+0x32c>)
 8004f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5e:	095b      	lsrs	r3, r3, #5
 8004f60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f64:	441c      	add	r4, r3
 8004f66:	f7fd ff4b 	bl	8002e00 <HAL_RCC_GetPCLK2Freq>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	4413      	add	r3, r2
 8004f72:	009a      	lsls	r2, r3, #2
 8004f74:	441a      	add	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	fbb2 f5f3 	udiv	r5, r2, r3
 8004f80:	f7fd ff3e 	bl	8002e00 <HAL_RCC_GetPCLK2Freq>
 8004f84:	4602      	mov	r2, r0
 8004f86:	4613      	mov	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	4413      	add	r3, r2
 8004f8c:	009a      	lsls	r2, r3, #2
 8004f8e:	441a      	add	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f9a:	4a0c      	ldr	r2, [pc, #48]	; (8004fcc <UART_SetConfig+0x32c>)
 8004f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa0:	095b      	lsrs	r3, r3, #5
 8004fa2:	2264      	movs	r2, #100	; 0x64
 8004fa4:	fb02 f303 	mul.w	r3, r2, r3
 8004fa8:	1aeb      	subs	r3, r5, r3
 8004faa:	011b      	lsls	r3, r3, #4
 8004fac:	3332      	adds	r3, #50	; 0x32
 8004fae:	4a07      	ldr	r2, [pc, #28]	; (8004fcc <UART_SetConfig+0x32c>)
 8004fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb4:	095b      	lsrs	r3, r3, #5
 8004fb6:	f003 020f 	and.w	r2, r3, #15
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4422      	add	r2, r4
 8004fc0:	609a      	str	r2, [r3, #8]
 8004fc2:	e071      	b.n	80050a8 <UART_SetConfig+0x408>
 8004fc4:	40011000 	.word	0x40011000
 8004fc8:	40011400 	.word	0x40011400
 8004fcc:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004fd0:	f7fd ff02 	bl	8002dd8 <HAL_RCC_GetPCLK1Freq>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	4413      	add	r3, r2
 8004fdc:	009a      	lsls	r2, r3, #2
 8004fde:	441a      	add	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fea:	4a31      	ldr	r2, [pc, #196]	; (80050b0 <UART_SetConfig+0x410>)
 8004fec:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff0:	095b      	lsrs	r3, r3, #5
 8004ff2:	011c      	lsls	r4, r3, #4
 8004ff4:	f7fd fef0 	bl	8002dd8 <HAL_RCC_GetPCLK1Freq>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	4413      	add	r3, r2
 8005000:	009a      	lsls	r2, r3, #2
 8005002:	441a      	add	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	fbb2 f5f3 	udiv	r5, r2, r3
 800500e:	f7fd fee3 	bl	8002dd8 <HAL_RCC_GetPCLK1Freq>
 8005012:	4602      	mov	r2, r0
 8005014:	4613      	mov	r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	4413      	add	r3, r2
 800501a:	009a      	lsls	r2, r3, #2
 800501c:	441a      	add	r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	fbb2 f3f3 	udiv	r3, r2, r3
 8005028:	4a21      	ldr	r2, [pc, #132]	; (80050b0 <UART_SetConfig+0x410>)
 800502a:	fba2 2303 	umull	r2, r3, r2, r3
 800502e:	095b      	lsrs	r3, r3, #5
 8005030:	2264      	movs	r2, #100	; 0x64
 8005032:	fb02 f303 	mul.w	r3, r2, r3
 8005036:	1aeb      	subs	r3, r5, r3
 8005038:	011b      	lsls	r3, r3, #4
 800503a:	3332      	adds	r3, #50	; 0x32
 800503c:	4a1c      	ldr	r2, [pc, #112]	; (80050b0 <UART_SetConfig+0x410>)
 800503e:	fba2 2303 	umull	r2, r3, r2, r3
 8005042:	095b      	lsrs	r3, r3, #5
 8005044:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005048:	441c      	add	r4, r3
 800504a:	f7fd fec5 	bl	8002dd8 <HAL_RCC_GetPCLK1Freq>
 800504e:	4602      	mov	r2, r0
 8005050:	4613      	mov	r3, r2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	4413      	add	r3, r2
 8005056:	009a      	lsls	r2, r3, #2
 8005058:	441a      	add	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	fbb2 f5f3 	udiv	r5, r2, r3
 8005064:	f7fd feb8 	bl	8002dd8 <HAL_RCC_GetPCLK1Freq>
 8005068:	4602      	mov	r2, r0
 800506a:	4613      	mov	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	4413      	add	r3, r2
 8005070:	009a      	lsls	r2, r3, #2
 8005072:	441a      	add	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	fbb2 f3f3 	udiv	r3, r2, r3
 800507e:	4a0c      	ldr	r2, [pc, #48]	; (80050b0 <UART_SetConfig+0x410>)
 8005080:	fba2 2303 	umull	r2, r3, r2, r3
 8005084:	095b      	lsrs	r3, r3, #5
 8005086:	2264      	movs	r2, #100	; 0x64
 8005088:	fb02 f303 	mul.w	r3, r2, r3
 800508c:	1aeb      	subs	r3, r5, r3
 800508e:	011b      	lsls	r3, r3, #4
 8005090:	3332      	adds	r3, #50	; 0x32
 8005092:	4a07      	ldr	r2, [pc, #28]	; (80050b0 <UART_SetConfig+0x410>)
 8005094:	fba2 2303 	umull	r2, r3, r2, r3
 8005098:	095b      	lsrs	r3, r3, #5
 800509a:	f003 020f 	and.w	r2, r3, #15
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4422      	add	r2, r4
 80050a4:	609a      	str	r2, [r3, #8]
}
 80050a6:	e7ff      	b.n	80050a8 <UART_SetConfig+0x408>
 80050a8:	bf00      	nop
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bdb0      	pop	{r4, r5, r7, pc}
 80050b0:	51eb851f 	.word	0x51eb851f

080050b4 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80050be:	2300      	movs	r3, #0
 80050c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050cc:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	4b2f      	ldr	r3, [pc, #188]	; (8005190 <FSMC_NORSRAM_Init+0xdc>)
 80050d2:	4013      	ands	r3, r2
 80050d4:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80050de:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80050e4:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80050ea:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80050f0:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 80050f6:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80050fc:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8005102:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8005108:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800510e:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 8005114:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 800511a:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 8005120:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 8005126:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	4313      	orrs	r3, r2
 800512c:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	2b08      	cmp	r3, #8
 8005134:	d103      	bne.n	800513e <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800513c:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68f9      	ldr	r1, [r7, #12]
 8005146:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800514e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005152:	d10a      	bne.n	800516a <FSMC_NORSRAM_Init+0xb6>
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d006      	beq.n	800516a <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005164:	431a      	orrs	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d006      	beq.n	8005180 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517a:	431a      	orrs	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3714      	adds	r7, #20
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	ffc00480 	.word	0xffc00480

08005194 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005194:	b480      	push	{r7}
 8005196:	b087      	sub	sp, #28
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80051a0:	2300      	movs	r3, #0
 80051a2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	1c5a      	adds	r2, r3, #1
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051ae:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80051b6:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80051c2:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80051ca:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80051d2:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	3b01      	subs	r3, #1
 80051da:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80051dc:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	3b02      	subs	r3, #2
 80051e4:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80051e6:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80051ec:	4313      	orrs	r3, r2
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	1c5a      	adds	r2, r3, #1
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6979      	ldr	r1, [r7, #20]
 80051fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005208:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800520c:	d10e      	bne.n	800522c <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005216:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	3b01      	subs	r3, #1
 800521e:	051b      	lsls	r3, r3, #20
 8005220:	697a      	ldr	r2, [r7, #20]
 8005222:	4313      	orrs	r3, r2
 8005224:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	697a      	ldr	r2, [r7, #20]
 800522a:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	371c      	adds	r7, #28
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
	...

0800523c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800523c:	b480      	push	{r7}
 800523e:	b087      	sub	sp, #28
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
 8005248:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800524a:	2300      	movs	r3, #0
 800524c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005254:	d122      	bne.n	800529c <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800525e:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	4b15      	ldr	r3, [pc, #84]	; (80052b8 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8005264:	4013      	ands	r3, r2
 8005266:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005272:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800527a:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8005282:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005288:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	4313      	orrs	r3, r2
 800528e:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	6979      	ldr	r1, [r7, #20]
 8005296:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800529a:	e005      	b.n	80052a8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80052a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	371c      	adds	r7, #28
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	cff00000 	.word	0xcff00000

080052bc <SDIO_Init>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80052bc:	b084      	sub	sp, #16
 80052be:	b480      	push	{r7}
 80052c0:	b085      	sub	sp, #20
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
 80052c6:	f107 001c 	add.w	r0, r7, #28
 80052ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U;
 80052ce:	2300      	movs	r3, #0
 80052d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80052d2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80052d4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80052d6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80052d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80052da:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80052dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80052de:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80052e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80052e2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80052e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80052e6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80052f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	431a      	orrs	r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3714      	adds	r7, #20
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	b004      	add	sp, #16
 8005310:	4770      	bx	lr

08005312 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005312:	b480      	push	{r7}
 8005314:	b083      	sub	sp, #12
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005320:	4618      	mov	r0, r3
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <SDIO_WriteFIFO>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	370c      	adds	r7, #12
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800534e:	b480      	push	{r7}
 8005350:	b083      	sub	sp, #12
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2203      	movs	r2, #3
 800535a:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr

0800536a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800536a:	b480      	push	{r7}
 800536c:	b083      	sub	sp, #12
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0303 	and.w	r3, r3, #3
}
 800537a:	4618      	mov	r0, r3
 800537c:	370c      	adds	r7, #12
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <SDIO_SendCommand>:
  * @param  Command pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005386:	b480      	push	{r7}
 8005388:	b085      	sub	sp, #20
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
 800538e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005390:	2300      	movs	r3, #0
 8005392:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80053a4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80053aa:	431a      	orrs	r2, r3
                       Command->CPSM);
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80053b0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80053c0:	f023 030f 	bic.w	r3, r3, #15
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	431a      	orrs	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3714      	adds	r7, #20
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr

080053da <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80053da:	b480      	push	{r7}
 80053dc:	b083      	sub	sp, #12
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	b2db      	uxtb	r3, r3
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP1: Response Register 3
  *            @arg SDIO_RESP1: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 80053fe:	2300      	movs	r3, #0
 8005400:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	3314      	adds	r3, #20
 8005406:	461a      	mov	r2, r3
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	4413      	add	r3, r2
 800540c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
}  
 8005412:	4618      	mov	r0, r3
 8005414:	3714      	adds	r7, #20
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr

0800541e <SDIO_ConfigData>:
  * @param  Data  pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800541e:	b480      	push	{r7}
 8005420:	b085      	sub	sp, #20
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
 8005426:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005428:	2300      	movs	r3, #0
 800542a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	685a      	ldr	r2, [r3, #4]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005444:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800544a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005450:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	4313      	orrs	r3, r2
 8005456:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545c:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	431a      	orrs	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005468:	2300      	movs	r3, #0

}
 800546a:	4618      	mov	r0, r3
 800546c:	3714      	adds	r7, #20
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr

08005476 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005476:	b580      	push	{r7, lr}
 8005478:	b088      	sub	sp, #32
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
 800547e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005480:	2300      	movs	r3, #0
 8005482:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005488:	2310      	movs	r3, #16
 800548a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800548c:	2340      	movs	r3, #64	; 0x40
 800548e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005490:	2300      	movs	r3, #0
 8005492:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005494:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005498:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800549a:	f107 0308 	add.w	r3, r7, #8
 800549e:	4619      	mov	r1, r3
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f7ff ff70 	bl	8005386 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80054a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80054aa:	2110      	movs	r1, #16
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 fa63 	bl	8005978 <SDMMC_GetCmdResp1>
 80054b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054b4:	69fb      	ldr	r3, [r7, #28]
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3720      	adds	r7, #32
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b088      	sub	sp, #32
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
 80054c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80054c8:	2300      	movs	r3, #0
 80054ca:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80054d0:	2311      	movs	r3, #17
 80054d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80054d4:	2340      	movs	r3, #64	; 0x40
 80054d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80054d8:	2300      	movs	r3, #0
 80054da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80054dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054e0:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80054e2:	f107 0308 	add.w	r3, r7, #8
 80054e6:	4619      	mov	r1, r3
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f7ff ff4c 	bl	8005386 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80054ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80054f2:	2111      	movs	r1, #17
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 fa3f 	bl	8005978 <SDMMC_GetCmdResp1>
 80054fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054fc:	69fb      	ldr	r3, [r7, #28]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3720      	adds	r7, #32
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b088      	sub	sp, #32
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
 800550e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005510:	2300      	movs	r3, #0
 8005512:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005518:	2312      	movs	r3, #18
 800551a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800551c:	2340      	movs	r3, #64	; 0x40
 800551e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005520:	2300      	movs	r3, #0
 8005522:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005524:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005528:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800552a:	f107 0308 	add.w	r3, r7, #8
 800552e:	4619      	mov	r1, r3
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f7ff ff28 	bl	8005386 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005536:	f241 3288 	movw	r2, #5000	; 0x1388
 800553a:	2112      	movs	r1, #18
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 fa1b 	bl	8005978 <SDMMC_GetCmdResp1>
 8005542:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005544:	69fb      	ldr	r3, [r7, #28]
}
 8005546:	4618      	mov	r0, r3
 8005548:	3720      	adds	r7, #32
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b088      	sub	sp, #32
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
 8005556:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005558:	2300      	movs	r3, #0
 800555a:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005560:	2318      	movs	r3, #24
 8005562:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005564:	2340      	movs	r3, #64	; 0x40
 8005566:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005568:	2300      	movs	r3, #0
 800556a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800556c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005570:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005572:	f107 0308 	add.w	r3, r7, #8
 8005576:	4619      	mov	r1, r3
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f7ff ff04 	bl	8005386 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800557e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005582:	2118      	movs	r1, #24
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 f9f7 	bl	8005978 <SDMMC_GetCmdResp1>
 800558a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800558c:	69fb      	ldr	r3, [r7, #28]
}
 800558e:	4618      	mov	r0, r3
 8005590:	3720      	adds	r7, #32
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005596:	b580      	push	{r7, lr}
 8005598:	b088      	sub	sp, #32
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
 800559e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80055a0:	2300      	movs	r3, #0
 80055a2:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80055a8:	2319      	movs	r3, #25
 80055aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80055ac:	2340      	movs	r3, #64	; 0x40
 80055ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80055b0:	2300      	movs	r3, #0
 80055b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80055b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055b8:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80055ba:	f107 0308 	add.w	r3, r7, #8
 80055be:	4619      	mov	r1, r3
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f7ff fee0 	bl	8005386 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80055c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ca:	2119      	movs	r1, #25
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 f9d3 	bl	8005978 <SDMMC_GetCmdResp1>
 80055d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055d4:	69fb      	ldr	r3, [r7, #28]
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3720      	adds	r7, #32
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
	...

080055e0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b088      	sub	sp, #32
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80055e8:	2300      	movs	r3, #0
 80055ea:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80055ec:	2300      	movs	r3, #0
 80055ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80055f0:	230c      	movs	r3, #12
 80055f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80055f4:	2340      	movs	r3, #64	; 0x40
 80055f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80055f8:	2300      	movs	r3, #0
 80055fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80055fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005600:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005602:	f107 0308 	add.w	r3, r7, #8
 8005606:	4619      	mov	r1, r3
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f7ff febc 	bl	8005386 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 800560e:	4a05      	ldr	r2, [pc, #20]	; (8005624 <SDMMC_CmdStopTransfer+0x44>)
 8005610:	210c      	movs	r1, #12
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f9b0 	bl	8005978 <SDMMC_GetCmdResp1>
 8005618:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800561a:	69fb      	ldr	r3, [r7, #28]
}
 800561c:	4618      	mov	r0, r3
 800561e:	3720      	adds	r7, #32
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	05f5e100 	.word	0x05f5e100

08005628 <SDMMC_CmdSelDesel>:
  * @param  SDIOx Pointer to SDIO register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b08a      	sub	sp, #40	; 0x28
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005634:	2300      	movs	r3, #0
 8005636:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800563c:	2307      	movs	r3, #7
 800563e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005640:	2340      	movs	r3, #64	; 0x40
 8005642:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005644:	2300      	movs	r3, #0
 8005646:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005648:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800564c:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800564e:	f107 0310 	add.w	r3, r7, #16
 8005652:	4619      	mov	r1, r3
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	f7ff fe96 	bl	8005386 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800565a:	f241 3288 	movw	r2, #5000	; 0x1388
 800565e:	2107      	movs	r1, #7
 8005660:	68f8      	ldr	r0, [r7, #12]
 8005662:	f000 f989 	bl	8005978 <SDMMC_GetCmdResp1>
 8005666:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800566a:	4618      	mov	r0, r3
 800566c:	3728      	adds	r7, #40	; 0x28
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8005672:	b580      	push	{r7, lr}
 8005674:	b088      	sub	sp, #32
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800567a:	2300      	movs	r3, #0
 800567c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0U;
 800567e:	2300      	movs	r3, #0
 8005680:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005682:	2300      	movs	r3, #0
 8005684:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005686:	2300      	movs	r3, #0
 8005688:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800568a:	2300      	movs	r3, #0
 800568c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800568e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005692:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005694:	f107 0308 	add.w	r3, r7, #8
 8005698:	4619      	mov	r1, r3
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f7ff fe73 	bl	8005386 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 f93f 	bl	8005924 <SDMMC_GetCmdError>
 80056a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056a8:	69fb      	ldr	r3, [r7, #28]
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3720      	adds	r7, #32
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b088      	sub	sp, #32
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80056ba:	2300      	movs	r3, #0
 80056bc:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80056be:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80056c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80056c4:	2308      	movs	r3, #8
 80056c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80056c8:	2340      	movs	r3, #64	; 0x40
 80056ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80056cc:	2300      	movs	r3, #0
 80056ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80056d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056d4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80056d6:	f107 0308 	add.w	r3, r7, #8
 80056da:	4619      	mov	r1, r3
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f7ff fe52 	bl	8005386 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 fb10 	bl	8005d08 <SDMMC_GetCmdResp7>
 80056e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056ea:	69fb      	ldr	r3, [r7, #28]
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3720      	adds	r7, #32
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b088      	sub	sp, #32
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80056fe:	2300      	movs	r3, #0
 8005700:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005706:	2337      	movs	r3, #55	; 0x37
 8005708:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800570a:	2340      	movs	r3, #64	; 0x40
 800570c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800570e:	2300      	movs	r3, #0
 8005710:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005712:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005716:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005718:	f107 0308 	add.w	r3, r7, #8
 800571c:	4619      	mov	r1, r3
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f7ff fe31 	bl	8005386 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005724:	f241 3288 	movw	r2, #5000	; 0x1388
 8005728:	2137      	movs	r1, #55	; 0x37
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 f924 	bl	8005978 <SDMMC_GetCmdResp1>
 8005730:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005732:	69fb      	ldr	r3, [r7, #28]
}
 8005734:	4618      	mov	r0, r3
 8005736:	3720      	adds	r7, #32
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b088      	sub	sp, #32
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005746:	2300      	movs	r3, #0
 8005748:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005750:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005754:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005756:	2329      	movs	r3, #41	; 0x29
 8005758:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800575a:	2340      	movs	r3, #64	; 0x40
 800575c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800575e:	2300      	movs	r3, #0
 8005760:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005762:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005766:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005768:	f107 0308 	add.w	r3, r7, #8
 800576c:	4619      	mov	r1, r3
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f7ff fe09 	bl	8005386 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 fa25 	bl	8005bc4 <SDMMC_GetCmdResp3>
 800577a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800577c:	69fb      	ldr	r3, [r7, #28]
}
 800577e:	4618      	mov	r0, r3
 8005780:	3720      	adds	r7, #32
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b088      	sub	sp, #32
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
 800578e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005790:	2300      	movs	r3, #0
 8005792:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005798:	2306      	movs	r3, #6
 800579a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800579c:	2340      	movs	r3, #64	; 0x40
 800579e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057a0:	2300      	movs	r3, #0
 80057a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057a8:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057aa:	f107 0308 	add.w	r3, r7, #8
 80057ae:	4619      	mov	r1, r3
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f7ff fde8 	bl	8005386 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80057b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057ba:	2106      	movs	r1, #6
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 f8db 	bl	8005978 <SDMMC_GetCmdResp1>
 80057c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057c4:	69fb      	ldr	r3, [r7, #28]
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3720      	adds	r7, #32
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b088      	sub	sp, #32
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80057d6:	2300      	movs	r3, #0
 80057d8:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80057da:	2300      	movs	r3, #0
 80057dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80057de:	2333      	movs	r3, #51	; 0x33
 80057e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80057e2:	2340      	movs	r3, #64	; 0x40
 80057e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057e6:	2300      	movs	r3, #0
 80057e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057ee:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057f0:	f107 0308 	add.w	r3, r7, #8
 80057f4:	4619      	mov	r1, r3
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f7ff fdc5 	bl	8005386 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80057fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005800:	2133      	movs	r1, #51	; 0x33
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f8b8 	bl	8005978 <SDMMC_GetCmdResp1>
 8005808:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800580a:	69fb      	ldr	r3, [r7, #28]
}
 800580c:	4618      	mov	r0, r3
 800580e:	3720      	adds	r7, #32
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b088      	sub	sp, #32
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800581c:	2300      	movs	r3, #0
 800581e:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005820:	2300      	movs	r3, #0
 8005822:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005824:	2302      	movs	r3, #2
 8005826:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005828:	23c0      	movs	r3, #192	; 0xc0
 800582a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800582c:	2300      	movs	r3, #0
 800582e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005830:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005834:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005836:	f107 0308 	add.w	r3, r7, #8
 800583a:	4619      	mov	r1, r3
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f7ff fda2 	bl	8005386 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 f97e 	bl	8005b44 <SDMMC_GetCmdResp2>
 8005848:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800584a:	69fb      	ldr	r3, [r7, #28]
}
 800584c:	4618      	mov	r0, r3
 800584e:	3720      	adds	r7, #32
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b088      	sub	sp, #32
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800585e:	2300      	movs	r3, #0
 8005860:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005866:	2309      	movs	r3, #9
 8005868:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800586a:	23c0      	movs	r3, #192	; 0xc0
 800586c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800586e:	2300      	movs	r3, #0
 8005870:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005872:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005876:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005878:	f107 0308 	add.w	r3, r7, #8
 800587c:	4619      	mov	r1, r3
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7ff fd81 	bl	8005386 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 f95d 	bl	8005b44 <SDMMC_GetCmdResp2>
 800588a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800588c:	69fb      	ldr	r3, [r7, #28]
}
 800588e:	4618      	mov	r0, r3
 8005890:	3720      	adds	r7, #32
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}

08005896 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005896:	b580      	push	{r7, lr}
 8005898:	b088      	sub	sp, #32
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
 800589e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80058a0:	2300      	movs	r3, #0
 80058a2:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80058a4:	2300      	movs	r3, #0
 80058a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80058a8:	2303      	movs	r3, #3
 80058aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80058ac:	2340      	movs	r3, #64	; 0x40
 80058ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80058b0:	2300      	movs	r3, #0
 80058b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80058b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058b8:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80058ba:	f107 0308 	add.w	r3, r7, #8
 80058be:	4619      	mov	r1, r3
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f7ff fd60 	bl	8005386 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80058c6:	683a      	ldr	r2, [r7, #0]
 80058c8:	2103      	movs	r1, #3
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 f9ae 	bl	8005c2c <SDMMC_GetCmdResp6>
 80058d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80058d2:	69fb      	ldr	r3, [r7, #28]
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3720      	adds	r7, #32
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b088      	sub	sp, #32
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80058e6:	2300      	movs	r3, #0
 80058e8:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80058ee:	230d      	movs	r3, #13
 80058f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80058f2:	2340      	movs	r3, #64	; 0x40
 80058f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80058f6:	2300      	movs	r3, #0
 80058f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80058fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058fe:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005900:	f107 0308 	add.w	r3, r7, #8
 8005904:	4619      	mov	r1, r3
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f7ff fd3d 	bl	8005386 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800590c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005910:	210d      	movs	r1, #13
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 f830 	bl	8005978 <SDMMC_GetCmdResp1>
 8005918:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800591a:	69fb      	ldr	r3, [r7, #28]
}
 800591c:	4618      	mov	r0, r3
 800591e:	3720      	adds	r7, #32
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005924:	b490      	push	{r4, r7}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800592c:	4b10      	ldr	r3, [pc, #64]	; (8005970 <SDMMC_GetCmdError+0x4c>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a10      	ldr	r2, [pc, #64]	; (8005974 <SDMMC_GetCmdError+0x50>)
 8005932:	fba2 2303 	umull	r2, r3, r2, r3
 8005936:	0a5b      	lsrs	r3, r3, #9
 8005938:	f241 3288 	movw	r2, #5000	; 0x1388
 800593c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005940:	4623      	mov	r3, r4
 8005942:	1e5c      	subs	r4, r3, #1
 8005944:	2b00      	cmp	r3, #0
 8005946:	d102      	bne.n	800594e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005948:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800594c:	e00a      	b.n	8005964 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005956:	2b00      	cmp	r3, #0
 8005958:	d0f2      	beq.n	8005940 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005960:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3708      	adds	r7, #8
 8005968:	46bd      	mov	sp, r7
 800596a:	bc90      	pop	{r4, r7}
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	20000118 	.word	0x20000118
 8005974:	10624dd3 	.word	0x10624dd3

08005978 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005978:	b590      	push	{r4, r7, lr}
 800597a:	b087      	sub	sp, #28
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	460b      	mov	r3, r1
 8005982:	607a      	str	r2, [r7, #4]
 8005984:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005986:	4b6c      	ldr	r3, [pc, #432]	; (8005b38 <SDMMC_GetCmdResp1+0x1c0>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a6c      	ldr	r2, [pc, #432]	; (8005b3c <SDMMC_GetCmdResp1+0x1c4>)
 800598c:	fba2 2303 	umull	r2, r3, r2, r3
 8005990:	0a5b      	lsrs	r3, r3, #9
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005998:	4623      	mov	r3, r4
 800599a:	1e5c      	subs	r4, r3, #1
 800599c:	2b00      	cmp	r3, #0
 800599e:	d102      	bne.n	80059a6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80059a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80059a4:	e0c3      	b.n	8005b2e <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d0f2      	beq.n	8005998 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059b6:	f003 0304 	and.w	r3, r3, #4
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d004      	beq.n	80059c8 <SDMMC_GetCmdResp1+0x50>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2204      	movs	r2, #4
 80059c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80059c4:	2304      	movs	r3, #4
 80059c6:	e0b2      	b.n	8005b2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059cc:	f003 0301 	and.w	r3, r3, #1
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d004      	beq.n	80059de <SDMMC_GetCmdResp1+0x66>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2201      	movs	r2, #1
 80059d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80059da:	2301      	movs	r3, #1
 80059dc:	e0a7      	b.n	8005b2e <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f7ff fcfb 	bl	80053da <SDIO_GetCommandResponse>
 80059e4:	4603      	mov	r3, r0
 80059e6:	461a      	mov	r2, r3
 80059e8:	7afb      	ldrb	r3, [r7, #11]
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d001      	beq.n	80059f2 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e09d      	b.n	8005b2e <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80059f8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80059fa:	2100      	movs	r1, #0
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f7ff fcf9 	bl	80053f4 <SDIO_GetResponse>
 8005a02:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	4b4e      	ldr	r3, [pc, #312]	; (8005b40 <SDMMC_GetCmdResp1+0x1c8>)
 8005a08:	4013      	ands	r3, r2
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d101      	bne.n	8005a12 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	e08d      	b.n	8005b2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	da02      	bge.n	8005a1e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005a18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a1c:	e087      	b.n	8005b2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d001      	beq.n	8005a2c <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005a28:	2340      	movs	r3, #64	; 0x40
 8005a2a:	e080      	b.n	8005b2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d001      	beq.n	8005a3a <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005a36:	2380      	movs	r3, #128	; 0x80
 8005a38:	e079      	b.n	8005b2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d002      	beq.n	8005a4a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005a44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a48:	e071      	b.n	8005b2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d002      	beq.n	8005a5a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005a54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a58:	e069      	b.n	8005b2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d002      	beq.n	8005a6a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005a64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a68:	e061      	b.n	8005b2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d002      	beq.n	8005a7a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005a74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a78:	e059      	b.n	8005b2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d002      	beq.n	8005a8a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005a84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a88:	e051      	b.n	8005b2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d002      	beq.n	8005a9a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005a94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a98:	e049      	b.n	8005b2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d002      	beq.n	8005aaa <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005aa4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005aa8:	e041      	b.n	8005b2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d002      	beq.n	8005aba <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 8005ab4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ab8:	e039      	b.n	8005b2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d002      	beq.n	8005aca <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005ac4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ac8:	e031      	b.n	8005b2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d002      	beq.n	8005ada <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005ad4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005ad8:	e029      	b.n	8005b2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d002      	beq.n	8005aea <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005ae4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005ae8:	e021      	b.n	8005b2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d002      	beq.n	8005afa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005af4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005af8:	e019      	b.n	8005b2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d002      	beq.n	8005b0a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005b04:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005b08:	e011      	b.n	8005b2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d002      	beq.n	8005b1a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005b14:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005b18:	e009      	b.n	8005b2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	f003 0308 	and.w	r3, r3, #8
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d002      	beq.n	8005b2a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005b24:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005b28:	e001      	b.n	8005b2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005b2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	371c      	adds	r7, #28
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd90      	pop	{r4, r7, pc}
 8005b36:	bf00      	nop
 8005b38:	20000118 	.word	0x20000118
 8005b3c:	10624dd3 	.word	0x10624dd3
 8005b40:	fdffe008 	.word	0xfdffe008

08005b44 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005b44:	b490      	push	{r4, r7}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005b4c:	4b1b      	ldr	r3, [pc, #108]	; (8005bbc <SDMMC_GetCmdResp2+0x78>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a1b      	ldr	r2, [pc, #108]	; (8005bc0 <SDMMC_GetCmdResp2+0x7c>)
 8005b52:	fba2 2303 	umull	r2, r3, r2, r3
 8005b56:	0a5b      	lsrs	r3, r3, #9
 8005b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b5c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005b60:	4623      	mov	r3, r4
 8005b62:	1e5c      	subs	r4, r3, #1
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d102      	bne.n	8005b6e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005b68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005b6c:	e020      	b.n	8005bb0 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b72:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d0f2      	beq.n	8005b60 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b7e:	f003 0304 	and.w	r3, r3, #4
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d004      	beq.n	8005b90 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2204      	movs	r2, #4
 8005b8a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005b8c:	2304      	movs	r3, #4
 8005b8e:	e00f      	b.n	8005bb0 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b94:	f003 0301 	and.w	r3, r3, #1
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d004      	beq.n	8005ba6 <SDMMC_GetCmdResp2+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e004      	b.n	8005bb0 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005bac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3708      	adds	r7, #8
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bc90      	pop	{r4, r7}
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	20000118 	.word	0x20000118
 8005bc0:	10624dd3 	.word	0x10624dd3

08005bc4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005bc4:	b490      	push	{r4, r7}
 8005bc6:	b082      	sub	sp, #8
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005bcc:	4b15      	ldr	r3, [pc, #84]	; (8005c24 <SDMMC_GetCmdResp3+0x60>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a15      	ldr	r2, [pc, #84]	; (8005c28 <SDMMC_GetCmdResp3+0x64>)
 8005bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd6:	0a5b      	lsrs	r3, r3, #9
 8005bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bdc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005be0:	4623      	mov	r3, r4
 8005be2:	1e5c      	subs	r4, r3, #1
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d102      	bne.n	8005bee <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005be8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005bec:	e015      	b.n	8005c1a <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d0f2      	beq.n	8005be0 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bfe:	f003 0304 	and.w	r3, r3, #4
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d004      	beq.n	8005c10 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2204      	movs	r2, #4
 8005c0a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005c0c:	2304      	movs	r3, #4
 8005c0e:	e004      	b.n	8005c1a <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005c16:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3708      	adds	r7, #8
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bc90      	pop	{r4, r7}
 8005c22:	4770      	bx	lr
 8005c24:	20000118 	.word	0x20000118
 8005c28:	10624dd3 	.word	0x10624dd3

08005c2c <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005c2c:	b590      	push	{r4, r7, lr}
 8005c2e:	b087      	sub	sp, #28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	460b      	mov	r3, r1
 8005c36:	607a      	str	r2, [r7, #4]
 8005c38:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005c3a:	4b31      	ldr	r3, [pc, #196]	; (8005d00 <SDMMC_GetCmdResp6+0xd4>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a31      	ldr	r2, [pc, #196]	; (8005d04 <SDMMC_GetCmdResp6+0xd8>)
 8005c40:	fba2 2303 	umull	r2, r3, r2, r3
 8005c44:	0a5b      	lsrs	r3, r3, #9
 8005c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c4a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005c4e:	4623      	mov	r3, r4
 8005c50:	1e5c      	subs	r4, r3, #1
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d102      	bne.n	8005c5c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005c56:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005c5a:	e04c      	b.n	8005cf6 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c60:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d0f2      	beq.n	8005c4e <SDMMC_GetCmdResp6+0x22>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c6c:	f003 0304 	and.w	r3, r3, #4
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d004      	beq.n	8005c7e <SDMMC_GetCmdResp6+0x52>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2204      	movs	r2, #4
 8005c78:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005c7a:	2304      	movs	r3, #4
 8005c7c:	e03b      	b.n	8005cf6 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c82:	f003 0301 	and.w	r3, r3, #1
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d004      	beq.n	8005c94 <SDMMC_GetCmdResp6+0x68>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e030      	b.n	8005cf6 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f7ff fba0 	bl	80053da <SDIO_GetCommandResponse>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	7afb      	ldrb	r3, [r7, #11]
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d001      	beq.n	8005ca8 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e026      	b.n	8005cf6 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005cae:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005cb0:	2100      	movs	r1, #0
 8005cb2:	68f8      	ldr	r0, [r7, #12]
 8005cb4:	f7ff fb9e 	bl	80053f4 <SDIO_GetResponse>
 8005cb8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d106      	bne.n	8005cd2 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	0c1b      	lsrs	r3, r3, #16
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	e011      	b.n	8005cf6 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d002      	beq.n	8005ce2 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005cdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ce0:	e009      	b.n	8005cf6 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d002      	beq.n	8005cf2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005cec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cf0:	e001      	b.n	8005cf6 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005cf2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	371c      	adds	r7, #28
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd90      	pop	{r4, r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	20000118 	.word	0x20000118
 8005d04:	10624dd3 	.word	0x10624dd3

08005d08 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005d08:	b490      	push	{r4, r7}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005d10:	4b18      	ldr	r3, [pc, #96]	; (8005d74 <SDMMC_GetCmdResp7+0x6c>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a18      	ldr	r2, [pc, #96]	; (8005d78 <SDMMC_GetCmdResp7+0x70>)
 8005d16:	fba2 2303 	umull	r2, r3, r2, r3
 8005d1a:	0a5b      	lsrs	r3, r3, #9
 8005d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d20:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005d24:	4623      	mov	r3, r4
 8005d26:	1e5c      	subs	r4, r3, #1
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d102      	bne.n	8005d32 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005d2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005d30:	e01a      	b.n	8005d68 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d36:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d0f2      	beq.n	8005d24 <SDMMC_GetCmdResp7+0x1c>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d42:	f003 0304 	and.w	r3, r3, #4
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d004      	beq.n	8005d54 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2240      	movs	r2, #64	; 0x40
 8005d4e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005d50:	2304      	movs	r3, #4
 8005d52:	e009      	b.n	8005d68 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d002      	beq.n	8005d66 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2240      	movs	r2, #64	; 0x40
 8005d64:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005d66:	2300      	movs	r3, #0
  
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3708      	adds	r7, #8
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bc90      	pop	{r4, r7}
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	20000118 	.word	0x20000118
 8005d78:	10624dd3 	.word	0x10624dd3

08005d7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d7c:	b084      	sub	sp, #16
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b084      	sub	sp, #16
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
 8005d86:	f107 001c 	add.w	r0, r7, #28
 8005d8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d122      	bne.n	8005dda <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005da8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005dbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d105      	bne.n	8005dce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f001 fa76 	bl	80072c0 <USB_CoreReset>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	73fb      	strb	r3, [r7, #15]
 8005dd8:	e01a      	b.n	8005e10 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f001 fa6a 	bl	80072c0 <USB_CoreReset>
 8005dec:	4603      	mov	r3, r0
 8005dee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005df0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d106      	bne.n	8005e04 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	639a      	str	r2, [r3, #56]	; 0x38
 8005e02:	e005      	b.n	8005e10 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d10b      	bne.n	8005e2e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f043 0206 	orr.w	r2, r3, #6
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	f043 0220 	orr.w	r2, r3, #32
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3710      	adds	r7, #16
 8005e34:	46bd      	mov	sp, r7
 8005e36:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e3a:	b004      	add	sp, #16
 8005e3c:	4770      	bx	lr
	...

08005e40 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b087      	sub	sp, #28
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005e4e:	79fb      	ldrb	r3, [r7, #7]
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d165      	bne.n	8005f20 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	4a41      	ldr	r2, [pc, #260]	; (8005f5c <USB_SetTurnaroundTime+0x11c>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d906      	bls.n	8005e6a <USB_SetTurnaroundTime+0x2a>
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	4a40      	ldr	r2, [pc, #256]	; (8005f60 <USB_SetTurnaroundTime+0x120>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d802      	bhi.n	8005e6a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005e64:	230f      	movs	r3, #15
 8005e66:	617b      	str	r3, [r7, #20]
 8005e68:	e062      	b.n	8005f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	4a3c      	ldr	r2, [pc, #240]	; (8005f60 <USB_SetTurnaroundTime+0x120>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d906      	bls.n	8005e80 <USB_SetTurnaroundTime+0x40>
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	4a3b      	ldr	r2, [pc, #236]	; (8005f64 <USB_SetTurnaroundTime+0x124>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d802      	bhi.n	8005e80 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005e7a:	230e      	movs	r3, #14
 8005e7c:	617b      	str	r3, [r7, #20]
 8005e7e:	e057      	b.n	8005f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	4a38      	ldr	r2, [pc, #224]	; (8005f64 <USB_SetTurnaroundTime+0x124>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d906      	bls.n	8005e96 <USB_SetTurnaroundTime+0x56>
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	4a37      	ldr	r2, [pc, #220]	; (8005f68 <USB_SetTurnaroundTime+0x128>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d802      	bhi.n	8005e96 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005e90:	230d      	movs	r3, #13
 8005e92:	617b      	str	r3, [r7, #20]
 8005e94:	e04c      	b.n	8005f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	4a33      	ldr	r2, [pc, #204]	; (8005f68 <USB_SetTurnaroundTime+0x128>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d906      	bls.n	8005eac <USB_SetTurnaroundTime+0x6c>
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	4a32      	ldr	r2, [pc, #200]	; (8005f6c <USB_SetTurnaroundTime+0x12c>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d802      	bhi.n	8005eac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005ea6:	230c      	movs	r3, #12
 8005ea8:	617b      	str	r3, [r7, #20]
 8005eaa:	e041      	b.n	8005f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	4a2f      	ldr	r2, [pc, #188]	; (8005f6c <USB_SetTurnaroundTime+0x12c>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d906      	bls.n	8005ec2 <USB_SetTurnaroundTime+0x82>
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	4a2e      	ldr	r2, [pc, #184]	; (8005f70 <USB_SetTurnaroundTime+0x130>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d802      	bhi.n	8005ec2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005ebc:	230b      	movs	r3, #11
 8005ebe:	617b      	str	r3, [r7, #20]
 8005ec0:	e036      	b.n	8005f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	4a2a      	ldr	r2, [pc, #168]	; (8005f70 <USB_SetTurnaroundTime+0x130>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d906      	bls.n	8005ed8 <USB_SetTurnaroundTime+0x98>
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	4a29      	ldr	r2, [pc, #164]	; (8005f74 <USB_SetTurnaroundTime+0x134>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d802      	bhi.n	8005ed8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005ed2:	230a      	movs	r3, #10
 8005ed4:	617b      	str	r3, [r7, #20]
 8005ed6:	e02b      	b.n	8005f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	4a26      	ldr	r2, [pc, #152]	; (8005f74 <USB_SetTurnaroundTime+0x134>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d906      	bls.n	8005eee <USB_SetTurnaroundTime+0xae>
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	4a25      	ldr	r2, [pc, #148]	; (8005f78 <USB_SetTurnaroundTime+0x138>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d802      	bhi.n	8005eee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005ee8:	2309      	movs	r3, #9
 8005eea:	617b      	str	r3, [r7, #20]
 8005eec:	e020      	b.n	8005f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	4a21      	ldr	r2, [pc, #132]	; (8005f78 <USB_SetTurnaroundTime+0x138>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d906      	bls.n	8005f04 <USB_SetTurnaroundTime+0xc4>
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	4a20      	ldr	r2, [pc, #128]	; (8005f7c <USB_SetTurnaroundTime+0x13c>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d802      	bhi.n	8005f04 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005efe:	2308      	movs	r3, #8
 8005f00:	617b      	str	r3, [r7, #20]
 8005f02:	e015      	b.n	8005f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	4a1d      	ldr	r2, [pc, #116]	; (8005f7c <USB_SetTurnaroundTime+0x13c>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d906      	bls.n	8005f1a <USB_SetTurnaroundTime+0xda>
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	4a1c      	ldr	r2, [pc, #112]	; (8005f80 <USB_SetTurnaroundTime+0x140>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d802      	bhi.n	8005f1a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005f14:	2307      	movs	r3, #7
 8005f16:	617b      	str	r3, [r7, #20]
 8005f18:	e00a      	b.n	8005f30 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005f1a:	2306      	movs	r3, #6
 8005f1c:	617b      	str	r3, [r7, #20]
 8005f1e:	e007      	b.n	8005f30 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005f20:	79fb      	ldrb	r3, [r7, #7]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d102      	bne.n	8005f2c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005f26:	2309      	movs	r3, #9
 8005f28:	617b      	str	r3, [r7, #20]
 8005f2a:	e001      	b.n	8005f30 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005f2c:	2309      	movs	r3, #9
 8005f2e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	68da      	ldr	r2, [r3, #12]
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	029b      	lsls	r3, r3, #10
 8005f44:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005f48:	431a      	orrs	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	371c      	adds	r7, #28
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr
 8005f5c:	00d8acbf 	.word	0x00d8acbf
 8005f60:	00e4e1bf 	.word	0x00e4e1bf
 8005f64:	00f423ff 	.word	0x00f423ff
 8005f68:	0106737f 	.word	0x0106737f
 8005f6c:	011a499f 	.word	0x011a499f
 8005f70:	01312cff 	.word	0x01312cff
 8005f74:	014ca43f 	.word	0x014ca43f
 8005f78:	016e35ff 	.word	0x016e35ff
 8005f7c:	01a6ab1f 	.word	0x01a6ab1f
 8005f80:	01e847ff 	.word	0x01e847ff

08005f84 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	f043 0201 	orr.w	r2, r3, #1
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	370c      	adds	r7, #12
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr

08005fa6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b083      	sub	sp, #12
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f023 0201 	bic.w	r2, r3, #1
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005fe0:	78fb      	ldrb	r3, [r7, #3]
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d106      	bne.n	8005ff4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	60da      	str	r2, [r3, #12]
 8005ff2:	e00b      	b.n	800600c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005ff4:	78fb      	ldrb	r3, [r7, #3]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d106      	bne.n	8006008 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	60da      	str	r2, [r3, #12]
 8006006:	e001      	b.n	800600c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e003      	b.n	8006014 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800600c:	2032      	movs	r0, #50	; 0x32
 800600e:	f7fa fafd 	bl	800060c <HAL_Delay>

  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3708      	adds	r7, #8
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800601c:	b084      	sub	sp, #16
 800601e:	b580      	push	{r7, lr}
 8006020:	b086      	sub	sp, #24
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
 8006026:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800602a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800602e:	2300      	movs	r3, #0
 8006030:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006036:	2300      	movs	r3, #0
 8006038:	613b      	str	r3, [r7, #16]
 800603a:	e009      	b.n	8006050 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	3340      	adds	r3, #64	; 0x40
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	4413      	add	r3, r2
 8006046:	2200      	movs	r2, #0
 8006048:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	3301      	adds	r3, #1
 800604e:	613b      	str	r3, [r7, #16]
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	2b0e      	cmp	r3, #14
 8006054:	d9f2      	bls.n	800603c <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006058:	2b00      	cmp	r3, #0
 800605a:	d112      	bne.n	8006082 <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006060:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	601a      	str	r2, [r3, #0]
 8006080:	e005      	b.n	800608e <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006086:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006094:	461a      	mov	r2, r3
 8006096:	2300      	movs	r3, #0
 8006098:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060a0:	4619      	mov	r1, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060a8:	461a      	mov	r2, r3
 80060aa:	680b      	ldr	r3, [r1, #0]
 80060ac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d10c      	bne.n	80060ce <USB_DevInit+0xb2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80060b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d104      	bne.n	80060c4 <USB_DevInit+0xa8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80060ba:	2100      	movs	r1, #0
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 f961 	bl	8006384 <USB_SetDevSpeed>
 80060c2:	e008      	b.n	80060d6 <USB_DevInit+0xba>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80060c4:	2101      	movs	r1, #1
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f95c 	bl	8006384 <USB_SetDevSpeed>
 80060cc:	e003      	b.n	80060d6 <USB_DevInit+0xba>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80060ce:	2103      	movs	r1, #3
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 f957 	bl	8006384 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80060d6:	2110      	movs	r1, #16
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 f90b 	bl	80062f4 <USB_FlushTxFifo>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d001      	beq.n	80060e8 <USB_DevInit+0xcc>
  {
    ret = HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 f929 	bl	8006340 <USB_FlushRxFifo>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d001      	beq.n	80060f8 <USB_DevInit+0xdc>
  {
    ret = HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060fe:	461a      	mov	r2, r3
 8006100:	2300      	movs	r3, #0
 8006102:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800610a:	461a      	mov	r2, r3
 800610c:	2300      	movs	r3, #0
 800610e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006116:	461a      	mov	r2, r3
 8006118:	2300      	movs	r3, #0
 800611a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800611c:	2300      	movs	r3, #0
 800611e:	613b      	str	r3, [r7, #16]
 8006120:	e043      	b.n	80061aa <USB_DevInit+0x18e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	015a      	lsls	r2, r3, #5
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	4413      	add	r3, r2
 800612a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006134:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006138:	d118      	bne.n	800616c <USB_DevInit+0x150>
    {
      if (i == 0U)
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d10a      	bne.n	8006156 <USB_DevInit+0x13a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	015a      	lsls	r2, r3, #5
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	4413      	add	r3, r2
 8006148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800614c:	461a      	mov	r2, r3
 800614e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006152:	6013      	str	r3, [r2, #0]
 8006154:	e013      	b.n	800617e <USB_DevInit+0x162>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	015a      	lsls	r2, r3, #5
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	4413      	add	r3, r2
 800615e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006162:	461a      	mov	r2, r3
 8006164:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006168:	6013      	str	r3, [r2, #0]
 800616a:	e008      	b.n	800617e <USB_DevInit+0x162>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	015a      	lsls	r2, r3, #5
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	4413      	add	r3, r2
 8006174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006178:	461a      	mov	r2, r3
 800617a:	2300      	movs	r3, #0
 800617c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	015a      	lsls	r2, r3, #5
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	4413      	add	r3, r2
 8006186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800618a:	461a      	mov	r2, r3
 800618c:	2300      	movs	r3, #0
 800618e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	015a      	lsls	r2, r3, #5
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	4413      	add	r3, r2
 8006198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800619c:	461a      	mov	r2, r3
 800619e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80061a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	3301      	adds	r3, #1
 80061a8:	613b      	str	r3, [r7, #16]
 80061aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ac:	693a      	ldr	r2, [r7, #16]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d3b7      	bcc.n	8006122 <USB_DevInit+0x106>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061b2:	2300      	movs	r3, #0
 80061b4:	613b      	str	r3, [r7, #16]
 80061b6:	e043      	b.n	8006240 <USB_DevInit+0x224>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	015a      	lsls	r2, r3, #5
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	4413      	add	r3, r2
 80061c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061ce:	d118      	bne.n	8006202 <USB_DevInit+0x1e6>
    {
      if (i == 0U)
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d10a      	bne.n	80061ec <USB_DevInit+0x1d0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	015a      	lsls	r2, r3, #5
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	4413      	add	r3, r2
 80061de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e2:	461a      	mov	r2, r3
 80061e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80061e8:	6013      	str	r3, [r2, #0]
 80061ea:	e013      	b.n	8006214 <USB_DevInit+0x1f8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	015a      	lsls	r2, r3, #5
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	4413      	add	r3, r2
 80061f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f8:	461a      	mov	r2, r3
 80061fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80061fe:	6013      	str	r3, [r2, #0]
 8006200:	e008      	b.n	8006214 <USB_DevInit+0x1f8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	015a      	lsls	r2, r3, #5
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	4413      	add	r3, r2
 800620a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800620e:	461a      	mov	r2, r3
 8006210:	2300      	movs	r3, #0
 8006212:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	015a      	lsls	r2, r3, #5
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	4413      	add	r3, r2
 800621c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006220:	461a      	mov	r2, r3
 8006222:	2300      	movs	r3, #0
 8006224:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	015a      	lsls	r2, r3, #5
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	4413      	add	r3, r2
 800622e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006232:	461a      	mov	r2, r3
 8006234:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006238:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	3301      	adds	r3, #1
 800623e:	613b      	str	r3, [r7, #16]
 8006240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006242:	693a      	ldr	r2, [r7, #16]
 8006244:	429a      	cmp	r2, r3
 8006246:	d3b7      	bcc.n	80061b8 <USB_DevInit+0x19c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006256:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800625a:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800625c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625e:	2b01      	cmp	r3, #1
 8006260:	d111      	bne.n	8006286 <USB_DevInit+0x26a>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006268:	461a      	mov	r2, r3
 800626a:	4b20      	ldr	r3, [pc, #128]	; (80062ec <USB_DevInit+0x2d0>)
 800626c:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800627c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006280:	f043 0303 	orr.w	r3, r3, #3
 8006284:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006292:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006296:	2b00      	cmp	r3, #0
 8006298:	d105      	bne.n	80062a6 <USB_DevInit+0x28a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	699b      	ldr	r3, [r3, #24]
 800629e:	f043 0210 	orr.w	r2, r3, #16
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	699a      	ldr	r2, [r3, #24]
 80062aa:	4b11      	ldr	r3, [pc, #68]	; (80062f0 <USB_DevInit+0x2d4>)
 80062ac:	4313      	orrs	r3, r2
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80062b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d005      	beq.n	80062c4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	699b      	ldr	r3, [r3, #24]
 80062bc:	f043 0208 	orr.w	r2, r3, #8
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80062c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d107      	bne.n	80062da <USB_DevInit+0x2be>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	699b      	ldr	r3, [r3, #24]
 80062ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062d2:	f043 0304 	orr.w	r3, r3, #4
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80062da:	7dfb      	ldrb	r3, [r7, #23]
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3718      	adds	r7, #24
 80062e0:	46bd      	mov	sp, r7
 80062e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062e6:	b004      	add	sp, #16
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop
 80062ec:	00800100 	.word	0x00800100
 80062f0:	803c3800 	.word	0x803c3800

080062f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b085      	sub	sp, #20
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80062fe:	2300      	movs	r3, #0
 8006300:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	019b      	lsls	r3, r3, #6
 8006306:	f043 0220 	orr.w	r2, r3, #32
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	3301      	adds	r3, #1
 8006312:	60fb      	str	r3, [r7, #12]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	4a09      	ldr	r2, [pc, #36]	; (800633c <USB_FlushTxFifo+0x48>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d901      	bls.n	8006320 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800631c:	2303      	movs	r3, #3
 800631e:	e006      	b.n	800632e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	f003 0320 	and.w	r3, r3, #32
 8006328:	2b20      	cmp	r3, #32
 800632a:	d0f0      	beq.n	800630e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3714      	adds	r7, #20
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	00030d40 	.word	0x00030d40

08006340 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006340:	b480      	push	{r7}
 8006342:	b085      	sub	sp, #20
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006348:	2300      	movs	r3, #0
 800634a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2210      	movs	r2, #16
 8006350:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	3301      	adds	r3, #1
 8006356:	60fb      	str	r3, [r7, #12]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	4a09      	ldr	r2, [pc, #36]	; (8006380 <USB_FlushRxFifo+0x40>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d901      	bls.n	8006364 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	e006      	b.n	8006372 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	f003 0310 	and.w	r3, r3, #16
 800636c:	2b10      	cmp	r3, #16
 800636e:	d0f0      	beq.n	8006352 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3714      	adds	r7, #20
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	00030d40 	.word	0x00030d40

08006384 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	460b      	mov	r3, r1
 800638e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	78fb      	ldrb	r3, [r7, #3]
 800639e:	68f9      	ldr	r1, [r7, #12]
 80063a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063a4:	4313      	orrs	r3, r2
 80063a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3714      	adds	r7, #20
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr

080063b6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80063b6:	b480      	push	{r7}
 80063b8:	b087      	sub	sp, #28
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f003 0306 	and.w	r3, r3, #6
 80063ce:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d102      	bne.n	80063dc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80063d6:	2300      	movs	r3, #0
 80063d8:	75fb      	strb	r3, [r7, #23]
 80063da:	e00a      	b.n	80063f2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d002      	beq.n	80063e8 <USB_GetDevSpeed+0x32>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2b06      	cmp	r3, #6
 80063e6:	d102      	bne.n	80063ee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80063e8:	2302      	movs	r3, #2
 80063ea:	75fb      	strb	r3, [r7, #23]
 80063ec:	e001      	b.n	80063f2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80063ee:	230f      	movs	r3, #15
 80063f0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80063f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	371c      	adds	r7, #28
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006400:	b480      	push	{r7}
 8006402:	b085      	sub	sp, #20
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	785b      	ldrb	r3, [r3, #1]
 8006418:	2b01      	cmp	r3, #1
 800641a:	d13a      	bne.n	8006492 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006422:	69da      	ldr	r2, [r3, #28]
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	f003 030f 	and.w	r3, r3, #15
 800642c:	2101      	movs	r1, #1
 800642e:	fa01 f303 	lsl.w	r3, r1, r3
 8006432:	b29b      	uxth	r3, r3
 8006434:	68f9      	ldr	r1, [r7, #12]
 8006436:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800643a:	4313      	orrs	r3, r2
 800643c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	015a      	lsls	r2, r3, #5
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	4413      	add	r3, r2
 8006446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d155      	bne.n	8006500 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	015a      	lsls	r2, r3, #5
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	4413      	add	r3, r2
 800645c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	78db      	ldrb	r3, [r3, #3]
 800646e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006470:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	059b      	lsls	r3, r3, #22
 8006476:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006478:	4313      	orrs	r3, r2
 800647a:	68ba      	ldr	r2, [r7, #8]
 800647c:	0151      	lsls	r1, r2, #5
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	440a      	add	r2, r1
 8006482:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006486:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800648a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800648e:	6013      	str	r3, [r2, #0]
 8006490:	e036      	b.n	8006500 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006498:	69da      	ldr	r2, [r3, #28]
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	f003 030f 	and.w	r3, r3, #15
 80064a2:	2101      	movs	r1, #1
 80064a4:	fa01 f303 	lsl.w	r3, r1, r3
 80064a8:	041b      	lsls	r3, r3, #16
 80064aa:	68f9      	ldr	r1, [r7, #12]
 80064ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064b0:	4313      	orrs	r3, r2
 80064b2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	015a      	lsls	r2, r3, #5
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	4413      	add	r3, r2
 80064bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d11a      	bne.n	8006500 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	015a      	lsls	r2, r3, #5
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	4413      	add	r3, r2
 80064d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	78db      	ldrb	r3, [r3, #3]
 80064e4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80064e6:	430b      	orrs	r3, r1
 80064e8:	4313      	orrs	r3, r2
 80064ea:	68ba      	ldr	r2, [r7, #8]
 80064ec:	0151      	lsls	r1, r2, #5
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	440a      	add	r2, r1
 80064f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064fe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	3714      	adds	r7, #20
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr
	...

08006510 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006510:	b480      	push	{r7}
 8006512:	b085      	sub	sp, #20
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	785b      	ldrb	r3, [r3, #1]
 8006528:	2b01      	cmp	r3, #1
 800652a:	d135      	bne.n	8006598 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006532:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	f003 030f 	and.w	r3, r3, #15
 800653c:	2101      	movs	r1, #1
 800653e:	fa01 f303 	lsl.w	r3, r1, r3
 8006542:	b29b      	uxth	r3, r3
 8006544:	43db      	mvns	r3, r3
 8006546:	68f9      	ldr	r1, [r7, #12]
 8006548:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800654c:	4013      	ands	r3, r2
 800654e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006556:	69da      	ldr	r2, [r3, #28]
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	f003 030f 	and.w	r3, r3, #15
 8006560:	2101      	movs	r1, #1
 8006562:	fa01 f303 	lsl.w	r3, r1, r3
 8006566:	b29b      	uxth	r3, r3
 8006568:	43db      	mvns	r3, r3
 800656a:	68f9      	ldr	r1, [r7, #12]
 800656c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006570:	4013      	ands	r3, r2
 8006572:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	015a      	lsls	r2, r3, #5
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	4413      	add	r3, r2
 800657c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	0159      	lsls	r1, r3, #5
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	440b      	add	r3, r1
 800658a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800658e:	4619      	mov	r1, r3
 8006590:	4b1f      	ldr	r3, [pc, #124]	; (8006610 <USB_DeactivateEndpoint+0x100>)
 8006592:	4013      	ands	r3, r2
 8006594:	600b      	str	r3, [r1, #0]
 8006596:	e034      	b.n	8006602 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800659e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	f003 030f 	and.w	r3, r3, #15
 80065a8:	2101      	movs	r1, #1
 80065aa:	fa01 f303 	lsl.w	r3, r1, r3
 80065ae:	041b      	lsls	r3, r3, #16
 80065b0:	43db      	mvns	r3, r3
 80065b2:	68f9      	ldr	r1, [r7, #12]
 80065b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065b8:	4013      	ands	r3, r2
 80065ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065c2:	69da      	ldr	r2, [r3, #28]
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	f003 030f 	and.w	r3, r3, #15
 80065cc:	2101      	movs	r1, #1
 80065ce:	fa01 f303 	lsl.w	r3, r1, r3
 80065d2:	041b      	lsls	r3, r3, #16
 80065d4:	43db      	mvns	r3, r3
 80065d6:	68f9      	ldr	r1, [r7, #12]
 80065d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065dc:	4013      	ands	r3, r2
 80065de:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	015a      	lsls	r2, r3, #5
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	4413      	add	r3, r2
 80065e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	0159      	lsls	r1, r3, #5
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	440b      	add	r3, r1
 80065f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065fa:	4619      	mov	r1, r3
 80065fc:	4b05      	ldr	r3, [pc, #20]	; (8006614 <USB_DeactivateEndpoint+0x104>)
 80065fe:	4013      	ands	r3, r2
 8006600:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006602:	2300      	movs	r3, #0
}
 8006604:	4618      	mov	r0, r3
 8006606:	3714      	adds	r7, #20
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr
 8006610:	ec337800 	.word	0xec337800
 8006614:	eff37800 	.word	0xeff37800

08006618 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b08a      	sub	sp, #40	; 0x28
 800661c:	af02      	add	r7, sp, #8
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	4613      	mov	r3, r2
 8006624:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	785b      	ldrb	r3, [r3, #1]
 8006634:	2b01      	cmp	r3, #1
 8006636:	f040 815c 	bne.w	80068f2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	695b      	ldr	r3, [r3, #20]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d132      	bne.n	80066a8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	015a      	lsls	r2, r3, #5
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	4413      	add	r3, r2
 800664a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	69ba      	ldr	r2, [r7, #24]
 8006652:	0151      	lsls	r1, r2, #5
 8006654:	69fa      	ldr	r2, [r7, #28]
 8006656:	440a      	add	r2, r1
 8006658:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800665c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006660:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006664:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	015a      	lsls	r2, r3, #5
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	4413      	add	r3, r2
 800666e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	69ba      	ldr	r2, [r7, #24]
 8006676:	0151      	lsls	r1, r2, #5
 8006678:	69fa      	ldr	r2, [r7, #28]
 800667a:	440a      	add	r2, r1
 800667c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006680:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006684:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	015a      	lsls	r2, r3, #5
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	4413      	add	r3, r2
 800668e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	69ba      	ldr	r2, [r7, #24]
 8006696:	0151      	lsls	r1, r2, #5
 8006698:	69fa      	ldr	r2, [r7, #28]
 800669a:	440a      	add	r2, r1
 800669c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066a0:	0cdb      	lsrs	r3, r3, #19
 80066a2:	04db      	lsls	r3, r3, #19
 80066a4:	6113      	str	r3, [r2, #16]
 80066a6:	e074      	b.n	8006792 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	015a      	lsls	r2, r3, #5
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	4413      	add	r3, r2
 80066b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	69ba      	ldr	r2, [r7, #24]
 80066b8:	0151      	lsls	r1, r2, #5
 80066ba:	69fa      	ldr	r2, [r7, #28]
 80066bc:	440a      	add	r2, r1
 80066be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066c2:	0cdb      	lsrs	r3, r3, #19
 80066c4:	04db      	lsls	r3, r3, #19
 80066c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	015a      	lsls	r2, r3, #5
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	4413      	add	r3, r2
 80066d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	69ba      	ldr	r2, [r7, #24]
 80066d8:	0151      	lsls	r1, r2, #5
 80066da:	69fa      	ldr	r2, [r7, #28]
 80066dc:	440a      	add	r2, r1
 80066de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80066e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80066ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	015a      	lsls	r2, r3, #5
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	4413      	add	r3, r2
 80066f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f8:	691a      	ldr	r2, [r3, #16]
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	6959      	ldr	r1, [r3, #20]
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	440b      	add	r3, r1
 8006704:	1e59      	subs	r1, r3, #1
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	fbb1 f3f3 	udiv	r3, r1, r3
 800670e:	04d9      	lsls	r1, r3, #19
 8006710:	4b9d      	ldr	r3, [pc, #628]	; (8006988 <USB_EPStartXfer+0x370>)
 8006712:	400b      	ands	r3, r1
 8006714:	69b9      	ldr	r1, [r7, #24]
 8006716:	0148      	lsls	r0, r1, #5
 8006718:	69f9      	ldr	r1, [r7, #28]
 800671a:	4401      	add	r1, r0
 800671c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006720:	4313      	orrs	r3, r2
 8006722:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	015a      	lsls	r2, r3, #5
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	4413      	add	r3, r2
 800672c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006730:	691a      	ldr	r2, [r3, #16]
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	695b      	ldr	r3, [r3, #20]
 8006736:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800673a:	69b9      	ldr	r1, [r7, #24]
 800673c:	0148      	lsls	r0, r1, #5
 800673e:	69f9      	ldr	r1, [r7, #28]
 8006740:	4401      	add	r1, r0
 8006742:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006746:	4313      	orrs	r3, r2
 8006748:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	78db      	ldrb	r3, [r3, #3]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d11f      	bne.n	8006792 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	015a      	lsls	r2, r3, #5
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	4413      	add	r3, r2
 800675a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	69ba      	ldr	r2, [r7, #24]
 8006762:	0151      	lsls	r1, r2, #5
 8006764:	69fa      	ldr	r2, [r7, #28]
 8006766:	440a      	add	r2, r1
 8006768:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800676c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006770:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	015a      	lsls	r2, r3, #5
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	4413      	add	r3, r2
 800677a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	69ba      	ldr	r2, [r7, #24]
 8006782:	0151      	lsls	r1, r2, #5
 8006784:	69fa      	ldr	r2, [r7, #28]
 8006786:	440a      	add	r2, r1
 8006788:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800678c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006790:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006792:	79fb      	ldrb	r3, [r7, #7]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d14b      	bne.n	8006830 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d009      	beq.n	80067b4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	015a      	lsls	r2, r3, #5
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	4413      	add	r3, r2
 80067a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ac:	461a      	mov	r2, r3
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	78db      	ldrb	r3, [r3, #3]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d128      	bne.n	800680e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d110      	bne.n	80067ee <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	015a      	lsls	r2, r3, #5
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	4413      	add	r3, r2
 80067d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	69ba      	ldr	r2, [r7, #24]
 80067dc:	0151      	lsls	r1, r2, #5
 80067de:	69fa      	ldr	r2, [r7, #28]
 80067e0:	440a      	add	r2, r1
 80067e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80067ea:	6013      	str	r3, [r2, #0]
 80067ec:	e00f      	b.n	800680e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	015a      	lsls	r2, r3, #5
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	4413      	add	r3, r2
 80067f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	69ba      	ldr	r2, [r7, #24]
 80067fe:	0151      	lsls	r1, r2, #5
 8006800:	69fa      	ldr	r2, [r7, #28]
 8006802:	440a      	add	r2, r1
 8006804:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800680c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	015a      	lsls	r2, r3, #5
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	4413      	add	r3, r2
 8006816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	69ba      	ldr	r2, [r7, #24]
 800681e:	0151      	lsls	r1, r2, #5
 8006820:	69fa      	ldr	r2, [r7, #28]
 8006822:	440a      	add	r2, r1
 8006824:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006828:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800682c:	6013      	str	r3, [r2, #0]
 800682e:	e12f      	b.n	8006a90 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	015a      	lsls	r2, r3, #5
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	4413      	add	r3, r2
 8006838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	69ba      	ldr	r2, [r7, #24]
 8006840:	0151      	lsls	r1, r2, #5
 8006842:	69fa      	ldr	r2, [r7, #28]
 8006844:	440a      	add	r2, r1
 8006846:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800684a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800684e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	78db      	ldrb	r3, [r3, #3]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d015      	beq.n	8006884 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	695b      	ldr	r3, [r3, #20]
 800685c:	2b00      	cmp	r3, #0
 800685e:	f000 8117 	beq.w	8006a90 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	f003 030f 	and.w	r3, r3, #15
 8006872:	2101      	movs	r1, #1
 8006874:	fa01 f303 	lsl.w	r3, r1, r3
 8006878:	69f9      	ldr	r1, [r7, #28]
 800687a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800687e:	4313      	orrs	r3, r2
 8006880:	634b      	str	r3, [r1, #52]	; 0x34
 8006882:	e105      	b.n	8006a90 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006890:	2b00      	cmp	r3, #0
 8006892:	d110      	bne.n	80068b6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	015a      	lsls	r2, r3, #5
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	4413      	add	r3, r2
 800689c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	69ba      	ldr	r2, [r7, #24]
 80068a4:	0151      	lsls	r1, r2, #5
 80068a6:	69fa      	ldr	r2, [r7, #28]
 80068a8:	440a      	add	r2, r1
 80068aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80068b2:	6013      	str	r3, [r2, #0]
 80068b4:	e00f      	b.n	80068d6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	015a      	lsls	r2, r3, #5
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	4413      	add	r3, r2
 80068be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	69ba      	ldr	r2, [r7, #24]
 80068c6:	0151      	lsls	r1, r2, #5
 80068c8:	69fa      	ldr	r2, [r7, #28]
 80068ca:	440a      	add	r2, r1
 80068cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068d4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	68d9      	ldr	r1, [r3, #12]
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	781a      	ldrb	r2, [r3, #0]
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	695b      	ldr	r3, [r3, #20]
 80068e2:	b298      	uxth	r0, r3
 80068e4:	79fb      	ldrb	r3, [r7, #7]
 80068e6:	9300      	str	r3, [sp, #0]
 80068e8:	4603      	mov	r3, r0
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f000 fa2b 	bl	8006d46 <USB_WritePacket>
 80068f0:	e0ce      	b.n	8006a90 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	015a      	lsls	r2, r3, #5
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	4413      	add	r3, r2
 80068fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	69ba      	ldr	r2, [r7, #24]
 8006902:	0151      	lsls	r1, r2, #5
 8006904:	69fa      	ldr	r2, [r7, #28]
 8006906:	440a      	add	r2, r1
 8006908:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800690c:	0cdb      	lsrs	r3, r3, #19
 800690e:	04db      	lsls	r3, r3, #19
 8006910:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	015a      	lsls	r2, r3, #5
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	4413      	add	r3, r2
 800691a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	69ba      	ldr	r2, [r7, #24]
 8006922:	0151      	lsls	r1, r2, #5
 8006924:	69fa      	ldr	r2, [r7, #28]
 8006926:	440a      	add	r2, r1
 8006928:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800692c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006930:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006934:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	695b      	ldr	r3, [r3, #20]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d126      	bne.n	800698c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	015a      	lsls	r2, r3, #5
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	4413      	add	r3, r2
 8006946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800694a:	691a      	ldr	r2, [r3, #16]
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006954:	69b9      	ldr	r1, [r7, #24]
 8006956:	0148      	lsls	r0, r1, #5
 8006958:	69f9      	ldr	r1, [r7, #28]
 800695a:	4401      	add	r1, r0
 800695c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006960:	4313      	orrs	r3, r2
 8006962:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	015a      	lsls	r2, r3, #5
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	4413      	add	r3, r2
 800696c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	69ba      	ldr	r2, [r7, #24]
 8006974:	0151      	lsls	r1, r2, #5
 8006976:	69fa      	ldr	r2, [r7, #28]
 8006978:	440a      	add	r2, r1
 800697a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800697e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006982:	6113      	str	r3, [r2, #16]
 8006984:	e036      	b.n	80069f4 <USB_EPStartXfer+0x3dc>
 8006986:	bf00      	nop
 8006988:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	695a      	ldr	r2, [r3, #20]
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	4413      	add	r3, r2
 8006996:	1e5a      	subs	r2, r3, #1
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	fbb2 f3f3 	udiv	r3, r2, r3
 80069a0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	015a      	lsls	r2, r3, #5
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	4413      	add	r3, r2
 80069aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ae:	691a      	ldr	r2, [r3, #16]
 80069b0:	8afb      	ldrh	r3, [r7, #22]
 80069b2:	04d9      	lsls	r1, r3, #19
 80069b4:	4b39      	ldr	r3, [pc, #228]	; (8006a9c <USB_EPStartXfer+0x484>)
 80069b6:	400b      	ands	r3, r1
 80069b8:	69b9      	ldr	r1, [r7, #24]
 80069ba:	0148      	lsls	r0, r1, #5
 80069bc:	69f9      	ldr	r1, [r7, #28]
 80069be:	4401      	add	r1, r0
 80069c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80069c4:	4313      	orrs	r3, r2
 80069c6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	015a      	lsls	r2, r3, #5
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	4413      	add	r3, r2
 80069d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d4:	691a      	ldr	r2, [r3, #16]
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	8af9      	ldrh	r1, [r7, #22]
 80069dc:	fb01 f303 	mul.w	r3, r1, r3
 80069e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069e4:	69b9      	ldr	r1, [r7, #24]
 80069e6:	0148      	lsls	r0, r1, #5
 80069e8:	69f9      	ldr	r1, [r7, #28]
 80069ea:	4401      	add	r1, r0
 80069ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80069f0:	4313      	orrs	r3, r2
 80069f2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80069f4:	79fb      	ldrb	r3, [r7, #7]
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d10d      	bne.n	8006a16 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d009      	beq.n	8006a16 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	68d9      	ldr	r1, [r3, #12]
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	015a      	lsls	r2, r3, #5
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a12:	460a      	mov	r2, r1
 8006a14:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	78db      	ldrb	r3, [r3, #3]
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d128      	bne.n	8006a70 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d110      	bne.n	8006a50 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	015a      	lsls	r2, r3, #5
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	4413      	add	r3, r2
 8006a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	69ba      	ldr	r2, [r7, #24]
 8006a3e:	0151      	lsls	r1, r2, #5
 8006a40:	69fa      	ldr	r2, [r7, #28]
 8006a42:	440a      	add	r2, r1
 8006a44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a48:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a4c:	6013      	str	r3, [r2, #0]
 8006a4e:	e00f      	b.n	8006a70 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	015a      	lsls	r2, r3, #5
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	4413      	add	r3, r2
 8006a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	69ba      	ldr	r2, [r7, #24]
 8006a60:	0151      	lsls	r1, r2, #5
 8006a62:	69fa      	ldr	r2, [r7, #28]
 8006a64:	440a      	add	r2, r1
 8006a66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a6e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	015a      	lsls	r2, r3, #5
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	4413      	add	r3, r2
 8006a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	69ba      	ldr	r2, [r7, #24]
 8006a80:	0151      	lsls	r1, r2, #5
 8006a82:	69fa      	ldr	r2, [r7, #28]
 8006a84:	440a      	add	r2, r1
 8006a86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a8a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a8e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3720      	adds	r7, #32
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	1ff80000 	.word	0x1ff80000

08006aa0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b087      	sub	sp, #28
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	4613      	mov	r3, r2
 8006aac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	785b      	ldrb	r3, [r3, #1]
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	f040 80cd 	bne.w	8006c5c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	695b      	ldr	r3, [r3, #20]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d132      	bne.n	8006b30 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	015a      	lsls	r2, r3, #5
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	693a      	ldr	r2, [r7, #16]
 8006ada:	0151      	lsls	r1, r2, #5
 8006adc:	697a      	ldr	r2, [r7, #20]
 8006ade:	440a      	add	r2, r1
 8006ae0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ae4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ae8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006aec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	015a      	lsls	r2, r3, #5
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	4413      	add	r3, r2
 8006af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	693a      	ldr	r2, [r7, #16]
 8006afe:	0151      	lsls	r1, r2, #5
 8006b00:	697a      	ldr	r2, [r7, #20]
 8006b02:	440a      	add	r2, r1
 8006b04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	015a      	lsls	r2, r3, #5
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	4413      	add	r3, r2
 8006b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	693a      	ldr	r2, [r7, #16]
 8006b1e:	0151      	lsls	r1, r2, #5
 8006b20:	697a      	ldr	r2, [r7, #20]
 8006b22:	440a      	add	r2, r1
 8006b24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b28:	0cdb      	lsrs	r3, r3, #19
 8006b2a:	04db      	lsls	r3, r3, #19
 8006b2c:	6113      	str	r3, [r2, #16]
 8006b2e:	e04e      	b.n	8006bce <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	015a      	lsls	r2, r3, #5
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	4413      	add	r3, r2
 8006b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	693a      	ldr	r2, [r7, #16]
 8006b40:	0151      	lsls	r1, r2, #5
 8006b42:	697a      	ldr	r2, [r7, #20]
 8006b44:	440a      	add	r2, r1
 8006b46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b4a:	0cdb      	lsrs	r3, r3, #19
 8006b4c:	04db      	lsls	r3, r3, #19
 8006b4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	015a      	lsls	r2, r3, #5
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	4413      	add	r3, r2
 8006b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b5c:	691b      	ldr	r3, [r3, #16]
 8006b5e:	693a      	ldr	r2, [r7, #16]
 8006b60:	0151      	lsls	r1, r2, #5
 8006b62:	697a      	ldr	r2, [r7, #20]
 8006b64:	440a      	add	r2, r1
 8006b66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b6a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b6e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b72:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	695a      	ldr	r2, [r3, #20]
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d903      	bls.n	8006b88 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	689a      	ldr	r2, [r3, #8]
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	015a      	lsls	r2, r3, #5
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	693a      	ldr	r2, [r7, #16]
 8006b98:	0151      	lsls	r1, r2, #5
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	440a      	add	r2, r1
 8006b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ba2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ba6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	015a      	lsls	r2, r3, #5
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	4413      	add	r3, r2
 8006bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bb4:	691a      	ldr	r2, [r3, #16]
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bbe:	6939      	ldr	r1, [r7, #16]
 8006bc0:	0148      	lsls	r0, r1, #5
 8006bc2:	6979      	ldr	r1, [r7, #20]
 8006bc4:	4401      	add	r1, r0
 8006bc6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006bce:	79fb      	ldrb	r3, [r7, #7]
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d11e      	bne.n	8006c12 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d009      	beq.n	8006bf0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	015a      	lsls	r2, r3, #5
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	4413      	add	r3, r2
 8006be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006be8:	461a      	mov	r2, r3
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	015a      	lsls	r2, r3, #5
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	693a      	ldr	r2, [r7, #16]
 8006c00:	0151      	lsls	r1, r2, #5
 8006c02:	697a      	ldr	r2, [r7, #20]
 8006c04:	440a      	add	r2, r1
 8006c06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c0a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c0e:	6013      	str	r3, [r2, #0]
 8006c10:	e092      	b.n	8006d38 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	015a      	lsls	r2, r3, #5
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	4413      	add	r3, r2
 8006c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	693a      	ldr	r2, [r7, #16]
 8006c22:	0151      	lsls	r1, r2, #5
 8006c24:	697a      	ldr	r2, [r7, #20]
 8006c26:	440a      	add	r2, r1
 8006c28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c2c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c30:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d07e      	beq.n	8006d38 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	f003 030f 	and.w	r3, r3, #15
 8006c4a:	2101      	movs	r1, #1
 8006c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c50:	6979      	ldr	r1, [r7, #20]
 8006c52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c56:	4313      	orrs	r3, r2
 8006c58:	634b      	str	r3, [r1, #52]	; 0x34
 8006c5a:	e06d      	b.n	8006d38 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	015a      	lsls	r2, r3, #5
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	4413      	add	r3, r2
 8006c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	693a      	ldr	r2, [r7, #16]
 8006c6c:	0151      	lsls	r1, r2, #5
 8006c6e:	697a      	ldr	r2, [r7, #20]
 8006c70:	440a      	add	r2, r1
 8006c72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c76:	0cdb      	lsrs	r3, r3, #19
 8006c78:	04db      	lsls	r3, r3, #19
 8006c7a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	015a      	lsls	r2, r3, #5
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	4413      	add	r3, r2
 8006c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	693a      	ldr	r2, [r7, #16]
 8006c8c:	0151      	lsls	r1, r2, #5
 8006c8e:	697a      	ldr	r2, [r7, #20]
 8006c90:	440a      	add	r2, r1
 8006c92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c96:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c9a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c9e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	695b      	ldr	r3, [r3, #20]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d003      	beq.n	8006cb0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	689a      	ldr	r2, [r3, #8]
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	015a      	lsls	r2, r3, #5
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	693a      	ldr	r2, [r7, #16]
 8006cc0:	0151      	lsls	r1, r2, #5
 8006cc2:	697a      	ldr	r2, [r7, #20]
 8006cc4:	440a      	add	r2, r1
 8006cc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006cce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	015a      	lsls	r2, r3, #5
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cdc:	691a      	ldr	r2, [r3, #16]
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ce6:	6939      	ldr	r1, [r7, #16]
 8006ce8:	0148      	lsls	r0, r1, #5
 8006cea:	6979      	ldr	r1, [r7, #20]
 8006cec:	4401      	add	r1, r0
 8006cee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006cf6:	79fb      	ldrb	r3, [r7, #7]
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d10d      	bne.n	8006d18 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d009      	beq.n	8006d18 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	68d9      	ldr	r1, [r3, #12]
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	015a      	lsls	r2, r3, #5
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	4413      	add	r3, r2
 8006d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d14:	460a      	mov	r2, r1
 8006d16:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	015a      	lsls	r2, r3, #5
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	4413      	add	r3, r2
 8006d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	693a      	ldr	r2, [r7, #16]
 8006d28:	0151      	lsls	r1, r2, #5
 8006d2a:	697a      	ldr	r2, [r7, #20]
 8006d2c:	440a      	add	r2, r1
 8006d2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d36:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	371c      	adds	r7, #28
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr

08006d46 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006d46:	b480      	push	{r7}
 8006d48:	b089      	sub	sp, #36	; 0x24
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	60f8      	str	r0, [r7, #12]
 8006d4e:	60b9      	str	r1, [r7, #8]
 8006d50:	4611      	mov	r1, r2
 8006d52:	461a      	mov	r2, r3
 8006d54:	460b      	mov	r3, r1
 8006d56:	71fb      	strb	r3, [r7, #7]
 8006d58:	4613      	mov	r3, r2
 8006d5a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006d64:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d11a      	bne.n	8006da2 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006d6c:	88bb      	ldrh	r3, [r7, #4]
 8006d6e:	3303      	adds	r3, #3
 8006d70:	089b      	lsrs	r3, r3, #2
 8006d72:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006d74:	2300      	movs	r3, #0
 8006d76:	61bb      	str	r3, [r7, #24]
 8006d78:	e00f      	b.n	8006d9a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006d7a:	79fb      	ldrb	r3, [r7, #7]
 8006d7c:	031a      	lsls	r2, r3, #12
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	4413      	add	r3, r2
 8006d82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d86:	461a      	mov	r2, r3
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	3304      	adds	r3, #4
 8006d92:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	3301      	adds	r3, #1
 8006d98:	61bb      	str	r3, [r7, #24]
 8006d9a:	69ba      	ldr	r2, [r7, #24]
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d3eb      	bcc.n	8006d7a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3724      	adds	r7, #36	; 0x24
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b089      	sub	sp, #36	; 0x24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	4613      	mov	r3, r2
 8006dbc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006dc6:	88fb      	ldrh	r3, [r7, #6]
 8006dc8:	3303      	adds	r3, #3
 8006dca:	089b      	lsrs	r3, r3, #2
 8006dcc:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006dce:	2300      	movs	r3, #0
 8006dd0:	61bb      	str	r3, [r7, #24]
 8006dd2:	e00b      	b.n	8006dec <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	601a      	str	r2, [r3, #0]
    pDest++;
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	3304      	adds	r3, #4
 8006de4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	3301      	adds	r3, #1
 8006dea:	61bb      	str	r3, [r7, #24]
 8006dec:	69ba      	ldr	r2, [r7, #24]
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d3ef      	bcc.n	8006dd4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006df4:	69fb      	ldr	r3, [r7, #28]
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3724      	adds	r7, #36	; 0x24
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr

08006e02 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e02:	b480      	push	{r7}
 8006e04:	b085      	sub	sp, #20
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
 8006e0a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	785b      	ldrb	r3, [r3, #1]
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d12c      	bne.n	8006e78 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	015a      	lsls	r2, r3, #5
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	4413      	add	r3, r2
 8006e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	db12      	blt.n	8006e56 <USB_EPSetStall+0x54>
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00f      	beq.n	8006e56 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	015a      	lsls	r2, r3, #5
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	0151      	lsls	r1, r2, #5
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	440a      	add	r2, r1
 8006e4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e50:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e54:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	015a      	lsls	r2, r3, #5
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68ba      	ldr	r2, [r7, #8]
 8006e66:	0151      	lsls	r1, r2, #5
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	440a      	add	r2, r1
 8006e6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e74:	6013      	str	r3, [r2, #0]
 8006e76:	e02b      	b.n	8006ed0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	015a      	lsls	r2, r3, #5
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	4413      	add	r3, r2
 8006e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	db12      	blt.n	8006eb0 <USB_EPSetStall+0xae>
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00f      	beq.n	8006eb0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	015a      	lsls	r2, r3, #5
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	4413      	add	r3, r2
 8006e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	68ba      	ldr	r2, [r7, #8]
 8006ea0:	0151      	lsls	r1, r2, #5
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	440a      	add	r2, r1
 8006ea6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006eaa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006eae:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	015a      	lsls	r2, r3, #5
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68ba      	ldr	r2, [r7, #8]
 8006ec0:	0151      	lsls	r1, r2, #5
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	440a      	add	r2, r1
 8006ec6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006eca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ece:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3714      	adds	r7, #20
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr

08006ede <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ede:	b480      	push	{r7}
 8006ee0:	b085      	sub	sp, #20
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
 8006ee6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	785b      	ldrb	r3, [r3, #1]
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d128      	bne.n	8006f4c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	015a      	lsls	r2, r3, #5
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	4413      	add	r3, r2
 8006f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	68ba      	ldr	r2, [r7, #8]
 8006f0a:	0151      	lsls	r1, r2, #5
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	440a      	add	r2, r1
 8006f10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f14:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f18:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	78db      	ldrb	r3, [r3, #3]
 8006f1e:	2b03      	cmp	r3, #3
 8006f20:	d003      	beq.n	8006f2a <USB_EPClearStall+0x4c>
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	78db      	ldrb	r3, [r3, #3]
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	d138      	bne.n	8006f9c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	015a      	lsls	r2, r3, #5
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	4413      	add	r3, r2
 8006f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	68ba      	ldr	r2, [r7, #8]
 8006f3a:	0151      	lsls	r1, r2, #5
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	440a      	add	r2, r1
 8006f40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f48:	6013      	str	r3, [r2, #0]
 8006f4a:	e027      	b.n	8006f9c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	015a      	lsls	r2, r3, #5
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	4413      	add	r3, r2
 8006f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	0151      	lsls	r1, r2, #5
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	440a      	add	r2, r1
 8006f62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f6a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	78db      	ldrb	r3, [r3, #3]
 8006f70:	2b03      	cmp	r3, #3
 8006f72:	d003      	beq.n	8006f7c <USB_EPClearStall+0x9e>
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	78db      	ldrb	r3, [r3, #3]
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	d10f      	bne.n	8006f9c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	015a      	lsls	r2, r3, #5
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	4413      	add	r3, r2
 8006f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	68ba      	ldr	r2, [r7, #8]
 8006f8c:	0151      	lsls	r1, r2, #5
 8006f8e:	68fa      	ldr	r2, [r7, #12]
 8006f90:	440a      	add	r2, r1
 8006f92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f9a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3714      	adds	r7, #20
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr

08006faa <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006faa:	b480      	push	{r7}
 8006fac:	b085      	sub	sp, #20
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fc8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006fcc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	78fb      	ldrb	r3, [r7, #3]
 8006fd8:	011b      	lsls	r3, r3, #4
 8006fda:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006fde:	68f9      	ldr	r1, [r7, #12]
 8006fe0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3714      	adds	r7, #20
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr

08006ff6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b084      	sub	sp, #16
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007010:	f023 0302 	bic.w	r3, r3, #2
 8007014:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007016:	2003      	movs	r0, #3
 8007018:	f7f9 faf8 	bl	800060c <HAL_Delay>

  return HAL_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3710      	adds	r7, #16
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}

08007026 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007026:	b580      	push	{r7, lr}
 8007028:	b084      	sub	sp, #16
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	68fa      	ldr	r2, [r7, #12]
 800703c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007040:	f043 0302 	orr.w	r3, r3, #2
 8007044:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007046:	2003      	movs	r0, #3
 8007048:	f7f9 fae0 	bl	800060c <HAL_Delay>

  return HAL_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3710      	adds	r7, #16
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007056:	b480      	push	{r7}
 8007058:	b085      	sub	sp, #20
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	695b      	ldr	r3, [r3, #20]
 8007062:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	699b      	ldr	r3, [r3, #24]
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	4013      	ands	r3, r2
 800706c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800706e:	68fb      	ldr	r3, [r7, #12]
}
 8007070:	4618      	mov	r0, r3
 8007072:	3714      	adds	r7, #20
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800708e:	699b      	ldr	r3, [r3, #24]
 8007090:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007098:	69db      	ldr	r3, [r3, #28]
 800709a:	68ba      	ldr	r2, [r7, #8]
 800709c:	4013      	ands	r3, r2
 800709e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	0c1b      	lsrs	r3, r3, #16
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3714      	adds	r7, #20
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b085      	sub	sp, #20
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070c2:	699b      	ldr	r3, [r3, #24]
 80070c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070cc:	69db      	ldr	r3, [r3, #28]
 80070ce:	68ba      	ldr	r2, [r7, #8]
 80070d0:	4013      	ands	r3, r2
 80070d2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	b29b      	uxth	r3, r3
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3714      	adds	r7, #20
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b085      	sub	sp, #20
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	460b      	mov	r3, r1
 80070ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80070f4:	78fb      	ldrb	r3, [r7, #3]
 80070f6:	015a      	lsls	r2, r3, #5
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	4413      	add	r3, r2
 80070fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800710a:	695b      	ldr	r3, [r3, #20]
 800710c:	68ba      	ldr	r2, [r7, #8]
 800710e:	4013      	ands	r3, r2
 8007110:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007112:	68bb      	ldr	r3, [r7, #8]
}
 8007114:	4618      	mov	r0, r3
 8007116:	3714      	adds	r7, #20
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007120:	b480      	push	{r7}
 8007122:	b087      	sub	sp, #28
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	460b      	mov	r3, r1
 800712a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007142:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007144:	78fb      	ldrb	r3, [r7, #3]
 8007146:	f003 030f 	and.w	r3, r3, #15
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	fa22 f303 	lsr.w	r3, r2, r3
 8007150:	01db      	lsls	r3, r3, #7
 8007152:	b2db      	uxtb	r3, r3
 8007154:	693a      	ldr	r2, [r7, #16]
 8007156:	4313      	orrs	r3, r2
 8007158:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800715a:	78fb      	ldrb	r3, [r7, #3]
 800715c:	015a      	lsls	r2, r3, #5
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	4413      	add	r3, r2
 8007162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	693a      	ldr	r2, [r7, #16]
 800716a:	4013      	ands	r3, r2
 800716c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800716e:	68bb      	ldr	r3, [r7, #8]
}
 8007170:	4618      	mov	r0, r3
 8007172:	371c      	adds	r7, #28
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	695b      	ldr	r3, [r3, #20]
 8007188:	f003 0301 	and.w	r3, r3, #1
}
 800718c:	4618      	mov	r0, r3
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007198:	b480      	push	{r7}
 800719a:	b085      	sub	sp, #20
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071b2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80071b6:	f023 0307 	bic.w	r3, r3, #7
 80071ba:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	f003 0306 	and.w	r3, r3, #6
 80071c8:	2b04      	cmp	r3, #4
 80071ca:	d109      	bne.n	80071e0 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071da:	f043 0303 	orr.w	r3, r3, #3
 80071de:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071f2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3714      	adds	r7, #20
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr
	...

08007204 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007204:	b480      	push	{r7}
 8007206:	b087      	sub	sp, #28
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	460b      	mov	r3, r1
 800720e:	607a      	str	r2, [r7, #4]
 8007210:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	333c      	adds	r3, #60	; 0x3c
 800721a:	3304      	adds	r3, #4
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	4a26      	ldr	r2, [pc, #152]	; (80072bc <USB_EP0_OutStart+0xb8>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d90a      	bls.n	800723e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007234:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007238:	d101      	bne.n	800723e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800723a:	2300      	movs	r3, #0
 800723c:	e037      	b.n	80072ae <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007244:	461a      	mov	r2, r3
 8007246:	2300      	movs	r3, #0
 8007248:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	697a      	ldr	r2, [r7, #20]
 8007254:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007258:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800725c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	697a      	ldr	r2, [r7, #20]
 8007268:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800726c:	f043 0318 	orr.w	r3, r3, #24
 8007270:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	697a      	ldr	r2, [r7, #20]
 800727c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007280:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007284:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007286:	7afb      	ldrb	r3, [r7, #11]
 8007288:	2b01      	cmp	r3, #1
 800728a:	d10f      	bne.n	80072ac <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007292:	461a      	mov	r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	697a      	ldr	r2, [r7, #20]
 80072a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072a6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80072aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	371c      	adds	r7, #28
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	4f54300a 	.word	0x4f54300a

080072c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b085      	sub	sp, #20
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80072c8:	2300      	movs	r3, #0
 80072ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	3301      	adds	r3, #1
 80072d0:	60fb      	str	r3, [r7, #12]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	4a13      	ldr	r2, [pc, #76]	; (8007324 <USB_CoreReset+0x64>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d901      	bls.n	80072de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80072da:	2303      	movs	r3, #3
 80072dc:	e01b      	b.n	8007316 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	daf2      	bge.n	80072cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80072e6:	2300      	movs	r3, #0
 80072e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	691b      	ldr	r3, [r3, #16]
 80072ee:	f043 0201 	orr.w	r2, r3, #1
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	3301      	adds	r3, #1
 80072fa:	60fb      	str	r3, [r7, #12]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	4a09      	ldr	r2, [pc, #36]	; (8007324 <USB_CoreReset+0x64>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d901      	bls.n	8007308 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007304:	2303      	movs	r3, #3
 8007306:	e006      	b.n	8007316 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	691b      	ldr	r3, [r3, #16]
 800730c:	f003 0301 	and.w	r3, r3, #1
 8007310:	2b01      	cmp	r3, #1
 8007312:	d0f0      	beq.n	80072f6 <USB_CoreReset+0x36>

  return HAL_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3714      	adds	r7, #20
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop
 8007324:	00030d40 	.word	0x00030d40

08007328 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	460b      	mov	r3, r1
 8007332:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007334:	2300      	movs	r3, #0
 8007336:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	7c1b      	ldrb	r3, [r3, #16]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d115      	bne.n	800736c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007340:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007344:	2202      	movs	r2, #2
 8007346:	2181      	movs	r1, #129	; 0x81
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f003 ffe2 	bl	800b312 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2201      	movs	r2, #1
 8007352:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007354:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007358:	2202      	movs	r2, #2
 800735a:	2101      	movs	r1, #1
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f003 ffd8 	bl	800b312 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2201      	movs	r2, #1
 8007366:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800736a:	e012      	b.n	8007392 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800736c:	2340      	movs	r3, #64	; 0x40
 800736e:	2202      	movs	r2, #2
 8007370:	2181      	movs	r1, #129	; 0x81
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f003 ffcd 	bl	800b312 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2201      	movs	r2, #1
 800737c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800737e:	2340      	movs	r3, #64	; 0x40
 8007380:	2202      	movs	r2, #2
 8007382:	2101      	movs	r1, #1
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f003 ffc4 	bl	800b312 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2201      	movs	r2, #1
 800738e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007392:	2308      	movs	r3, #8
 8007394:	2203      	movs	r2, #3
 8007396:	2182      	movs	r1, #130	; 0x82
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f003 ffba 	bl	800b312 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2201      	movs	r2, #1
 80073a2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80073a4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80073a8:	f004 fb14 	bl	800b9d4 <malloc>
 80073ac:	4603      	mov	r3, r0
 80073ae:	461a      	mov	r2, r3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d102      	bne.n	80073c6 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 80073c0:	2301      	movs	r3, #1
 80073c2:	73fb      	strb	r3, [r7, #15]
 80073c4:	e026      	b.n	8007414 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80073cc:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	2200      	movs	r2, #0
 80073dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	7c1b      	ldrb	r3, [r3, #16]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d109      	bne.n	8007404 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073fa:	2101      	movs	r1, #1
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f004 f879 	bl	800b4f4 <USBD_LL_PrepareReceive>
 8007402:	e007      	b.n	8007414 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800740a:	2340      	movs	r3, #64	; 0x40
 800740c:	2101      	movs	r1, #1
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f004 f870 	bl	800b4f4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007414:	7bfb      	ldrb	r3, [r7, #15]
}
 8007416:	4618      	mov	r0, r3
 8007418:	3710      	adds	r7, #16
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800741e:	b580      	push	{r7, lr}
 8007420:	b084      	sub	sp, #16
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
 8007426:	460b      	mov	r3, r1
 8007428:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800742a:	2300      	movs	r3, #0
 800742c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800742e:	2181      	movs	r1, #129	; 0x81
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f003 ff94 	bl	800b35e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800743c:	2101      	movs	r1, #1
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f003 ff8d 	bl	800b35e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800744c:	2182      	movs	r1, #130	; 0x82
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f003 ff85 	bl	800b35e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00e      	beq.n	8007482 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007474:	4618      	mov	r0, r3
 8007476:	f004 fab5 	bl	800b9e4 <free>
    pdev->pClassData = NULL;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8007482:	7bfb      	ldrb	r3, [r7, #15]
}
 8007484:	4618      	mov	r0, r3
 8007486:	3710      	adds	r7, #16
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b086      	sub	sp, #24
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800749c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800749e:	2300      	movs	r3, #0
 80074a0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80074a2:	2300      	movs	r3, #0
 80074a4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80074a6:	2300      	movs	r3, #0
 80074a8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d039      	beq.n	800752a <USBD_CDC_Setup+0x9e>
 80074b6:	2b20      	cmp	r3, #32
 80074b8:	d17c      	bne.n	80075b4 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	88db      	ldrh	r3, [r3, #6]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d029      	beq.n	8007516 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	b25b      	sxtb	r3, r3
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	da11      	bge.n	80074f0 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	683a      	ldr	r2, [r7, #0]
 80074d6:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 80074d8:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80074da:	683a      	ldr	r2, [r7, #0]
 80074dc:	88d2      	ldrh	r2, [r2, #6]
 80074de:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80074e0:	6939      	ldr	r1, [r7, #16]
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	88db      	ldrh	r3, [r3, #6]
 80074e6:	461a      	mov	r2, r3
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f001 f9c9 	bl	8008880 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 80074ee:	e068      	b.n	80075c2 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	785a      	ldrb	r2, [r3, #1]
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	88db      	ldrh	r3, [r3, #6]
 80074fe:	b2da      	uxtb	r2, r3
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007506:	6939      	ldr	r1, [r7, #16]
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	88db      	ldrh	r3, [r3, #6]
 800750c:	461a      	mov	r2, r3
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f001 f9e4 	bl	80088dc <USBD_CtlPrepareRx>
    break;
 8007514:	e055      	b.n	80075c2 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	683a      	ldr	r2, [r7, #0]
 8007520:	7850      	ldrb	r0, [r2, #1]
 8007522:	2200      	movs	r2, #0
 8007524:	6839      	ldr	r1, [r7, #0]
 8007526:	4798      	blx	r3
    break;
 8007528:	e04b      	b.n	80075c2 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	785b      	ldrb	r3, [r3, #1]
 800752e:	2b0a      	cmp	r3, #10
 8007530:	d017      	beq.n	8007562 <USBD_CDC_Setup+0xd6>
 8007532:	2b0b      	cmp	r3, #11
 8007534:	d029      	beq.n	800758a <USBD_CDC_Setup+0xfe>
 8007536:	2b00      	cmp	r3, #0
 8007538:	d133      	bne.n	80075a2 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007540:	2b03      	cmp	r3, #3
 8007542:	d107      	bne.n	8007554 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8007544:	f107 030c 	add.w	r3, r7, #12
 8007548:	2202      	movs	r2, #2
 800754a:	4619      	mov	r1, r3
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f001 f997 	bl	8008880 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8007552:	e02e      	b.n	80075b2 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8007554:	6839      	ldr	r1, [r7, #0]
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f001 f927 	bl	80087aa <USBD_CtlError>
			  ret = USBD_FAIL;
 800755c:	2302      	movs	r3, #2
 800755e:	75fb      	strb	r3, [r7, #23]
      break;
 8007560:	e027      	b.n	80075b2 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007568:	2b03      	cmp	r3, #3
 800756a:	d107      	bne.n	800757c <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800756c:	f107 030f 	add.w	r3, r7, #15
 8007570:	2201      	movs	r2, #1
 8007572:	4619      	mov	r1, r3
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f001 f983 	bl	8008880 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800757a:	e01a      	b.n	80075b2 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800757c:	6839      	ldr	r1, [r7, #0]
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f001 f913 	bl	80087aa <USBD_CtlError>
			  ret = USBD_FAIL;
 8007584:	2302      	movs	r3, #2
 8007586:	75fb      	strb	r3, [r7, #23]
      break;
 8007588:	e013      	b.n	80075b2 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007590:	2b03      	cmp	r3, #3
 8007592:	d00d      	beq.n	80075b0 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8007594:	6839      	ldr	r1, [r7, #0]
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f001 f907 	bl	80087aa <USBD_CtlError>
			  ret = USBD_FAIL;
 800759c:	2302      	movs	r3, #2
 800759e:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80075a0:	e006      	b.n	80075b0 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 80075a2:	6839      	ldr	r1, [r7, #0]
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f001 f900 	bl	80087aa <USBD_CtlError>
      ret = USBD_FAIL;
 80075aa:	2302      	movs	r3, #2
 80075ac:	75fb      	strb	r3, [r7, #23]
      break;
 80075ae:	e000      	b.n	80075b2 <USBD_CDC_Setup+0x126>
      break;
 80075b0:	bf00      	nop
    }
    break;
 80075b2:	e006      	b.n	80075c2 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 80075b4:	6839      	ldr	r1, [r7, #0]
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f001 f8f7 	bl	80087aa <USBD_CtlError>
    ret = USBD_FAIL;
 80075bc:	2302      	movs	r3, #2
 80075be:	75fb      	strb	r3, [r7, #23]
    break;
 80075c0:	bf00      	nop
  }

  return ret;
 80075c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3718      	adds	r7, #24
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	460b      	mov	r3, r1
 80075d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80075de:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80075e6:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d03a      	beq.n	8007668 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80075f2:	78fa      	ldrb	r2, [r7, #3]
 80075f4:	6879      	ldr	r1, [r7, #4]
 80075f6:	4613      	mov	r3, r2
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	4413      	add	r3, r2
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	440b      	add	r3, r1
 8007600:	331c      	adds	r3, #28
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d029      	beq.n	800765c <USBD_CDC_DataIn+0x90>
 8007608:	78fa      	ldrb	r2, [r7, #3]
 800760a:	6879      	ldr	r1, [r7, #4]
 800760c:	4613      	mov	r3, r2
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	4413      	add	r3, r2
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	440b      	add	r3, r1
 8007616:	331c      	adds	r3, #28
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	78f9      	ldrb	r1, [r7, #3]
 800761c:	68b8      	ldr	r0, [r7, #8]
 800761e:	460b      	mov	r3, r1
 8007620:	00db      	lsls	r3, r3, #3
 8007622:	1a5b      	subs	r3, r3, r1
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	4403      	add	r3, r0
 8007628:	3344      	adds	r3, #68	; 0x44
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007630:	fb03 f301 	mul.w	r3, r3, r1
 8007634:	1ad3      	subs	r3, r2, r3
 8007636:	2b00      	cmp	r3, #0
 8007638:	d110      	bne.n	800765c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800763a:	78fa      	ldrb	r2, [r7, #3]
 800763c:	6879      	ldr	r1, [r7, #4]
 800763e:	4613      	mov	r3, r2
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	4413      	add	r3, r2
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	440b      	add	r3, r1
 8007648:	331c      	adds	r3, #28
 800764a:	2200      	movs	r2, #0
 800764c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800764e:	78f9      	ldrb	r1, [r7, #3]
 8007650:	2300      	movs	r3, #0
 8007652:	2200      	movs	r2, #0
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f003 ff2a 	bl	800b4ae <USBD_LL_Transmit>
 800765a:	e003      	b.n	8007664 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2200      	movs	r2, #0
 8007660:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007664:	2300      	movs	r3, #0
 8007666:	e000      	b.n	800766a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007668:	2302      	movs	r3, #2
  }
}
 800766a:	4618      	mov	r0, r3
 800766c:	3710      	adds	r7, #16
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b084      	sub	sp, #16
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
 800767a:	460b      	mov	r3, r1
 800767c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007684:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8007686:	78fb      	ldrb	r3, [r7, #3]
 8007688:	4619      	mov	r1, r3
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f003 ff55 	bl	800b53a <USBD_LL_GetRxDataSize>
 8007690:	4602      	mov	r2, r0
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00d      	beq.n	80076be <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80076a8:	68db      	ldr	r3, [r3, #12]
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80076b0:	68fa      	ldr	r2, [r7, #12]
 80076b2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80076b6:	4611      	mov	r1, r2
 80076b8:	4798      	blx	r3

    return USBD_OK;
 80076ba:	2300      	movs	r3, #0
 80076bc:	e000      	b.n	80076c0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80076be:	2302      	movs	r3, #2
  }
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3710      	adds	r7, #16
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80076d6:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d015      	beq.n	800770e <USBD_CDC_EP0_RxReady+0x46>
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80076e8:	2bff      	cmp	r3, #255	; 0xff
 80076ea:	d010      	beq.n	800770e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	68fa      	ldr	r2, [r7, #12]
 80076f6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80076fa:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007702:	b292      	uxth	r2, r2
 8007704:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	22ff      	movs	r2, #255	; 0xff
 800770a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800770e:	2300      	movs	r3, #0
}
 8007710:	4618      	mov	r0, r3
 8007712:	3710      	adds	r7, #16
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2243      	movs	r2, #67	; 0x43
 8007724:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007726:	4b03      	ldr	r3, [pc, #12]	; (8007734 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007728:	4618      	mov	r0, r3
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr
 8007734:	20000090 	.word	0x20000090

08007738 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2243      	movs	r2, #67	; 0x43
 8007744:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007746:	4b03      	ldr	r3, [pc, #12]	; (8007754 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007748:	4618      	mov	r0, r3
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr
 8007754:	2000004c 	.word	0x2000004c

08007758 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2243      	movs	r2, #67	; 0x43
 8007764:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007766:	4b03      	ldr	r3, [pc, #12]	; (8007774 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007768:	4618      	mov	r0, r3
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr
 8007774:	200000d4 	.word	0x200000d4

08007778 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	220a      	movs	r2, #10
 8007784:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007786:	4b03      	ldr	r3, [pc, #12]	; (8007794 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007788:	4618      	mov	r0, r3
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr
 8007794:	20000008 	.word	0x20000008

08007798 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80077a2:	2302      	movs	r3, #2
 80077a4:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d005      	beq.n	80077b8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	683a      	ldr	r2, [r7, #0]
 80077b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 80077b4:	2300      	movs	r3, #0
 80077b6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80077b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3714      	adds	r7, #20
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr

080077c6 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 80077c6:	b480      	push	{r7}
 80077c8:	b087      	sub	sp, #28
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	60f8      	str	r0, [r7, #12]
 80077ce:	60b9      	str	r1, [r7, #8]
 80077d0:	4613      	mov	r3, r2
 80077d2:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80077da:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	68ba      	ldr	r2, [r7, #8]
 80077e0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80077e4:	88fa      	ldrh	r2, [r7, #6]
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	371c      	adds	r7, #28
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr

080077fa <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 80077fa:	b480      	push	{r7}
 80077fc:	b085      	sub	sp, #20
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
 8007802:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800780a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	683a      	ldr	r2, [r7, #0]
 8007810:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007814:	2300      	movs	r3, #0
}
 8007816:	4618      	mov	r0, r3
 8007818:	3714      	adds	r7, #20
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr

08007822 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007822:	b580      	push	{r7, lr}
 8007824:	b084      	sub	sp, #16
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007830:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007838:	2b00      	cmp	r3, #0
 800783a:	d01c      	beq.n	8007876 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007842:	2b00      	cmp	r3, #0
 8007844:	d115      	bne.n	8007872 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2201      	movs	r2, #1
 800784a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007864:	b29b      	uxth	r3, r3
 8007866:	2181      	movs	r1, #129	; 0x81
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f003 fe20 	bl	800b4ae <USBD_LL_Transmit>

      return USBD_OK;
 800786e:	2300      	movs	r3, #0
 8007870:	e002      	b.n	8007878 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007872:	2301      	movs	r3, #1
 8007874:	e000      	b.n	8007878 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007876:	2302      	movs	r3, #2
  }
}
 8007878:	4618      	mov	r0, r3
 800787a:	3710      	adds	r7, #16
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800788e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007896:	2b00      	cmp	r3, #0
 8007898:	d017      	beq.n	80078ca <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	7c1b      	ldrb	r3, [r3, #16]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d109      	bne.n	80078b6 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078ac:	2101      	movs	r1, #1
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f003 fe20 	bl	800b4f4 <USBD_LL_PrepareReceive>
 80078b4:	e007      	b.n	80078c6 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078bc:	2340      	movs	r3, #64	; 0x40
 80078be:	2101      	movs	r1, #1
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f003 fe17 	bl	800b4f4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80078c6:	2300      	movs	r3, #0
 80078c8:	e000      	b.n	80078cc <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80078ca:	2302      	movs	r3, #2
  }
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3710      	adds	r7, #16
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	4613      	mov	r3, r2
 80078e0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d101      	bne.n	80078ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80078e8:	2302      	movs	r3, #2
 80078ea:	e01a      	b.n	8007922 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d003      	beq.n	80078fe <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d003      	beq.n	800790c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	68ba      	ldr	r2, [r7, #8]
 8007908:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2201      	movs	r2, #1
 8007910:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	79fa      	ldrb	r2, [r7, #7]
 8007918:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800791a:	68f8      	ldr	r0, [r7, #12]
 800791c:	f003 fc8e 	bl	800b23c <USBD_LL_Init>

  return USBD_OK;
 8007920:	2300      	movs	r3, #0
}
 8007922:	4618      	mov	r0, r3
 8007924:	3710      	adds	r7, #16
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}

0800792a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800792a:	b480      	push	{r7}
 800792c:	b085      	sub	sp, #20
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
 8007932:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8007934:	2300      	movs	r3, #0
 8007936:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d006      	beq.n	800794c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	683a      	ldr	r2, [r7, #0]
 8007942:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8007946:	2300      	movs	r3, #0
 8007948:	73fb      	strb	r3, [r7, #15]
 800794a:	e001      	b.n	8007950 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800794c:	2302      	movs	r3, #2
 800794e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007950:	7bfb      	ldrb	r3, [r7, #15]
}
 8007952:	4618      	mov	r0, r3
 8007954:	3714      	adds	r7, #20
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr

0800795e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b082      	sub	sp, #8
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f003 fcb8 	bl	800b2dc <USBD_LL_Start>

  return USBD_OK;
 800796c:	2300      	movs	r3, #0
}
 800796e:	4618      	mov	r0, r3
 8007970:	3708      	adds	r7, #8
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}

08007976 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8007976:	b480      	push	{r7}
 8007978:	b083      	sub	sp, #12
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800797e:	2300      	movs	r3, #0
}
 8007980:	4618      	mov	r0, r3
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	460b      	mov	r3, r1
 8007996:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8007998:	2302      	movs	r3, #2
 800799a:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00c      	beq.n	80079c0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	78fa      	ldrb	r2, [r7, #3]
 80079b0:	4611      	mov	r1, r2
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	4798      	blx	r3
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d101      	bne.n	80079c0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80079bc:	2300      	movs	r3, #0
 80079be:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80079c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b082      	sub	sp, #8
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
 80079d2:	460b      	mov	r3, r1
 80079d4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	78fa      	ldrb	r2, [r7, #3]
 80079e0:	4611      	mov	r1, r2
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	4798      	blx	r3
  return USBD_OK;
 80079e6:	2300      	movs	r3, #0
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3708      	adds	r7, #8
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007a00:	6839      	ldr	r1, [r7, #0]
 8007a02:	4618      	mov	r0, r3
 8007a04:	f000 fe94 	bl	8008730 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8007a16:	461a      	mov	r2, r3
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8007a24:	f003 031f 	and.w	r3, r3, #31
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d00c      	beq.n	8007a46 <USBD_LL_SetupStage+0x56>
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d302      	bcc.n	8007a36 <USBD_LL_SetupStage+0x46>
 8007a30:	2b02      	cmp	r3, #2
 8007a32:	d010      	beq.n	8007a56 <USBD_LL_SetupStage+0x66>
 8007a34:	e017      	b.n	8007a66 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 fa04 	bl	8007e4c <USBD_StdDevReq>
    break;
 8007a44:	e01a      	b.n	8007a7c <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 fa66 	bl	8007f20 <USBD_StdItfReq>
    break;
 8007a54:	e012      	b.n	8007a7c <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 faa4 	bl	8007fac <USBD_StdEPReq>
    break;
 8007a64:	e00a      	b.n	8007a7c <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8007a6c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	4619      	mov	r1, r3
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f003 fc91 	bl	800b39c <USBD_LL_StallEP>
    break;
 8007a7a:	bf00      	nop
  }

  return USBD_OK;
 8007a7c:	2300      	movs	r3, #0
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3708      	adds	r7, #8
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}

08007a86 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007a86:	b580      	push	{r7, lr}
 8007a88:	b086      	sub	sp, #24
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	60f8      	str	r0, [r7, #12]
 8007a8e:	460b      	mov	r3, r1
 8007a90:	607a      	str	r2, [r7, #4]
 8007a92:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8007a94:	7afb      	ldrb	r3, [r7, #11]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d14b      	bne.n	8007b32 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007aa0:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007aa8:	2b03      	cmp	r3, #3
 8007aaa:	d134      	bne.n	8007b16 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	68da      	ldr	r2, [r3, #12]
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d919      	bls.n	8007aec <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	68da      	ldr	r2, [r3, #12]
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	691b      	ldr	r3, [r3, #16]
 8007ac0:	1ad2      	subs	r2, r2, r3
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	68da      	ldr	r2, [r3, #12]
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d203      	bcs.n	8007ada <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	e002      	b.n	8007ae0 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	6879      	ldr	r1, [r7, #4]
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	f000 ff17 	bl	8008918 <USBD_CtlContinueRx>
 8007aea:	e038      	b.n	8007b5e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d00a      	beq.n	8007b0e <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8007afe:	2b03      	cmp	r3, #3
 8007b00:	d105      	bne.n	8007b0e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	68f8      	ldr	r0, [r7, #12]
 8007b0c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007b0e:	68f8      	ldr	r0, [r7, #12]
 8007b10:	f000 ff14 	bl	800893c <USBD_CtlSendStatus>
 8007b14:	e023      	b.n	8007b5e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007b1c:	2b05      	cmp	r3, #5
 8007b1e:	d11e      	bne.n	8007b5e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2200      	movs	r2, #0
 8007b24:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8007b28:	2100      	movs	r1, #0
 8007b2a:	68f8      	ldr	r0, [r7, #12]
 8007b2c:	f003 fc36 	bl	800b39c <USBD_LL_StallEP>
 8007b30:	e015      	b.n	8007b5e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007b38:	699b      	ldr	r3, [r3, #24]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00d      	beq.n	8007b5a <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8007b44:	2b03      	cmp	r3, #3
 8007b46:	d108      	bne.n	8007b5a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007b4e:	699b      	ldr	r3, [r3, #24]
 8007b50:	7afa      	ldrb	r2, [r7, #11]
 8007b52:	4611      	mov	r1, r2
 8007b54:	68f8      	ldr	r0, [r7, #12]
 8007b56:	4798      	blx	r3
 8007b58:	e001      	b.n	8007b5e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007b5a:	2302      	movs	r3, #2
 8007b5c:	e000      	b.n	8007b60 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3718      	adds	r7, #24
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b086      	sub	sp, #24
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	460b      	mov	r3, r1
 8007b72:	607a      	str	r2, [r7, #4]
 8007b74:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8007b76:	7afb      	ldrb	r3, [r7, #11]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d17f      	bne.n	8007c7c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	3314      	adds	r3, #20
 8007b80:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007b88:	2b02      	cmp	r3, #2
 8007b8a:	d15c      	bne.n	8007c46 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	68da      	ldr	r2, [r3, #12]
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d915      	bls.n	8007bc4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	68da      	ldr	r2, [r3, #12]
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	1ad2      	subs	r2, r2, r3
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	68db      	ldr	r3, [r3, #12]
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	461a      	mov	r2, r3
 8007bae:	6879      	ldr	r1, [r7, #4]
 8007bb0:	68f8      	ldr	r0, [r7, #12]
 8007bb2:	f000 fe81 	bl	80088b8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	2200      	movs	r2, #0
 8007bba:	2100      	movs	r1, #0
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f003 fc99 	bl	800b4f4 <USBD_LL_PrepareReceive>
 8007bc2:	e04e      	b.n	8007c62 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	697a      	ldr	r2, [r7, #20]
 8007bca:	6912      	ldr	r2, [r2, #16]
 8007bcc:	fbb3 f1f2 	udiv	r1, r3, r2
 8007bd0:	fb02 f201 	mul.w	r2, r2, r1
 8007bd4:	1a9b      	subs	r3, r3, r2
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d11c      	bne.n	8007c14 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	689a      	ldr	r2, [r3, #8]
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d316      	bcc.n	8007c14 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	689a      	ldr	r2, [r3, #8]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d20f      	bcs.n	8007c14 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	2100      	movs	r1, #0
 8007bf8:	68f8      	ldr	r0, [r7, #12]
 8007bfa:	f000 fe5d 	bl	80088b8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007c06:	2300      	movs	r3, #0
 8007c08:	2200      	movs	r2, #0
 8007c0a:	2100      	movs	r1, #0
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	f003 fc71 	bl	800b4f4 <USBD_LL_PrepareReceive>
 8007c12:	e026      	b.n	8007c62 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00a      	beq.n	8007c36 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8007c26:	2b03      	cmp	r3, #3
 8007c28:	d105      	bne.n	8007c36 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	68f8      	ldr	r0, [r7, #12]
 8007c34:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007c36:	2180      	movs	r1, #128	; 0x80
 8007c38:	68f8      	ldr	r0, [r7, #12]
 8007c3a:	f003 fbaf 	bl	800b39c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f000 fe8f 	bl	8008962 <USBD_CtlReceiveStatus>
 8007c44:	e00d      	b.n	8007c62 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007c4c:	2b04      	cmp	r3, #4
 8007c4e:	d004      	beq.n	8007c5a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d103      	bne.n	8007c62 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007c5a:	2180      	movs	r1, #128	; 0x80
 8007c5c:	68f8      	ldr	r0, [r7, #12]
 8007c5e:	f003 fb9d 	bl	800b39c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d11d      	bne.n	8007ca8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007c6c:	68f8      	ldr	r0, [r7, #12]
 8007c6e:	f7ff fe82 	bl	8007976 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8007c7a:	e015      	b.n	8007ca8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007c82:	695b      	ldr	r3, [r3, #20]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d00d      	beq.n	8007ca4 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8007c8e:	2b03      	cmp	r3, #3
 8007c90:	d108      	bne.n	8007ca4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007c98:	695b      	ldr	r3, [r3, #20]
 8007c9a:	7afa      	ldrb	r2, [r7, #11]
 8007c9c:	4611      	mov	r1, r2
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	4798      	blx	r3
 8007ca2:	e001      	b.n	8007ca8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007ca4:	2302      	movs	r3, #2
 8007ca6:	e000      	b.n	8007caa <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3718      	adds	r7, #24
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b082      	sub	sp, #8
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007cba:	2340      	movs	r3, #64	; 0x40
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	2100      	movs	r1, #0
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f003 fb26 	bl	800b312 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2201      	movs	r2, #1
 8007cca:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2240      	movs	r2, #64	; 0x40
 8007cd2:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007cd6:	2340      	movs	r3, #64	; 0x40
 8007cd8:	2200      	movs	r2, #0
 8007cda:	2180      	movs	r1, #128	; 0x80
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f003 fb18 	bl	800b312 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2240      	movs	r2, #64	; 0x40
 8007cec:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d009      	beq.n	8007d2a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	6852      	ldr	r2, [r2, #4]
 8007d22:	b2d2      	uxtb	r2, r2
 8007d24:	4611      	mov	r1, r2
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	4798      	blx	r3
  }

  return USBD_OK;
 8007d2a:	2300      	movs	r3, #0
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3708      	adds	r7, #8
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	78fa      	ldrb	r2, [r7, #3]
 8007d44:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8007d46:	2300      	movs	r3, #0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	370c      	adds	r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2204      	movs	r2, #4
 8007d6c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8007d70:	2300      	movs	r3, #0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	370c      	adds	r7, #12
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr

08007d7e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8007d7e:	b480      	push	{r7}
 8007d80:	b083      	sub	sp, #12
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8007d92:	2300      	movs	r3, #0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b082      	sub	sp, #8
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007dae:	2b03      	cmp	r3, #3
 8007db0:	d10b      	bne.n	8007dca <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007db8:	69db      	ldr	r3, [r3, #28]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d005      	beq.n	8007dca <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007dc4:	69db      	ldr	r3, [r3, #28]
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8007dca:	2300      	movs	r3, #0
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3708      	adds	r7, #8
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	460b      	mov	r3, r1
 8007dde:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	370c      	adds	r7, #12
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr

08007dee <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8007dee:	b480      	push	{r7}
 8007df0:	b083      	sub	sp, #12
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
 8007df6:	460b      	mov	r3, r1
 8007df8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007dfa:	2300      	movs	r3, #0
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	370c      	adds	r7, #12
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e10:	2300      	movs	r3, #0
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	370c      	adds	r7, #12
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr

08007e1e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b082      	sub	sp, #8
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	6852      	ldr	r2, [r2, #4]
 8007e3a:	b2d2      	uxtb	r2, r2
 8007e3c:	4611      	mov	r1, r2
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	4798      	blx	r3

  return USBD_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3708      	adds	r7, #8
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e56:	2300      	movs	r3, #0
 8007e58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e62:	2b20      	cmp	r3, #32
 8007e64:	d004      	beq.n	8007e70 <USBD_StdDevReq+0x24>
 8007e66:	2b40      	cmp	r3, #64	; 0x40
 8007e68:	d002      	beq.n	8007e70 <USBD_StdDevReq+0x24>
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d008      	beq.n	8007e80 <USBD_StdDevReq+0x34>
 8007e6e:	e04c      	b.n	8007f0a <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	6839      	ldr	r1, [r7, #0]
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	4798      	blx	r3
    break;
 8007e7e:	e049      	b.n	8007f14 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	785b      	ldrb	r3, [r3, #1]
 8007e84:	2b09      	cmp	r3, #9
 8007e86:	d83a      	bhi.n	8007efe <USBD_StdDevReq+0xb2>
 8007e88:	a201      	add	r2, pc, #4	; (adr r2, 8007e90 <USBD_StdDevReq+0x44>)
 8007e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e8e:	bf00      	nop
 8007e90:	08007ee1 	.word	0x08007ee1
 8007e94:	08007ef5 	.word	0x08007ef5
 8007e98:	08007eff 	.word	0x08007eff
 8007e9c:	08007eeb 	.word	0x08007eeb
 8007ea0:	08007eff 	.word	0x08007eff
 8007ea4:	08007ec3 	.word	0x08007ec3
 8007ea8:	08007eb9 	.word	0x08007eb9
 8007eac:	08007eff 	.word	0x08007eff
 8007eb0:	08007ed7 	.word	0x08007ed7
 8007eb4:	08007ecd 	.word	0x08007ecd
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8007eb8:	6839      	ldr	r1, [r7, #0]
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 f9d2 	bl	8008264 <USBD_GetDescriptor>
      break;
 8007ec0:	e022      	b.n	8007f08 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8007ec2:	6839      	ldr	r1, [r7, #0]
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 fac7 	bl	8008458 <USBD_SetAddress>
      break;
 8007eca:	e01d      	b.n	8007f08 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8007ecc:	6839      	ldr	r1, [r7, #0]
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 fb04 	bl	80084dc <USBD_SetConfig>
      break;
 8007ed4:	e018      	b.n	8007f08 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8007ed6:	6839      	ldr	r1, [r7, #0]
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 fb8d 	bl	80085f8 <USBD_GetConfig>
      break;
 8007ede:	e013      	b.n	8007f08 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8007ee0:	6839      	ldr	r1, [r7, #0]
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 fbbc 	bl	8008660 <USBD_GetStatus>
      break;
 8007ee8:	e00e      	b.n	8007f08 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8007eea:	6839      	ldr	r1, [r7, #0]
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 fbea 	bl	80086c6 <USBD_SetFeature>
      break;
 8007ef2:	e009      	b.n	8007f08 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8007ef4:	6839      	ldr	r1, [r7, #0]
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 fbf9 	bl	80086ee <USBD_ClrFeature>
      break;
 8007efc:	e004      	b.n	8007f08 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8007efe:	6839      	ldr	r1, [r7, #0]
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 fc52 	bl	80087aa <USBD_CtlError>
      break;
 8007f06:	bf00      	nop
    }
    break;
 8007f08:	e004      	b.n	8007f14 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8007f0a:	6839      	ldr	r1, [r7, #0]
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 fc4c 	bl	80087aa <USBD_CtlError>
    break;
 8007f12:	bf00      	nop
  }

  return ret;
 8007f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3710      	adds	r7, #16
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop

08007f20 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f36:	2b20      	cmp	r3, #32
 8007f38:	d003      	beq.n	8007f42 <USBD_StdItfReq+0x22>
 8007f3a:	2b40      	cmp	r3, #64	; 0x40
 8007f3c:	d001      	beq.n	8007f42 <USBD_StdItfReq+0x22>
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d12a      	bne.n	8007f98 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007f48:	3b01      	subs	r3, #1
 8007f4a:	2b02      	cmp	r3, #2
 8007f4c:	d81d      	bhi.n	8007f8a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	889b      	ldrh	r3, [r3, #4]
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d813      	bhi.n	8007f80 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	6839      	ldr	r1, [r7, #0]
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	4798      	blx	r3
 8007f66:	4603      	mov	r3, r0
 8007f68:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	88db      	ldrh	r3, [r3, #6]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d110      	bne.n	8007f94 <USBD_StdItfReq+0x74>
 8007f72:	7bfb      	ldrb	r3, [r7, #15]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d10d      	bne.n	8007f94 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 fcdf 	bl	800893c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007f7e:	e009      	b.n	8007f94 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8007f80:	6839      	ldr	r1, [r7, #0]
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 fc11 	bl	80087aa <USBD_CtlError>
      break;
 8007f88:	e004      	b.n	8007f94 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8007f8a:	6839      	ldr	r1, [r7, #0]
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 fc0c 	bl	80087aa <USBD_CtlError>
      break;
 8007f92:	e000      	b.n	8007f96 <USBD_StdItfReq+0x76>
      break;
 8007f94:	bf00      	nop
    }
    break;
 8007f96:	e004      	b.n	8007fa2 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007f98:	6839      	ldr	r1, [r7, #0]
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 fc05 	bl	80087aa <USBD_CtlError>
    break;
 8007fa0:	bf00      	nop
  }

  return USBD_OK;
 8007fa2:	2300      	movs	r3, #0
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3710      	adds	r7, #16
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	889b      	ldrh	r3, [r3, #4]
 8007fbe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fc8:	2b20      	cmp	r3, #32
 8007fca:	d004      	beq.n	8007fd6 <USBD_StdEPReq+0x2a>
 8007fcc:	2b40      	cmp	r3, #64	; 0x40
 8007fce:	d002      	beq.n	8007fd6 <USBD_StdEPReq+0x2a>
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d008      	beq.n	8007fe6 <USBD_StdEPReq+0x3a>
 8007fd4:	e13b      	b.n	800824e <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	6839      	ldr	r1, [r7, #0]
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	4798      	blx	r3
    break;
 8007fe4:	e138      	b.n	8008258 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fee:	2b20      	cmp	r3, #32
 8007ff0:	d10a      	bne.n	8008008 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	6839      	ldr	r1, [r7, #0]
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	4798      	blx	r3
 8008000:	4603      	mov	r3, r0
 8008002:	73fb      	strb	r3, [r7, #15]

      return ret;
 8008004:	7bfb      	ldrb	r3, [r7, #15]
 8008006:	e128      	b.n	800825a <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	785b      	ldrb	r3, [r3, #1]
 800800c:	2b01      	cmp	r3, #1
 800800e:	d03e      	beq.n	800808e <USBD_StdEPReq+0xe2>
 8008010:	2b03      	cmp	r3, #3
 8008012:	d002      	beq.n	800801a <USBD_StdEPReq+0x6e>
 8008014:	2b00      	cmp	r3, #0
 8008016:	d070      	beq.n	80080fa <USBD_StdEPReq+0x14e>
 8008018:	e113      	b.n	8008242 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008020:	2b02      	cmp	r3, #2
 8008022:	d002      	beq.n	800802a <USBD_StdEPReq+0x7e>
 8008024:	2b03      	cmp	r3, #3
 8008026:	d015      	beq.n	8008054 <USBD_StdEPReq+0xa8>
 8008028:	e02b      	b.n	8008082 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800802a:	7bbb      	ldrb	r3, [r7, #14]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d00c      	beq.n	800804a <USBD_StdEPReq+0x9e>
 8008030:	7bbb      	ldrb	r3, [r7, #14]
 8008032:	2b80      	cmp	r3, #128	; 0x80
 8008034:	d009      	beq.n	800804a <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8008036:	7bbb      	ldrb	r3, [r7, #14]
 8008038:	4619      	mov	r1, r3
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f003 f9ae 	bl	800b39c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8008040:	2180      	movs	r1, #128	; 0x80
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f003 f9aa 	bl	800b39c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008048:	e020      	b.n	800808c <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800804a:	6839      	ldr	r1, [r7, #0]
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 fbac 	bl	80087aa <USBD_CtlError>
        break;
 8008052:	e01b      	b.n	800808c <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	885b      	ldrh	r3, [r3, #2]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d10e      	bne.n	800807a <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800805c:	7bbb      	ldrb	r3, [r7, #14]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d00b      	beq.n	800807a <USBD_StdEPReq+0xce>
 8008062:	7bbb      	ldrb	r3, [r7, #14]
 8008064:	2b80      	cmp	r3, #128	; 0x80
 8008066:	d008      	beq.n	800807a <USBD_StdEPReq+0xce>
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	88db      	ldrh	r3, [r3, #6]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d104      	bne.n	800807a <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8008070:	7bbb      	ldrb	r3, [r7, #14]
 8008072:	4619      	mov	r1, r3
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f003 f991 	bl	800b39c <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 fc5e 	bl	800893c <USBD_CtlSendStatus>

        break;
 8008080:	e004      	b.n	800808c <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8008082:	6839      	ldr	r1, [r7, #0]
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 fb90 	bl	80087aa <USBD_CtlError>
        break;
 800808a:	bf00      	nop
      }
      break;
 800808c:	e0de      	b.n	800824c <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008094:	2b02      	cmp	r3, #2
 8008096:	d002      	beq.n	800809e <USBD_StdEPReq+0xf2>
 8008098:	2b03      	cmp	r3, #3
 800809a:	d015      	beq.n	80080c8 <USBD_StdEPReq+0x11c>
 800809c:	e026      	b.n	80080ec <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800809e:	7bbb      	ldrb	r3, [r7, #14]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d00c      	beq.n	80080be <USBD_StdEPReq+0x112>
 80080a4:	7bbb      	ldrb	r3, [r7, #14]
 80080a6:	2b80      	cmp	r3, #128	; 0x80
 80080a8:	d009      	beq.n	80080be <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80080aa:	7bbb      	ldrb	r3, [r7, #14]
 80080ac:	4619      	mov	r1, r3
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f003 f974 	bl	800b39c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80080b4:	2180      	movs	r1, #128	; 0x80
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f003 f970 	bl	800b39c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80080bc:	e01c      	b.n	80080f8 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 80080be:	6839      	ldr	r1, [r7, #0]
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 fb72 	bl	80087aa <USBD_CtlError>
        break;
 80080c6:	e017      	b.n	80080f8 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	885b      	ldrh	r3, [r3, #2]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d112      	bne.n	80080f6 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80080d0:	7bbb      	ldrb	r3, [r7, #14]
 80080d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d004      	beq.n	80080e4 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 80080da:	7bbb      	ldrb	r3, [r7, #14]
 80080dc:	4619      	mov	r1, r3
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f003 f97b 	bl	800b3da <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 fc29 	bl	800893c <USBD_CtlSendStatus>
        }
        break;
 80080ea:	e004      	b.n	80080f6 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 80080ec:	6839      	ldr	r1, [r7, #0]
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 fb5b 	bl	80087aa <USBD_CtlError>
        break;
 80080f4:	e000      	b.n	80080f8 <USBD_StdEPReq+0x14c>
        break;
 80080f6:	bf00      	nop
      }
      break;
 80080f8:	e0a8      	b.n	800824c <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008100:	2b02      	cmp	r3, #2
 8008102:	d002      	beq.n	800810a <USBD_StdEPReq+0x15e>
 8008104:	2b03      	cmp	r3, #3
 8008106:	d031      	beq.n	800816c <USBD_StdEPReq+0x1c0>
 8008108:	e095      	b.n	8008236 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800810a:	7bbb      	ldrb	r3, [r7, #14]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d007      	beq.n	8008120 <USBD_StdEPReq+0x174>
 8008110:	7bbb      	ldrb	r3, [r7, #14]
 8008112:	2b80      	cmp	r3, #128	; 0x80
 8008114:	d004      	beq.n	8008120 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8008116:	6839      	ldr	r1, [r7, #0]
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 fb46 	bl	80087aa <USBD_CtlError>
          break;
 800811e:	e08f      	b.n	8008240 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008120:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008124:	2b00      	cmp	r3, #0
 8008126:	da0b      	bge.n	8008140 <USBD_StdEPReq+0x194>
 8008128:	7bbb      	ldrb	r3, [r7, #14]
 800812a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800812e:	4613      	mov	r3, r2
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	4413      	add	r3, r2
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	3310      	adds	r3, #16
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	4413      	add	r3, r2
 800813c:	3304      	adds	r3, #4
 800813e:	e00a      	b.n	8008156 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8008140:	7bbb      	ldrb	r3, [r7, #14]
 8008142:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008146:	4613      	mov	r3, r2
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	4413      	add	r3, r2
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	4413      	add	r3, r2
 8008156:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	2200      	movs	r2, #0
 800815c:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	2202      	movs	r2, #2
 8008162:	4619      	mov	r1, r3
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 fb8b 	bl	8008880 <USBD_CtlSendData>
          break;
 800816a:	e069      	b.n	8008240 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800816c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008170:	2b00      	cmp	r3, #0
 8008172:	da11      	bge.n	8008198 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008174:	7bbb      	ldrb	r3, [r7, #14]
 8008176:	f003 020f 	and.w	r2, r3, #15
 800817a:	6879      	ldr	r1, [r7, #4]
 800817c:	4613      	mov	r3, r2
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	4413      	add	r3, r2
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	440b      	add	r3, r1
 8008186:	3318      	adds	r3, #24
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d117      	bne.n	80081be <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800818e:	6839      	ldr	r1, [r7, #0]
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 fb0a 	bl	80087aa <USBD_CtlError>
            break;
 8008196:	e053      	b.n	8008240 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008198:	7bbb      	ldrb	r3, [r7, #14]
 800819a:	f003 020f 	and.w	r2, r3, #15
 800819e:	6879      	ldr	r1, [r7, #4]
 80081a0:	4613      	mov	r3, r2
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	4413      	add	r3, r2
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	440b      	add	r3, r1
 80081aa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d104      	bne.n	80081be <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 80081b4:	6839      	ldr	r1, [r7, #0]
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 faf7 	bl	80087aa <USBD_CtlError>
            break;
 80081bc:	e040      	b.n	8008240 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80081be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	da0b      	bge.n	80081de <USBD_StdEPReq+0x232>
 80081c6:	7bbb      	ldrb	r3, [r7, #14]
 80081c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081cc:	4613      	mov	r3, r2
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	4413      	add	r3, r2
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	3310      	adds	r3, #16
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	4413      	add	r3, r2
 80081da:	3304      	adds	r3, #4
 80081dc:	e00a      	b.n	80081f4 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 80081de:	7bbb      	ldrb	r3, [r7, #14]
 80081e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80081e4:	4613      	mov	r3, r2
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	4413      	add	r3, r2
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	4413      	add	r3, r2
 80081f4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80081f6:	7bbb      	ldrb	r3, [r7, #14]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d002      	beq.n	8008202 <USBD_StdEPReq+0x256>
 80081fc:	7bbb      	ldrb	r3, [r7, #14]
 80081fe:	2b80      	cmp	r3, #128	; 0x80
 8008200:	d103      	bne.n	800820a <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	2200      	movs	r2, #0
 8008206:	601a      	str	r2, [r3, #0]
 8008208:	e00e      	b.n	8008228 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800820a:	7bbb      	ldrb	r3, [r7, #14]
 800820c:	4619      	mov	r1, r3
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f003 f902 	bl	800b418 <USBD_LL_IsStallEP>
 8008214:	4603      	mov	r3, r0
 8008216:	2b00      	cmp	r3, #0
 8008218:	d003      	beq.n	8008222 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	2201      	movs	r2, #1
 800821e:	601a      	str	r2, [r3, #0]
 8008220:	e002      	b.n	8008228 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	2200      	movs	r2, #0
 8008226:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	2202      	movs	r2, #2
 800822c:	4619      	mov	r1, r3
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 fb26 	bl	8008880 <USBD_CtlSendData>
          break;
 8008234:	e004      	b.n	8008240 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 8008236:	6839      	ldr	r1, [r7, #0]
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 fab6 	bl	80087aa <USBD_CtlError>
        break;
 800823e:	bf00      	nop
      }
      break;
 8008240:	e004      	b.n	800824c <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 8008242:	6839      	ldr	r1, [r7, #0]
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 fab0 	bl	80087aa <USBD_CtlError>
      break;
 800824a:	bf00      	nop
    }
    break;
 800824c:	e004      	b.n	8008258 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800824e:	6839      	ldr	r1, [r7, #0]
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 faaa 	bl	80087aa <USBD_CtlError>
    break;
 8008256:	bf00      	nop
  }

  return ret;
 8008258:	7bfb      	ldrb	r3, [r7, #15]
}
 800825a:	4618      	mov	r0, r3
 800825c:	3710      	adds	r7, #16
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
	...

08008264 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	885b      	ldrh	r3, [r3, #2]
 8008272:	0a1b      	lsrs	r3, r3, #8
 8008274:	b29b      	uxth	r3, r3
 8008276:	3b01      	subs	r3, #1
 8008278:	2b06      	cmp	r3, #6
 800827a:	f200 80c9 	bhi.w	8008410 <USBD_GetDescriptor+0x1ac>
 800827e:	a201      	add	r2, pc, #4	; (adr r2, 8008284 <USBD_GetDescriptor+0x20>)
 8008280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008284:	080082a1 	.word	0x080082a1
 8008288:	080082b9 	.word	0x080082b9
 800828c:	080082f9 	.word	0x080082f9
 8008290:	08008411 	.word	0x08008411
 8008294:	08008411 	.word	0x08008411
 8008298:	080083bd 	.word	0x080083bd
 800829c:	080083e3 	.word	0x080083e3
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	7c12      	ldrb	r2, [r2, #16]
 80082ac:	f107 010a 	add.w	r1, r7, #10
 80082b0:	4610      	mov	r0, r2
 80082b2:	4798      	blx	r3
 80082b4:	60f8      	str	r0, [r7, #12]
    break;
 80082b6:	e0b0      	b.n	800841a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	7c1b      	ldrb	r3, [r3, #16]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d10d      	bne.n	80082dc <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80082c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082c8:	f107 020a 	add.w	r2, r7, #10
 80082cc:	4610      	mov	r0, r2
 80082ce:	4798      	blx	r3
 80082d0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	3301      	adds	r3, #1
 80082d6:	2202      	movs	r2, #2
 80082d8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80082da:	e09e      	b.n	800841a <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80082e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e4:	f107 020a 	add.w	r2, r7, #10
 80082e8:	4610      	mov	r0, r2
 80082ea:	4798      	blx	r3
 80082ec:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	3301      	adds	r3, #1
 80082f2:	2202      	movs	r2, #2
 80082f4:	701a      	strb	r2, [r3, #0]
    break;
 80082f6:	e090      	b.n	800841a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	885b      	ldrh	r3, [r3, #2]
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	2b05      	cmp	r3, #5
 8008300:	d856      	bhi.n	80083b0 <USBD_GetDescriptor+0x14c>
 8008302:	a201      	add	r2, pc, #4	; (adr r2, 8008308 <USBD_GetDescriptor+0xa4>)
 8008304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008308:	08008321 	.word	0x08008321
 800830c:	08008339 	.word	0x08008339
 8008310:	08008351 	.word	0x08008351
 8008314:	08008369 	.word	0x08008369
 8008318:	08008381 	.word	0x08008381
 800831c:	08008399 	.word	0x08008399
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	7c12      	ldrb	r2, [r2, #16]
 800832c:	f107 010a 	add.w	r1, r7, #10
 8008330:	4610      	mov	r0, r2
 8008332:	4798      	blx	r3
 8008334:	60f8      	str	r0, [r7, #12]
      break;
 8008336:	e040      	b.n	80083ba <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	7c12      	ldrb	r2, [r2, #16]
 8008344:	f107 010a 	add.w	r1, r7, #10
 8008348:	4610      	mov	r0, r2
 800834a:	4798      	blx	r3
 800834c:	60f8      	str	r0, [r7, #12]
      break;
 800834e:	e034      	b.n	80083ba <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	7c12      	ldrb	r2, [r2, #16]
 800835c:	f107 010a 	add.w	r1, r7, #10
 8008360:	4610      	mov	r0, r2
 8008362:	4798      	blx	r3
 8008364:	60f8      	str	r0, [r7, #12]
      break;
 8008366:	e028      	b.n	80083ba <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	7c12      	ldrb	r2, [r2, #16]
 8008374:	f107 010a 	add.w	r1, r7, #10
 8008378:	4610      	mov	r0, r2
 800837a:	4798      	blx	r3
 800837c:	60f8      	str	r0, [r7, #12]
      break;
 800837e:	e01c      	b.n	80083ba <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008386:	695b      	ldr	r3, [r3, #20]
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	7c12      	ldrb	r2, [r2, #16]
 800838c:	f107 010a 	add.w	r1, r7, #10
 8008390:	4610      	mov	r0, r2
 8008392:	4798      	blx	r3
 8008394:	60f8      	str	r0, [r7, #12]
      break;
 8008396:	e010      	b.n	80083ba <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800839e:	699b      	ldr	r3, [r3, #24]
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	7c12      	ldrb	r2, [r2, #16]
 80083a4:	f107 010a 	add.w	r1, r7, #10
 80083a8:	4610      	mov	r0, r2
 80083aa:	4798      	blx	r3
 80083ac:	60f8      	str	r0, [r7, #12]
      break;
 80083ae:	e004      	b.n	80083ba <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 80083b0:	6839      	ldr	r1, [r7, #0]
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 f9f9 	bl	80087aa <USBD_CtlError>
      return;
 80083b8:	e04b      	b.n	8008452 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 80083ba:	e02e      	b.n	800841a <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	7c1b      	ldrb	r3, [r3, #16]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d109      	bne.n	80083d8 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80083ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083cc:	f107 020a 	add.w	r2, r7, #10
 80083d0:	4610      	mov	r0, r2
 80083d2:	4798      	blx	r3
 80083d4:	60f8      	str	r0, [r7, #12]
      break;
 80083d6:	e020      	b.n	800841a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80083d8:	6839      	ldr	r1, [r7, #0]
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 f9e5 	bl	80087aa <USBD_CtlError>
      return;
 80083e0:	e037      	b.n	8008452 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	7c1b      	ldrb	r3, [r3, #16]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d10d      	bne.n	8008406 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80083f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f2:	f107 020a 	add.w	r2, r7, #10
 80083f6:	4610      	mov	r0, r2
 80083f8:	4798      	blx	r3
 80083fa:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	3301      	adds	r3, #1
 8008400:	2207      	movs	r2, #7
 8008402:	701a      	strb	r2, [r3, #0]
      break;
 8008404:	e009      	b.n	800841a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8008406:	6839      	ldr	r1, [r7, #0]
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 f9ce 	bl	80087aa <USBD_CtlError>
      return;
 800840e:	e020      	b.n	8008452 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8008410:	6839      	ldr	r1, [r7, #0]
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 f9c9 	bl	80087aa <USBD_CtlError>
    return;
 8008418:	e01b      	b.n	8008452 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800841a:	897b      	ldrh	r3, [r7, #10]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d011      	beq.n	8008444 <USBD_GetDescriptor+0x1e0>
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	88db      	ldrh	r3, [r3, #6]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d00d      	beq.n	8008444 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	88da      	ldrh	r2, [r3, #6]
 800842c:	897b      	ldrh	r3, [r7, #10]
 800842e:	4293      	cmp	r3, r2
 8008430:	bf28      	it	cs
 8008432:	4613      	movcs	r3, r2
 8008434:	b29b      	uxth	r3, r3
 8008436:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8008438:	897b      	ldrh	r3, [r7, #10]
 800843a:	461a      	mov	r2, r3
 800843c:	68f9      	ldr	r1, [r7, #12]
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 fa1e 	bl	8008880 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	88db      	ldrh	r3, [r3, #6]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d102      	bne.n	8008452 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 fa75 	bl	800893c <USBD_CtlSendStatus>
  }
}
 8008452:	3710      	adds	r7, #16
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b084      	sub	sp, #16
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	889b      	ldrh	r3, [r3, #4]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d130      	bne.n	80084cc <USBD_SetAddress+0x74>
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	88db      	ldrh	r3, [r3, #6]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d12c      	bne.n	80084cc <USBD_SetAddress+0x74>
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	885b      	ldrh	r3, [r3, #2]
 8008476:	2b7f      	cmp	r3, #127	; 0x7f
 8008478:	d828      	bhi.n	80084cc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	885b      	ldrh	r3, [r3, #2]
 800847e:	b2db      	uxtb	r3, r3
 8008480:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008484:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800848c:	2b03      	cmp	r3, #3
 800848e:	d104      	bne.n	800849a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8008490:	6839      	ldr	r1, [r7, #0]
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f000 f989 	bl	80087aa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008498:	e01c      	b.n	80084d4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	7bfa      	ldrb	r2, [r7, #15]
 800849e:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80084a2:	7bfb      	ldrb	r3, [r7, #15]
 80084a4:	4619      	mov	r1, r3
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f002 ffe2 	bl	800b470 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 fa45 	bl	800893c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80084b2:	7bfb      	ldrb	r3, [r7, #15]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d004      	beq.n	80084c2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2202      	movs	r2, #2
 80084bc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084c0:	e008      	b.n	80084d4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2201      	movs	r2, #1
 80084c6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084ca:	e003      	b.n	80084d4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80084cc:	6839      	ldr	r1, [r7, #0]
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 f96b 	bl	80087aa <USBD_CtlError>
  }
}
 80084d4:	bf00      	nop
 80084d6:	3710      	adds	r7, #16
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	885b      	ldrh	r3, [r3, #2]
 80084ea:	b2da      	uxtb	r2, r3
 80084ec:	4b41      	ldr	r3, [pc, #260]	; (80085f4 <USBD_SetConfig+0x118>)
 80084ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80084f0:	4b40      	ldr	r3, [pc, #256]	; (80085f4 <USBD_SetConfig+0x118>)
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d904      	bls.n	8008502 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80084f8:	6839      	ldr	r1, [r7, #0]
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 f955 	bl	80087aa <USBD_CtlError>
 8008500:	e075      	b.n	80085ee <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008508:	2b02      	cmp	r3, #2
 800850a:	d002      	beq.n	8008512 <USBD_SetConfig+0x36>
 800850c:	2b03      	cmp	r3, #3
 800850e:	d023      	beq.n	8008558 <USBD_SetConfig+0x7c>
 8008510:	e062      	b.n	80085d8 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8008512:	4b38      	ldr	r3, [pc, #224]	; (80085f4 <USBD_SetConfig+0x118>)
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d01a      	beq.n	8008550 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800851a:	4b36      	ldr	r3, [pc, #216]	; (80085f4 <USBD_SetConfig+0x118>)
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	461a      	mov	r2, r3
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2203      	movs	r2, #3
 8008528:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800852c:	4b31      	ldr	r3, [pc, #196]	; (80085f4 <USBD_SetConfig+0x118>)
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	4619      	mov	r1, r3
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f7ff fa2a 	bl	800798c <USBD_SetClassConfig>
 8008538:	4603      	mov	r3, r0
 800853a:	2b02      	cmp	r3, #2
 800853c:	d104      	bne.n	8008548 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800853e:	6839      	ldr	r1, [r7, #0]
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 f932 	bl	80087aa <USBD_CtlError>
          return;
 8008546:	e052      	b.n	80085ee <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 f9f7 	bl	800893c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800854e:	e04e      	b.n	80085ee <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 f9f3 	bl	800893c <USBD_CtlSendStatus>
      break;
 8008556:	e04a      	b.n	80085ee <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008558:	4b26      	ldr	r3, [pc, #152]	; (80085f4 <USBD_SetConfig+0x118>)
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d112      	bne.n	8008586 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2202      	movs	r2, #2
 8008564:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8008568:	4b22      	ldr	r3, [pc, #136]	; (80085f4 <USBD_SetConfig+0x118>)
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	461a      	mov	r2, r3
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8008572:	4b20      	ldr	r3, [pc, #128]	; (80085f4 <USBD_SetConfig+0x118>)
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	4619      	mov	r1, r3
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f7ff fa26 	bl	80079ca <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 f9dc 	bl	800893c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8008584:	e033      	b.n	80085ee <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8008586:	4b1b      	ldr	r3, [pc, #108]	; (80085f4 <USBD_SetConfig+0x118>)
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	461a      	mov	r2, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	429a      	cmp	r2, r3
 8008592:	d01d      	beq.n	80085d0 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	b2db      	uxtb	r3, r3
 800859a:	4619      	mov	r1, r3
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f7ff fa14 	bl	80079ca <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80085a2:	4b14      	ldr	r3, [pc, #80]	; (80085f4 <USBD_SetConfig+0x118>)
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	461a      	mov	r2, r3
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80085ac:	4b11      	ldr	r3, [pc, #68]	; (80085f4 <USBD_SetConfig+0x118>)
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	4619      	mov	r1, r3
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f7ff f9ea 	bl	800798c <USBD_SetClassConfig>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b02      	cmp	r3, #2
 80085bc:	d104      	bne.n	80085c8 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 80085be:	6839      	ldr	r1, [r7, #0]
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f000 f8f2 	bl	80087aa <USBD_CtlError>
          return;
 80085c6:	e012      	b.n	80085ee <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 f9b7 	bl	800893c <USBD_CtlSendStatus>
      break;
 80085ce:	e00e      	b.n	80085ee <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 f9b3 	bl	800893c <USBD_CtlSendStatus>
      break;
 80085d6:	e00a      	b.n	80085ee <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 80085d8:	6839      	ldr	r1, [r7, #0]
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 f8e5 	bl	80087aa <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 80085e0:	4b04      	ldr	r3, [pc, #16]	; (80085f4 <USBD_SetConfig+0x118>)
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	4619      	mov	r1, r3
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f7ff f9ef 	bl	80079ca <USBD_ClrClassConfig>
      break;
 80085ec:	bf00      	nop
    }
  }
}
 80085ee:	3708      	adds	r7, #8
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	20000208 	.word	0x20000208

080085f8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	88db      	ldrh	r3, [r3, #6]
 8008606:	2b01      	cmp	r3, #1
 8008608:	d004      	beq.n	8008614 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800860a:	6839      	ldr	r1, [r7, #0]
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 f8cc 	bl	80087aa <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8008612:	e021      	b.n	8008658 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800861a:	2b01      	cmp	r3, #1
 800861c:	db17      	blt.n	800864e <USBD_GetConfig+0x56>
 800861e:	2b02      	cmp	r3, #2
 8008620:	dd02      	ble.n	8008628 <USBD_GetConfig+0x30>
 8008622:	2b03      	cmp	r3, #3
 8008624:	d00b      	beq.n	800863e <USBD_GetConfig+0x46>
 8008626:	e012      	b.n	800864e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	3308      	adds	r3, #8
 8008632:	2201      	movs	r2, #1
 8008634:	4619      	mov	r1, r3
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 f922 	bl	8008880 <USBD_CtlSendData>
      break;
 800863c:	e00c      	b.n	8008658 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	3304      	adds	r3, #4
 8008642:	2201      	movs	r2, #1
 8008644:	4619      	mov	r1, r3
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 f91a 	bl	8008880 <USBD_CtlSendData>
      break;
 800864c:	e004      	b.n	8008658 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800864e:	6839      	ldr	r1, [r7, #0]
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 f8aa 	bl	80087aa <USBD_CtlError>
      break;
 8008656:	bf00      	nop
}
 8008658:	bf00      	nop
 800865a:	3708      	adds	r7, #8
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b082      	sub	sp, #8
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008670:	3b01      	subs	r3, #1
 8008672:	2b02      	cmp	r3, #2
 8008674:	d81e      	bhi.n	80086b4 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	88db      	ldrh	r3, [r3, #6]
 800867a:	2b02      	cmp	r3, #2
 800867c:	d004      	beq.n	8008688 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800867e:	6839      	ldr	r1, [r7, #0]
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 f892 	bl	80087aa <USBD_CtlError>
      break;
 8008686:	e01a      	b.n	80086be <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2201      	movs	r2, #1
 800868c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8008694:	2b00      	cmp	r3, #0
 8008696:	d005      	beq.n	80086a4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	68db      	ldr	r3, [r3, #12]
 800869c:	f043 0202 	orr.w	r2, r3, #2
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	330c      	adds	r3, #12
 80086a8:	2202      	movs	r2, #2
 80086aa:	4619      	mov	r1, r3
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 f8e7 	bl	8008880 <USBD_CtlSendData>
    break;
 80086b2:	e004      	b.n	80086be <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 80086b4:	6839      	ldr	r1, [r7, #0]
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 f877 	bl	80087aa <USBD_CtlError>
    break;
 80086bc:	bf00      	nop
  }
}
 80086be:	bf00      	nop
 80086c0:	3708      	adds	r7, #8
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}

080086c6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80086c6:	b580      	push	{r7, lr}
 80086c8:	b082      	sub	sp, #8
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
 80086ce:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	885b      	ldrh	r3, [r3, #2]
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d106      	bne.n	80086e6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2201      	movs	r2, #1
 80086dc:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 f92b 	bl	800893c <USBD_CtlSendStatus>
  }

}
 80086e6:	bf00      	nop
 80086e8:	3708      	adds	r7, #8
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}

080086ee <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80086ee:	b580      	push	{r7, lr}
 80086f0:	b082      	sub	sp, #8
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
 80086f6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80086fe:	3b01      	subs	r3, #1
 8008700:	2b02      	cmp	r3, #2
 8008702:	d80b      	bhi.n	800871c <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	885b      	ldrh	r3, [r3, #2]
 8008708:	2b01      	cmp	r3, #1
 800870a:	d10c      	bne.n	8008726 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 f911 	bl	800893c <USBD_CtlSendStatus>
    }
    break;
 800871a:	e004      	b.n	8008726 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800871c:	6839      	ldr	r1, [r7, #0]
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 f843 	bl	80087aa <USBD_CtlError>
    break;
 8008724:	e000      	b.n	8008728 <USBD_ClrFeature+0x3a>
    break;
 8008726:	bf00      	nop
  }
}
 8008728:	bf00      	nop
 800872a:	3708      	adds	r7, #8
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008730:	b480      	push	{r7}
 8008732:	b083      	sub	sp, #12
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	781a      	ldrb	r2, [r3, #0]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	785a      	ldrb	r2, [r3, #1]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	3302      	adds	r3, #2
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	b29a      	uxth	r2, r3
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	3303      	adds	r3, #3
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	b29b      	uxth	r3, r3
 800875a:	021b      	lsls	r3, r3, #8
 800875c:	b29b      	uxth	r3, r3
 800875e:	4413      	add	r3, r2
 8008760:	b29a      	uxth	r2, r3
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	3304      	adds	r3, #4
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	b29a      	uxth	r2, r3
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	3305      	adds	r3, #5
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	b29b      	uxth	r3, r3
 8008776:	021b      	lsls	r3, r3, #8
 8008778:	b29b      	uxth	r3, r3
 800877a:	4413      	add	r3, r2
 800877c:	b29a      	uxth	r2, r3
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	3306      	adds	r3, #6
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	b29a      	uxth	r2, r3
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	3307      	adds	r3, #7
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	b29b      	uxth	r3, r3
 8008792:	021b      	lsls	r3, r3, #8
 8008794:	b29b      	uxth	r3, r3
 8008796:	4413      	add	r3, r2
 8008798:	b29a      	uxth	r2, r3
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	80da      	strh	r2, [r3, #6]

}
 800879e:	bf00      	nop
 80087a0:	370c      	adds	r7, #12
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr

080087aa <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80087aa:	b580      	push	{r7, lr}
 80087ac:	b082      	sub	sp, #8
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6078      	str	r0, [r7, #4]
 80087b2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 80087b4:	2180      	movs	r1, #128	; 0x80
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f002 fdf0 	bl	800b39c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80087bc:	2100      	movs	r1, #0
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f002 fdec 	bl	800b39c <USBD_LL_StallEP>
}
 80087c4:	bf00      	nop
 80087c6:	3708      	adds	r7, #8
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b086      	sub	sp, #24
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80087d8:	2300      	movs	r3, #0
 80087da:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d032      	beq.n	8008848 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80087e2:	68f8      	ldr	r0, [r7, #12]
 80087e4:	f000 f834 	bl	8008850 <USBD_GetLen>
 80087e8:	4603      	mov	r3, r0
 80087ea:	3301      	adds	r3, #1
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	005b      	lsls	r3, r3, #1
 80087f0:	b29a      	uxth	r2, r3
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80087f6:	7dfb      	ldrb	r3, [r7, #23]
 80087f8:	1c5a      	adds	r2, r3, #1
 80087fa:	75fa      	strb	r2, [r7, #23]
 80087fc:	461a      	mov	r2, r3
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	4413      	add	r3, r2
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	7812      	ldrb	r2, [r2, #0]
 8008806:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008808:	7dfb      	ldrb	r3, [r7, #23]
 800880a:	1c5a      	adds	r2, r3, #1
 800880c:	75fa      	strb	r2, [r7, #23]
 800880e:	461a      	mov	r2, r3
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	4413      	add	r3, r2
 8008814:	2203      	movs	r2, #3
 8008816:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008818:	e012      	b.n	8008840 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	1c5a      	adds	r2, r3, #1
 800881e:	60fa      	str	r2, [r7, #12]
 8008820:	7dfa      	ldrb	r2, [r7, #23]
 8008822:	1c51      	adds	r1, r2, #1
 8008824:	75f9      	strb	r1, [r7, #23]
 8008826:	4611      	mov	r1, r2
 8008828:	68ba      	ldr	r2, [r7, #8]
 800882a:	440a      	add	r2, r1
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008830:	7dfb      	ldrb	r3, [r7, #23]
 8008832:	1c5a      	adds	r2, r3, #1
 8008834:	75fa      	strb	r2, [r7, #23]
 8008836:	461a      	mov	r2, r3
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	4413      	add	r3, r2
 800883c:	2200      	movs	r2, #0
 800883e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d1e8      	bne.n	800881a <USBD_GetString+0x4e>
    }
  }
}
 8008848:	bf00      	nop
 800884a:	3718      	adds	r7, #24
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008850:	b480      	push	{r7}
 8008852:	b085      	sub	sp, #20
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8008858:	2300      	movs	r3, #0
 800885a:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800885c:	e005      	b.n	800886a <USBD_GetLen+0x1a>
    {
        len++;
 800885e:	7bfb      	ldrb	r3, [r7, #15]
 8008860:	3301      	adds	r3, #1
 8008862:	73fb      	strb	r3, [r7, #15]
        buf++;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	3301      	adds	r3, #1
 8008868:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d1f5      	bne.n	800885e <USBD_GetLen+0xe>
    }

    return len;
 8008872:	7bfb      	ldrb	r3, [r7, #15]
}
 8008874:	4618      	mov	r0, r3
 8008876:	3714      	adds	r7, #20
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr

08008880 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	4613      	mov	r3, r2
 800888c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2202      	movs	r2, #2
 8008892:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8008896:	88fa      	ldrh	r2, [r7, #6]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800889c:	88fa      	ldrh	r2, [r7, #6]
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80088a2:	88fb      	ldrh	r3, [r7, #6]
 80088a4:	68ba      	ldr	r2, [r7, #8]
 80088a6:	2100      	movs	r1, #0
 80088a8:	68f8      	ldr	r0, [r7, #12]
 80088aa:	f002 fe00 	bl	800b4ae <USBD_LL_Transmit>

  return USBD_OK;
 80088ae:	2300      	movs	r3, #0
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3710      	adds	r7, #16
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	60f8      	str	r0, [r7, #12]
 80088c0:	60b9      	str	r1, [r7, #8]
 80088c2:	4613      	mov	r3, r2
 80088c4:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80088c6:	88fb      	ldrh	r3, [r7, #6]
 80088c8:	68ba      	ldr	r2, [r7, #8]
 80088ca:	2100      	movs	r1, #0
 80088cc:	68f8      	ldr	r0, [r7, #12]
 80088ce:	f002 fdee 	bl	800b4ae <USBD_LL_Transmit>

  return USBD_OK;
 80088d2:	2300      	movs	r3, #0
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3710      	adds	r7, #16
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	60b9      	str	r1, [r7, #8]
 80088e6:	4613      	mov	r3, r2
 80088e8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2203      	movs	r2, #3
 80088ee:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 80088f2:	88fa      	ldrh	r2, [r7, #6]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 80088fa:	88fa      	ldrh	r2, [r7, #6]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8008902:	88fb      	ldrh	r3, [r7, #6]
 8008904:	68ba      	ldr	r2, [r7, #8]
 8008906:	2100      	movs	r1, #0
 8008908:	68f8      	ldr	r0, [r7, #12]
 800890a:	f002 fdf3 	bl	800b4f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800890e:	2300      	movs	r3, #0
}
 8008910:	4618      	mov	r0, r3
 8008912:	3710      	adds	r7, #16
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	60b9      	str	r1, [r7, #8]
 8008922:	4613      	mov	r3, r2
 8008924:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008926:	88fb      	ldrh	r3, [r7, #6]
 8008928:	68ba      	ldr	r2, [r7, #8]
 800892a:	2100      	movs	r1, #0
 800892c:	68f8      	ldr	r0, [r7, #12]
 800892e:	f002 fde1 	bl	800b4f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3710      	adds	r7, #16
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2204      	movs	r2, #4
 8008948:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800894c:	2300      	movs	r3, #0
 800894e:	2200      	movs	r2, #0
 8008950:	2100      	movs	r1, #0
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f002 fdab 	bl	800b4ae <USBD_LL_Transmit>

  return USBD_OK;
 8008958:	2300      	movs	r3, #0
}
 800895a:	4618      	mov	r0, r3
 800895c:	3708      	adds	r7, #8
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}

08008962 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8008962:	b580      	push	{r7, lr}
 8008964:	b082      	sub	sp, #8
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2205      	movs	r2, #5
 800896e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008972:	2300      	movs	r3, #0
 8008974:	2200      	movs	r2, #0
 8008976:	2100      	movs	r1, #0
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f002 fdbb 	bl	800b4f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800897e:	2300      	movs	r3, #0
}
 8008980:	4618      	mov	r0, r3
 8008982:	3708      	adds	r7, #8
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008988:	b480      	push	{r7}
 800898a:	b087      	sub	sp, #28
 800898c:	af00      	add	r7, sp, #0
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	4613      	mov	r3, r2
 8008994:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008996:	2301      	movs	r3, #1
 8008998:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800899a:	2300      	movs	r3, #0
 800899c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800899e:	4b1f      	ldr	r3, [pc, #124]	; (8008a1c <FATFS_LinkDriverEx+0x94>)
 80089a0:	7a5b      	ldrb	r3, [r3, #9]
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d131      	bne.n	8008a0c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80089a8:	4b1c      	ldr	r3, [pc, #112]	; (8008a1c <FATFS_LinkDriverEx+0x94>)
 80089aa:	7a5b      	ldrb	r3, [r3, #9]
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	461a      	mov	r2, r3
 80089b0:	4b1a      	ldr	r3, [pc, #104]	; (8008a1c <FATFS_LinkDriverEx+0x94>)
 80089b2:	2100      	movs	r1, #0
 80089b4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80089b6:	4b19      	ldr	r3, [pc, #100]	; (8008a1c <FATFS_LinkDriverEx+0x94>)
 80089b8:	7a5b      	ldrb	r3, [r3, #9]
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	4a17      	ldr	r2, [pc, #92]	; (8008a1c <FATFS_LinkDriverEx+0x94>)
 80089be:	009b      	lsls	r3, r3, #2
 80089c0:	4413      	add	r3, r2
 80089c2:	68fa      	ldr	r2, [r7, #12]
 80089c4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80089c6:	4b15      	ldr	r3, [pc, #84]	; (8008a1c <FATFS_LinkDriverEx+0x94>)
 80089c8:	7a5b      	ldrb	r3, [r3, #9]
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	461a      	mov	r2, r3
 80089ce:	4b13      	ldr	r3, [pc, #76]	; (8008a1c <FATFS_LinkDriverEx+0x94>)
 80089d0:	4413      	add	r3, r2
 80089d2:	79fa      	ldrb	r2, [r7, #7]
 80089d4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80089d6:	4b11      	ldr	r3, [pc, #68]	; (8008a1c <FATFS_LinkDriverEx+0x94>)
 80089d8:	7a5b      	ldrb	r3, [r3, #9]
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	1c5a      	adds	r2, r3, #1
 80089de:	b2d1      	uxtb	r1, r2
 80089e0:	4a0e      	ldr	r2, [pc, #56]	; (8008a1c <FATFS_LinkDriverEx+0x94>)
 80089e2:	7251      	strb	r1, [r2, #9]
 80089e4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80089e6:	7dbb      	ldrb	r3, [r7, #22]
 80089e8:	3330      	adds	r3, #48	; 0x30
 80089ea:	b2da      	uxtb	r2, r3
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	3301      	adds	r3, #1
 80089f4:	223a      	movs	r2, #58	; 0x3a
 80089f6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	3302      	adds	r3, #2
 80089fc:	222f      	movs	r2, #47	; 0x2f
 80089fe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	3303      	adds	r3, #3
 8008a04:	2200      	movs	r2, #0
 8008a06:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008a0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	371c      	adds	r7, #28
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr
 8008a1a:	bf00      	nop
 8008a1c:	2000020c 	.word	0x2000020c

08008a20 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	6839      	ldr	r1, [r7, #0]
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f7ff ffaa 	bl	8008988 <FATFS_LinkDriverEx>
 8008a34:	4603      	mov	r3, r0
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3708      	adds	r7, #8
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <_ZN9Cartridge4initEv>:

Cartridge::~Cartridge() {
	// TODO Auto-generated destructor stub
}

void Cartridge::init(void){
 8008a3e:	b480      	push	{r7}
 8008a40:	af00      	add	r7, sp, #0

}
 8008a42:	bf00      	nop
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr

08008a4c <_ZN3UMDC1Ev>:


/*******************************************************************//**
 *
 **********************************************************************/
UMD::UMD(){
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b082      	sub	sp, #8
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2264      	movs	r2, #100	; 0x64
 8008a58:	601a      	str	r2, [r3, #0]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	22fa      	movs	r2, #250	; 0xfa
 8008a5e:	605a      	str	r2, [r3, #4]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	330c      	adds	r3, #12
 8008a64:	4618      	mov	r0, r3
 8008a66:	f000 fa59 	bl	8008f1c <_ZN3USBC1Ev>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8008a70:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	4a05      	ldr	r2, [pc, #20]	; (8008a8c <_ZN3UMDC1Ev+0x40>)
 8008a78:	f603 0321 	addw	r3, r3, #2081	; 0x821
 8008a7c:	8812      	ldrh	r2, [r2, #0]
 8008a7e:	801a      	strh	r2, [r3, #0]

}
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	4618      	mov	r0, r3
 8008a84:	3708      	adds	r7, #8
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	0800bd28 	.word	0x0800bd28

08008a90 <_ZN3UMD4initEv>:

/*******************************************************************//**
 *
 **********************************************************************/
void UMD::init(void){
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
	int i;
	//uint8_t read_data;
	// HAL_USART_Transmit();

	// turn off cartridge voltage source
	set_cartridge_voltage(vcart_off);
 8008a98:	2100      	movs	r1, #0
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 f96a 	bl	8008d74 <_ZN3UMD21set_cartridge_voltageENS_9cartv_typE>
	// can write directly to the FMSC memory space
	/* NOR memory device read/write start address */
	// read_data = *(__IO uint8_t *)ce0_8b_ptr;e

	// configure outputs
	io_set_level_translators(false);
 8008aa0:	2100      	movs	r1, #0
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 f9aa 	bl	8008dfc <_ZN3UMD24io_set_level_translatorsEb>
	io_boot_precharge(false);
 8008aa8:	2100      	movs	r1, #0
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 fa1a 	bl	8008ee4 <_ZN3UMD17io_boot_prechargeEb>

	// flash to show we're alive
	for(i=0;i<4;i++){
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	60fb      	str	r3, [r7, #12]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2b03      	cmp	r3, #3
 8008ab8:	dc11      	bgt.n	8008ade <_ZN3UMD4initEv+0x4e>
		io_set_leds(0x05);
 8008aba:	2105      	movs	r1, #5
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 f9c5 	bl	8008e4c <_ZN3UMD11io_set_ledsEh>
		HAL_Delay(250);
 8008ac2:	20fa      	movs	r0, #250	; 0xfa
 8008ac4:	f7f7 fda2 	bl	800060c <HAL_Delay>
		io_set_leds(0x0A);
 8008ac8:	210a      	movs	r1, #10
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 f9be 	bl	8008e4c <_ZN3UMD11io_set_ledsEh>
		HAL_Delay(250);
 8008ad0:	20fa      	movs	r0, #250	; 0xfa
 8008ad2:	f7f7 fd9b 	bl	800060c <HAL_Delay>
	for(i=0;i<4;i++){
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	3301      	adds	r3, #1
 8008ada:	60fb      	str	r3, [r7, #12]
 8008adc:	e7ea      	b.n	8008ab4 <_ZN3UMD4initEv+0x24>
	}
	io_set_leds(0x00);
 8008ade:	2100      	movs	r1, #0
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 f9b3 	bl	8008e4c <_ZN3UMD11io_set_ledsEh>
}
 8008ae6:	bf00      	nop
 8008ae8:	3710      	adds	r7, #16
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
	...

08008af0 <_ZN3UMD3runEv>:

/*******************************************************************//**
 *
 **********************************************************************/
void UMD::run(void){
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b084      	sub	sp, #16
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]

	uint32_t umd_millis;
	init();
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f7ff ffc9 	bl	8008a90 <_ZN3UMD4initEv>

	// We need a cart factory but only one, and this function is the only one that needs to update
	// the cart ptr.  So we can use the static keyword to keep this across calls to the function
	set_cartridge_type(0);
 8008afe:	2100      	movs	r1, #0
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 f90f 	bl	8008d24 <_ZN3UMD18set_cartridge_typeEh>

	cart->init();
 8008b06:	f7ff ff9a 	bl	8008a3e <_ZN9Cartridge4initEv>

	while(1){
		umd_millis = HAL_GetTick();
 8008b0a:	f7f7 fd73 	bl	80005f4 <HAL_GetTick>
 8008b0e:	60f8      	str	r0, [r7, #12]
		listen();
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 f821 	bl	8008b58 <_ZN3UMD6listenEv>

		// check adc
		HAL_ADC_Start(&hadc1);
 8008b16:	480f      	ldr	r0, [pc, #60]	; (8008b54 <_ZN3UMD3runEv+0x64>)
 8008b18:	f7f7 fdde 	bl	80006d8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8008b1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008b20:	480c      	ldr	r0, [pc, #48]	; (8008b54 <_ZN3UMD3runEv+0x64>)
 8008b22:	f7f7 fe7f 	bl	8000824 <HAL_ADC_PollForConversion>
		adc_icart = HAL_ADC_GetValue(&hadc1);
 8008b26:	480b      	ldr	r0, [pc, #44]	; (8008b54 <_ZN3UMD3runEv+0x64>)
 8008b28:	f7f7 ff00 	bl	800092c <HAL_ADC_GetValue>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	b29a      	uxth	r2, r3
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8a3 2844 	strh.w	r2, [r3, #2116]	; 0x844

		// wait a bit
		while( (HAL_GetTick() - umd_millis) < listen_interval );
 8008b36:	f7f7 fd5d 	bl	80005f4 <HAL_GetTick>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	1ad2      	subs	r2, r2, r3
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	429a      	cmp	r2, r3
 8008b46:	bf34      	ite	cc
 8008b48:	2301      	movcc	r3, #1
 8008b4a:	2300      	movcs	r3, #0
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d0db      	beq.n	8008b0a <_ZN3UMD3runEv+0x1a>
 8008b52:	e7f0      	b.n	8008b36 <_ZN3UMD3runEv+0x46>
 8008b54:	200002d4 	.word	0x200002d4

08008b58 <_ZN3UMD6listenEv>:
}

/*******************************************************************//**
 *
 **********************************************************************/
void UMD::listen(void){
 8008b58:	b590      	push	{r4, r7, lr}
 8008b5a:	b08b      	sub	sp, #44	; 0x2c
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]

	uint8_t data;

	if( usb.available() ){
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	330c      	adds	r3, #12
 8008b64:	4618      	mov	r0, r3
 8008b66:	f000 fa2b 	bl	8008fc0 <_ZN3USB9availableEv>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	bf14      	ite	ne
 8008b70:	2301      	movne	r3, #1
 8008b72:	2300      	moveq	r3, #0
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	f000 80c5 	beq.w	8008d06 <_ZN3UMD6listenEv+0x1ae>

		umd_command = usb.get();
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	330c      	adds	r3, #12
 8008b80:	4618      	mov	r0, r3
 8008b82:	f000 fae7 	bl	8009154 <_ZN3USB3getEv>
 8008b86:	4603      	mov	r3, r0
 8008b88:	461a      	mov	r2, r3
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f883 2820 	strb.w	r2, [r3, #2080]	; 0x820
		switch(umd_command){
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f893 3820 	ldrb.w	r3, [r3, #2080]	; 0x820
 8008b96:	3b01      	subs	r3, #1
 8008b98:	2b04      	cmp	r3, #4
 8008b9a:	f200 80b3 	bhi.w	8008d04 <_ZN3UMD6listenEv+0x1ac>
 8008b9e:	a201      	add	r2, pc, #4	; (adr r2, 8008ba4 <_ZN3UMD6listenEv+0x4c>)
 8008ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba4:	08008bb9 	.word	0x08008bb9
 8008ba8:	08008c05 	.word	0x08008c05
 8008bac:	08008c51 	.word	0x08008c51
 8008bb0:	08008cb1 	.word	0x08008cb1
 8008bb4:	08008ce5 	.word	0x08008ce5

		// COMMAND 0x01 - ID
		case 0x01:

			//usb_tx(std::string("UMDv2"));
			usb.put(std::string("UMD v2.0.0.0"));
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f103 040c 	add.w	r4, r3, #12
 8008bbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f002 fe4a 	bl	800b85c <_ZNSaIcEC1Ev>
 8008bc8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008bcc:	f107 030c 	add.w	r3, r7, #12
 8008bd0:	494f      	ldr	r1, [pc, #316]	; (8008d10 <_ZN3UMD6listenEv+0x1b8>)
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f002 feb0 	bl	800b938 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008bd8:	f107 030c 	add.w	r3, r7, #12
 8008bdc:	4619      	mov	r1, r3
 8008bde:	4620      	mov	r0, r4
 8008be0:	f000 fa0a 	bl	8008ff8 <_ZN3USB3putENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8008be4:	f107 030c 	add.w	r3, r7, #12
 8008be8:	4618      	mov	r0, r3
 8008bea:	f002 fe77 	bl	800b8dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008bee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f002 fe33 	bl	800b85e <_ZNSaIcED1Ev>
			usb.transmit();
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	330c      	adds	r3, #12
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f000 f9bb 	bl	8008f78 <_ZN3USB8transmitEv>
			break;
 8008c02:	e080      	b.n	8008d06 <_ZN3UMD6listenEv+0x1ae>

		// COMMAND 0x02 - SET LEDs
		case 0x02:
			// next byte contains the LED value
			if( usb.available(cmd_timeout, 1) ){
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f103 000c 	add.w	r0, r3, #12
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	4619      	mov	r1, r3
 8008c12:	f000 f9e0 	bl	8008fd6 <_ZN3USB9availableEmt>
 8008c16:	4603      	mov	r3, r0
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	bf14      	ite	ne
 8008c1c:	2301      	movne	r3, #1
 8008c1e:	2300      	moveq	r3, #0
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d00e      	beq.n	8008c44 <_ZN3UMD6listenEv+0xec>
				data = usb.get();
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	330c      	adds	r3, #12
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f000 fa92 	bl	8009154 <_ZN3USB3getEv>
 8008c30:	4603      	mov	r3, r0
 8008c32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				io_set_leds(data);
 8008c36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 f905 	bl	8008e4c <_ZN3UMD11io_set_ledsEh>
			}else{

				usb.transmit();
			}
			break;
 8008c42:	e060      	b.n	8008d06 <_ZN3UMD6listenEv+0x1ae>
				usb.transmit();
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	330c      	adds	r3, #12
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f000 f995 	bl	8008f78 <_ZN3USB8transmitEv>
			break;
 8008c4e:	e05a      	b.n	8008d06 <_ZN3UMD6listenEv+0x1ae>

		// COMMAND 0x03 - SET CARTRIDGE VOLTAGE
		case 0x03:
			// next byte contains the value
			if( usb.available(cmd_timeout, 1) ){
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f103 000c 	add.w	r0, r3, #12
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	f000 f9ba 	bl	8008fd6 <_ZN3USB9availableEmt>
 8008c62:	4603      	mov	r3, r0
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	bf14      	ite	ne
 8008c68:	2301      	movne	r3, #1
 8008c6a:	2300      	moveq	r3, #0
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d00e      	beq.n	8008c90 <_ZN3UMD6listenEv+0x138>
				data = usb.get();
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	330c      	adds	r3, #12
 8008c76:	4618      	mov	r0, r3
 8008c78:	f000 fa6c 	bl	8009154 <_ZN3USB3getEv>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				set_cartridge_voltage(static_cast<cartv_typ>(data));
 8008c82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c86:	4619      	mov	r1, r3
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 f873 	bl	8008d74 <_ZN3UMD21set_cartridge_voltageENS_9cartv_typE>
			}else{
				usb.put(umd_timeout_response, sizeof(umd_timeout_response));
				usb.transmit();
			}
			break;
 8008c8e:	e03a      	b.n	8008d06 <_ZN3UMD6listenEv+0x1ae>
				usb.put(umd_timeout_response, sizeof(umd_timeout_response));
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f103 000c 	add.w	r0, r3, #12
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f603 0321 	addw	r3, r3, #2081	; 0x821
 8008c9c:	2202      	movs	r2, #2
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	f000 fa26 	bl	80090f0 <_ZN3USB3putEPht>
				usb.transmit();
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	330c      	adds	r3, #12
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f000 f965 	bl	8008f78 <_ZN3USB8transmitEv>
			break;
 8008cae:	e02a      	b.n	8008d06 <_ZN3UMD6listenEv+0x1ae>

		// COMMAND 0x04 - GET CARTRIDGE VOLTAGE
		case 0x04:
			// reply with command byte followed by cartv enum
			usb.put(umd_command);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f103 020c 	add.w	r2, r3, #12
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f893 3820 	ldrb.w	r3, [r3, #2080]	; 0x820
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	4610      	mov	r0, r2
 8008cc0:	f000 f9d1 	bl	8009066 <_ZN3USB3putEh>
			usb.put(static_cast<uint8_t>(cartv));
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f103 020c 	add.w	r2, r3, #12
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f893 3846 	ldrb.w	r3, [r3, #2118]	; 0x846
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	4610      	mov	r0, r2
 8008cd4:	f000 f9c7 	bl	8009066 <_ZN3USB3putEh>
			usb.transmit();
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	330c      	adds	r3, #12
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f000 f94b 	bl	8008f78 <_ZN3USB8transmitEv>
			break;
 8008ce2:	e010      	b.n	8008d06 <_ZN3UMD6listenEv+0x1ae>

		case 0x05:
			usb.put(adc_icart);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f103 020c 	add.w	r2, r3, #12
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8b3 3844 	ldrh.w	r3, [r3, #2116]	; 0x844
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	4610      	mov	r0, r2
 8008cf4:	f000 f9d6 	bl	80090a4 <_ZN3USB3putEt>
			usb.transmit();
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	330c      	adds	r3, #12
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f000 f93b 	bl	8008f78 <_ZN3USB8transmitEv>
			break;
 8008d02:	e000      	b.n	8008d06 <_ZN3UMD6listenEv+0x1ae>

		// DEFAULT REPLY
		default:

			break;
 8008d04:	bf00      	nop
		}
	}
}
 8008d06:	bf00      	nop
 8008d08:	372c      	adds	r7, #44	; 0x2c
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd90      	pop	{r4, r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	0800bd2c 	.word	0x0800bd2c

08008d14 <__tcf_0>:

/*******************************************************************//**
 *
 **********************************************************************/
void UMD::set_cartridge_type(uint8_t mode){
	static CartFactory cf;
 8008d14:	b580      	push	{r7, lr}
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	4801      	ldr	r0, [pc, #4]	; (8008d20 <__tcf_0+0xc>)
 8008d1a:	f000 fcd9 	bl	80096d0 <_ZN11CartFactoryD1Ev>
 8008d1e:	bd80      	pop	{r7, pc}
 8008d20:	20000218 	.word	0x20000218

08008d24 <_ZN3UMD18set_cartridge_typeEh>:
void UMD::set_cartridge_type(uint8_t mode){
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b082      	sub	sp, #8
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	70fb      	strb	r3, [r7, #3]
	static CartFactory cf;
 8008d30:	4b0d      	ldr	r3, [pc, #52]	; (8008d68 <_ZN3UMD18set_cartridge_typeEh+0x44>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f003 0301 	and.w	r3, r3, #1
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d108      	bne.n	8008d4e <_ZN3UMD18set_cartridge_typeEh+0x2a>
 8008d3c:	480b      	ldr	r0, [pc, #44]	; (8008d6c <_ZN3UMD18set_cartridge_typeEh+0x48>)
 8008d3e:	f000 fcbc 	bl	80096ba <_ZN11CartFactoryC1Ev>
 8008d42:	4b09      	ldr	r3, [pc, #36]	; (8008d68 <_ZN3UMD18set_cartridge_typeEh+0x44>)
 8008d44:	2201      	movs	r2, #1
 8008d46:	601a      	str	r2, [r3, #0]
 8008d48:	4809      	ldr	r0, [pc, #36]	; (8008d70 <_ZN3UMD18set_cartridge_typeEh+0x4c>)
 8008d4a:	f002 fe12 	bl	800b972 <atexit>
	cart = cf.getCart(static_cast<CartFactory::Mode>(mode));
 8008d4e:	78fb      	ldrb	r3, [r7, #3]
 8008d50:	4619      	mov	r1, r3
 8008d52:	4806      	ldr	r0, [pc, #24]	; (8008d6c <_ZN3UMD18set_cartridge_typeEh+0x48>)
 8008d54:	f000 fce1 	bl	800971a <_ZN11CartFactory7getCartENS_4ModeE>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	609a      	str	r2, [r3, #8]
}
 8008d5e:	bf00      	nop
 8008d60:	3708      	adds	r7, #8
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	bf00      	nop
 8008d68:	20000228 	.word	0x20000228
 8008d6c:	20000218 	.word	0x20000218
 8008d70:	08008d15 	.word	0x08008d15

08008d74 <_ZN3UMD21set_cartridge_voltageENS_9cartv_typE>:


/*******************************************************************//**
 *
 **********************************************************************/
void UMD::set_cartridge_voltage(cartv_typ voltage){
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	70fb      	strb	r3, [r7, #3]
	switch(voltage){
 8008d80:	78fb      	ldrb	r3, [r7, #3]
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d002      	beq.n	8008d8c <_ZN3UMD21set_cartridge_voltageENS_9cartv_typE+0x18>
 8008d86:	2b02      	cmp	r3, #2
 8008d88:	d010      	beq.n	8008dac <_ZN3UMD21set_cartridge_voltageENS_9cartv_typE+0x38>
 8008d8a:	e01f      	b.n	8008dcc <_ZN3UMD21set_cartridge_voltageENS_9cartv_typE+0x58>
	case vcart_3v3:
		cartv = vcart_3v3;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	f883 2846 	strb.w	r2, [r3, #2118]	; 0x846
		HAL_GPIO_WritePin(VSEL0_GPIO_Port, VSEL0_Pin, GPIO_PIN_RESET);
 8008d94:	2200      	movs	r2, #0
 8008d96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008d9a:	4816      	ldr	r0, [pc, #88]	; (8008df4 <_ZN3UMD21set_cartridge_voltageENS_9cartv_typE+0x80>)
 8008d9c:	f7f8 fadc 	bl	8001358 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VSEL1_GPIO_Port, VSEL1_Pin, GPIO_PIN_RESET);
 8008da0:	2200      	movs	r2, #0
 8008da2:	2180      	movs	r1, #128	; 0x80
 8008da4:	4814      	ldr	r0, [pc, #80]	; (8008df8 <_ZN3UMD21set_cartridge_voltageENS_9cartv_typE+0x84>)
 8008da6:	f7f8 fad7 	bl	8001358 <HAL_GPIO_WritePin>
		break;
 8008daa:	e01f      	b.n	8008dec <_ZN3UMD21set_cartridge_voltageENS_9cartv_typE+0x78>
	case vcart_5v:
		cartv = vcart_5v;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2202      	movs	r2, #2
 8008db0:	f883 2846 	strb.w	r2, [r3, #2118]	; 0x846
		HAL_GPIO_WritePin(VSEL0_GPIO_Port, VSEL0_Pin, GPIO_PIN_SET);
 8008db4:	2201      	movs	r2, #1
 8008db6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008dba:	480e      	ldr	r0, [pc, #56]	; (8008df4 <_ZN3UMD21set_cartridge_voltageENS_9cartv_typE+0x80>)
 8008dbc:	f7f8 facc 	bl	8001358 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VSEL1_GPIO_Port, VSEL1_Pin, GPIO_PIN_RESET);
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	2180      	movs	r1, #128	; 0x80
 8008dc4:	480c      	ldr	r0, [pc, #48]	; (8008df8 <_ZN3UMD21set_cartridge_voltageENS_9cartv_typE+0x84>)
 8008dc6:	f7f8 fac7 	bl	8001358 <HAL_GPIO_WritePin>
		break;
 8008dca:	e00f      	b.n	8008dec <_ZN3UMD21set_cartridge_voltageENS_9cartv_typE+0x78>
	case vcart_off:
	default:
		cartv = vcart_off;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	f883 2846 	strb.w	r2, [r3, #2118]	; 0x846
		HAL_GPIO_WritePin(VSEL0_GPIO_Port, VSEL0_Pin, GPIO_PIN_SET);
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008dda:	4806      	ldr	r0, [pc, #24]	; (8008df4 <_ZN3UMD21set_cartridge_voltageENS_9cartv_typE+0x80>)
 8008ddc:	f7f8 fabc 	bl	8001358 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VSEL1_GPIO_Port, VSEL1_Pin, GPIO_PIN_SET);
 8008de0:	2201      	movs	r2, #1
 8008de2:	2180      	movs	r1, #128	; 0x80
 8008de4:	4804      	ldr	r0, [pc, #16]	; (8008df8 <_ZN3UMD21set_cartridge_voltageENS_9cartv_typE+0x84>)
 8008de6:	f7f8 fab7 	bl	8001358 <HAL_GPIO_WritePin>
		break;
 8008dea:	bf00      	nop
	}
}
 8008dec:	bf00      	nop
 8008dee:	3708      	adds	r7, #8
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}
 8008df4:	40020000 	.word	0x40020000
 8008df8:	40020800 	.word	0x40020800

08008dfc <_ZN3UMD24io_set_level_translatorsEb>:
#include "UMD.h"

/*******************************************************************//**
 *
 **********************************************************************/
void UMD::io_set_level_translators(bool enable){
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b082      	sub	sp, #8
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	460b      	mov	r3, r1
 8008e06:	70fb      	strb	r3, [r7, #3]
	if( enable ){
 8008e08:	78fb      	ldrb	r3, [r7, #3]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d00b      	beq.n	8008e26 <_ZN3UMD24io_set_level_translatorsEb+0x2a>
		HAL_GPIO_WritePin(nOUT_EN0_GPIO_Port, nOUT_EN0_Pin, GPIO_PIN_RESET);
 8008e0e:	2200      	movs	r2, #0
 8008e10:	2110      	movs	r1, #16
 8008e12:	480c      	ldr	r0, [pc, #48]	; (8008e44 <_ZN3UMD24io_set_level_translatorsEb+0x48>)
 8008e14:	f7f8 faa0 	bl	8001358 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(nOUT_EN1_GPIO_Port, nOUT_EN1_Pin, GPIO_PIN_RESET);
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008e1e:	480a      	ldr	r0, [pc, #40]	; (8008e48 <_ZN3UMD24io_set_level_translatorsEb+0x4c>)
 8008e20:	f7f8 fa9a 	bl	8001358 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(nOUT_EN0_GPIO_Port, nOUT_EN0_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(nOUT_EN1_GPIO_Port, nOUT_EN1_Pin, GPIO_PIN_SET);
	}
}
 8008e24:	e00a      	b.n	8008e3c <_ZN3UMD24io_set_level_translatorsEb+0x40>
		HAL_GPIO_WritePin(nOUT_EN0_GPIO_Port, nOUT_EN0_Pin, GPIO_PIN_SET);
 8008e26:	2201      	movs	r2, #1
 8008e28:	2110      	movs	r1, #16
 8008e2a:	4806      	ldr	r0, [pc, #24]	; (8008e44 <_ZN3UMD24io_set_level_translatorsEb+0x48>)
 8008e2c:	f7f8 fa94 	bl	8001358 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(nOUT_EN1_GPIO_Port, nOUT_EN1_Pin, GPIO_PIN_SET);
 8008e30:	2201      	movs	r2, #1
 8008e32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008e36:	4804      	ldr	r0, [pc, #16]	; (8008e48 <_ZN3UMD24io_set_level_translatorsEb+0x4c>)
 8008e38:	f7f8 fa8e 	bl	8001358 <HAL_GPIO_WritePin>
}
 8008e3c:	bf00      	nop
 8008e3e:	3708      	adds	r7, #8
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}
 8008e44:	40020000 	.word	0x40020000
 8008e48:	40021400 	.word	0x40021400

08008e4c <_ZN3UMD11io_set_ledsEh>:

/*******************************************************************//**
 *
 **********************************************************************/
void UMD::io_set_leds(uint8_t leds){
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b082      	sub	sp, #8
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	460b      	mov	r3, r1
 8008e56:	70fb      	strb	r3, [r7, #3]

	(leds & 0x01) ? HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET) : HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8008e58:	78fb      	ldrb	r3, [r7, #3]
 8008e5a:	f003 0301 	and.w	r3, r3, #1
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d005      	beq.n	8008e6e <_ZN3UMD11io_set_ledsEh+0x22>
 8008e62:	2201      	movs	r2, #1
 8008e64:	2108      	movs	r1, #8
 8008e66:	481e      	ldr	r0, [pc, #120]	; (8008ee0 <_ZN3UMD11io_set_ledsEh+0x94>)
 8008e68:	f7f8 fa76 	bl	8001358 <HAL_GPIO_WritePin>
 8008e6c:	e004      	b.n	8008e78 <_ZN3UMD11io_set_ledsEh+0x2c>
 8008e6e:	2200      	movs	r2, #0
 8008e70:	2108      	movs	r1, #8
 8008e72:	481b      	ldr	r0, [pc, #108]	; (8008ee0 <_ZN3UMD11io_set_ledsEh+0x94>)
 8008e74:	f7f8 fa70 	bl	8001358 <HAL_GPIO_WritePin>
	(leds & 0x02) ? HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET) : HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8008e78:	78fb      	ldrb	r3, [r7, #3]
 8008e7a:	f003 0302 	and.w	r3, r3, #2
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d005      	beq.n	8008e8e <_ZN3UMD11io_set_ledsEh+0x42>
 8008e82:	2201      	movs	r2, #1
 8008e84:	2104      	movs	r1, #4
 8008e86:	4816      	ldr	r0, [pc, #88]	; (8008ee0 <_ZN3UMD11io_set_ledsEh+0x94>)
 8008e88:	f7f8 fa66 	bl	8001358 <HAL_GPIO_WritePin>
 8008e8c:	e004      	b.n	8008e98 <_ZN3UMD11io_set_ledsEh+0x4c>
 8008e8e:	2200      	movs	r2, #0
 8008e90:	2104      	movs	r1, #4
 8008e92:	4813      	ldr	r0, [pc, #76]	; (8008ee0 <_ZN3UMD11io_set_ledsEh+0x94>)
 8008e94:	f7f8 fa60 	bl	8001358 <HAL_GPIO_WritePin>
	(leds & 0x04) ? HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET) : HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8008e98:	78fb      	ldrb	r3, [r7, #3]
 8008e9a:	f003 0304 	and.w	r3, r3, #4
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d005      	beq.n	8008eae <_ZN3UMD11io_set_ledsEh+0x62>
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	2102      	movs	r1, #2
 8008ea6:	480e      	ldr	r0, [pc, #56]	; (8008ee0 <_ZN3UMD11io_set_ledsEh+0x94>)
 8008ea8:	f7f8 fa56 	bl	8001358 <HAL_GPIO_WritePin>
 8008eac:	e004      	b.n	8008eb8 <_ZN3UMD11io_set_ledsEh+0x6c>
 8008eae:	2200      	movs	r2, #0
 8008eb0:	2102      	movs	r1, #2
 8008eb2:	480b      	ldr	r0, [pc, #44]	; (8008ee0 <_ZN3UMD11io_set_ledsEh+0x94>)
 8008eb4:	f7f8 fa50 	bl	8001358 <HAL_GPIO_WritePin>
	(leds & 0x08) ? HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET) : HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8008eb8:	78fb      	ldrb	r3, [r7, #3]
 8008eba:	f003 0308 	and.w	r3, r3, #8
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d005      	beq.n	8008ece <_ZN3UMD11io_set_ledsEh+0x82>
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	2101      	movs	r1, #1
 8008ec6:	4806      	ldr	r0, [pc, #24]	; (8008ee0 <_ZN3UMD11io_set_ledsEh+0x94>)
 8008ec8:	f7f8 fa46 	bl	8001358 <HAL_GPIO_WritePin>
}
 8008ecc:	e004      	b.n	8008ed8 <_ZN3UMD11io_set_ledsEh+0x8c>
	(leds & 0x08) ? HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET) : HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8008ece:	2200      	movs	r2, #0
 8008ed0:	2101      	movs	r1, #1
 8008ed2:	4803      	ldr	r0, [pc, #12]	; (8008ee0 <_ZN3UMD11io_set_ledsEh+0x94>)
 8008ed4:	f7f8 fa40 	bl	8001358 <HAL_GPIO_WritePin>
}
 8008ed8:	bf00      	nop
 8008eda:	3708      	adds	r7, #8
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}
 8008ee0:	40020000 	.word	0x40020000

08008ee4 <_ZN3UMD17io_boot_prechargeEb>:
}

/*******************************************************************//**
 *
 **********************************************************************/
void UMD::io_boot_precharge(bool charge){
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b082      	sub	sp, #8
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	460b      	mov	r3, r1
 8008eee:	70fb      	strb	r3, [r7, #3]
	if( charge ){
 8008ef0:	78fb      	ldrb	r3, [r7, #3]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d006      	beq.n	8008f04 <_ZN3UMD17io_boot_prechargeEb+0x20>
		HAL_GPIO_WritePin(BOOT_EN_GPIO_Port, BOOT_EN_Pin, GPIO_PIN_SET);
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008efc:	4806      	ldr	r0, [pc, #24]	; (8008f18 <_ZN3UMD17io_boot_prechargeEb+0x34>)
 8008efe:	f7f8 fa2b 	bl	8001358 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(BOOT_EN_GPIO_Port, BOOT_EN_Pin, GPIO_PIN_RESET);
	}
}
 8008f02:	e005      	b.n	8008f10 <_ZN3UMD17io_boot_prechargeEb+0x2c>
		HAL_GPIO_WritePin(BOOT_EN_GPIO_Port, BOOT_EN_Pin, GPIO_PIN_RESET);
 8008f04:	2200      	movs	r2, #0
 8008f06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008f0a:	4803      	ldr	r0, [pc, #12]	; (8008f18 <_ZN3UMD17io_boot_prechargeEb+0x34>)
 8008f0c:	f7f8 fa24 	bl	8001358 <HAL_GPIO_WritePin>
}
 8008f10:	bf00      	nop
 8008f12:	3708      	adds	r7, #8
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}
 8008f18:	40020400 	.word	0x40020400

08008f1c <_ZN3USBC1Ev>:
#include "usbd_cdc_if.h"

/*******************************************************************//**
 *
 **********************************************************************/
USB::USB(){
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b082      	sub	sp, #8
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f603 0304 	addw	r3, r3, #2052	; 0x804
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f000 f91d 	bl	800916a <_ZNSt6vectorIN3USB5_VBUFESaIS1_EEC1Ev>
	buffer.size = 0;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
	vbuf.reserve(1024);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f603 0304 	addw	r3, r3, #2052	; 0x804
 8008f3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008f42:	4618      	mov	r0, r3
 8008f44:	f000 f91e 	bl	8009184 <_ZNSt6vectorIN3USB5_VBUFESaIS1_EE7reserveEj>
}
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3708      	adds	r7, #8
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <_ZN3USB7is_fullEv>:

/*******************************************************************//**
 *
 **********************************************************************/
bool USB::is_full(void){
 8008f52:	b480      	push	{r7}
 8008f54:	b083      	sub	sp, #12
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]

	if( buffer.size >= CIRCULAR_BUFFER_SIZE ){
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 8008f60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f64:	d301      	bcc.n	8008f6a <_ZN3USB7is_fullEv+0x18>
		return true;
 8008f66:	2301      	movs	r3, #1
 8008f68:	e000      	b.n	8008f6c <_ZN3USB7is_fullEv+0x1a>
	}else{
		return false;
 8008f6a:	2300      	movs	r3, #0
	}
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	370c      	adds	r7, #12
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr

08008f78 <_ZN3USB8transmitEv>:


/*******************************************************************//**
 *
 **********************************************************************/
void USB::transmit(void){
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]

	if( buffer.size != 0){
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d016      	beq.n	8008fb8 <_ZN3USB8transmitEv+0x40>
		if( buffer.size > CIRCULAR_BUFFER_SIZE ){
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 8008f90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f94:	d904      	bls.n	8008fa0 <_ZN3USB8transmitEv+0x28>
			buffer.size = CIRCULAR_BUFFER_SIZE;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f9c:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
		}

		CDC_Transmit_FS(buffer.data.byte, buffer.size);
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 8008fa8:	4619      	mov	r1, r3
 8008faa:	4610      	mov	r0, r2
 8008fac:	f001 ff34 	bl	800ae18 <CDC_Transmit_FS>
		buffer.size = 0;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
	}
}
 8008fb8:	bf00      	nop
 8008fba:	3708      	adds	r7, #8
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <_ZN3USB9availableEv>:

/*******************************************************************//**
 *
 **********************************************************************/
uint16_t USB::available(void){
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
	return CDC_BytesAvailable();
 8008fc8:	f001 ff7a 	bl	800aec0 <CDC_BytesAvailable>
 8008fcc:	4603      	mov	r3, r0
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3708      	adds	r7, #8
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}

08008fd6 <_ZN3USB9availableEmt>:

/*******************************************************************//**
 *
 **********************************************************************/
uint16_t USB::available(uint32_t timeout_ms, uint16_t bytes_required){
 8008fd6:	b580      	push	{r7, lr}
 8008fd8:	b084      	sub	sp, #16
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	60f8      	str	r0, [r7, #12]
 8008fde:	60b9      	str	r1, [r7, #8]
 8008fe0:	4613      	mov	r3, r2
 8008fe2:	80fb      	strh	r3, [r7, #6]
	return CDC_BytesAvailableTimeout(timeout_ms, bytes_required);
 8008fe4:	88fb      	ldrh	r3, [r7, #6]
 8008fe6:	4619      	mov	r1, r3
 8008fe8:	68b8      	ldr	r0, [r7, #8]
 8008fea:	f001 ff7d 	bl	800aee8 <CDC_BytesAvailableTimeout>
 8008fee:	4603      	mov	r3, r0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3710      	adds	r7, #16
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <_ZN3USB3putENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

/*******************************************************************//**
 *
 **********************************************************************/
uint16_t USB::put(std::string str){
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b086      	sub	sp, #24
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	6039      	str	r1, [r7, #0]

	uint16_t str_len = str.length();
 8009002:	6838      	ldr	r0, [r7, #0]
 8009004:	f002 fc70 	bl	800b8e8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8009008:	4603      	mov	r3, r0
 800900a:	81fb      	strh	r3, [r7, #14]
	uint16_t room_left = CIRCULAR_BUFFER_SIZE - buffer.size;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 8009012:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8009016:	81bb      	strh	r3, [r7, #12]

	// is there enough room on the buffer for the string?
	if( str_len > room_left ){
 8009018:	89fa      	ldrh	r2, [r7, #14]
 800901a:	89bb      	ldrh	r3, [r7, #12]
 800901c:	429a      	cmp	r2, r3
 800901e:	d901      	bls.n	8009024 <_ZN3USB3putENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2c>
		return 0;
 8009020:	2300      	movs	r3, #0
 8009022:	e01c      	b.n	800905e <_ZN3USB3putENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x66>
	}else{
		const char *strp = str.c_str();
 8009024:	6838      	ldr	r0, [r7, #0]
 8009026:	f002 fc61 	bl	800b8ec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800902a:	6178      	str	r0, [r7, #20]
		for( int i = 0; i < str_len ; i++){
 800902c:	2300      	movs	r3, #0
 800902e:	613b      	str	r3, [r7, #16]
 8009030:	89fb      	ldrh	r3, [r7, #14]
 8009032:	693a      	ldr	r2, [r7, #16]
 8009034:	429a      	cmp	r2, r3
 8009036:	da11      	bge.n	800905c <_ZN3USB3putENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x64>
			buffer.data.byte[buffer.size++] = *(strp++);
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	1c5a      	adds	r2, r3, #1
 800903c:	617a      	str	r2, [r7, #20]
 800903e:	687a      	ldr	r2, [r7, #4]
 8009040:	f8b2 2800 	ldrh.w	r2, [r2, #2048]	; 0x800
 8009044:	1c51      	adds	r1, r2, #1
 8009046:	b288      	uxth	r0, r1
 8009048:	6879      	ldr	r1, [r7, #4]
 800904a:	f8a1 0800 	strh.w	r0, [r1, #2048]	; 0x800
 800904e:	7819      	ldrb	r1, [r3, #0]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	5499      	strb	r1, [r3, r2]
		for( int i = 0; i < str_len ; i++){
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	3301      	adds	r3, #1
 8009058:	613b      	str	r3, [r7, #16]
 800905a:	e7e9      	b.n	8009030 <_ZN3USB3putENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x38>
		}
	}
	return str_len;
 800905c:	89fb      	ldrh	r3, [r7, #14]
}
 800905e:	4618      	mov	r0, r3
 8009060:	3718      	adds	r7, #24
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}

08009066 <_ZN3USB3putEh>:

/*******************************************************************//**
 *
 **********************************************************************/
uint16_t USB::put(uint8_t byte){
 8009066:	b580      	push	{r7, lr}
 8009068:	b082      	sub	sp, #8
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
 800906e:	460b      	mov	r3, r1
 8009070:	70fb      	strb	r3, [r7, #3]

	// is the buffer full?
	if( is_full() ){
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f7ff ff6d 	bl	8008f52 <_ZN3USB7is_fullEv>
 8009078:	4603      	mov	r3, r0
 800907a:	2b00      	cmp	r3, #0
 800907c:	d001      	beq.n	8009082 <_ZN3USB3putEh+0x1c>
		return 0;
 800907e:	2300      	movs	r3, #0
 8009080:	e00c      	b.n	800909c <_ZN3USB3putEh+0x36>
	}else{
		buffer.data.byte[buffer.size++] = byte;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 8009088:	1c5a      	adds	r2, r3, #1
 800908a:	b291      	uxth	r1, r2
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	f8a2 1800 	strh.w	r1, [r2, #2048]	; 0x800
 8009092:	4619      	mov	r1, r3
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	78fa      	ldrb	r2, [r7, #3]
 8009098:	545a      	strb	r2, [r3, r1]
	}
	return 1;
 800909a:	2301      	movs	r3, #1
}
 800909c:	4618      	mov	r0, r3
 800909e:	3708      	adds	r7, #8
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <_ZN3USB3putEt>:

/*******************************************************************//**
 *
 **********************************************************************/
uint16_t USB::put(uint16_t word){
 80090a4:	b480      	push	{r7}
 80090a6:	b083      	sub	sp, #12
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	460b      	mov	r3, r1
 80090ae:	807b      	strh	r3, [r7, #2]

	// is the buffer full?
	if( (CIRCULAR_BUFFER_SIZE - buffer.size) < 2 ){
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 80090b6:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80090ba:	2b01      	cmp	r3, #1
 80090bc:	dc01      	bgt.n	80090c2 <_ZN3USB3putEt+0x1e>
		return 0;
 80090be:	2300      	movs	r3, #0
 80090c0:	e010      	b.n	80090e4 <_ZN3USB3putEt+0x40>
	}else{
		buffer.data.word[buffer.size] = word;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 80090c8:	4619      	mov	r1, r3
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	887a      	ldrh	r2, [r7, #2]
 80090ce:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
		buffer.size += 2;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 80090d8:	3302      	adds	r3, #2
 80090da:	b29a      	uxth	r2, r3
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
	}
	return 1;
 80090e2:	2301      	movs	r3, #1
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	370c      	adds	r7, #12
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <_ZN3USB3putEPht>:

/*******************************************************************//**
 *
 **********************************************************************/
uint16_t USB::put(uint8_t *data, uint16_t len){
 80090f0:	b480      	push	{r7}
 80090f2:	b087      	sub	sp, #28
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	60b9      	str	r1, [r7, #8]
 80090fa:	4613      	mov	r3, r2
 80090fc:	80fb      	strh	r3, [r7, #6]

	uint16_t room_left = CIRCULAR_BUFFER_SIZE - buffer.size;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 8009104:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8009108:	827b      	strh	r3, [r7, #18]

	// is there enough room on the buffer for the string?
	if( len > room_left ){
 800910a:	88fa      	ldrh	r2, [r7, #6]
 800910c:	8a7b      	ldrh	r3, [r7, #18]
 800910e:	429a      	cmp	r2, r3
 8009110:	d901      	bls.n	8009116 <_ZN3USB3putEPht+0x26>
		return 0;
 8009112:	2300      	movs	r3, #0
 8009114:	e018      	b.n	8009148 <_ZN3USB3putEPht+0x58>
	}else{
		for( int i = 0; i < len ; i++){
 8009116:	2300      	movs	r3, #0
 8009118:	617b      	str	r3, [r7, #20]
 800911a:	88fb      	ldrh	r3, [r7, #6]
 800911c:	697a      	ldr	r2, [r7, #20]
 800911e:	429a      	cmp	r2, r3
 8009120:	da11      	bge.n	8009146 <_ZN3USB3putEPht+0x56>
			buffer.data.byte[buffer.size++] = *(data++);
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	1c5a      	adds	r2, r3, #1
 8009126:	60ba      	str	r2, [r7, #8]
 8009128:	68fa      	ldr	r2, [r7, #12]
 800912a:	f8b2 2800 	ldrh.w	r2, [r2, #2048]	; 0x800
 800912e:	1c51      	adds	r1, r2, #1
 8009130:	b288      	uxth	r0, r1
 8009132:	68f9      	ldr	r1, [r7, #12]
 8009134:	f8a1 0800 	strh.w	r0, [r1, #2048]	; 0x800
 8009138:	7819      	ldrb	r1, [r3, #0]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	5499      	strb	r1, [r3, r2]
		for( int i = 0; i < len ; i++){
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	3301      	adds	r3, #1
 8009142:	617b      	str	r3, [r7, #20]
 8009144:	e7e9      	b.n	800911a <_ZN3USB3putEPht+0x2a>
		}
	}
	return len;
 8009146:	88fb      	ldrh	r3, [r7, #6]
}
 8009148:	4618      	mov	r0, r3
 800914a:	371c      	adds	r7, #28
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr

08009154 <_ZN3USB3getEv>:
}

/*******************************************************************//**
 *
 **********************************************************************/
uint8_t USB::get(void){
 8009154:	b580      	push	{r7, lr}
 8009156:	b082      	sub	sp, #8
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
	return CDC_ReadBuffer_Single();
 800915c:	f001 fe82 	bl	800ae64 <CDC_ReadBuffer_Single>
 8009160:	4603      	mov	r3, r0
}
 8009162:	4618      	mov	r0, r3
 8009164:	3708      	adds	r7, #8
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}

0800916a <_ZNSt6vectorIN3USB5_VBUFESaIS1_EEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %vector with no elements.
       */
      vector()
 800916a:	b580      	push	{r7, lr}
 800916c:	b082      	sub	sp, #8
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
#endif
      : _Base() { }
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	4618      	mov	r0, r3
 8009176:	f000 f86d 	bl	8009254 <_ZNSt12_Vector_baseIN3USB5_VBUFESaIS1_EEC1Ev>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	4618      	mov	r0, r3
 800917e:	3708      	adds	r7, #8
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <_ZNSt6vectorIN3USB5_VBUFESaIS1_EE7reserveEj>:
{
_GLIBCXX_BEGIN_NAMESPACE_CONTAINER

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
 8009184:	b5b0      	push	{r4, r5, r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
    reserve(size_type __n)
    {
      if (__n > this->max_size())
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f000 f886 	bl	80092a0 <_ZNKSt6vectorIN3USB5_VBUFESaIS1_EE8max_sizeEv>
 8009194:	4602      	mov	r2, r0
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	4293      	cmp	r3, r2
 800919a:	bf8c      	ite	hi
 800919c:	2301      	movhi	r3, #1
 800919e:	2300      	movls	r3, #0
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d002      	beq.n	80091ac <_ZNSt6vectorIN3USB5_VBUFESaIS1_EE7reserveEj+0x28>
	__throw_length_error(__N("vector::reserve"));
 80091a6:	482a      	ldr	r0, [pc, #168]	; (8009250 <_ZNSt6vectorIN3USB5_VBUFESaIS1_EE7reserveEj+0xcc>)
 80091a8:	f002 fb60 	bl	800b86c <_ZSt20__throw_length_errorPKc>
      if (this->capacity() < __n)
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 f888 	bl	80092c2 <_ZNKSt6vectorIN3USB5_VBUFESaIS1_EE8capacityEv>
 80091b2:	4602      	mov	r2, r0
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	4293      	cmp	r3, r2
 80091b8:	bf8c      	ite	hi
 80091ba:	2301      	movhi	r3, #1
 80091bc:	2300      	movls	r3, #0
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d040      	beq.n	8009246 <_ZNSt6vectorIN3USB5_VBUFESaIS1_EE7reserveEj+0xc2>
	{
	  const size_type __old_size = size();
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 f88d 	bl	80092e4 <_ZNKSt6vectorIN3USB5_VBUFESaIS1_EE4sizeEv>
 80091ca:	60f8      	str	r0, [r7, #12]
	  pointer __tmp = _M_allocate_and_copy(__n,
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4618      	mov	r0, r3
 80091d2:	f000 f898 	bl	8009306 <_ZSt32__make_move_if_noexcept_iteratorIN3USB5_VBUFESt13move_iteratorIPS1_EET0_PT_>
 80091d6:	4604      	mov	r4, r0
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	4618      	mov	r0, r3
 80091de:	f000 f892 	bl	8009306 <_ZSt32__make_move_if_noexcept_iteratorIN3USB5_VBUFESt13move_iteratorIPS1_EET0_PT_>
 80091e2:	4603      	mov	r3, r0
 80091e4:	4622      	mov	r2, r4
 80091e6:	6839      	ldr	r1, [r7, #0]
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f000 f89b 	bl	8009324 <_ZNSt6vectorIN3USB5_VBUFESaIS1_EE20_M_allocate_and_copyISt13move_iteratorIPS1_EEES6_jT_S8_>
 80091ee:	60b8      	str	r0, [r7, #8]
	    _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_start),
	    _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_finish));
	  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681c      	ldr	r4, [r3, #0]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	685d      	ldr	r5, [r3, #4]
			_M_get_Tp_allocator());
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	4618      	mov	r0, r3
 80091fc:	f000 f837 	bl	800926e <_ZNSt12_Vector_baseIN3USB5_VBUFESaIS1_EE19_M_get_Tp_allocatorEv>
 8009200:	4603      	mov	r3, r0
	  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009202:	461a      	mov	r2, r3
 8009204:	4629      	mov	r1, r5
 8009206:	4620      	mov	r0, r4
 8009208:	f000 f83c 	bl	8009284 <_ZSt8_DestroyIPN3USB5_VBUFES1_EvT_S3_RSaIT0_E>
	  _M_deallocate(this->_M_impl._M_start,
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6819      	ldr	r1, [r3, #0]
			this->_M_impl._M_end_of_storage
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	689b      	ldr	r3, [r3, #8]
			- this->_M_impl._M_start);
 8009216:	461a      	mov	r2, r3
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	1ad3      	subs	r3, r2, r3
 800921e:	105b      	asrs	r3, r3, #1
	  _M_deallocate(this->_M_impl._M_start,
 8009220:	461a      	mov	r2, r3
 8009222:	f000 f89b 	bl	800935c <_ZNSt12_Vector_baseIN3USB5_VBUFESaIS1_EE13_M_deallocateEPS1_j>
	  this->_M_impl._M_start = __tmp;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	68ba      	ldr	r2, [r7, #8]
 800922a:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_finish = __tmp + __old_size;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	005b      	lsls	r3, r3, #1
 8009230:	68ba      	ldr	r2, [r7, #8]
 8009232:	441a      	add	r2, r3
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	605a      	str	r2, [r3, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	005b      	lsls	r3, r3, #1
 8009240:	441a      	add	r2, r3
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	609a      	str	r2, [r3, #8]
	}
    }
 8009246:	bf00      	nop
 8009248:	3710      	adds	r7, #16
 800924a:	46bd      	mov	sp, r7
 800924c:	bdb0      	pop	{r4, r5, r7, pc}
 800924e:	bf00      	nop
 8009250:	0800bd3c 	.word	0x0800bd3c

08009254 <_ZNSt12_Vector_baseIN3USB5_VBUFESaIS1_EEC1Ev>:
      _Vector_base()
 8009254:	b580      	push	{r7, lr}
 8009256:	b082      	sub	sp, #8
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	4618      	mov	r0, r3
 8009260:	f000 f88f 	bl	8009382 <_ZNSt12_Vector_baseIN3USB5_VBUFESaIS1_EE12_Vector_implC1Ev>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	4618      	mov	r0, r3
 8009268:	3708      	adds	r7, #8
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}

0800926e <_ZNSt12_Vector_baseIN3USB5_VBUFESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800926e:	b480      	push	{r7}
 8009270:	b083      	sub	sp, #12
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	4618      	mov	r0, r3
 800927a:	370c      	adds	r7, #12
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr

08009284 <_ZSt8_DestroyIPN3USB5_VBUFES1_EvT_S3_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8009284:	b580      	push	{r7, lr}
 8009286:	b084      	sub	sp, #16
 8009288:	af00      	add	r7, sp, #0
 800928a:	60f8      	str	r0, [r7, #12]
 800928c:	60b9      	str	r1, [r7, #8]
 800928e:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8009290:	68b9      	ldr	r1, [r7, #8]
 8009292:	68f8      	ldr	r0, [r7, #12]
 8009294:	f000 f88a 	bl	80093ac <_ZSt8_DestroyIPN3USB5_VBUFEEvT_S3_>
    }
 8009298:	bf00      	nop
 800929a:	3710      	adds	r7, #16
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <_ZNKSt6vectorIN3USB5_VBUFESaIS1_EE8max_sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }

      /**  Returns the size() of the largest possible %vector.  */
      size_type
      max_size() const _GLIBCXX_NOEXCEPT
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4618      	mov	r0, r3
 80092ac:	f000 f897 	bl	80093de <_ZNKSt12_Vector_baseIN3USB5_VBUFESaIS1_EE19_M_get_Tp_allocatorEv>
 80092b0:	4603      	mov	r3, r0
 80092b2:	4618      	mov	r0, r3
 80092b4:	f000 f887 	bl	80093c6 <_ZNSt16allocator_traitsISaIN3USB5_VBUFEEE8max_sizeERKS2_>
 80092b8:	4603      	mov	r3, r0
 80092ba:	4618      	mov	r0, r3
 80092bc:	3708      	adds	r7, #8
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}

080092c2 <_ZNKSt6vectorIN3USB5_VBUFESaIS1_EE8capacityEv>:
      /**
       *  Returns the total number of elements that the %vector can
       *  hold before needing to allocate more memory.
       */
      size_type
      capacity() const _GLIBCXX_NOEXCEPT
 80092c2:	b480      	push	{r7}
 80092c4:	b083      	sub	sp, #12
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	689b      	ldr	r3, [r3, #8]
			 - this->_M_impl._M_start); }
 80092ce:	461a      	mov	r2, r3
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	1ad3      	subs	r3, r2, r3
 80092d6:	105b      	asrs	r3, r3, #1
 80092d8:	4618      	mov	r0, r3
 80092da:	370c      	adds	r7, #12
 80092dc:	46bd      	mov	sp, r7
 80092de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e2:	4770      	bx	lr

080092e4 <_ZNKSt6vectorIN3USB5_VBUFESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80092e4:	b480      	push	{r7}
 80092e6:	b083      	sub	sp, #12
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	461a      	mov	r2, r3
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	1ad3      	subs	r3, r2, r3
 80092f8:	105b      	asrs	r3, r3, #1
 80092fa:	4618      	mov	r0, r3
 80092fc:	370c      	adds	r7, #12
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr

08009306 <_ZSt32__make_move_if_noexcept_iteratorIN3USB5_VBUFESt13move_iteratorIPS1_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8009306:	b580      	push	{r7, lr}
 8009308:	b084      	sub	sp, #16
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800930e:	f107 030c 	add.w	r3, r7, #12
 8009312:	6879      	ldr	r1, [r7, #4]
 8009314:	4618      	mov	r0, r3
 8009316:	f000 f86d 	bl	80093f4 <_ZNSt13move_iteratorIPN3USB5_VBUFEEC1ES2_>
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	4618      	mov	r0, r3
 800931e:	3710      	adds	r7, #16
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <_ZNSt6vectorIN3USB5_VBUFESaIS1_EE20_M_allocate_and_copyISt13move_iteratorIPS1_EEES6_jT_S8_>:
       *  Memory expansion handler.  Uses the member allocation function to
       *  obtain @a n bytes of memory, and then copies [first,last) into it.
       */
      template<typename _ForwardIterator>
	pointer
	_M_allocate_and_copy(size_type __n,
 8009324:	b580      	push	{r7, lr}
 8009326:	b086      	sub	sp, #24
 8009328:	af00      	add	r7, sp, #0
 800932a:	60f8      	str	r0, [r7, #12]
 800932c:	60b9      	str	r1, [r7, #8]
 800932e:	607a      	str	r2, [r7, #4]
 8009330:	603b      	str	r3, [r7, #0]
			     _ForwardIterator __first, _ForwardIterator __last)
	{
	  pointer __result = this->_M_allocate(__n);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	68b9      	ldr	r1, [r7, #8]
 8009336:	4618      	mov	r0, r3
 8009338:	f000 f86b 	bl	8009412 <_ZNSt12_Vector_baseIN3USB5_VBUFESaIS1_EE11_M_allocateEj>
 800933c:	6178      	str	r0, [r7, #20]
	  __try
	    {
	      std::__uninitialized_copy_a(__first, __last, __result,
					  _M_get_Tp_allocator());
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	4618      	mov	r0, r3
 8009342:	f7ff ff94 	bl	800926e <_ZNSt12_Vector_baseIN3USB5_VBUFESaIS1_EE19_M_get_Tp_allocatorEv>
 8009346:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 8009348:	697a      	ldr	r2, [r7, #20]
 800934a:	6839      	ldr	r1, [r7, #0]
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 f874 	bl	800943a <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN3USB5_VBUFEES3_S2_ET0_T_S6_S5_RSaIT1_E>
	      return __result;
 8009352:	697b      	ldr	r3, [r7, #20]
	  __catch(...)
	    {
	      _M_deallocate(__result, __n);
	      __throw_exception_again;
	    }
	}
 8009354:	4618      	mov	r0, r3
 8009356:	3718      	adds	r7, #24
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <_ZNSt12_Vector_baseIN3USB5_VBUFESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	60f8      	str	r0, [r7, #12]
 8009364:	60b9      	str	r1, [r7, #8]
 8009366:	607a      	str	r2, [r7, #4]
	if (__p)
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d005      	beq.n	800937a <_ZNSt12_Vector_baseIN3USB5_VBUFESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	68b9      	ldr	r1, [r7, #8]
 8009374:	4618      	mov	r0, r3
 8009376:	f000 f871 	bl	800945c <_ZNSt16allocator_traitsISaIN3USB5_VBUFEEE10deallocateERS2_PS1_j>
      }
 800937a:	bf00      	nop
 800937c:	3710      	adds	r7, #16
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}

08009382 <_ZNSt12_Vector_baseIN3USB5_VBUFESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl()
 8009382:	b580      	push	{r7, lr}
 8009384:	b082      	sub	sp, #8
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 f875 	bl	800947a <_ZNSaIN3USB5_VBUFEEC1Ev>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2200      	movs	r2, #0
 8009394:	601a      	str	r2, [r3, #0]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2200      	movs	r2, #0
 800939a:	605a      	str	r2, [r3, #4]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2200      	movs	r2, #0
 80093a0:	609a      	str	r2, [r3, #8]
	{ }
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	4618      	mov	r0, r3
 80093a6:	3708      	adds	r7, #8
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <_ZSt8_DestroyIPN3USB5_VBUFEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b082      	sub	sp, #8
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80093b6:	6839      	ldr	r1, [r7, #0]
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 f86a 	bl	8009492 <_ZNSt12_Destroy_auxILb1EE9__destroyIPN3USB5_VBUFEEEvT_S5_>
    }
 80093be:	bf00      	nop
 80093c0:	3708      	adds	r7, #8
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}

080093c6 <_ZNSt16allocator_traitsISaIN3USB5_VBUFEEE8max_sizeERKS2_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 80093c6:	b580      	push	{r7, lr}
 80093c8:	b082      	sub	sp, #8
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 f86a 	bl	80094a8 <_ZNK9__gnu_cxx13new_allocatorIN3USB5_VBUFEE8max_sizeEv>
 80093d4:	4603      	mov	r3, r0
 80093d6:	4618      	mov	r0, r3
 80093d8:	3708      	adds	r7, #8
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}

080093de <_ZNKSt12_Vector_baseIN3USB5_VBUFESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80093de:	b480      	push	{r7}
 80093e0:	b083      	sub	sp, #12
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	4618      	mov	r0, r3
 80093ea:	370c      	adds	r7, #12
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr

080093f4 <_ZNSt13move_iteratorIPN3USB5_VBUFEEC1ES2_>:
      move_iterator(iterator_type __i)
 80093f4:	b480      	push	{r7}
 80093f6:	b083      	sub	sp, #12
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	683a      	ldr	r2, [r7, #0]
 8009402:	601a      	str	r2, [r3, #0]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	4618      	mov	r0, r3
 8009408:	370c      	adds	r7, #12
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr

08009412 <_ZNSt12_Vector_baseIN3USB5_VBUFESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8009412:	b580      	push	{r7, lr}
 8009414:	b082      	sub	sp, #8
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
 800941a:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d006      	beq.n	8009430 <_ZNSt12_Vector_baseIN3USB5_VBUFESaIS1_EE11_M_allocateEj+0x1e>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6839      	ldr	r1, [r7, #0]
 8009426:	4618      	mov	r0, r3
 8009428:	f000 f84a 	bl	80094c0 <_ZNSt16allocator_traitsISaIN3USB5_VBUFEEE8allocateERS2_j>
 800942c:	4603      	mov	r3, r0
 800942e:	e000      	b.n	8009432 <_ZNSt12_Vector_baseIN3USB5_VBUFESaIS1_EE11_M_allocateEj+0x20>
 8009430:	2300      	movs	r3, #0
      }
 8009432:	4618      	mov	r0, r3
 8009434:	3708      	adds	r7, #8
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN3USB5_VBUFEES3_S2_ET0_T_S6_S5_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800943a:	b580      	push	{r7, lr}
 800943c:	b084      	sub	sp, #16
 800943e:	af00      	add	r7, sp, #0
 8009440:	60f8      	str	r0, [r7, #12]
 8009442:	60b9      	str	r1, [r7, #8]
 8009444:	607a      	str	r2, [r7, #4]
 8009446:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8009448:	687a      	ldr	r2, [r7, #4]
 800944a:	68b9      	ldr	r1, [r7, #8]
 800944c:	68f8      	ldr	r0, [r7, #12]
 800944e:	f000 f846 	bl	80094de <_ZSt18uninitialized_copyISt13move_iteratorIPN3USB5_VBUFEES3_ET0_T_S6_S5_>
 8009452:	4603      	mov	r3, r0
 8009454:	4618      	mov	r0, r3
 8009456:	3710      	adds	r7, #16
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <_ZNSt16allocator_traitsISaIN3USB5_VBUFEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	60f8      	str	r0, [r7, #12]
 8009464:	60b9      	str	r1, [r7, #8]
 8009466:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	68b9      	ldr	r1, [r7, #8]
 800946c:	68f8      	ldr	r0, [r7, #12]
 800946e:	f000 f848 	bl	8009502 <_ZN9__gnu_cxx13new_allocatorIN3USB5_VBUFEE10deallocateEPS2_j>
 8009472:	bf00      	nop
 8009474:	3710      	adds	r7, #16
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}

0800947a <_ZNSaIN3USB5_VBUFEEC1Ev>:
      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;
#endif

      allocator() throw() { }
 800947a:	b580      	push	{r7, lr}
 800947c:	b082      	sub	sp, #8
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 f84a 	bl	800951c <_ZN9__gnu_cxx13new_allocatorIN3USB5_VBUFEEC1Ev>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	4618      	mov	r0, r3
 800948c:	3708      	adds	r7, #8
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}

08009492 <_ZNSt12_Destroy_auxILb1EE9__destroyIPN3USB5_VBUFEEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8009492:	b480      	push	{r7}
 8009494:	b083      	sub	sp, #12
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
 800949a:	6039      	str	r1, [r7, #0]
 800949c:	bf00      	nop
 800949e:	370c      	adds	r7, #12
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <_ZNK9__gnu_cxx13new_allocatorIN3USB5_VBUFEE8max_sizeEv>:
#endif
	::operator delete(__p);
      }

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80094a8:	b480      	push	{r7}
 80094aa:	b083      	sub	sp, #12
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 80094b0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80094b4:	4618      	mov	r0, r3
 80094b6:	370c      	adds	r7, #12
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <_ZNSt16allocator_traitsISaIN3USB5_VBUFEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80094ca:	2200      	movs	r2, #0
 80094cc:	6839      	ldr	r1, [r7, #0]
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 f82f 	bl	8009532 <_ZN9__gnu_cxx13new_allocatorIN3USB5_VBUFEE8allocateEjPKv>
 80094d4:	4603      	mov	r3, r0
 80094d6:	4618      	mov	r0, r3
 80094d8:	3708      	adds	r7, #8
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}

080094de <_ZSt18uninitialized_copyISt13move_iteratorIPN3USB5_VBUFEES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80094de:	b580      	push	{r7, lr}
 80094e0:	b086      	sub	sp, #24
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	60f8      	str	r0, [r7, #12]
 80094e6:	60b9      	str	r1, [r7, #8]
 80094e8:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80094ea:	2301      	movs	r3, #1
 80094ec:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	68b9      	ldr	r1, [r7, #8]
 80094f2:	68f8      	ldr	r0, [r7, #12]
 80094f4:	f000 f83b 	bl	800956e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPN3USB5_VBUFEES5_EET0_T_S8_S7_>
 80094f8:	4603      	mov	r3, r0
    }
 80094fa:	4618      	mov	r0, r3
 80094fc:	3718      	adds	r7, #24
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}

08009502 <_ZN9__gnu_cxx13new_allocatorIN3USB5_VBUFEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8009502:	b580      	push	{r7, lr}
 8009504:	b084      	sub	sp, #16
 8009506:	af00      	add	r7, sp, #0
 8009508:	60f8      	str	r0, [r7, #12]
 800950a:	60b9      	str	r1, [r7, #8]
 800950c:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800950e:	68b8      	ldr	r0, [r7, #8]
 8009510:	f002 f9a2 	bl	800b858 <_ZdlPv>
      }
 8009514:	bf00      	nop
 8009516:	3710      	adds	r7, #16
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <_ZN9__gnu_cxx13new_allocatorIN3USB5_VBUFEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	4618      	mov	r0, r3
 8009528:	370c      	adds	r7, #12
 800952a:	46bd      	mov	sp, r7
 800952c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009530:	4770      	bx	lr

08009532 <_ZN9__gnu_cxx13new_allocatorIN3USB5_VBUFEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8009532:	b580      	push	{r7, lr}
 8009534:	b084      	sub	sp, #16
 8009536:	af00      	add	r7, sp, #0
 8009538:	60f8      	str	r0, [r7, #12]
 800953a:	60b9      	str	r1, [r7, #8]
 800953c:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800953e:	68f8      	ldr	r0, [r7, #12]
 8009540:	f7ff ffb2 	bl	80094a8 <_ZNK9__gnu_cxx13new_allocatorIN3USB5_VBUFEE8max_sizeEv>
 8009544:	4602      	mov	r2, r0
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	4293      	cmp	r3, r2
 800954a:	bf8c      	ite	hi
 800954c:	2301      	movhi	r3, #1
 800954e:	2300      	movls	r3, #0
 8009550:	b2db      	uxtb	r3, r3
 8009552:	2b00      	cmp	r3, #0
 8009554:	d001      	beq.n	800955a <_ZN9__gnu_cxx13new_allocatorIN3USB5_VBUFEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8009556:	f002 f983 	bl	800b860 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	005b      	lsls	r3, r3, #1
 800955e:	4618      	mov	r0, r3
 8009560:	f002 f961 	bl	800b826 <_Znwj>
 8009564:	4603      	mov	r3, r0
      }
 8009566:	4618      	mov	r0, r3
 8009568:	3710      	adds	r7, #16
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}

0800956e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPN3USB5_VBUFEES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800956e:	b580      	push	{r7, lr}
 8009570:	b084      	sub	sp, #16
 8009572:	af00      	add	r7, sp, #0
 8009574:	60f8      	str	r0, [r7, #12]
 8009576:	60b9      	str	r1, [r7, #8]
 8009578:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800957a:	687a      	ldr	r2, [r7, #4]
 800957c:	68b9      	ldr	r1, [r7, #8]
 800957e:	68f8      	ldr	r0, [r7, #12]
 8009580:	f000 f805 	bl	800958e <_ZSt4copyISt13move_iteratorIPN3USB5_VBUFEES3_ET0_T_S6_S5_>
 8009584:	4603      	mov	r3, r0
 8009586:	4618      	mov	r0, r3
 8009588:	3710      	adds	r7, #16
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}

0800958e <_ZSt4copyISt13move_iteratorIPN3USB5_VBUFEES3_ET0_T_S6_S5_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 800958e:	b590      	push	{r4, r7, lr}
 8009590:	b085      	sub	sp, #20
 8009592:	af00      	add	r7, sp, #0
 8009594:	60f8      	str	r0, [r7, #12]
 8009596:	60b9      	str	r1, [r7, #8]
 8009598:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
 800959a:	68f8      	ldr	r0, [r7, #12]
 800959c:	f000 f80f 	bl	80095be <_ZSt12__miter_baseIPN3USB5_VBUFEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80095a0:	4604      	mov	r4, r0
 80095a2:	68b8      	ldr	r0, [r7, #8]
 80095a4:	f000 f80b 	bl	80095be <_ZSt12__miter_baseIPN3USB5_VBUFEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80095a8:	4603      	mov	r3, r0
	       __result));
 80095aa:	687a      	ldr	r2, [r7, #4]
 80095ac:	4619      	mov	r1, r3
 80095ae:	4620      	mov	r0, r4
 80095b0:	f000 f816 	bl	80095e0 <_ZSt14__copy_move_a2ILb1EPN3USB5_VBUFES2_ET1_T0_S4_S3_>
 80095b4:	4603      	mov	r3, r0
    }
 80095b6:	4618      	mov	r0, r3
 80095b8:	3714      	adds	r7, #20
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd90      	pop	{r4, r7, pc}

080095be <_ZSt12__miter_baseIPN3USB5_VBUFEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 80095be:	b580      	push	{r7, lr}
 80095c0:	b082      	sub	sp, #8
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 80095c6:	1d3b      	adds	r3, r7, #4
 80095c8:	4618      	mov	r0, r3
 80095ca:	f000 f825 	bl	8009618 <_ZNKSt13move_iteratorIPN3USB5_VBUFEE4baseEv>
 80095ce:	4603      	mov	r3, r0
 80095d0:	4618      	mov	r0, r3
 80095d2:	f000 f82d 	bl	8009630 <_ZSt12__miter_baseIPN3USB5_VBUFEET_S3_>
 80095d6:	4603      	mov	r3, r0
 80095d8:	4618      	mov	r0, r3
 80095da:	3708      	adds	r7, #8
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <_ZSt14__copy_move_a2ILb1EPN3USB5_VBUFES2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80095e0:	b5b0      	push	{r4, r5, r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	60f8      	str	r0, [r7, #12]
 80095e8:	60b9      	str	r1, [r7, #8]
 80095ea:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 80095ec:	68f8      	ldr	r0, [r7, #12]
 80095ee:	f000 f82a 	bl	8009646 <_ZSt12__niter_baseIPN3USB5_VBUFEET_S3_>
 80095f2:	4604      	mov	r4, r0
 80095f4:	68b8      	ldr	r0, [r7, #8]
 80095f6:	f000 f826 	bl	8009646 <_ZSt12__niter_baseIPN3USB5_VBUFEET_S3_>
 80095fa:	4605      	mov	r5, r0
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f000 f822 	bl	8009646 <_ZSt12__niter_baseIPN3USB5_VBUFEET_S3_>
 8009602:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8009604:	461a      	mov	r2, r3
 8009606:	4629      	mov	r1, r5
 8009608:	4620      	mov	r0, r4
 800960a:	f000 f827 	bl	800965c <_ZSt13__copy_move_aILb1EPN3USB5_VBUFES2_ET1_T0_S4_S3_>
 800960e:	4603      	mov	r3, r0
    }
 8009610:	4618      	mov	r0, r3
 8009612:	3710      	adds	r7, #16
 8009614:	46bd      	mov	sp, r7
 8009616:	bdb0      	pop	{r4, r5, r7, pc}

08009618 <_ZNKSt13move_iteratorIPN3USB5_VBUFEE4baseEv>:
      base() const
 8009618:	b480      	push	{r7}
 800961a:	b083      	sub	sp, #12
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4618      	mov	r0, r3
 8009626:	370c      	adds	r7, #12
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr

08009630 <_ZSt12__miter_baseIPN3USB5_VBUFEET_S3_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8009630:	b480      	push	{r7}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
    { return __it; }
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	4618      	mov	r0, r3
 800963c:	370c      	adds	r7, #12
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr

08009646 <_ZSt12__niter_baseIPN3USB5_VBUFEET_S3_>:
    __niter_base(_Iterator __it)
 8009646:	b480      	push	{r7}
 8009648:	b083      	sub	sp, #12
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	4618      	mov	r0, r3
 8009652:	370c      	adds	r7, #12
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <_ZSt13__copy_move_aILb1EPN3USB5_VBUFES2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800965c:	b580      	push	{r7, lr}
 800965e:	b086      	sub	sp, #24
 8009660:	af00      	add	r7, sp, #0
 8009662:	60f8      	str	r0, [r7, #12]
 8009664:	60b9      	str	r1, [r7, #8]
 8009666:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8009668:	2301      	movs	r3, #1
 800966a:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	68b9      	ldr	r1, [r7, #8]
 8009670:	68f8      	ldr	r0, [r7, #12]
 8009672:	f000 f805 	bl	8009680 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN3USB5_VBUFEEEPT_PKS5_S8_S6_>
 8009676:	4603      	mov	r3, r0
    }
 8009678:	4618      	mov	r0, r3
 800967a:	3718      	adds	r7, #24
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}

08009680 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN3USB5_VBUFEEEPT_PKS5_S8_S6_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8009680:	b580      	push	{r7, lr}
 8009682:	b086      	sub	sp, #24
 8009684:	af00      	add	r7, sp, #0
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	60b9      	str	r1, [r7, #8]
 800968a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800968c:	68ba      	ldr	r2, [r7, #8]
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	1ad3      	subs	r3, r2, r3
 8009692:	105b      	asrs	r3, r3, #1
 8009694:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d006      	beq.n	80096aa <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN3USB5_VBUFEEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	005b      	lsls	r3, r3, #1
 80096a0:	461a      	mov	r2, r3
 80096a2:	68f9      	ldr	r1, [r7, #12]
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f002 f9b0 	bl	800ba0a <memmove>
	  return __result + _Num;
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	005b      	lsls	r3, r3, #1
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	4413      	add	r3, r2
	}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3718      	adds	r7, #24
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}

080096ba <_ZN11CartFactoryC1Ev>:
 
#include <stdint.h>
#include "Cartridges/Cartridge.h"
#include "cartfactory.h"

CartFactory::CartFactory()
 80096ba:	b480      	push	{r7}
 80096bc:	b083      	sub	sp, #12
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
    //carts[CartFactory::SMS]    = new sms();
    //carts[CartFactory::PCE]    = new GenericCart();
    //carts[CartFactory::TG16]   = new GenericCart();
    //carts[CartFactory::SNES]   = new GenericCart();
    //carts[CartFactory::SNESLO] = new GenericCart();
}
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	4618      	mov	r0, r3
 80096c6:	370c      	adds	r7, #12
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <_ZN11CartFactoryD1Ev>:

CartFactory::~CartFactory()
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
{
    for (int i=0; i < CARTS_LEN; i++){
 80096d8:	2300      	movs	r3, #0
 80096da:	60fb      	str	r3, [r7, #12]
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2b01      	cmp	r3, #1
 80096e0:	dc16      	bgt.n	8009710 <_ZN11CartFactoryD1Ev+0x40>
    	delete carts[i];
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	68fa      	ldr	r2, [r7, #12]
 80096e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d00c      	beq.n	8009708 <_ZN11CartFactoryD1Ev+0x38>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	68fa      	ldr	r2, [r7, #12]
 80096f2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	68fa      	ldr	r2, [r7, #12]
 80096fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	3304      	adds	r3, #4
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4608      	mov	r0, r1
 8009706:	4798      	blx	r3
    for (int i=0; i < CARTS_LEN; i++){
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	3301      	adds	r3, #1
 800970c:	60fb      	str	r3, [r7, #12]
 800970e:	e7e5      	b.n	80096dc <_ZN11CartFactoryD1Ev+0xc>
    }
}
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	4618      	mov	r0, r3
 8009714:	3710      	adds	r7, #16
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}

0800971a <_ZN11CartFactory7getCartENS_4ModeE>:

Cartridge* CartFactory::getCart(CartFactory::Mode mode)
{
 800971a:	b480      	push	{r7}
 800971c:	b083      	sub	sp, #12
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
 8009722:	460b      	mov	r3, r1
 8009724:	70fb      	strb	r3, [r7, #3]
    if (mode < CARTS_LEN && mode > CartFactory::UNDEFINED)
 8009726:	78fb      	ldrb	r3, [r7, #3]
 8009728:	2b01      	cmp	r3, #1
 800972a:	d807      	bhi.n	800973c <_ZN11CartFactory7getCartENS_4ModeE+0x22>
 800972c:	78fb      	ldrb	r3, [r7, #3]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d004      	beq.n	800973c <_ZN11CartFactory7getCartENS_4ModeE+0x22>
    {
        return carts[mode];
 8009732:	78fa      	ldrb	r2, [r7, #3]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800973a:	e001      	b.n	8009740 <_ZN11CartFactory7getCartENS_4ModeE+0x26>
    }
    return carts[CartFactory::UNDEFINED];
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
}
 8009740:	4618      	mov	r0, r3
 8009742:	370c      	adds	r7, #12
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr

0800974c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8009752:	463b      	mov	r3, r7
 8009754:	2200      	movs	r2, #0
 8009756:	601a      	str	r2, [r3, #0]
 8009758:	605a      	str	r2, [r3, #4]
 800975a:	609a      	str	r2, [r3, #8]
 800975c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800975e:	4b21      	ldr	r3, [pc, #132]	; (80097e4 <MX_ADC1_Init+0x98>)
 8009760:	4a21      	ldr	r2, [pc, #132]	; (80097e8 <MX_ADC1_Init+0x9c>)
 8009762:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8009764:	4b1f      	ldr	r3, [pc, #124]	; (80097e4 <MX_ADC1_Init+0x98>)
 8009766:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800976a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800976c:	4b1d      	ldr	r3, [pc, #116]	; (80097e4 <MX_ADC1_Init+0x98>)
 800976e:	2200      	movs	r2, #0
 8009770:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8009772:	4b1c      	ldr	r3, [pc, #112]	; (80097e4 <MX_ADC1_Init+0x98>)
 8009774:	2200      	movs	r2, #0
 8009776:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8009778:	4b1a      	ldr	r3, [pc, #104]	; (80097e4 <MX_ADC1_Init+0x98>)
 800977a:	2200      	movs	r2, #0
 800977c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800977e:	4b19      	ldr	r3, [pc, #100]	; (80097e4 <MX_ADC1_Init+0x98>)
 8009780:	2200      	movs	r2, #0
 8009782:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009786:	4b17      	ldr	r3, [pc, #92]	; (80097e4 <MX_ADC1_Init+0x98>)
 8009788:	2200      	movs	r2, #0
 800978a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800978c:	4b15      	ldr	r3, [pc, #84]	; (80097e4 <MX_ADC1_Init+0x98>)
 800978e:	4a17      	ldr	r2, [pc, #92]	; (80097ec <MX_ADC1_Init+0xa0>)
 8009790:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009792:	4b14      	ldr	r3, [pc, #80]	; (80097e4 <MX_ADC1_Init+0x98>)
 8009794:	2200      	movs	r2, #0
 8009796:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8009798:	4b12      	ldr	r3, [pc, #72]	; (80097e4 <MX_ADC1_Init+0x98>)
 800979a:	2201      	movs	r2, #1
 800979c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800979e:	4b11      	ldr	r3, [pc, #68]	; (80097e4 <MX_ADC1_Init+0x98>)
 80097a0:	2200      	movs	r2, #0
 80097a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80097a6:	4b0f      	ldr	r3, [pc, #60]	; (80097e4 <MX_ADC1_Init+0x98>)
 80097a8:	2201      	movs	r2, #1
 80097aa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80097ac:	480d      	ldr	r0, [pc, #52]	; (80097e4 <MX_ADC1_Init+0x98>)
 80097ae:	f7f6 ff4f 	bl	8000650 <HAL_ADC_Init>
 80097b2:	4603      	mov	r3, r0
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d001      	beq.n	80097bc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80097b8:	f000 fe3c 	bl	800a434 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80097bc:	2307      	movs	r3, #7
 80097be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80097c0:	2301      	movs	r3, #1
 80097c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80097c4:	2300      	movs	r3, #0
 80097c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80097c8:	463b      	mov	r3, r7
 80097ca:	4619      	mov	r1, r3
 80097cc:	4805      	ldr	r0, [pc, #20]	; (80097e4 <MX_ADC1_Init+0x98>)
 80097ce:	f7f7 f8bb 	bl	8000948 <HAL_ADC_ConfigChannel>
 80097d2:	4603      	mov	r3, r0
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d001      	beq.n	80097dc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80097d8:	f000 fe2c 	bl	800a434 <Error_Handler>
  }

}
 80097dc:	bf00      	nop
 80097de:	3710      	adds	r7, #16
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	200002d4 	.word	0x200002d4
 80097e8:	40012000 	.word	0x40012000
 80097ec:	0f000001 	.word	0x0f000001

080097f0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b08a      	sub	sp, #40	; 0x28
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80097f8:	f107 0314 	add.w	r3, r7, #20
 80097fc:	2200      	movs	r2, #0
 80097fe:	601a      	str	r2, [r3, #0]
 8009800:	605a      	str	r2, [r3, #4]
 8009802:	609a      	str	r2, [r3, #8]
 8009804:	60da      	str	r2, [r3, #12]
 8009806:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a17      	ldr	r2, [pc, #92]	; (800986c <HAL_ADC_MspInit+0x7c>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d127      	bne.n	8009862 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8009812:	2300      	movs	r3, #0
 8009814:	613b      	str	r3, [r7, #16]
 8009816:	4b16      	ldr	r3, [pc, #88]	; (8009870 <HAL_ADC_MspInit+0x80>)
 8009818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800981a:	4a15      	ldr	r2, [pc, #84]	; (8009870 <HAL_ADC_MspInit+0x80>)
 800981c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009820:	6453      	str	r3, [r2, #68]	; 0x44
 8009822:	4b13      	ldr	r3, [pc, #76]	; (8009870 <HAL_ADC_MspInit+0x80>)
 8009824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800982a:	613b      	str	r3, [r7, #16]
 800982c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800982e:	2300      	movs	r3, #0
 8009830:	60fb      	str	r3, [r7, #12]
 8009832:	4b0f      	ldr	r3, [pc, #60]	; (8009870 <HAL_ADC_MspInit+0x80>)
 8009834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009836:	4a0e      	ldr	r2, [pc, #56]	; (8009870 <HAL_ADC_MspInit+0x80>)
 8009838:	f043 0301 	orr.w	r3, r3, #1
 800983c:	6313      	str	r3, [r2, #48]	; 0x30
 800983e:	4b0c      	ldr	r3, [pc, #48]	; (8009870 <HAL_ADC_MspInit+0x80>)
 8009840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009842:	f003 0301 	and.w	r3, r3, #1
 8009846:	60fb      	str	r3, [r7, #12]
 8009848:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA7     ------> ADC1_IN7 
    */
    GPIO_InitStruct.Pin = ICART_Pin;
 800984a:	2380      	movs	r3, #128	; 0x80
 800984c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800984e:	2303      	movs	r3, #3
 8009850:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009852:	2300      	movs	r3, #0
 8009854:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ICART_GPIO_Port, &GPIO_InitStruct);
 8009856:	f107 0314 	add.w	r3, r7, #20
 800985a:	4619      	mov	r1, r3
 800985c:	4805      	ldr	r0, [pc, #20]	; (8009874 <HAL_ADC_MspInit+0x84>)
 800985e:	f7f7 fbd1 	bl	8001004 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8009862:	bf00      	nop
 8009864:	3728      	adds	r7, #40	; 0x28
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop
 800986c:	40012000 	.word	0x40012000
 8009870:	40023800 	.word	0x40023800
 8009874:	40020000 	.word	0x40020000

08009878 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800987e:	2300      	movs	r3, #0
 8009880:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009882:	f000 f879 	bl	8009978 <BSP_SD_IsDetected>
 8009886:	4603      	mov	r3, r0
 8009888:	2b01      	cmp	r3, #1
 800988a:	d001      	beq.n	8009890 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800988c:	2301      	movs	r3, #1
 800988e:	e012      	b.n	80098b6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8009890:	480b      	ldr	r0, [pc, #44]	; (80098c0 <BSP_SD_Init+0x48>)
 8009892:	f7f9 ff97 	bl	80037c4 <HAL_SD_Init>
 8009896:	4603      	mov	r3, r0
 8009898:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800989a:	79fb      	ldrb	r3, [r7, #7]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d109      	bne.n	80098b4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80098a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80098a4:	4806      	ldr	r0, [pc, #24]	; (80098c0 <BSP_SD_Init+0x48>)
 80098a6:	f7fa fd67 	bl	8004378 <HAL_SD_ConfigWideBusOperation>
 80098aa:	4603      	mov	r3, r0
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d001      	beq.n	80098b4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80098b0:	2301      	movs	r3, #1
 80098b2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80098b4:	79fb      	ldrb	r3, [r7, #7]
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3708      	adds	r7, #8
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
 80098be:	bf00      	nop
 80098c0:	20000918 	.word	0x20000918

080098c4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b088      	sub	sp, #32
 80098c8:	af02      	add	r7, sp, #8
 80098ca:	60f8      	str	r0, [r7, #12]
 80098cc:	60b9      	str	r1, [r7, #8]
 80098ce:	607a      	str	r2, [r7, #4]
 80098d0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80098d2:	2300      	movs	r3, #0
 80098d4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	9300      	str	r3, [sp, #0]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	68ba      	ldr	r2, [r7, #8]
 80098de:	68f9      	ldr	r1, [r7, #12]
 80098e0:	4806      	ldr	r0, [pc, #24]	; (80098fc <BSP_SD_ReadBlocks+0x38>)
 80098e2:	f7f9 fff7 	bl	80038d4 <HAL_SD_ReadBlocks>
 80098e6:	4603      	mov	r3, r0
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d001      	beq.n	80098f0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80098ec:	2301      	movs	r3, #1
 80098ee:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 80098f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3718      	adds	r7, #24
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}
 80098fa:	bf00      	nop
 80098fc:	20000918 	.word	0x20000918

08009900 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b088      	sub	sp, #32
 8009904:	af02      	add	r7, sp, #8
 8009906:	60f8      	str	r0, [r7, #12]
 8009908:	60b9      	str	r1, [r7, #8]
 800990a:	607a      	str	r2, [r7, #4]
 800990c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800990e:	2300      	movs	r3, #0
 8009910:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	9300      	str	r3, [sp, #0]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	68ba      	ldr	r2, [r7, #8]
 800991a:	68f9      	ldr	r1, [r7, #12]
 800991c:	4806      	ldr	r0, [pc, #24]	; (8009938 <BSP_SD_WriteBlocks+0x38>)
 800991e:	f7fa f96f 	bl	8003c00 <HAL_SD_WriteBlocks>
 8009922:	4603      	mov	r3, r0
 8009924:	2b00      	cmp	r3, #0
 8009926:	d001      	beq.n	800992c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009928:	2301      	movs	r3, #1
 800992a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800992c:	7dfb      	ldrb	r3, [r7, #23]
}
 800992e:	4618      	mov	r0, r3
 8009930:	3718      	adds	r7, #24
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}
 8009936:	bf00      	nop
 8009938:	20000918 	.word	0x20000918

0800993c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009940:	4805      	ldr	r0, [pc, #20]	; (8009958 <BSP_SD_GetCardState+0x1c>)
 8009942:	f7fa fd95 	bl	8004470 <HAL_SD_GetCardState>
 8009946:	4603      	mov	r3, r0
 8009948:	2b04      	cmp	r3, #4
 800994a:	bf14      	ite	ne
 800994c:	2301      	movne	r3, #1
 800994e:	2300      	moveq	r3, #0
 8009950:	b2db      	uxtb	r3, r3
}
 8009952:	4618      	mov	r0, r3
 8009954:	bd80      	pop	{r7, pc}
 8009956:	bf00      	nop
 8009958:	20000918 	.word	0x20000918

0800995c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b082      	sub	sp, #8
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8009964:	6879      	ldr	r1, [r7, #4]
 8009966:	4803      	ldr	r0, [pc, #12]	; (8009974 <BSP_SD_GetCardInfo+0x18>)
 8009968:	f7fa fcda 	bl	8004320 <HAL_SD_GetCardInfo>
}
 800996c:	bf00      	nop
 800996e:	3708      	adds	r7, #8
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}
 8009974:	20000918 	.word	0x20000918

08009978 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800997e:	2301      	movs	r3, #1
 8009980:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8009982:	f000 f853 	bl	8009a2c <BSP_PlatformIsDetected>
 8009986:	4603      	mov	r3, r0
 8009988:	2b00      	cmp	r3, #0
 800998a:	d101      	bne.n	8009990 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800998c:	2300      	movs	r3, #0
 800998e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009990:	79fb      	ldrb	r3, [r7, #7]
 8009992:	b2db      	uxtb	r3, r3
}
 8009994:	4618      	mov	r0, r3
 8009996:	3708      	adds	r7, #8
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 80099a0:	4b06      	ldr	r3, [pc, #24]	; (80099bc <MX_CRC_Init+0x20>)
 80099a2:	4a07      	ldr	r2, [pc, #28]	; (80099c0 <MX_CRC_Init+0x24>)
 80099a4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80099a6:	4805      	ldr	r0, [pc, #20]	; (80099bc <MX_CRC_Init+0x20>)
 80099a8:	f7f7 fb0d 	bl	8000fc6 <HAL_CRC_Init>
 80099ac:	4603      	mov	r3, r0
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d001      	beq.n	80099b6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80099b2:	f000 fd3f 	bl	800a434 <Error_Handler>
  }

}
 80099b6:	bf00      	nop
 80099b8:	bd80      	pop	{r7, pc}
 80099ba:	bf00      	nop
 80099bc:	2000031c 	.word	0x2000031c
 80099c0:	40023000 	.word	0x40023000

080099c4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b085      	sub	sp, #20
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4a0b      	ldr	r2, [pc, #44]	; (8009a00 <HAL_CRC_MspInit+0x3c>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d10d      	bne.n	80099f2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80099d6:	2300      	movs	r3, #0
 80099d8:	60fb      	str	r3, [r7, #12]
 80099da:	4b0a      	ldr	r3, [pc, #40]	; (8009a04 <HAL_CRC_MspInit+0x40>)
 80099dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099de:	4a09      	ldr	r2, [pc, #36]	; (8009a04 <HAL_CRC_MspInit+0x40>)
 80099e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80099e4:	6313      	str	r3, [r2, #48]	; 0x30
 80099e6:	4b07      	ldr	r3, [pc, #28]	; (8009a04 <HAL_CRC_MspInit+0x40>)
 80099e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80099ee:	60fb      	str	r3, [r7, #12]
 80099f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80099f2:	bf00      	nop
 80099f4:	3714      	adds	r7, #20
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr
 80099fe:	bf00      	nop
 8009a00:	40023000 	.word	0x40023000
 8009a04:	40023800 	.word	0x40023800

08009a08 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009a0c:	4904      	ldr	r1, [pc, #16]	; (8009a20 <MX_FATFS_Init+0x18>)
 8009a0e:	4805      	ldr	r0, [pc, #20]	; (8009a24 <MX_FATFS_Init+0x1c>)
 8009a10:	f7ff f806 	bl	8008a20 <FATFS_LinkDriver>
 8009a14:	4603      	mov	r3, r0
 8009a16:	461a      	mov	r2, r3
 8009a18:	4b03      	ldr	r3, [pc, #12]	; (8009a28 <MX_FATFS_Init+0x20>)
 8009a1a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8009a1c:	bf00      	nop
 8009a1e:	bd80      	pop	{r7, pc}
 8009a20:	20000328 	.word	0x20000328
 8009a24:	0800bd94 	.word	0x0800bd94
 8009a28:	20000324 	.word	0x20000324

08009a2c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009a32:	2301      	movs	r3, #1
 8009a34:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009a36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009a3a:	4806      	ldr	r0, [pc, #24]	; (8009a54 <BSP_PlatformIsDetected+0x28>)
 8009a3c:	f7f7 fc74 	bl	8001328 <HAL_GPIO_ReadPin>
 8009a40:	4603      	mov	r3, r0
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d001      	beq.n	8009a4a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8009a46:	2300      	movs	r3, #0
 8009a48:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8009a4a:	79fb      	ldrb	r3, [r7, #7]
}  
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3708      	adds	r7, #8
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}
 8009a54:	40021800 	.word	0x40021800

08009a58 <MX_FSMC_Init>:
NOR_HandleTypeDef hnor3;
SRAM_HandleTypeDef hsram4;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b08e      	sub	sp, #56	; 0x38
 8009a5c:	af00      	add	r7, sp, #0
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8009a5e:	f107 031c 	add.w	r3, r7, #28
 8009a62:	2200      	movs	r2, #0
 8009a64:	601a      	str	r2, [r3, #0]
 8009a66:	605a      	str	r2, [r3, #4]
 8009a68:	609a      	str	r2, [r3, #8]
 8009a6a:	60da      	str	r2, [r3, #12]
 8009a6c:	611a      	str	r2, [r3, #16]
 8009a6e:	615a      	str	r2, [r3, #20]
 8009a70:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8009a72:	463b      	mov	r3, r7
 8009a74:	2200      	movs	r2, #0
 8009a76:	601a      	str	r2, [r3, #0]
 8009a78:	605a      	str	r2, [r3, #4]
 8009a7a:	609a      	str	r2, [r3, #8]
 8009a7c:	60da      	str	r2, [r3, #12]
 8009a7e:	611a      	str	r2, [r3, #16]
 8009a80:	615a      	str	r2, [r3, #20]
 8009a82:	619a      	str	r2, [r3, #24]

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FSMC_NORSRAM_DEVICE;
 8009a84:	4ba4      	ldr	r3, [pc, #656]	; (8009d18 <MX_FSMC_Init+0x2c0>)
 8009a86:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8009a8a:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8009a8c:	4ba2      	ldr	r3, [pc, #648]	; (8009d18 <MX_FSMC_Init+0x2c0>)
 8009a8e:	4aa3      	ldr	r2, [pc, #652]	; (8009d1c <MX_FSMC_Init+0x2c4>)
 8009a90:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8009a92:	4ba1      	ldr	r3, [pc, #644]	; (8009d18 <MX_FSMC_Init+0x2c0>)
 8009a94:	2200      	movs	r2, #0
 8009a96:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8009a98:	4b9f      	ldr	r3, [pc, #636]	; (8009d18 <MX_FSMC_Init+0x2c0>)
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FSMC_MEMORY_TYPE_NOR;
 8009a9e:	4b9e      	ldr	r3, [pc, #632]	; (8009d18 <MX_FSMC_Init+0x2c0>)
 8009aa0:	2208      	movs	r2, #8
 8009aa2:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_8;
 8009aa4:	4b9c      	ldr	r3, [pc, #624]	; (8009d18 <MX_FSMC_Init+0x2c0>)
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8009aaa:	4b9b      	ldr	r3, [pc, #620]	; (8009d18 <MX_FSMC_Init+0x2c0>)
 8009aac:	2200      	movs	r2, #0
 8009aae:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8009ab0:	4b99      	ldr	r3, [pc, #612]	; (8009d18 <MX_FSMC_Init+0x2c0>)
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	61da      	str	r2, [r3, #28]
  hnor1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8009ab6:	4b98      	ldr	r3, [pc, #608]	; (8009d18 <MX_FSMC_Init+0x2c0>)
 8009ab8:	2200      	movs	r2, #0
 8009aba:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8009abc:	4b96      	ldr	r3, [pc, #600]	; (8009d18 <MX_FSMC_Init+0x2c0>)
 8009abe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009ac2:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8009ac4:	4b94      	ldr	r3, [pc, #592]	; (8009d18 <MX_FSMC_Init+0x2c0>)
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8009aca:	4b93      	ldr	r3, [pc, #588]	; (8009d18 <MX_FSMC_Init+0x2c0>)
 8009acc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009ad0:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8009ad2:	4b91      	ldr	r3, [pc, #580]	; (8009d18 <MX_FSMC_Init+0x2c0>)
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8009ad8:	4b8f      	ldr	r3, [pc, #572]	; (8009d18 <MX_FSMC_Init+0x2c0>)
 8009ada:	2200      	movs	r2, #0
 8009adc:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8009ade:	4b8e      	ldr	r3, [pc, #568]	; (8009d18 <MX_FSMC_Init+0x2c0>)
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	63da      	str	r2, [r3, #60]	; 0x3c
  hnor1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8009ae4:	4b8c      	ldr	r3, [pc, #560]	; (8009d18 <MX_FSMC_Init+0x2c0>)
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	641a      	str	r2, [r3, #64]	; 0x40
  hnor1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8009aea:	4b8b      	ldr	r3, [pc, #556]	; (8009d18 <MX_FSMC_Init+0x2c0>)
 8009aec:	2200      	movs	r2, #0
 8009aee:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8009af0:	230f      	movs	r3, #15
 8009af2:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8009af4:	230f      	movs	r3, #15
 8009af6:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 255;
 8009af8:	23ff      	movs	r3, #255	; 0xff
 8009afa:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 8009afc:	230f      	movs	r3, #15
 8009afe:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8009b00:	2310      	movs	r3, #16
 8009b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8009b04:	2311      	movs	r3, #17
 8009b06:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_B;
 8009b08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009b0c:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 15;
 8009b0e:	230f      	movs	r3, #15
 8009b10:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8009b12:	230f      	movs	r3, #15
 8009b14:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 255;
 8009b16:	23ff      	movs	r3, #255	; 0xff
 8009b18:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 15;
 8009b1a:	230f      	movs	r3, #15
 8009b1c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8009b1e:	2310      	movs	r3, #16
 8009b20:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8009b22:	2311      	movs	r3, #17
 8009b24:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_B;
 8009b26:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009b2a:	61bb      	str	r3, [r7, #24]

  if (HAL_NOR_Init(&hnor1, &Timing, &ExtTiming) != HAL_OK)
 8009b2c:	463a      	mov	r2, r7
 8009b2e:	f107 031c 	add.w	r3, r7, #28
 8009b32:	4619      	mov	r1, r3
 8009b34:	4878      	ldr	r0, [pc, #480]	; (8009d18 <MX_FSMC_Init+0x2c0>)
 8009b36:	f7f7 fd51 	bl	80015dc <HAL_NOR_Init>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d001      	beq.n	8009b44 <MX_FSMC_Init+0xec>
  {
    Error_Handler( );
 8009b40:	f000 fc78 	bl	800a434 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 8009b44:	4b76      	ldr	r3, [pc, #472]	; (8009d20 <MX_FSMC_Init+0x2c8>)
 8009b46:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8009b4a:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8009b4c:	4b74      	ldr	r3, [pc, #464]	; (8009d20 <MX_FSMC_Init+0x2c8>)
 8009b4e:	4a73      	ldr	r2, [pc, #460]	; (8009d1c <MX_FSMC_Init+0x2c4>)
 8009b50:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK2;
 8009b52:	4b73      	ldr	r3, [pc, #460]	; (8009d20 <MX_FSMC_Init+0x2c8>)
 8009b54:	2202      	movs	r2, #2
 8009b56:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8009b58:	4b71      	ldr	r3, [pc, #452]	; (8009d20 <MX_FSMC_Init+0x2c8>)
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8009b5e:	4b70      	ldr	r3, [pc, #448]	; (8009d20 <MX_FSMC_Init+0x2c8>)
 8009b60:	2200      	movs	r2, #0
 8009b62:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_8;
 8009b64:	4b6e      	ldr	r3, [pc, #440]	; (8009d20 <MX_FSMC_Init+0x2c8>)
 8009b66:	2200      	movs	r2, #0
 8009b68:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8009b6a:	4b6d      	ldr	r3, [pc, #436]	; (8009d20 <MX_FSMC_Init+0x2c8>)
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8009b70:	4b6b      	ldr	r3, [pc, #428]	; (8009d20 <MX_FSMC_Init+0x2c8>)
 8009b72:	2200      	movs	r2, #0
 8009b74:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8009b76:	4b6a      	ldr	r3, [pc, #424]	; (8009d20 <MX_FSMC_Init+0x2c8>)
 8009b78:	2200      	movs	r2, #0
 8009b7a:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8009b7c:	4b68      	ldr	r3, [pc, #416]	; (8009d20 <MX_FSMC_Init+0x2c8>)
 8009b7e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009b82:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8009b84:	4b66      	ldr	r3, [pc, #408]	; (8009d20 <MX_FSMC_Init+0x2c8>)
 8009b86:	2200      	movs	r2, #0
 8009b88:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8009b8a:	4b65      	ldr	r3, [pc, #404]	; (8009d20 <MX_FSMC_Init+0x2c8>)
 8009b8c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009b90:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8009b92:	4b63      	ldr	r3, [pc, #396]	; (8009d20 <MX_FSMC_Init+0x2c8>)
 8009b94:	2200      	movs	r2, #0
 8009b96:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8009b98:	4b61      	ldr	r3, [pc, #388]	; (8009d20 <MX_FSMC_Init+0x2c8>)
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8009b9e:	4b60      	ldr	r3, [pc, #384]	; (8009d20 <MX_FSMC_Init+0x2c8>)
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8009ba4:	4b5e      	ldr	r3, [pc, #376]	; (8009d20 <MX_FSMC_Init+0x2c8>)
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	641a      	str	r2, [r3, #64]	; 0x40
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8009baa:	4b5d      	ldr	r3, [pc, #372]	; (8009d20 <MX_FSMC_Init+0x2c8>)
 8009bac:	2200      	movs	r2, #0
 8009bae:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8009bb0:	230f      	movs	r3, #15
 8009bb2:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8009bb4:	230f      	movs	r3, #15
 8009bb6:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 255;
 8009bb8:	23ff      	movs	r3, #255	; 0xff
 8009bba:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 8009bbc:	230f      	movs	r3, #15
 8009bbe:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8009bc0:	2310      	movs	r3, #16
 8009bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8009bc4:	2311      	movs	r3, #17
 8009bc6:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 15;
 8009bcc:	230f      	movs	r3, #15
 8009bce:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8009bd0:	230f      	movs	r3, #15
 8009bd2:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 255;
 8009bd4:	23ff      	movs	r3, #255	; 0xff
 8009bd6:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 15;
 8009bd8:	230f      	movs	r3, #15
 8009bda:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8009bdc:	2310      	movs	r3, #16
 8009bde:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8009be0:	2311      	movs	r3, #17
 8009be2:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8009be4:	2300      	movs	r3, #0
 8009be6:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram2, &Timing, &ExtTiming) != HAL_OK)
 8009be8:	463a      	mov	r2, r7
 8009bea:	f107 031c 	add.w	r3, r7, #28
 8009bee:	4619      	mov	r1, r3
 8009bf0:	484b      	ldr	r0, [pc, #300]	; (8009d20 <MX_FSMC_Init+0x2c8>)
 8009bf2:	f7fa ffc4 	bl	8004b7e <HAL_SRAM_Init>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d001      	beq.n	8009c00 <MX_FSMC_Init+0x1a8>
  {
    Error_Handler( );
 8009bfc:	f000 fc1a 	bl	800a434 <Error_Handler>
  }

  /** Perform the NOR3 memory initialization sequence
  */
  hnor3.Instance = FSMC_NORSRAM_DEVICE;
 8009c00:	4b48      	ldr	r3, [pc, #288]	; (8009d24 <MX_FSMC_Init+0x2cc>)
 8009c02:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8009c06:	601a      	str	r2, [r3, #0]
  hnor3.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8009c08:	4b46      	ldr	r3, [pc, #280]	; (8009d24 <MX_FSMC_Init+0x2cc>)
 8009c0a:	4a44      	ldr	r2, [pc, #272]	; (8009d1c <MX_FSMC_Init+0x2c4>)
 8009c0c:	605a      	str	r2, [r3, #4]
  /* hnor3.Init */
  hnor3.Init.NSBank = FSMC_NORSRAM_BANK3;
 8009c0e:	4b45      	ldr	r3, [pc, #276]	; (8009d24 <MX_FSMC_Init+0x2cc>)
 8009c10:	2204      	movs	r2, #4
 8009c12:	609a      	str	r2, [r3, #8]
  hnor3.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8009c14:	4b43      	ldr	r3, [pc, #268]	; (8009d24 <MX_FSMC_Init+0x2cc>)
 8009c16:	2200      	movs	r2, #0
 8009c18:	60da      	str	r2, [r3, #12]
  hnor3.Init.MemoryType = FSMC_MEMORY_TYPE_NOR;
 8009c1a:	4b42      	ldr	r3, [pc, #264]	; (8009d24 <MX_FSMC_Init+0x2cc>)
 8009c1c:	2208      	movs	r2, #8
 8009c1e:	611a      	str	r2, [r3, #16]
  hnor3.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8009c20:	4b40      	ldr	r3, [pc, #256]	; (8009d24 <MX_FSMC_Init+0x2cc>)
 8009c22:	2210      	movs	r2, #16
 8009c24:	615a      	str	r2, [r3, #20]
  hnor3.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8009c26:	4b3f      	ldr	r3, [pc, #252]	; (8009d24 <MX_FSMC_Init+0x2cc>)
 8009c28:	2200      	movs	r2, #0
 8009c2a:	619a      	str	r2, [r3, #24]
  hnor3.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8009c2c:	4b3d      	ldr	r3, [pc, #244]	; (8009d24 <MX_FSMC_Init+0x2cc>)
 8009c2e:	2200      	movs	r2, #0
 8009c30:	61da      	str	r2, [r3, #28]
  hnor3.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8009c32:	4b3c      	ldr	r3, [pc, #240]	; (8009d24 <MX_FSMC_Init+0x2cc>)
 8009c34:	2200      	movs	r2, #0
 8009c36:	625a      	str	r2, [r3, #36]	; 0x24
  hnor3.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8009c38:	4b3a      	ldr	r3, [pc, #232]	; (8009d24 <MX_FSMC_Init+0x2cc>)
 8009c3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009c3e:	629a      	str	r2, [r3, #40]	; 0x28
  hnor3.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8009c40:	4b38      	ldr	r3, [pc, #224]	; (8009d24 <MX_FSMC_Init+0x2cc>)
 8009c42:	2200      	movs	r2, #0
 8009c44:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor3.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8009c46:	4b37      	ldr	r3, [pc, #220]	; (8009d24 <MX_FSMC_Init+0x2cc>)
 8009c48:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009c4c:	631a      	str	r2, [r3, #48]	; 0x30
  hnor3.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8009c4e:	4b35      	ldr	r3, [pc, #212]	; (8009d24 <MX_FSMC_Init+0x2cc>)
 8009c50:	2200      	movs	r2, #0
 8009c52:	635a      	str	r2, [r3, #52]	; 0x34
  hnor3.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8009c54:	4b33      	ldr	r3, [pc, #204]	; (8009d24 <MX_FSMC_Init+0x2cc>)
 8009c56:	2200      	movs	r2, #0
 8009c58:	639a      	str	r2, [r3, #56]	; 0x38
  hnor3.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8009c5a:	4b32      	ldr	r3, [pc, #200]	; (8009d24 <MX_FSMC_Init+0x2cc>)
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	63da      	str	r2, [r3, #60]	; 0x3c
  hnor3.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8009c60:	4b30      	ldr	r3, [pc, #192]	; (8009d24 <MX_FSMC_Init+0x2cc>)
 8009c62:	2200      	movs	r2, #0
 8009c64:	641a      	str	r2, [r3, #64]	; 0x40
  hnor3.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8009c66:	4b2f      	ldr	r3, [pc, #188]	; (8009d24 <MX_FSMC_Init+0x2cc>)
 8009c68:	2200      	movs	r2, #0
 8009c6a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8009c6c:	230f      	movs	r3, #15
 8009c6e:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8009c70:	230f      	movs	r3, #15
 8009c72:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 255;
 8009c74:	23ff      	movs	r3, #255	; 0xff
 8009c76:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 8009c78:	230f      	movs	r3, #15
 8009c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8009c7c:	2310      	movs	r3, #16
 8009c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8009c80:	2311      	movs	r3, #17
 8009c82:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_B;
 8009c84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009c88:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 15;
 8009c8a:	230f      	movs	r3, #15
 8009c8c:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8009c8e:	230f      	movs	r3, #15
 8009c90:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 255;
 8009c92:	23ff      	movs	r3, #255	; 0xff
 8009c94:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 15;
 8009c96:	230f      	movs	r3, #15
 8009c98:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8009c9a:	2310      	movs	r3, #16
 8009c9c:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8009c9e:	2311      	movs	r3, #17
 8009ca0:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_B;
 8009ca2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009ca6:	61bb      	str	r3, [r7, #24]

  if (HAL_NOR_Init(&hnor3, &Timing, &ExtTiming) != HAL_OK)
 8009ca8:	463a      	mov	r2, r7
 8009caa:	f107 031c 	add.w	r3, r7, #28
 8009cae:	4619      	mov	r1, r3
 8009cb0:	481c      	ldr	r0, [pc, #112]	; (8009d24 <MX_FSMC_Init+0x2cc>)
 8009cb2:	f7f7 fc93 	bl	80015dc <HAL_NOR_Init>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d001      	beq.n	8009cc0 <MX_FSMC_Init+0x268>
  {
    Error_Handler( );
 8009cbc:	f000 fbba 	bl	800a434 <Error_Handler>
  }

  /** Perform the SRAM4 memory initialization sequence
  */
  hsram4.Instance = FSMC_NORSRAM_DEVICE;
 8009cc0:	4b19      	ldr	r3, [pc, #100]	; (8009d28 <MX_FSMC_Init+0x2d0>)
 8009cc2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8009cc6:	601a      	str	r2, [r3, #0]
  hsram4.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8009cc8:	4b17      	ldr	r3, [pc, #92]	; (8009d28 <MX_FSMC_Init+0x2d0>)
 8009cca:	4a14      	ldr	r2, [pc, #80]	; (8009d1c <MX_FSMC_Init+0x2c4>)
 8009ccc:	605a      	str	r2, [r3, #4]
  /* hsram4.Init */
  hsram4.Init.NSBank = FSMC_NORSRAM_BANK4;
 8009cce:	4b16      	ldr	r3, [pc, #88]	; (8009d28 <MX_FSMC_Init+0x2d0>)
 8009cd0:	2206      	movs	r2, #6
 8009cd2:	609a      	str	r2, [r3, #8]
  hsram4.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8009cd4:	4b14      	ldr	r3, [pc, #80]	; (8009d28 <MX_FSMC_Init+0x2d0>)
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	60da      	str	r2, [r3, #12]
  hsram4.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8009cda:	4b13      	ldr	r3, [pc, #76]	; (8009d28 <MX_FSMC_Init+0x2d0>)
 8009cdc:	2200      	movs	r2, #0
 8009cde:	611a      	str	r2, [r3, #16]
  hsram4.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8009ce0:	4b11      	ldr	r3, [pc, #68]	; (8009d28 <MX_FSMC_Init+0x2d0>)
 8009ce2:	2210      	movs	r2, #16
 8009ce4:	615a      	str	r2, [r3, #20]
  hsram4.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8009ce6:	4b10      	ldr	r3, [pc, #64]	; (8009d28 <MX_FSMC_Init+0x2d0>)
 8009ce8:	2200      	movs	r2, #0
 8009cea:	619a      	str	r2, [r3, #24]
  hsram4.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8009cec:	4b0e      	ldr	r3, [pc, #56]	; (8009d28 <MX_FSMC_Init+0x2d0>)
 8009cee:	2200      	movs	r2, #0
 8009cf0:	61da      	str	r2, [r3, #28]
  hsram4.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8009cf2:	4b0d      	ldr	r3, [pc, #52]	; (8009d28 <MX_FSMC_Init+0x2d0>)
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	625a      	str	r2, [r3, #36]	; 0x24
  hsram4.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8009cf8:	4b0b      	ldr	r3, [pc, #44]	; (8009d28 <MX_FSMC_Init+0x2d0>)
 8009cfa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009cfe:	629a      	str	r2, [r3, #40]	; 0x28
  hsram4.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8009d00:	4b09      	ldr	r3, [pc, #36]	; (8009d28 <MX_FSMC_Init+0x2d0>)
 8009d02:	2200      	movs	r2, #0
 8009d04:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram4.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8009d06:	4b08      	ldr	r3, [pc, #32]	; (8009d28 <MX_FSMC_Init+0x2d0>)
 8009d08:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009d0c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram4.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8009d0e:	4b06      	ldr	r3, [pc, #24]	; (8009d28 <MX_FSMC_Init+0x2d0>)
 8009d10:	2200      	movs	r2, #0
 8009d12:	635a      	str	r2, [r3, #52]	; 0x34
 8009d14:	e00a      	b.n	8009d2c <MX_FSMC_Init+0x2d4>
 8009d16:	bf00      	nop
 8009d18:	2000078c 	.word	0x2000078c
 8009d1c:	a0000104 	.word	0xa0000104
 8009d20:	200007d8 	.word	0x200007d8
 8009d24:	20000878 	.word	0x20000878
 8009d28:	20000828 	.word	0x20000828
  hsram4.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8009d2c:	4b1b      	ldr	r3, [pc, #108]	; (8009d9c <MX_FSMC_Init+0x344>)
 8009d2e:	2200      	movs	r2, #0
 8009d30:	639a      	str	r2, [r3, #56]	; 0x38
  hsram4.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8009d32:	4b1a      	ldr	r3, [pc, #104]	; (8009d9c <MX_FSMC_Init+0x344>)
 8009d34:	2200      	movs	r2, #0
 8009d36:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram4.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8009d38:	4b18      	ldr	r3, [pc, #96]	; (8009d9c <MX_FSMC_Init+0x344>)
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	641a      	str	r2, [r3, #64]	; 0x40
  hsram4.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8009d3e:	4b17      	ldr	r3, [pc, #92]	; (8009d9c <MX_FSMC_Init+0x344>)
 8009d40:	2200      	movs	r2, #0
 8009d42:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8009d44:	230f      	movs	r3, #15
 8009d46:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8009d48:	230f      	movs	r3, #15
 8009d4a:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 255;
 8009d4c:	23ff      	movs	r3, #255	; 0xff
 8009d4e:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 8009d50:	230f      	movs	r3, #15
 8009d52:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8009d54:	2310      	movs	r3, #16
 8009d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8009d58:	2311      	movs	r3, #17
 8009d5a:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 15;
 8009d60:	230f      	movs	r3, #15
 8009d62:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8009d64:	230f      	movs	r3, #15
 8009d66:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 255;
 8009d68:	23ff      	movs	r3, #255	; 0xff
 8009d6a:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 15;
 8009d6c:	230f      	movs	r3, #15
 8009d6e:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8009d70:	2310      	movs	r3, #16
 8009d72:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8009d74:	2311      	movs	r3, #17
 8009d76:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram4, &Timing, &ExtTiming) != HAL_OK)
 8009d7c:	463a      	mov	r2, r7
 8009d7e:	f107 031c 	add.w	r3, r7, #28
 8009d82:	4619      	mov	r1, r3
 8009d84:	4805      	ldr	r0, [pc, #20]	; (8009d9c <MX_FSMC_Init+0x344>)
 8009d86:	f7fa fefa 	bl	8004b7e <HAL_SRAM_Init>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d001      	beq.n	8009d94 <MX_FSMC_Init+0x33c>
  {
    Error_Handler( );
 8009d90:	f000 fb50 	bl	800a434 <Error_Handler>
  }

}
 8009d94:	bf00      	nop
 8009d96:	3738      	adds	r7, #56	; 0x38
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}
 8009d9c:	20000828 	.word	0x20000828

08009da0 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b086      	sub	sp, #24
 8009da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009da6:	1d3b      	adds	r3, r7, #4
 8009da8:	2200      	movs	r2, #0
 8009daa:	601a      	str	r2, [r3, #0]
 8009dac:	605a      	str	r2, [r3, #4]
 8009dae:	609a      	str	r2, [r3, #8]
 8009db0:	60da      	str	r2, [r3, #12]
 8009db2:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8009db4:	4b2c      	ldr	r3, [pc, #176]	; (8009e68 <HAL_FSMC_MspInit+0xc8>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d151      	bne.n	8009e60 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8009dbc:	4b2a      	ldr	r3, [pc, #168]	; (8009e68 <HAL_FSMC_MspInit+0xc8>)
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	603b      	str	r3, [r7, #0]
 8009dc6:	4b29      	ldr	r3, [pc, #164]	; (8009e6c <HAL_FSMC_MspInit+0xcc>)
 8009dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dca:	4a28      	ldr	r2, [pc, #160]	; (8009e6c <HAL_FSMC_MspInit+0xcc>)
 8009dcc:	f043 0301 	orr.w	r3, r3, #1
 8009dd0:	6393      	str	r3, [r2, #56]	; 0x38
 8009dd2:	4b26      	ldr	r3, [pc, #152]	; (8009e6c <HAL_FSMC_MspInit+0xcc>)
 8009dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dd6:	f003 0301 	and.w	r3, r3, #1
 8009dda:	603b      	str	r3, [r7, #0]
 8009ddc:	683b      	ldr	r3, [r7, #0]
  PG14   ------> FSMC_A25
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8009dde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009de2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009de4:	2302      	movs	r3, #2
 8009de6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009de8:	2300      	movs	r3, #0
 8009dea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009dec:	2303      	movs	r3, #3
 8009dee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8009df0:	230c      	movs	r3, #12
 8009df2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009df4:	1d3b      	adds	r3, r7, #4
 8009df6:	4619      	mov	r1, r3
 8009df8:	481d      	ldr	r0, [pc, #116]	; (8009e70 <HAL_FSMC_MspInit+0xd0>)
 8009dfa:	f7f7 f903 	bl	8001004 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8009dfe:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8009e02:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e04:	2302      	movs	r3, #2
 8009e06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009e0c:	2303      	movs	r3, #3
 8009e0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8009e10:	230c      	movs	r3, #12
 8009e12:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009e14:	1d3b      	adds	r3, r7, #4
 8009e16:	4619      	mov	r1, r3
 8009e18:	4816      	ldr	r0, [pc, #88]	; (8009e74 <HAL_FSMC_MspInit+0xd4>)
 8009e1a:	f7f7 f8f3 	bl	8001004 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8009e1e:	f247 633f 	movw	r3, #30271	; 0x763f
 8009e22:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|nCE1_Pin|nCE2_Pin 
                          |nCE3_Pin|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e24:	2302      	movs	r3, #2
 8009e26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009e2c:	2303      	movs	r3, #3
 8009e2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8009e30:	230c      	movs	r3, #12
 8009e32:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009e34:	1d3b      	adds	r3, r7, #4
 8009e36:	4619      	mov	r1, r3
 8009e38:	480f      	ldr	r0, [pc, #60]	; (8009e78 <HAL_FSMC_MspInit+0xd8>)
 8009e3a:	f7f7 f8e3 	bl	8001004 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8009e3e:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 8009e42:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_0|GPIO_PIN_1|nRD_Pin|nWR_Pin 
                          |nCE0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e44:	2302      	movs	r3, #2
 8009e46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009e4c:	2303      	movs	r3, #3
 8009e4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8009e50:	230c      	movs	r3, #12
 8009e52:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009e54:	1d3b      	adds	r3, r7, #4
 8009e56:	4619      	mov	r1, r3
 8009e58:	4808      	ldr	r0, [pc, #32]	; (8009e7c <HAL_FSMC_MspInit+0xdc>)
 8009e5a:	f7f7 f8d3 	bl	8001004 <HAL_GPIO_Init>
 8009e5e:	e000      	b.n	8009e62 <HAL_FSMC_MspInit+0xc2>
    return;
 8009e60:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8009e62:	3718      	adds	r7, #24
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}
 8009e68:	2000022c 	.word	0x2000022c
 8009e6c:	40023800 	.word	0x40023800
 8009e70:	40021000 	.word	0x40021000
 8009e74:	40021400 	.word	0x40021400
 8009e78:	40021800 	.word	0x40021800
 8009e7c:	40020c00 	.word	0x40020c00

08009e80 <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* norHandle){
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b082      	sub	sp, #8
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FSMC_MspInit();
 8009e88:	f7ff ff8a 	bl	8009da0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 8009e8c:	bf00      	nop
 8009e8e:	3708      	adds	r7, #8
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}

08009e94 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b082      	sub	sp, #8
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8009e9c:	f7ff ff80 	bl	8009da0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8009ea0:	bf00      	nop
 8009ea2:	3708      	adds	r7, #8
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <MX_GPIO_Init>:
     PB0   ------> SharedStack_PB0
     PB1   ------> SharedStack_PB1
     PC6   ------> SharedStack_PC6
*/
void MX_GPIO_Init(void)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b08e      	sub	sp, #56	; 0x38
 8009eac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009eae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	601a      	str	r2, [r3, #0]
 8009eb6:	605a      	str	r2, [r3, #4]
 8009eb8:	609a      	str	r2, [r3, #8]
 8009eba:	60da      	str	r2, [r3, #12]
 8009ebc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	623b      	str	r3, [r7, #32]
 8009ec2:	4ba6      	ldr	r3, [pc, #664]	; (800a15c <MX_GPIO_Init+0x2b4>)
 8009ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ec6:	4aa5      	ldr	r2, [pc, #660]	; (800a15c <MX_GPIO_Init+0x2b4>)
 8009ec8:	f043 0310 	orr.w	r3, r3, #16
 8009ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8009ece:	4ba3      	ldr	r3, [pc, #652]	; (800a15c <MX_GPIO_Init+0x2b4>)
 8009ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ed2:	f003 0310 	and.w	r3, r3, #16
 8009ed6:	623b      	str	r3, [r7, #32]
 8009ed8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009eda:	2300      	movs	r3, #0
 8009edc:	61fb      	str	r3, [r7, #28]
 8009ede:	4b9f      	ldr	r3, [pc, #636]	; (800a15c <MX_GPIO_Init+0x2b4>)
 8009ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ee2:	4a9e      	ldr	r2, [pc, #632]	; (800a15c <MX_GPIO_Init+0x2b4>)
 8009ee4:	f043 0304 	orr.w	r3, r3, #4
 8009ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8009eea:	4b9c      	ldr	r3, [pc, #624]	; (800a15c <MX_GPIO_Init+0x2b4>)
 8009eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eee:	f003 0304 	and.w	r3, r3, #4
 8009ef2:	61fb      	str	r3, [r7, #28]
 8009ef4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	61bb      	str	r3, [r7, #24]
 8009efa:	4b98      	ldr	r3, [pc, #608]	; (800a15c <MX_GPIO_Init+0x2b4>)
 8009efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009efe:	4a97      	ldr	r2, [pc, #604]	; (800a15c <MX_GPIO_Init+0x2b4>)
 8009f00:	f043 0320 	orr.w	r3, r3, #32
 8009f04:	6313      	str	r3, [r2, #48]	; 0x30
 8009f06:	4b95      	ldr	r3, [pc, #596]	; (800a15c <MX_GPIO_Init+0x2b4>)
 8009f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f0a:	f003 0320 	and.w	r3, r3, #32
 8009f0e:	61bb      	str	r3, [r7, #24]
 8009f10:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009f12:	2300      	movs	r3, #0
 8009f14:	617b      	str	r3, [r7, #20]
 8009f16:	4b91      	ldr	r3, [pc, #580]	; (800a15c <MX_GPIO_Init+0x2b4>)
 8009f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f1a:	4a90      	ldr	r2, [pc, #576]	; (800a15c <MX_GPIO_Init+0x2b4>)
 8009f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f20:	6313      	str	r3, [r2, #48]	; 0x30
 8009f22:	4b8e      	ldr	r3, [pc, #568]	; (800a15c <MX_GPIO_Init+0x2b4>)
 8009f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f2a:	617b      	str	r3, [r7, #20]
 8009f2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f2e:	2300      	movs	r3, #0
 8009f30:	613b      	str	r3, [r7, #16]
 8009f32:	4b8a      	ldr	r3, [pc, #552]	; (800a15c <MX_GPIO_Init+0x2b4>)
 8009f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f36:	4a89      	ldr	r2, [pc, #548]	; (800a15c <MX_GPIO_Init+0x2b4>)
 8009f38:	f043 0301 	orr.w	r3, r3, #1
 8009f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8009f3e:	4b87      	ldr	r3, [pc, #540]	; (800a15c <MX_GPIO_Init+0x2b4>)
 8009f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f42:	f003 0301 	and.w	r3, r3, #1
 8009f46:	613b      	str	r3, [r7, #16]
 8009f48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	60fb      	str	r3, [r7, #12]
 8009f4e:	4b83      	ldr	r3, [pc, #524]	; (800a15c <MX_GPIO_Init+0x2b4>)
 8009f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f52:	4a82      	ldr	r2, [pc, #520]	; (800a15c <MX_GPIO_Init+0x2b4>)
 8009f54:	f043 0302 	orr.w	r3, r3, #2
 8009f58:	6313      	str	r3, [r2, #48]	; 0x30
 8009f5a:	4b80      	ldr	r3, [pc, #512]	; (800a15c <MX_GPIO_Init+0x2b4>)
 8009f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f5e:	f003 0302 	and.w	r3, r3, #2
 8009f62:	60fb      	str	r3, [r7, #12]
 8009f64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8009f66:	2300      	movs	r3, #0
 8009f68:	60bb      	str	r3, [r7, #8]
 8009f6a:	4b7c      	ldr	r3, [pc, #496]	; (800a15c <MX_GPIO_Init+0x2b4>)
 8009f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f6e:	4a7b      	ldr	r2, [pc, #492]	; (800a15c <MX_GPIO_Init+0x2b4>)
 8009f70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f74:	6313      	str	r3, [r2, #48]	; 0x30
 8009f76:	4b79      	ldr	r3, [pc, #484]	; (800a15c <MX_GPIO_Init+0x2b4>)
 8009f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f7e:	60bb      	str	r3, [r7, #8]
 8009f80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009f82:	2300      	movs	r3, #0
 8009f84:	607b      	str	r3, [r7, #4]
 8009f86:	4b75      	ldr	r3, [pc, #468]	; (800a15c <MX_GPIO_Init+0x2b4>)
 8009f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f8a:	4a74      	ldr	r2, [pc, #464]	; (800a15c <MX_GPIO_Init+0x2b4>)
 8009f8c:	f043 0308 	orr.w	r3, r3, #8
 8009f90:	6313      	str	r3, [r2, #48]	; 0x30
 8009f92:	4b72      	ldr	r3, [pc, #456]	; (800a15c <MX_GPIO_Init+0x2b4>)
 8009f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f96:	f003 0308 	and.w	r3, r3, #8
 8009f9a:	607b      	str	r3, [r7, #4]
 8009f9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED3_Pin|LED2_Pin|LED1_Pin|LED0_Pin 
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	f240 111f 	movw	r1, #287	; 0x11f
 8009fa4:	486e      	ldr	r0, [pc, #440]	; (800a160 <MX_GPIO_Init+0x2b8>)
 8009fa6:	f7f7 f9d7 	bl	8001358 <HAL_GPIO_WritePin>
                          |nOUT_EN0_Pin|VSEL0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GP3_Pin|VSEL1_Pin, GPIO_PIN_RESET);
 8009faa:	2200      	movs	r2, #0
 8009fac:	21a0      	movs	r1, #160	; 0xa0
 8009fae:	486d      	ldr	r0, [pc, #436]	; (800a164 <MX_GPIO_Init+0x2bc>)
 8009fb0:	f7f7 f9d2 	bl	8001358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nOUT_EN1_GPIO_Port, nOUT_EN1_Pin, GPIO_PIN_RESET);
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009fba:	486b      	ldr	r0, [pc, #428]	; (800a168 <MX_GPIO_Init+0x2c0>)
 8009fbc:	f7f7 f9cc 	bl	8001358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, SEL0_Pin|SEL1_Pin, GPIO_PIN_RESET);
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8009fc6:	4869      	ldr	r0, [pc, #420]	; (800a16c <MX_GPIO_Init+0x2c4>)
 8009fc8:	f7f7 f9c6 	bl	8001358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOOT_EN_GPIO_Port, BOOT_EN_Pin, GPIO_PIN_RESET);
 8009fcc:	2200      	movs	r2, #0
 8009fce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009fd2:	4867      	ldr	r0, [pc, #412]	; (800a170 <MX_GPIO_Init+0x2c8>)
 8009fd4:	f7f7 f9c0 	bl	8001358 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = nDTCT_Pin|GP2_Pin|GP8_Pin;
 8009fd8:	f242 0350 	movw	r3, #8272	; 0x2050
 8009fdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009fe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009fea:	4619      	mov	r1, r3
 8009fec:	485d      	ldr	r0, [pc, #372]	; (800a164 <MX_GPIO_Init+0x2bc>)
 8009fee:	f7f7 f809 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1 
                           PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1 
 8009ff2:	f24c 030f 	movw	r3, #49167	; 0xc00f
 8009ff6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009ff8:	2303      	movs	r3, #3
 8009ffa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a000:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a004:	4619      	mov	r1, r3
 800a006:	4857      	ldr	r0, [pc, #348]	; (800a164 <MX_GPIO_Init+0x2bc>)
 800a008:	f7f6 fffc 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF8 PF9 
                           PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
 800a00c:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800a010:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a012:	2303      	movs	r3, #3
 800a014:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a016:	2300      	movs	r3, #0
 800a018:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800a01a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a01e:	4619      	mov	r1, r3
 800a020:	4851      	ldr	r0, [pc, #324]	; (800a168 <MX_GPIO_Init+0x2c0>)
 800a022:	f7f6 ffef 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin|LED1_Pin|LED0_Pin 
 800a026:	f240 131f 	movw	r3, #287	; 0x11f
 800a02a:	627b      	str	r3, [r7, #36]	; 0x24
                          |nOUT_EN0_Pin|VSEL0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a02c:	2301      	movs	r3, #1
 800a02e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a030:	2300      	movs	r3, #0
 800a032:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a034:	2300      	movs	r3, #0
 800a036:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a038:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a03c:	4619      	mov	r1, r3
 800a03e:	4848      	ldr	r0, [pc, #288]	; (800a160 <MX_GPIO_Init+0x2b8>)
 800a040:	f7f6 ffe0 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_9|GPIO_PIN_10;
 800a044:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 800a048:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a04a:	2303      	movs	r3, #3
 800a04c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a04e:	2300      	movs	r3, #0
 800a050:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a056:	4619      	mov	r1, r3
 800a058:	4841      	ldr	r0, [pc, #260]	; (800a160 <MX_GPIO_Init+0x2b8>)
 800a05a:	f7f6 ffd3 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = GP3_Pin|VSEL1_Pin;
 800a05e:	23a0      	movs	r3, #160	; 0xa0
 800a060:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a062:	2301      	movs	r3, #1
 800a064:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a066:	2300      	movs	r3, #0
 800a068:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a06a:	2300      	movs	r3, #0
 800a06c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a06e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a072:	4619      	mov	r1, r3
 800a074:	483b      	ldr	r0, [pc, #236]	; (800a164 <MX_GPIO_Init+0x2bc>)
 800a076:	f7f6 ffc5 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GP0_Pin|GP1_Pin|BOOT1_Pin|nSDWP_Pin;
 800a07a:	f240 2307 	movw	r3, #519	; 0x207
 800a07e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a080:	2300      	movs	r3, #0
 800a082:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a084:	2300      	movs	r3, #0
 800a086:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a08c:	4619      	mov	r1, r3
 800a08e:	4838      	ldr	r0, [pc, #224]	; (800a170 <MX_GPIO_Init+0x2c8>)
 800a090:	f7f6 ffb8 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nOUT_EN1_Pin;
 800a094:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a098:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a09a:	2301      	movs	r3, #1
 800a09c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(nOUT_EN1_GPIO_Port, &GPIO_InitStruct);
 800a0a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	482e      	ldr	r0, [pc, #184]	; (800a168 <MX_GPIO_Init+0x2c0>)
 800a0ae:	f7f6 ffa9 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG6 PG11 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_11;
 800a0b2:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800a0b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a0b8:	2303      	movs	r3, #3
 800a0ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a0c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0c4:	4619      	mov	r1, r3
 800a0c6:	4829      	ldr	r0, [pc, #164]	; (800a16c <MX_GPIO_Init+0x2c4>)
 800a0c8:	f7f6 ff9c 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = SEL0_Pin|SEL1_Pin;
 800a0cc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800a0d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a0de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0e2:	4619      	mov	r1, r3
 800a0e4:	4821      	ldr	r0, [pc, #132]	; (800a16c <MX_GPIO_Init+0x2c4>)
 800a0e6:	f7f6 ff8d 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 800a0ea:	2348      	movs	r3, #72	; 0x48
 800a0ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a0ee:	2303      	movs	r3, #3
 800a0f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a0f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0fa:	4619      	mov	r1, r3
 800a0fc:	481d      	ldr	r0, [pc, #116]	; (800a174 <MX_GPIO_Init+0x2cc>)
 800a0fe:	f7f6 ff81 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nSDCD_Pin;
 800a102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a106:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a108:	2300      	movs	r3, #0
 800a10a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a10c:	2300      	movs	r3, #0
 800a10e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(nSDCD_GPIO_Port, &GPIO_InitStruct);
 800a110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a114:	4619      	mov	r1, r3
 800a116:	4815      	ldr	r0, [pc, #84]	; (800a16c <MX_GPIO_Init+0x2c4>)
 800a118:	f7f6 ff74 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800a11c:	2320      	movs	r3, #32
 800a11e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a120:	2303      	movs	r3, #3
 800a122:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a124:	2300      	movs	r3, #0
 800a126:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a12c:	4619      	mov	r1, r3
 800a12e:	4810      	ldr	r0, [pc, #64]	; (800a170 <MX_GPIO_Init+0x2c8>)
 800a130:	f7f6 ff68 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT_EN_Pin;
 800a134:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a138:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a13a:	2301      	movs	r3, #1
 800a13c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a13e:	2300      	movs	r3, #0
 800a140:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a142:	2300      	movs	r3, #0
 800a144:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BOOT_EN_GPIO_Port, &GPIO_InitStruct);
 800a146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a14a:	4619      	mov	r1, r3
 800a14c:	4808      	ldr	r0, [pc, #32]	; (800a170 <MX_GPIO_Init+0x2c8>)
 800a14e:	f7f6 ff59 	bl	8001004 <HAL_GPIO_Init>

}
 800a152:	bf00      	nop
 800a154:	3738      	adds	r7, #56	; 0x38
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
 800a15a:	bf00      	nop
 800a15c:	40023800 	.word	0x40023800
 800a160:	40020000 	.word	0x40020000
 800a164:	40020800 	.word	0x40020800
 800a168:	40021400 	.word	0x40021400
 800a16c:	40021800 	.word	0x40021800
 800a170:	40020400 	.word	0x40020400
 800a174:	40020c00 	.word	0x40020c00

0800a178 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800a17c:	4b12      	ldr	r3, [pc, #72]	; (800a1c8 <MX_I2C1_Init+0x50>)
 800a17e:	4a13      	ldr	r2, [pc, #76]	; (800a1cc <MX_I2C1_Init+0x54>)
 800a180:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800a182:	4b11      	ldr	r3, [pc, #68]	; (800a1c8 <MX_I2C1_Init+0x50>)
 800a184:	4a12      	ldr	r2, [pc, #72]	; (800a1d0 <MX_I2C1_Init+0x58>)
 800a186:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800a188:	4b0f      	ldr	r3, [pc, #60]	; (800a1c8 <MX_I2C1_Init+0x50>)
 800a18a:	2200      	movs	r2, #0
 800a18c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800a18e:	4b0e      	ldr	r3, [pc, #56]	; (800a1c8 <MX_I2C1_Init+0x50>)
 800a190:	2200      	movs	r2, #0
 800a192:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a194:	4b0c      	ldr	r3, [pc, #48]	; (800a1c8 <MX_I2C1_Init+0x50>)
 800a196:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a19a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a19c:	4b0a      	ldr	r3, [pc, #40]	; (800a1c8 <MX_I2C1_Init+0x50>)
 800a19e:	2200      	movs	r2, #0
 800a1a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800a1a2:	4b09      	ldr	r3, [pc, #36]	; (800a1c8 <MX_I2C1_Init+0x50>)
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a1a8:	4b07      	ldr	r3, [pc, #28]	; (800a1c8 <MX_I2C1_Init+0x50>)
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a1ae:	4b06      	ldr	r3, [pc, #24]	; (800a1c8 <MX_I2C1_Init+0x50>)
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800a1b4:	4804      	ldr	r0, [pc, #16]	; (800a1c8 <MX_I2C1_Init+0x50>)
 800a1b6:	f7f7 f8e9 	bl	800138c <HAL_I2C_Init>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d001      	beq.n	800a1c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800a1c0:	f000 f938 	bl	800a434 <Error_Handler>
  }

}
 800a1c4:	bf00      	nop
 800a1c6:	bd80      	pop	{r7, pc}
 800a1c8:	200008c4 	.word	0x200008c4
 800a1cc:	40005400 	.word	0x40005400
 800a1d0:	000186a0 	.word	0x000186a0

0800a1d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b08a      	sub	sp, #40	; 0x28
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a1dc:	f107 0314 	add.w	r3, r7, #20
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	601a      	str	r2, [r3, #0]
 800a1e4:	605a      	str	r2, [r3, #4]
 800a1e6:	609a      	str	r2, [r3, #8]
 800a1e8:	60da      	str	r2, [r3, #12]
 800a1ea:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4a19      	ldr	r2, [pc, #100]	; (800a258 <HAL_I2C_MspInit+0x84>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d12b      	bne.n	800a24e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	613b      	str	r3, [r7, #16]
 800a1fa:	4b18      	ldr	r3, [pc, #96]	; (800a25c <HAL_I2C_MspInit+0x88>)
 800a1fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1fe:	4a17      	ldr	r2, [pc, #92]	; (800a25c <HAL_I2C_MspInit+0x88>)
 800a200:	f043 0302 	orr.w	r3, r3, #2
 800a204:	6313      	str	r3, [r2, #48]	; 0x30
 800a206:	4b15      	ldr	r3, [pc, #84]	; (800a25c <HAL_I2C_MspInit+0x88>)
 800a208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a20a:	f003 0302 	and.w	r3, r3, #2
 800a20e:	613b      	str	r3, [r7, #16]
 800a210:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL1_Pin|SDA1_Pin;
 800a212:	23c0      	movs	r3, #192	; 0xc0
 800a214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a216:	2312      	movs	r3, #18
 800a218:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a21a:	2301      	movs	r3, #1
 800a21c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a21e:	2303      	movs	r3, #3
 800a220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800a222:	2304      	movs	r3, #4
 800a224:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a226:	f107 0314 	add.w	r3, r7, #20
 800a22a:	4619      	mov	r1, r3
 800a22c:	480c      	ldr	r0, [pc, #48]	; (800a260 <HAL_I2C_MspInit+0x8c>)
 800a22e:	f7f6 fee9 	bl	8001004 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800a232:	2300      	movs	r3, #0
 800a234:	60fb      	str	r3, [r7, #12]
 800a236:	4b09      	ldr	r3, [pc, #36]	; (800a25c <HAL_I2C_MspInit+0x88>)
 800a238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a23a:	4a08      	ldr	r2, [pc, #32]	; (800a25c <HAL_I2C_MspInit+0x88>)
 800a23c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a240:	6413      	str	r3, [r2, #64]	; 0x40
 800a242:	4b06      	ldr	r3, [pc, #24]	; (800a25c <HAL_I2C_MspInit+0x88>)
 800a244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a246:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a24a:	60fb      	str	r3, [r7, #12]
 800a24c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800a24e:	bf00      	nop
 800a250:	3728      	adds	r7, #40	; 0x28
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}
 800a256:	bf00      	nop
 800a258:	40005400 	.word	0x40005400
 800a25c:	40023800 	.word	0x40023800
 800a260:	40020400 	.word	0x40020400

0800a264 <_ZN3USBD1Ev>:
#include <vector>

#define CIRCULAR_BUFFER_SIZE 	2048
#define CIRCULAR_BUFFER_MASK 	(CIRCULAR_BUFFER_SIZE-1)

class USB{
 800a264:	b580      	push	{r7, lr}
 800a266:	b082      	sub	sp, #8
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f603 0304 	addw	r3, r3, #2052	; 0x804
 800a272:	4618      	mov	r0, r3
 800a274:	f000 f8e5 	bl	800a442 <_ZNSt6vectorIN3USB5_VBUFESaIS1_EED1Ev>
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	4618      	mov	r0, r3
 800a27c:	3708      	adds	r7, #8
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}

0800a282 <_ZN3UMDD1Ev>:
#define CE0_ADRESS		       	0x60000000U
#define CE1_ADRESS     		  	0x64000000U
#define CE2_ADRESS       		0x68000000U
#define CE3_ADRESS       		0x6C000000U

class UMD{
 800a282:	b580      	push	{r7, lr}
 800a284:	b082      	sub	sp, #8
 800a286:	af00      	add	r7, sp, #0
 800a288:	6078      	str	r0, [r7, #4]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	330c      	adds	r3, #12
 800a28e:	4618      	mov	r0, r3
 800a290:	f7ff ffe8 	bl	800a264 <_ZN3USBD1Ev>
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	4618      	mov	r0, r3
 800a298:	3708      	adds	r7, #8
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}

0800a29e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a29e:	b580      	push	{r7, lr}
 800a2a0:	f6ad 0d48 	subw	sp, sp, #2120	; 0x848
 800a2a4:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a2a6:	f7f6 f93f 	bl	8000528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a2aa:	f000 f821 	bl	800a2f0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a2ae:	f7ff fdfb 	bl	8009ea8 <MX_GPIO_Init>
  MX_ADC1_Init();
 800a2b2:	f7ff fa4b 	bl	800974c <MX_ADC1_Init>
  MX_CRC_Init();
 800a2b6:	f7ff fb71 	bl	800999c <MX_CRC_Init>
  MX_FSMC_Init();
 800a2ba:	f7ff fbcd 	bl	8009a58 <MX_FSMC_Init>
  MX_I2C1_Init();
 800a2be:	f7ff ff5b 	bl	800a178 <MX_I2C1_Init>
  MX_SDIO_SD_Init();
 800a2c2:	f000 f9fb 	bl	800a6bc <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 800a2c6:	f000 fa81 	bl	800a7cc <MX_SPI2_Init>
  MX_USART3_UART_Init();
 800a2ca:	f000 fbe1 	bl	800aa90 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 800a2ce:	f7ff fb9b 	bl	8009a08 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 800a2d2:	f000 fc4f 	bl	800ab74 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  UMD UMDapp;
 800a2d6:	463b      	mov	r3, r7
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f7fe fbb7 	bl	8008a4c <_ZN3UMDC1Ev>
	  UMDapp.run();
 800a2de:	463b      	mov	r3, r7
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f7fe fc05 	bl	8008af0 <_ZN3UMD3runEv>
	  UMD UMDapp;
 800a2e6:	463b      	mov	r3, r7
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f7ff ffca 	bl	800a282 <_ZN3UMDD1Ev>
  }
 800a2ee:	e7f2      	b.n	800a2d6 <main+0x38>

0800a2f0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b0aa      	sub	sp, #168	; 0xa8
 800a2f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a2f6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800a2fa:	2234      	movs	r2, #52	; 0x34
 800a2fc:	2100      	movs	r1, #0
 800a2fe:	4618      	mov	r0, r3
 800a300:	f001 fb9c 	bl	800ba3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a304:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a308:	2200      	movs	r2, #0
 800a30a:	601a      	str	r2, [r3, #0]
 800a30c:	605a      	str	r2, [r3, #4]
 800a30e:	609a      	str	r2, [r3, #8]
 800a310:	60da      	str	r2, [r3, #12]
 800a312:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a314:	f107 0308 	add.w	r3, r7, #8
 800a318:	2258      	movs	r2, #88	; 0x58
 800a31a:	2100      	movs	r1, #0
 800a31c:	4618      	mov	r0, r3
 800a31e:	f001 fb8d 	bl	800ba3c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800a322:	2300      	movs	r3, #0
 800a324:	607b      	str	r3, [r7, #4]
 800a326:	4b41      	ldr	r3, [pc, #260]	; (800a42c <_Z18SystemClock_Configv+0x13c>)
 800a328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a32a:	4a40      	ldr	r2, [pc, #256]	; (800a42c <_Z18SystemClock_Configv+0x13c>)
 800a32c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a330:	6413      	str	r3, [r2, #64]	; 0x40
 800a332:	4b3e      	ldr	r3, [pc, #248]	; (800a42c <_Z18SystemClock_Configv+0x13c>)
 800a334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a33a:	607b      	str	r3, [r7, #4]
 800a33c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a33e:	2300      	movs	r3, #0
 800a340:	603b      	str	r3, [r7, #0]
 800a342:	4b3b      	ldr	r3, [pc, #236]	; (800a430 <_Z18SystemClock_Configv+0x140>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4a3a      	ldr	r2, [pc, #232]	; (800a430 <_Z18SystemClock_Configv+0x140>)
 800a348:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a34c:	6013      	str	r3, [r2, #0]
 800a34e:	4b38      	ldr	r3, [pc, #224]	; (800a430 <_Z18SystemClock_Configv+0x140>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a356:	603b      	str	r3, [r7, #0]
 800a358:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a35a:	2301      	movs	r3, #1
 800a35c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a35e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a362:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a364:	2302      	movs	r3, #2
 800a366:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a36a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a36e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 8;
 800a372:	2308      	movs	r3, #8
 800a374:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 200;
 800a378:	23c8      	movs	r3, #200	; 0xc8
 800a37a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a37e:	2302      	movs	r3, #2
 800a380:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800a384:	2302      	movs	r3, #2
 800a386:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 800a38a:	2302      	movs	r3, #2
 800a38c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a390:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800a394:	4618      	mov	r0, r3
 800a396:	f7f8 ffd3 	bl	8003340 <HAL_RCC_OscConfig>
 800a39a:	4603      	mov	r3, r0
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	bf14      	ite	ne
 800a3a0:	2301      	movne	r3, #1
 800a3a2:	2300      	moveq	r3, #0
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d001      	beq.n	800a3ae <_Z18SystemClock_Configv+0xbe>
  {
    Error_Handler();
 800a3aa:	f000 f843 	bl	800a434 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a3ae:	230f      	movs	r3, #15
 800a3b0:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a3b2:	2302      	movs	r3, #2
 800a3b4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800a3ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a3be:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800a3c4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a3c8:	2103      	movs	r1, #3
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7f8 fb3e 	bl	8002a4c <HAL_RCC_ClockConfig>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	bf14      	ite	ne
 800a3d6:	2301      	movne	r3, #1
 800a3d8:	2300      	moveq	r3, #0
 800a3da:	b2db      	uxtb	r3, r3
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d001      	beq.n	800a3e4 <_Z18SystemClock_Configv+0xf4>
  {
    Error_Handler();
 800a3e0:	f000 f828 	bl	800a434 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 800a3e4:	2360      	movs	r3, #96	; 0x60
 800a3e6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800a3e8:	23c0      	movs	r3, #192	; 0xc0
 800a3ea:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 800a3ec:	2308      	movs	r3, #8
 800a3ee:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800a3f0:	2302      	movs	r3, #2
 800a3f2:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 4;
 800a3f4:	2304      	movs	r3, #4
 800a3f6:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLI2SQ;
 800a3f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a3fc:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800a3fe:	2300      	movs	r3, #0
 800a400:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 800a402:	2300      	movs	r3, #0
 800a404:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a406:	f107 0308 	add.w	r3, r7, #8
 800a40a:	4618      	mov	r0, r3
 800a40c:	f7f8 fd0c 	bl	8002e28 <HAL_RCCEx_PeriphCLKConfig>
 800a410:	4603      	mov	r3, r0
 800a412:	2b00      	cmp	r3, #0
 800a414:	bf14      	ite	ne
 800a416:	2301      	movne	r3, #1
 800a418:	2300      	moveq	r3, #0
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d001      	beq.n	800a424 <_Z18SystemClock_Configv+0x134>
  {
    Error_Handler();
 800a420:	f000 f808 	bl	800a434 <Error_Handler>
  }
}
 800a424:	bf00      	nop
 800a426:	37a8      	adds	r7, #168	; 0xa8
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}
 800a42c:	40023800 	.word	0x40023800
 800a430:	40007000 	.word	0x40007000

0800a434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a434:	b480      	push	{r7}
 800a436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800a438:	bf00      	nop
 800a43a:	46bd      	mov	sp, r7
 800a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a440:	4770      	bx	lr

0800a442 <_ZNSt6vectorIN3USB5_VBUFESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800a442:	b5b0      	push	{r4, r5, r7, lr}
 800a444:	b082      	sub	sp, #8
 800a446:	af00      	add	r7, sp, #0
 800a448:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681c      	ldr	r4, [r3, #0]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	4618      	mov	r0, r3
 800a456:	f7fe ff0a 	bl	800926e <_ZNSt12_Vector_baseIN3USB5_VBUFESaIS1_EE19_M_get_Tp_allocatorEv>
 800a45a:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800a45c:	461a      	mov	r2, r3
 800a45e:	4629      	mov	r1, r5
 800a460:	4620      	mov	r0, r4
 800a462:	f7fe ff0f 	bl	8009284 <_ZSt8_DestroyIPN3USB5_VBUFES1_EvT_S3_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	4618      	mov	r0, r3
 800a46a:	f000 f811 	bl	800a490 <_ZNSt12_Vector_baseIN3USB5_VBUFESaIS1_EED1Ev>
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	4618      	mov	r0, r3
 800a472:	3708      	adds	r7, #8
 800a474:	46bd      	mov	sp, r7
 800a476:	bdb0      	pop	{r4, r5, r7, pc}

0800a478 <_ZNSt12_Vector_baseIN3USB5_VBUFESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800a478:	b580      	push	{r7, lr}
 800a47a:	b082      	sub	sp, #8
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f000 f81f 	bl	800a4c4 <_ZNSaIN3USB5_VBUFEED1Ev>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	4618      	mov	r0, r3
 800a48a:	3708      	adds	r7, #8
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <_ZNSt12_Vector_baseIN3USB5_VBUFESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800a490:	b580      	push	{r7, lr}
 800a492:	b082      	sub	sp, #8
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6819      	ldr	r1, [r3, #0]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 800a4a0:	461a      	mov	r2, r3
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	1ad3      	subs	r3, r2, r3
 800a4a8:	105b      	asrs	r3, r3, #1
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f7fe ff55 	bl	800935c <_ZNSt12_Vector_baseIN3USB5_VBUFESaIS1_EE13_M_deallocateEPS1_j>
		      - this->_M_impl._M_start); }
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f7ff ffdf 	bl	800a478 <_ZNSt12_Vector_baseIN3USB5_VBUFESaIS1_EE12_Vector_implD1Ev>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3708      	adds	r7, #8
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}

0800a4c4 <_ZNSaIN3USB5_VBUFEED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b082      	sub	sp, #8
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f000 f805 	bl	800a4dc <_ZN9__gnu_cxx13new_allocatorIN3USB5_VBUFEED1Ev>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3708      	adds	r7, #8
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <_ZN9__gnu_cxx13new_allocatorIN3USB5_VBUFEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800a4dc:	b480      	push	{r7}
 800a4de:	b083      	sub	sp, #12
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	370c      	adds	r7, #12
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f0:	4770      	bx	lr
	...

0800a4f4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b082      	sub	sp, #8
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a4fe:	4b0b      	ldr	r3, [pc, #44]	; (800a52c <SD_CheckStatus+0x38>)
 800a500:	2201      	movs	r2, #1
 800a502:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a504:	f7ff fa1a 	bl	800993c <BSP_SD_GetCardState>
 800a508:	4603      	mov	r3, r0
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d107      	bne.n	800a51e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a50e:	4b07      	ldr	r3, [pc, #28]	; (800a52c <SD_CheckStatus+0x38>)
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	b2db      	uxtb	r3, r3
 800a514:	f023 0301 	bic.w	r3, r3, #1
 800a518:	b2da      	uxtb	r2, r3
 800a51a:	4b04      	ldr	r3, [pc, #16]	; (800a52c <SD_CheckStatus+0x38>)
 800a51c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a51e:	4b03      	ldr	r3, [pc, #12]	; (800a52c <SD_CheckStatus+0x38>)
 800a520:	781b      	ldrb	r3, [r3, #0]
 800a522:	b2db      	uxtb	r3, r3
}
 800a524:	4618      	mov	r0, r3
 800a526:	3708      	adds	r7, #8
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}
 800a52c:	20000117 	.word	0x20000117

0800a530 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b082      	sub	sp, #8
 800a534:	af00      	add	r7, sp, #0
 800a536:	4603      	mov	r3, r0
 800a538:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 800a53a:	4b0b      	ldr	r3, [pc, #44]	; (800a568 <SD_initialize+0x38>)
 800a53c:	2201      	movs	r2, #1
 800a53e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a540:	f7ff f99a 	bl	8009878 <BSP_SD_Init>
 800a544:	4603      	mov	r3, r0
 800a546:	2b00      	cmp	r3, #0
 800a548:	d107      	bne.n	800a55a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800a54a:	79fb      	ldrb	r3, [r7, #7]
 800a54c:	4618      	mov	r0, r3
 800a54e:	f7ff ffd1 	bl	800a4f4 <SD_CheckStatus>
 800a552:	4603      	mov	r3, r0
 800a554:	461a      	mov	r2, r3
 800a556:	4b04      	ldr	r3, [pc, #16]	; (800a568 <SD_initialize+0x38>)
 800a558:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800a55a:	4b03      	ldr	r3, [pc, #12]	; (800a568 <SD_initialize+0x38>)
 800a55c:	781b      	ldrb	r3, [r3, #0]
 800a55e:	b2db      	uxtb	r3, r3
}
 800a560:	4618      	mov	r0, r3
 800a562:	3708      	adds	r7, #8
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}
 800a568:	20000117 	.word	0x20000117

0800a56c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b082      	sub	sp, #8
 800a570:	af00      	add	r7, sp, #0
 800a572:	4603      	mov	r3, r0
 800a574:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a576:	79fb      	ldrb	r3, [r7, #7]
 800a578:	4618      	mov	r0, r3
 800a57a:	f7ff ffbb 	bl	800a4f4 <SD_CheckStatus>
 800a57e:	4603      	mov	r3, r0
}
 800a580:	4618      	mov	r0, r3
 800a582:	3708      	adds	r7, #8
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}

0800a588 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b086      	sub	sp, #24
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	60b9      	str	r1, [r7, #8]
 800a590:	607a      	str	r2, [r7, #4]
 800a592:	603b      	str	r3, [r7, #0]
 800a594:	4603      	mov	r3, r0
 800a596:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a598:	2301      	movs	r3, #1
 800a59a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800a59c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a5a0:	683a      	ldr	r2, [r7, #0]
 800a5a2:	6879      	ldr	r1, [r7, #4]
 800a5a4:	68b8      	ldr	r0, [r7, #8]
 800a5a6:	f7ff f98d 	bl	80098c4 <BSP_SD_ReadBlocks>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d107      	bne.n	800a5c0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800a5b0:	bf00      	nop
 800a5b2:	f7ff f9c3 	bl	800993c <BSP_SD_GetCardState>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d1fa      	bne.n	800a5b2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a5c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3718      	adds	r7, #24
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}

0800a5ca <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a5ca:	b580      	push	{r7, lr}
 800a5cc:	b086      	sub	sp, #24
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	60b9      	str	r1, [r7, #8]
 800a5d2:	607a      	str	r2, [r7, #4]
 800a5d4:	603b      	str	r3, [r7, #0]
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a5da:	2301      	movs	r3, #1
 800a5dc:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800a5de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a5e2:	683a      	ldr	r2, [r7, #0]
 800a5e4:	6879      	ldr	r1, [r7, #4]
 800a5e6:	68b8      	ldr	r0, [r7, #8]
 800a5e8:	f7ff f98a 	bl	8009900 <BSP_SD_WriteBlocks>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d107      	bne.n	800a602 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800a5f2:	bf00      	nop
 800a5f4:	f7ff f9a2 	bl	800993c <BSP_SD_GetCardState>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d1fa      	bne.n	800a5f4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800a5fe:	2300      	movs	r3, #0
 800a600:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a602:	7dfb      	ldrb	r3, [r7, #23]
}
 800a604:	4618      	mov	r0, r3
 800a606:	3718      	adds	r7, #24
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b08c      	sub	sp, #48	; 0x30
 800a610:	af00      	add	r7, sp, #0
 800a612:	4603      	mov	r3, r0
 800a614:	603a      	str	r2, [r7, #0]
 800a616:	71fb      	strb	r3, [r7, #7]
 800a618:	460b      	mov	r3, r1
 800a61a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a61c:	2301      	movs	r3, #1
 800a61e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a622:	4b25      	ldr	r3, [pc, #148]	; (800a6b8 <SD_ioctl+0xac>)
 800a624:	781b      	ldrb	r3, [r3, #0]
 800a626:	b2db      	uxtb	r3, r3
 800a628:	f003 0301 	and.w	r3, r3, #1
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d001      	beq.n	800a634 <SD_ioctl+0x28>
 800a630:	2303      	movs	r3, #3
 800a632:	e03c      	b.n	800a6ae <SD_ioctl+0xa2>

  switch (cmd)
 800a634:	79bb      	ldrb	r3, [r7, #6]
 800a636:	2b03      	cmp	r3, #3
 800a638:	d834      	bhi.n	800a6a4 <SD_ioctl+0x98>
 800a63a:	a201      	add	r2, pc, #4	; (adr r2, 800a640 <SD_ioctl+0x34>)
 800a63c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a640:	0800a651 	.word	0x0800a651
 800a644:	0800a659 	.word	0x0800a659
 800a648:	0800a671 	.word	0x0800a671
 800a64c:	0800a68b 	.word	0x0800a68b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a650:	2300      	movs	r3, #0
 800a652:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a656:	e028      	b.n	800a6aa <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a658:	f107 030c 	add.w	r3, r7, #12
 800a65c:	4618      	mov	r0, r3
 800a65e:	f7ff f97d 	bl	800995c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a668:	2300      	movs	r3, #0
 800a66a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a66e:	e01c      	b.n	800a6aa <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a670:	f107 030c 	add.w	r3, r7, #12
 800a674:	4618      	mov	r0, r3
 800a676:	f7ff f971 	bl	800995c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a67c:	b29a      	uxth	r2, r3
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a682:	2300      	movs	r3, #0
 800a684:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a688:	e00f      	b.n	800a6aa <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a68a:	f107 030c 	add.w	r3, r7, #12
 800a68e:	4618      	mov	r0, r3
 800a690:	f7ff f964 	bl	800995c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a696:	0a5a      	lsrs	r2, r3, #9
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a69c:	2300      	movs	r3, #0
 800a69e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a6a2:	e002      	b.n	800a6aa <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a6a4:	2304      	movs	r3, #4
 800a6a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a6aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3730      	adds	r7, #48	; 0x30
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}
 800a6b6:	bf00      	nop
 800a6b8:	20000117 	.word	0x20000117

0800a6bc <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 800a6c0:	4b0c      	ldr	r3, [pc, #48]	; (800a6f4 <MX_SDIO_SD_Init+0x38>)
 800a6c2:	4a0d      	ldr	r2, [pc, #52]	; (800a6f8 <MX_SDIO_SD_Init+0x3c>)
 800a6c4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800a6c6:	4b0b      	ldr	r3, [pc, #44]	; (800a6f4 <MX_SDIO_SD_Init+0x38>)
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800a6cc:	4b09      	ldr	r3, [pc, #36]	; (800a6f4 <MX_SDIO_SD_Init+0x38>)
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a6d2:	4b08      	ldr	r3, [pc, #32]	; (800a6f4 <MX_SDIO_SD_Init+0x38>)
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800a6d8:	4b06      	ldr	r3, [pc, #24]	; (800a6f4 <MX_SDIO_SD_Init+0x38>)
 800a6da:	2200      	movs	r2, #0
 800a6dc:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a6de:	4b05      	ldr	r3, [pc, #20]	; (800a6f4 <MX_SDIO_SD_Init+0x38>)
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800a6e4:	4b03      	ldr	r3, [pc, #12]	; (800a6f4 <MX_SDIO_SD_Init+0x38>)
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	619a      	str	r2, [r3, #24]

}
 800a6ea:	bf00      	nop
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr
 800a6f4:	20000918 	.word	0x20000918
 800a6f8:	40012c00 	.word	0x40012c00

0800a6fc <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b08a      	sub	sp, #40	; 0x28
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a704:	f107 0314 	add.w	r3, r7, #20
 800a708:	2200      	movs	r2, #0
 800a70a:	601a      	str	r2, [r3, #0]
 800a70c:	605a      	str	r2, [r3, #4]
 800a70e:	609a      	str	r2, [r3, #8]
 800a710:	60da      	str	r2, [r3, #12]
 800a712:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	4a28      	ldr	r2, [pc, #160]	; (800a7bc <HAL_SD_MspInit+0xc0>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d14a      	bne.n	800a7b4 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800a71e:	2300      	movs	r3, #0
 800a720:	613b      	str	r3, [r7, #16]
 800a722:	4b27      	ldr	r3, [pc, #156]	; (800a7c0 <HAL_SD_MspInit+0xc4>)
 800a724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a726:	4a26      	ldr	r2, [pc, #152]	; (800a7c0 <HAL_SD_MspInit+0xc4>)
 800a728:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a72c:	6453      	str	r3, [r2, #68]	; 0x44
 800a72e:	4b24      	ldr	r3, [pc, #144]	; (800a7c0 <HAL_SD_MspInit+0xc4>)
 800a730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a732:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a736:	613b      	str	r3, [r7, #16]
 800a738:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a73a:	2300      	movs	r3, #0
 800a73c:	60fb      	str	r3, [r7, #12]
 800a73e:	4b20      	ldr	r3, [pc, #128]	; (800a7c0 <HAL_SD_MspInit+0xc4>)
 800a740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a742:	4a1f      	ldr	r2, [pc, #124]	; (800a7c0 <HAL_SD_MspInit+0xc4>)
 800a744:	f043 0304 	orr.w	r3, r3, #4
 800a748:	6313      	str	r3, [r2, #48]	; 0x30
 800a74a:	4b1d      	ldr	r3, [pc, #116]	; (800a7c0 <HAL_SD_MspInit+0xc4>)
 800a74c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a74e:	f003 0304 	and.w	r3, r3, #4
 800a752:	60fb      	str	r3, [r7, #12]
 800a754:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a756:	2300      	movs	r3, #0
 800a758:	60bb      	str	r3, [r7, #8]
 800a75a:	4b19      	ldr	r3, [pc, #100]	; (800a7c0 <HAL_SD_MspInit+0xc4>)
 800a75c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a75e:	4a18      	ldr	r2, [pc, #96]	; (800a7c0 <HAL_SD_MspInit+0xc4>)
 800a760:	f043 0308 	orr.w	r3, r3, #8
 800a764:	6313      	str	r3, [r2, #48]	; 0x30
 800a766:	4b16      	ldr	r3, [pc, #88]	; (800a7c0 <HAL_SD_MspInit+0xc4>)
 800a768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a76a:	f003 0308 	and.w	r3, r3, #8
 800a76e:	60bb      	str	r3, [r7, #8]
 800a770:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800a772:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800a776:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a778:	2302      	movs	r3, #2
 800a77a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a77c:	2300      	movs	r3, #0
 800a77e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a780:	2303      	movs	r3, #3
 800a782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800a784:	230c      	movs	r3, #12
 800a786:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a788:	f107 0314 	add.w	r3, r7, #20
 800a78c:	4619      	mov	r1, r3
 800a78e:	480d      	ldr	r0, [pc, #52]	; (800a7c4 <HAL_SD_MspInit+0xc8>)
 800a790:	f7f6 fc38 	bl	8001004 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800a794:	2304      	movs	r3, #4
 800a796:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a798:	2302      	movs	r3, #2
 800a79a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a79c:	2300      	movs	r3, #0
 800a79e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a7a0:	2303      	movs	r3, #3
 800a7a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800a7a4:	230c      	movs	r3, #12
 800a7a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a7a8:	f107 0314 	add.w	r3, r7, #20
 800a7ac:	4619      	mov	r1, r3
 800a7ae:	4806      	ldr	r0, [pc, #24]	; (800a7c8 <HAL_SD_MspInit+0xcc>)
 800a7b0:	f7f6 fc28 	bl	8001004 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 800a7b4:	bf00      	nop
 800a7b6:	3728      	adds	r7, #40	; 0x28
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}
 800a7bc:	40012c00 	.word	0x40012c00
 800a7c0:	40023800 	.word	0x40023800
 800a7c4:	40020800 	.word	0x40020800
 800a7c8:	40020c00 	.word	0x40020c00

0800a7cc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 800a7d0:	4b17      	ldr	r3, [pc, #92]	; (800a830 <MX_SPI2_Init+0x64>)
 800a7d2:	4a18      	ldr	r2, [pc, #96]	; (800a834 <MX_SPI2_Init+0x68>)
 800a7d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800a7d6:	4b16      	ldr	r3, [pc, #88]	; (800a830 <MX_SPI2_Init+0x64>)
 800a7d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a7dc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800a7de:	4b14      	ldr	r3, [pc, #80]	; (800a830 <MX_SPI2_Init+0x64>)
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800a7e4:	4b12      	ldr	r3, [pc, #72]	; (800a830 <MX_SPI2_Init+0x64>)
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a7ea:	4b11      	ldr	r3, [pc, #68]	; (800a830 <MX_SPI2_Init+0x64>)
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a7f0:	4b0f      	ldr	r3, [pc, #60]	; (800a830 <MX_SPI2_Init+0x64>)
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800a7f6:	4b0e      	ldr	r3, [pc, #56]	; (800a830 <MX_SPI2_Init+0x64>)
 800a7f8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a7fc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a7fe:	4b0c      	ldr	r3, [pc, #48]	; (800a830 <MX_SPI2_Init+0x64>)
 800a800:	2200      	movs	r2, #0
 800a802:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a804:	4b0a      	ldr	r3, [pc, #40]	; (800a830 <MX_SPI2_Init+0x64>)
 800a806:	2200      	movs	r2, #0
 800a808:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800a80a:	4b09      	ldr	r3, [pc, #36]	; (800a830 <MX_SPI2_Init+0x64>)
 800a80c:	2200      	movs	r2, #0
 800a80e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a810:	4b07      	ldr	r3, [pc, #28]	; (800a830 <MX_SPI2_Init+0x64>)
 800a812:	2200      	movs	r2, #0
 800a814:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800a816:	4b06      	ldr	r3, [pc, #24]	; (800a830 <MX_SPI2_Init+0x64>)
 800a818:	220a      	movs	r2, #10
 800a81a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800a81c:	4804      	ldr	r0, [pc, #16]	; (800a830 <MX_SPI2_Init+0x64>)
 800a81e:	f7fa f94a 	bl	8004ab6 <HAL_SPI_Init>
 800a822:	4603      	mov	r3, r0
 800a824:	2b00      	cmp	r3, #0
 800a826:	d001      	beq.n	800a82c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800a828:	f7ff fe04 	bl	800a434 <Error_Handler>
  }

}
 800a82c:	bf00      	nop
 800a82e:	bd80      	pop	{r7, pc}
 800a830:	2000099c 	.word	0x2000099c
 800a834:	40003800 	.word	0x40003800

0800a838 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b08a      	sub	sp, #40	; 0x28
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a840:	f107 0314 	add.w	r3, r7, #20
 800a844:	2200      	movs	r2, #0
 800a846:	601a      	str	r2, [r3, #0]
 800a848:	605a      	str	r2, [r3, #4]
 800a84a:	609a      	str	r2, [r3, #8]
 800a84c:	60da      	str	r2, [r3, #12]
 800a84e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4a19      	ldr	r2, [pc, #100]	; (800a8bc <HAL_SPI_MspInit+0x84>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d12c      	bne.n	800a8b4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800a85a:	2300      	movs	r3, #0
 800a85c:	613b      	str	r3, [r7, #16]
 800a85e:	4b18      	ldr	r3, [pc, #96]	; (800a8c0 <HAL_SPI_MspInit+0x88>)
 800a860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a862:	4a17      	ldr	r2, [pc, #92]	; (800a8c0 <HAL_SPI_MspInit+0x88>)
 800a864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a868:	6413      	str	r3, [r2, #64]	; 0x40
 800a86a:	4b15      	ldr	r3, [pc, #84]	; (800a8c0 <HAL_SPI_MspInit+0x88>)
 800a86c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a86e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a872:	613b      	str	r3, [r7, #16]
 800a874:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a876:	2300      	movs	r3, #0
 800a878:	60fb      	str	r3, [r7, #12]
 800a87a:	4b11      	ldr	r3, [pc, #68]	; (800a8c0 <HAL_SPI_MspInit+0x88>)
 800a87c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a87e:	4a10      	ldr	r2, [pc, #64]	; (800a8c0 <HAL_SPI_MspInit+0x88>)
 800a880:	f043 0302 	orr.w	r3, r3, #2
 800a884:	6313      	str	r3, [r2, #48]	; 0x30
 800a886:	4b0e      	ldr	r3, [pc, #56]	; (800a8c0 <HAL_SPI_MspInit+0x88>)
 800a888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a88a:	f003 0302 	and.w	r3, r3, #2
 800a88e:	60fb      	str	r3, [r7, #12]
 800a890:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800a892:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800a896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a898:	2302      	movs	r3, #2
 800a89a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a89c:	2300      	movs	r3, #0
 800a89e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a8a0:	2303      	movs	r3, #3
 800a8a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800a8a4:	2305      	movs	r3, #5
 800a8a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a8a8:	f107 0314 	add.w	r3, r7, #20
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	4805      	ldr	r0, [pc, #20]	; (800a8c4 <HAL_SPI_MspInit+0x8c>)
 800a8b0:	f7f6 fba8 	bl	8001004 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800a8b4:	bf00      	nop
 800a8b6:	3728      	adds	r7, #40	; 0x28
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}
 800a8bc:	40003800 	.word	0x40003800
 800a8c0:	40023800 	.word	0x40023800
 800a8c4:	40020400 	.word	0x40020400

0800a8c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b083      	sub	sp, #12
 800a8cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	607b      	str	r3, [r7, #4]
 800a8d2:	4b10      	ldr	r3, [pc, #64]	; (800a914 <HAL_MspInit+0x4c>)
 800a8d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8d6:	4a0f      	ldr	r2, [pc, #60]	; (800a914 <HAL_MspInit+0x4c>)
 800a8d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a8dc:	6453      	str	r3, [r2, #68]	; 0x44
 800a8de:	4b0d      	ldr	r3, [pc, #52]	; (800a914 <HAL_MspInit+0x4c>)
 800a8e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a8e6:	607b      	str	r3, [r7, #4]
 800a8e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	603b      	str	r3, [r7, #0]
 800a8ee:	4b09      	ldr	r3, [pc, #36]	; (800a914 <HAL_MspInit+0x4c>)
 800a8f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8f2:	4a08      	ldr	r2, [pc, #32]	; (800a914 <HAL_MspInit+0x4c>)
 800a8f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a8f8:	6413      	str	r3, [r2, #64]	; 0x40
 800a8fa:	4b06      	ldr	r3, [pc, #24]	; (800a914 <HAL_MspInit+0x4c>)
 800a8fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a902:	603b      	str	r3, [r7, #0]
 800a904:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a906:	bf00      	nop
 800a908:	370c      	adds	r7, #12
 800a90a:	46bd      	mov	sp, r7
 800a90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a910:	4770      	bx	lr
 800a912:	bf00      	nop
 800a914:	40023800 	.word	0x40023800

0800a918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a918:	b480      	push	{r7}
 800a91a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a91c:	bf00      	nop
 800a91e:	46bd      	mov	sp, r7
 800a920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a924:	4770      	bx	lr

0800a926 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a926:	b480      	push	{r7}
 800a928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a92a:	e7fe      	b.n	800a92a <HardFault_Handler+0x4>

0800a92c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a92c:	b480      	push	{r7}
 800a92e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a930:	e7fe      	b.n	800a930 <MemManage_Handler+0x4>

0800a932 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a932:	b480      	push	{r7}
 800a934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a936:	e7fe      	b.n	800a936 <BusFault_Handler+0x4>

0800a938 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a938:	b480      	push	{r7}
 800a93a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a93c:	e7fe      	b.n	800a93c <UsageFault_Handler+0x4>

0800a93e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a93e:	b480      	push	{r7}
 800a940:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a942:	bf00      	nop
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	4770      	bx	lr

0800a94c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a94c:	b480      	push	{r7}
 800a94e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a950:	bf00      	nop
 800a952:	46bd      	mov	sp, r7
 800a954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a958:	4770      	bx	lr

0800a95a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a95a:	b480      	push	{r7}
 800a95c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a95e:	bf00      	nop
 800a960:	46bd      	mov	sp, r7
 800a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a966:	4770      	bx	lr

0800a968 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a96c:	f7f5 fe2e 	bl	80005cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a970:	bf00      	nop
 800a972:	bd80      	pop	{r7, pc}

0800a974 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800a978:	4802      	ldr	r0, [pc, #8]	; (800a984 <OTG_FS_IRQHandler+0x10>)
 800a97a:	f7f6 ffdc 	bl	8001936 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800a97e:	bf00      	nop
 800a980:	bd80      	pop	{r7, pc}
 800a982:	bf00      	nop
 800a984:	200016dc 	.word	0x200016dc

0800a988 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800a988:	b480      	push	{r7}
 800a98a:	af00      	add	r7, sp, #0
	return 1;
 800a98c:	2301      	movs	r3, #1
}
 800a98e:	4618      	mov	r0, r3
 800a990:	46bd      	mov	sp, r7
 800a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a996:	4770      	bx	lr

0800a998 <_kill>:

int _kill(int pid, int sig)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b082      	sub	sp, #8
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
 800a9a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800a9a2:	f000 ffed 	bl	800b980 <__errno>
 800a9a6:	4602      	mov	r2, r0
 800a9a8:	2316      	movs	r3, #22
 800a9aa:	6013      	str	r3, [r2, #0]
	return -1;
 800a9ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3708      	adds	r7, #8
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}

0800a9b8 <_exit>:

void _exit (int status)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b082      	sub	sp, #8
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800a9c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f7ff ffe7 	bl	800a998 <_kill>
	while (1) {}		/* Make sure we hang here */
 800a9ca:	e7fe      	b.n	800a9ca <_exit+0x12>

0800a9cc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b084      	sub	sp, #16
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800a9d4:	4b11      	ldr	r3, [pc, #68]	; (800aa1c <_sbrk+0x50>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d102      	bne.n	800a9e2 <_sbrk+0x16>
		heap_end = &end;
 800a9dc:	4b0f      	ldr	r3, [pc, #60]	; (800aa1c <_sbrk+0x50>)
 800a9de:	4a10      	ldr	r2, [pc, #64]	; (800aa20 <_sbrk+0x54>)
 800a9e0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800a9e2:	4b0e      	ldr	r3, [pc, #56]	; (800aa1c <_sbrk+0x50>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800a9e8:	4b0c      	ldr	r3, [pc, #48]	; (800aa1c <_sbrk+0x50>)
 800a9ea:	681a      	ldr	r2, [r3, #0]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	4413      	add	r3, r2
 800a9f0:	466a      	mov	r2, sp
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d907      	bls.n	800aa06 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800a9f6:	f000 ffc3 	bl	800b980 <__errno>
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	230c      	movs	r3, #12
 800a9fe:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800aa00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa04:	e006      	b.n	800aa14 <_sbrk+0x48>
	}

	heap_end += incr;
 800aa06:	4b05      	ldr	r3, [pc, #20]	; (800aa1c <_sbrk+0x50>)
 800aa08:	681a      	ldr	r2, [r3, #0]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	4413      	add	r3, r2
 800aa0e:	4a03      	ldr	r2, [pc, #12]	; (800aa1c <_sbrk+0x50>)
 800aa10:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800aa12:	68fb      	ldr	r3, [r7, #12]
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3710      	adds	r7, #16
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}
 800aa1c:	20000230 	.word	0x20000230
 800aa20:	20001ce8 	.word	0x20001ce8

0800aa24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800aa24:	b480      	push	{r7}
 800aa26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800aa28:	4b16      	ldr	r3, [pc, #88]	; (800aa84 <SystemInit+0x60>)
 800aa2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa2e:	4a15      	ldr	r2, [pc, #84]	; (800aa84 <SystemInit+0x60>)
 800aa30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800aa34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800aa38:	4b13      	ldr	r3, [pc, #76]	; (800aa88 <SystemInit+0x64>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	4a12      	ldr	r2, [pc, #72]	; (800aa88 <SystemInit+0x64>)
 800aa3e:	f043 0301 	orr.w	r3, r3, #1
 800aa42:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800aa44:	4b10      	ldr	r3, [pc, #64]	; (800aa88 <SystemInit+0x64>)
 800aa46:	2200      	movs	r2, #0
 800aa48:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800aa4a:	4b0f      	ldr	r3, [pc, #60]	; (800aa88 <SystemInit+0x64>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	4a0e      	ldr	r2, [pc, #56]	; (800aa88 <SystemInit+0x64>)
 800aa50:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800aa54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa58:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800aa5a:	4b0b      	ldr	r3, [pc, #44]	; (800aa88 <SystemInit+0x64>)
 800aa5c:	4a0b      	ldr	r2, [pc, #44]	; (800aa8c <SystemInit+0x68>)
 800aa5e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800aa60:	4b09      	ldr	r3, [pc, #36]	; (800aa88 <SystemInit+0x64>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	4a08      	ldr	r2, [pc, #32]	; (800aa88 <SystemInit+0x64>)
 800aa66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aa6a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800aa6c:	4b06      	ldr	r3, [pc, #24]	; (800aa88 <SystemInit+0x64>)
 800aa6e:	2200      	movs	r2, #0
 800aa70:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800aa72:	4b04      	ldr	r3, [pc, #16]	; (800aa84 <SystemInit+0x60>)
 800aa74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800aa78:	609a      	str	r2, [r3, #8]
#endif
}
 800aa7a:	bf00      	nop
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa82:	4770      	bx	lr
 800aa84:	e000ed00 	.word	0xe000ed00
 800aa88:	40023800 	.word	0x40023800
 800aa8c:	24003010 	.word	0x24003010

0800aa90 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800aa94:	4b11      	ldr	r3, [pc, #68]	; (800aadc <MX_USART3_UART_Init+0x4c>)
 800aa96:	4a12      	ldr	r2, [pc, #72]	; (800aae0 <MX_USART3_UART_Init+0x50>)
 800aa98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800aa9a:	4b10      	ldr	r3, [pc, #64]	; (800aadc <MX_USART3_UART_Init+0x4c>)
 800aa9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800aaa0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800aaa2:	4b0e      	ldr	r3, [pc, #56]	; (800aadc <MX_USART3_UART_Init+0x4c>)
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800aaa8:	4b0c      	ldr	r3, [pc, #48]	; (800aadc <MX_USART3_UART_Init+0x4c>)
 800aaaa:	2200      	movs	r2, #0
 800aaac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800aaae:	4b0b      	ldr	r3, [pc, #44]	; (800aadc <MX_USART3_UART_Init+0x4c>)
 800aab0:	2200      	movs	r2, #0
 800aab2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800aab4:	4b09      	ldr	r3, [pc, #36]	; (800aadc <MX_USART3_UART_Init+0x4c>)
 800aab6:	220c      	movs	r2, #12
 800aab8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800aaba:	4b08      	ldr	r3, [pc, #32]	; (800aadc <MX_USART3_UART_Init+0x4c>)
 800aabc:	2200      	movs	r2, #0
 800aabe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800aac0:	4b06      	ldr	r3, [pc, #24]	; (800aadc <MX_USART3_UART_Init+0x4c>)
 800aac2:	2200      	movs	r2, #0
 800aac4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800aac6:	4805      	ldr	r0, [pc, #20]	; (800aadc <MX_USART3_UART_Init+0x4c>)
 800aac8:	f7fa f89d 	bl	8004c06 <HAL_UART_Init>
 800aacc:	4603      	mov	r3, r0
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d001      	beq.n	800aad6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800aad2:	f7ff fcaf 	bl	800a434 <Error_Handler>
  }

}
 800aad6:	bf00      	nop
 800aad8:	bd80      	pop	{r7, pc}
 800aada:	bf00      	nop
 800aadc:	200009f4 	.word	0x200009f4
 800aae0:	40004800 	.word	0x40004800

0800aae4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b08a      	sub	sp, #40	; 0x28
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aaec:	f107 0314 	add.w	r3, r7, #20
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	601a      	str	r2, [r3, #0]
 800aaf4:	605a      	str	r2, [r3, #4]
 800aaf6:	609a      	str	r2, [r3, #8]
 800aaf8:	60da      	str	r2, [r3, #12]
 800aafa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	4a19      	ldr	r2, [pc, #100]	; (800ab68 <HAL_UART_MspInit+0x84>)
 800ab02:	4293      	cmp	r3, r2
 800ab04:	d12c      	bne.n	800ab60 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800ab06:	2300      	movs	r3, #0
 800ab08:	613b      	str	r3, [r7, #16]
 800ab0a:	4b18      	ldr	r3, [pc, #96]	; (800ab6c <HAL_UART_MspInit+0x88>)
 800ab0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab0e:	4a17      	ldr	r2, [pc, #92]	; (800ab6c <HAL_UART_MspInit+0x88>)
 800ab10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ab14:	6413      	str	r3, [r2, #64]	; 0x40
 800ab16:	4b15      	ldr	r3, [pc, #84]	; (800ab6c <HAL_UART_MspInit+0x88>)
 800ab18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ab1e:	613b      	str	r3, [r7, #16]
 800ab20:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ab22:	2300      	movs	r3, #0
 800ab24:	60fb      	str	r3, [r7, #12]
 800ab26:	4b11      	ldr	r3, [pc, #68]	; (800ab6c <HAL_UART_MspInit+0x88>)
 800ab28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab2a:	4a10      	ldr	r2, [pc, #64]	; (800ab6c <HAL_UART_MspInit+0x88>)
 800ab2c:	f043 0302 	orr.w	r3, r3, #2
 800ab30:	6313      	str	r3, [r2, #48]	; 0x30
 800ab32:	4b0e      	ldr	r3, [pc, #56]	; (800ab6c <HAL_UART_MspInit+0x88>)
 800ab34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab36:	f003 0302 	and.w	r3, r3, #2
 800ab3a:	60fb      	str	r3, [r7, #12]
 800ab3c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800ab3e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800ab42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab44:	2302      	movs	r3, #2
 800ab46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ab4c:	2303      	movs	r3, #3
 800ab4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800ab50:	2307      	movs	r3, #7
 800ab52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ab54:	f107 0314 	add.w	r3, r7, #20
 800ab58:	4619      	mov	r1, r3
 800ab5a:	4805      	ldr	r0, [pc, #20]	; (800ab70 <HAL_UART_MspInit+0x8c>)
 800ab5c:	f7f6 fa52 	bl	8001004 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800ab60:	bf00      	nop
 800ab62:	3728      	adds	r7, #40	; 0x28
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}
 800ab68:	40004800 	.word	0x40004800
 800ab6c:	40023800 	.word	0x40023800
 800ab70:	40020400 	.word	0x40020400

0800ab74 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ab78:	2200      	movs	r2, #0
 800ab7a:	4912      	ldr	r1, [pc, #72]	; (800abc4 <MX_USB_DEVICE_Init+0x50>)
 800ab7c:	4812      	ldr	r0, [pc, #72]	; (800abc8 <MX_USB_DEVICE_Init+0x54>)
 800ab7e:	f7fc fea9 	bl	80078d4 <USBD_Init>
 800ab82:	4603      	mov	r3, r0
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d001      	beq.n	800ab8c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ab88:	f7ff fc54 	bl	800a434 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ab8c:	490f      	ldr	r1, [pc, #60]	; (800abcc <MX_USB_DEVICE_Init+0x58>)
 800ab8e:	480e      	ldr	r0, [pc, #56]	; (800abc8 <MX_USB_DEVICE_Init+0x54>)
 800ab90:	f7fc fecb 	bl	800792a <USBD_RegisterClass>
 800ab94:	4603      	mov	r3, r0
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d001      	beq.n	800ab9e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ab9a:	f7ff fc4b 	bl	800a434 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ab9e:	490c      	ldr	r1, [pc, #48]	; (800abd0 <MX_USB_DEVICE_Init+0x5c>)
 800aba0:	4809      	ldr	r0, [pc, #36]	; (800abc8 <MX_USB_DEVICE_Init+0x54>)
 800aba2:	f7fc fdf9 	bl	8007798 <USBD_CDC_RegisterInterface>
 800aba6:	4603      	mov	r3, r0
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d001      	beq.n	800abb0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800abac:	f7ff fc42 	bl	800a434 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800abb0:	4805      	ldr	r0, [pc, #20]	; (800abc8 <MX_USB_DEVICE_Init+0x54>)
 800abb2:	f7fc fed4 	bl	800795e <USBD_Start>
 800abb6:	4603      	mov	r3, r0
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d001      	beq.n	800abc0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800abbc:	f7ff fc3a 	bl	800a434 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800abc0:	bf00      	nop
 800abc2:	bd80      	pop	{r7, pc}
 800abc4:	20000134 	.word	0x20000134
 800abc8:	20000a34 	.word	0x20000a34
 800abcc:	20000014 	.word	0x20000014
 800abd0:	20000124 	.word	0x20000124

0800abd4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	CDC_InitBuffer();
 800abd8:	f000 f9b2 	bl	800af40 <CDC_InitBuffer>
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800abdc:	2200      	movs	r2, #0
 800abde:	4905      	ldr	r1, [pc, #20]	; (800abf4 <CDC_Init_FS+0x20>)
 800abe0:	4805      	ldr	r0, [pc, #20]	; (800abf8 <CDC_Init_FS+0x24>)
 800abe2:	f7fc fdf0 	bl	80077c6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800abe6:	4905      	ldr	r1, [pc, #20]	; (800abfc <CDC_Init_FS+0x28>)
 800abe8:	4803      	ldr	r0, [pc, #12]	; (800abf8 <CDC_Init_FS+0x24>)
 800abea:	f7fc fe06 	bl	80077fa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800abee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	bd80      	pop	{r7, pc}
 800abf4:	200015dc 	.word	0x200015dc
 800abf8:	20000a34 	.word	0x20000a34
 800abfc:	200014dc 	.word	0x200014dc

0800ac00 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ac00:	b480      	push	{r7}
 800ac02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ac04:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0e:	4770      	bx	lr

0800ac10 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ac10:	b480      	push	{r7}
 800ac12:	b083      	sub	sp, #12
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	4603      	mov	r3, r0
 800ac18:	6039      	str	r1, [r7, #0]
 800ac1a:	71fb      	strb	r3, [r7, #7]
 800ac1c:	4613      	mov	r3, r2
 800ac1e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ac20:	79fb      	ldrb	r3, [r7, #7]
 800ac22:	2b23      	cmp	r3, #35	; 0x23
 800ac24:	f200 8098 	bhi.w	800ad58 <CDC_Control_FS+0x148>
 800ac28:	a201      	add	r2, pc, #4	; (adr r2, 800ac30 <CDC_Control_FS+0x20>)
 800ac2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac2e:	bf00      	nop
 800ac30:	0800ad59 	.word	0x0800ad59
 800ac34:	0800ad59 	.word	0x0800ad59
 800ac38:	0800ad59 	.word	0x0800ad59
 800ac3c:	0800ad59 	.word	0x0800ad59
 800ac40:	0800ad59 	.word	0x0800ad59
 800ac44:	0800ad59 	.word	0x0800ad59
 800ac48:	0800ad59 	.word	0x0800ad59
 800ac4c:	0800ad59 	.word	0x0800ad59
 800ac50:	0800ad59 	.word	0x0800ad59
 800ac54:	0800ad59 	.word	0x0800ad59
 800ac58:	0800ad59 	.word	0x0800ad59
 800ac5c:	0800ad59 	.word	0x0800ad59
 800ac60:	0800ad59 	.word	0x0800ad59
 800ac64:	0800ad59 	.word	0x0800ad59
 800ac68:	0800ad59 	.word	0x0800ad59
 800ac6c:	0800ad59 	.word	0x0800ad59
 800ac70:	0800ad59 	.word	0x0800ad59
 800ac74:	0800ad59 	.word	0x0800ad59
 800ac78:	0800ad59 	.word	0x0800ad59
 800ac7c:	0800ad59 	.word	0x0800ad59
 800ac80:	0800ad59 	.word	0x0800ad59
 800ac84:	0800ad59 	.word	0x0800ad59
 800ac88:	0800ad59 	.word	0x0800ad59
 800ac8c:	0800ad59 	.word	0x0800ad59
 800ac90:	0800ad59 	.word	0x0800ad59
 800ac94:	0800ad59 	.word	0x0800ad59
 800ac98:	0800ad59 	.word	0x0800ad59
 800ac9c:	0800ad59 	.word	0x0800ad59
 800aca0:	0800ad59 	.word	0x0800ad59
 800aca4:	0800ad59 	.word	0x0800ad59
 800aca8:	0800ad59 	.word	0x0800ad59
 800acac:	0800ad59 	.word	0x0800ad59
 800acb0:	0800acc1 	.word	0x0800acc1
 800acb4:	0800ad05 	.word	0x0800ad05
 800acb8:	0800ad59 	.word	0x0800ad59
 800acbc:	0800ad59 	.word	0x0800ad59
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24));
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	781b      	ldrb	r3, [r3, #0]
 800acc4:	461a      	mov	r2, r3
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	3301      	adds	r3, #1
 800acca:	781b      	ldrb	r3, [r3, #0]
 800accc:	021b      	lsls	r3, r3, #8
 800acce:	431a      	orrs	r2, r3
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	3302      	adds	r3, #2
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	041b      	lsls	r3, r3, #16
 800acd8:	431a      	orrs	r2, r3
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	3303      	adds	r3, #3
 800acde:	781b      	ldrb	r3, [r3, #0]
 800ace0:	061b      	lsls	r3, r3, #24
 800ace2:	4313      	orrs	r3, r2
 800ace4:	461a      	mov	r2, r3
 800ace6:	4b20      	ldr	r3, [pc, #128]	; (800ad68 <CDC_Control_FS+0x158>)
 800ace8:	601a      	str	r2, [r3, #0]
		LineCoding.format     = pbuf[4];
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	791a      	ldrb	r2, [r3, #4]
 800acee:	4b1e      	ldr	r3, [pc, #120]	; (800ad68 <CDC_Control_FS+0x158>)
 800acf0:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	795a      	ldrb	r2, [r3, #5]
 800acf6:	4b1c      	ldr	r3, [pc, #112]	; (800ad68 <CDC_Control_FS+0x158>)
 800acf8:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype   = pbuf[6];
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	799a      	ldrb	r2, [r3, #6]
 800acfe:	4b1a      	ldr	r3, [pc, #104]	; (800ad68 <CDC_Control_FS+0x158>)
 800ad00:	719a      	strb	r2, [r3, #6]
    break;
 800ad02:	e02a      	b.n	800ad5a <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800ad04:	4b18      	ldr	r3, [pc, #96]	; (800ad68 <CDC_Control_FS+0x158>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	b2da      	uxtb	r2, r3
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800ad0e:	4b16      	ldr	r3, [pc, #88]	; (800ad68 <CDC_Control_FS+0x158>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	0a1a      	lsrs	r2, r3, #8
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	3301      	adds	r3, #1
 800ad18:	b2d2      	uxtb	r2, r2
 800ad1a:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800ad1c:	4b12      	ldr	r3, [pc, #72]	; (800ad68 <CDC_Control_FS+0x158>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	0c1a      	lsrs	r2, r3, #16
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	3302      	adds	r3, #2
 800ad26:	b2d2      	uxtb	r2, r2
 800ad28:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800ad2a:	4b0f      	ldr	r3, [pc, #60]	; (800ad68 <CDC_Control_FS+0x158>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	0e1a      	lsrs	r2, r3, #24
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	3303      	adds	r3, #3
 800ad34:	b2d2      	uxtb	r2, r2
 800ad36:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	3304      	adds	r3, #4
 800ad3c:	4a0a      	ldr	r2, [pc, #40]	; (800ad68 <CDC_Control_FS+0x158>)
 800ad3e:	7912      	ldrb	r2, [r2, #4]
 800ad40:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	3305      	adds	r3, #5
 800ad46:	4a08      	ldr	r2, [pc, #32]	; (800ad68 <CDC_Control_FS+0x158>)
 800ad48:	7952      	ldrb	r2, [r2, #5]
 800ad4a:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	3306      	adds	r3, #6
 800ad50:	4a05      	ldr	r2, [pc, #20]	; (800ad68 <CDC_Control_FS+0x158>)
 800ad52:	7992      	ldrb	r2, [r2, #6]
 800ad54:	701a      	strb	r2, [r3, #0]

    break;
 800ad56:	e000      	b.n	800ad5a <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ad58:	bf00      	nop
  }

  return (USBD_OK);
 800ad5a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	370c      	adds	r7, #12
 800ad60:	46bd      	mov	sp, r7
 800ad62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad66:	4770      	bx	lr
 800ad68:	2000011c 	.word	0x2000011c

0800ad6c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b084      	sub	sp, #16
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	int i;
	uint8_t* rxbuf = Buf;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	60bb      	str	r3, [r7, #8]

	//count total packets for application runtime
	usbbuf.packets++;
 800ad7a:	4b25      	ldr	r3, [pc, #148]	; (800ae10 <CDC_Receive_FS+0xa4>)
 800ad7c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800ad80:	3301      	adds	r3, #1
 800ad82:	4a23      	ldr	r2, [pc, #140]	; (800ae10 <CDC_Receive_FS+0xa4>)
 800ad84:	f8c2 3808 	str.w	r3, [r2, #2056]	; 0x808

	// receive the data
	for(i=0; i<(*Len); i++){
 800ad88:	2300      	movs	r3, #0
 800ad8a:	60fb      	str	r3, [r7, #12]
 800ad8c:	e02e      	b.n	800adec <CDC_Receive_FS+0x80>

		//is the buffer full?
		if( usbbuf.op == ( usbbuf.ip & USB_BUFFER_MASK ) + 1 ){
 800ad8e:	4b20      	ldr	r3, [pc, #128]	; (800ae10 <CDC_Receive_FS+0xa4>)
 800ad90:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 800ad94:	461a      	mov	r2, r3
 800ad96:	4b1e      	ldr	r3, [pc, #120]	; (800ae10 <CDC_Receive_FS+0xa4>)
 800ad98:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 800ad9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ada0:	3301      	adds	r3, #1
 800ada2:	429a      	cmp	r2, r3
 800ada4:	d104      	bne.n	800adb0 <CDC_Receive_FS+0x44>
			usbbuf.status = USB_RX_FULL;
 800ada6:	4b1a      	ldr	r3, [pc, #104]	; (800ae10 <CDC_Receive_FS+0xa4>)
 800ada8:	22ff      	movs	r2, #255	; 0xff
 800adaa:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
 800adae:	e01a      	b.n	800ade6 <CDC_Receive_FS+0x7a>
		}else{
			//copy into usbbuf byte buffer
			usbbuf.data.byte[usbbuf.ip++] = *(rxbuf++);
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	1c5a      	adds	r2, r3, #1
 800adb4:	60ba      	str	r2, [r7, #8]
 800adb6:	4a16      	ldr	r2, [pc, #88]	; (800ae10 <CDC_Receive_FS+0xa4>)
 800adb8:	f8b2 2800 	ldrh.w	r2, [r2, #2048]	; 0x800
 800adbc:	1c51      	adds	r1, r2, #1
 800adbe:	b288      	uxth	r0, r1
 800adc0:	4913      	ldr	r1, [pc, #76]	; (800ae10 <CDC_Receive_FS+0xa4>)
 800adc2:	f8a1 0800 	strh.w	r0, [r1, #2048]	; 0x800
 800adc6:	7819      	ldrb	r1, [r3, #0]
 800adc8:	4b11      	ldr	r3, [pc, #68]	; (800ae10 <CDC_Receive_FS+0xa4>)
 800adca:	5499      	strb	r1, [r3, r2]
			usbbuf.status = USB_RX_AVAIL;
 800adcc:	4b10      	ldr	r3, [pc, #64]	; (800ae10 <CDC_Receive_FS+0xa4>)
 800adce:	2201      	movs	r2, #1
 800add0:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
			//wrap around
			usbbuf.ip &= USB_BUFFER_MASK;
 800add4:	4b0e      	ldr	r3, [pc, #56]	; (800ae10 <CDC_Receive_FS+0xa4>)
 800add6:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 800adda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800adde:	b29a      	uxth	r2, r3
 800ade0:	4b0b      	ldr	r3, [pc, #44]	; (800ae10 <CDC_Receive_FS+0xa4>)
 800ade2:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
	for(i=0; i<(*Len); i++){
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	3301      	adds	r3, #1
 800adea:	60fb      	str	r3, [r7, #12]
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	681a      	ldr	r2, [r3, #0]
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	429a      	cmp	r2, r3
 800adf4:	d8cb      	bhi.n	800ad8e <CDC_Receive_FS+0x22>
		}
	}

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800adf6:	6879      	ldr	r1, [r7, #4]
 800adf8:	4806      	ldr	r0, [pc, #24]	; (800ae14 <CDC_Receive_FS+0xa8>)
 800adfa:	f7fc fcfe 	bl	80077fa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800adfe:	4805      	ldr	r0, [pc, #20]	; (800ae14 <CDC_Receive_FS+0xa8>)
 800ae00:	f7fc fd3e 	bl	8007880 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ae04:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	3710      	adds	r7, #16
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}
 800ae0e:	bf00      	nop
 800ae10:	20000cd0 	.word	0x20000cd0
 800ae14:	20000a34 	.word	0x20000a34

0800ae18 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b084      	sub	sp, #16
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	460b      	mov	r3, r1
 800ae22:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ae24:	2300      	movs	r3, #0
 800ae26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ae28:	4b0d      	ldr	r3, [pc, #52]	; (800ae60 <CDC_Transmit_FS+0x48>)
 800ae2a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ae2e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d001      	beq.n	800ae3e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	e00b      	b.n	800ae56 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ae3e:	887b      	ldrh	r3, [r7, #2]
 800ae40:	461a      	mov	r2, r3
 800ae42:	6879      	ldr	r1, [r7, #4]
 800ae44:	4806      	ldr	r0, [pc, #24]	; (800ae60 <CDC_Transmit_FS+0x48>)
 800ae46:	f7fc fcbe 	bl	80077c6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ae4a:	4805      	ldr	r0, [pc, #20]	; (800ae60 <CDC_Transmit_FS+0x48>)
 800ae4c:	f7fc fce9 	bl	8007822 <USBD_CDC_TransmitPacket>
 800ae50:	4603      	mov	r3, r0
 800ae52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ae54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3710      	adds	r7, #16
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}
 800ae5e:	bf00      	nop
 800ae60:	20000a34 	.word	0x20000a34

0800ae64 <CDC_ReadBuffer_Single>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t CDC_ReadBuffer_Single(void){
 800ae64:	b480      	push	{r7}
 800ae66:	b083      	sub	sp, #12
 800ae68:	af00      	add	r7, sp, #0

	uint8_t data;

	data = usbbuf.data.byte[usbbuf.op++];
 800ae6a:	4b14      	ldr	r3, [pc, #80]	; (800aebc <CDC_ReadBuffer_Single+0x58>)
 800ae6c:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 800ae70:	1c5a      	adds	r2, r3, #1
 800ae72:	b291      	uxth	r1, r2
 800ae74:	4a11      	ldr	r2, [pc, #68]	; (800aebc <CDC_ReadBuffer_Single+0x58>)
 800ae76:	f8a2 1802 	strh.w	r1, [r2, #2050]	; 0x802
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	4b0f      	ldr	r3, [pc, #60]	; (800aebc <CDC_ReadBuffer_Single+0x58>)
 800ae7e:	5c9b      	ldrb	r3, [r3, r2]
 800ae80:	71fb      	strb	r3, [r7, #7]
	usbbuf.op &= USB_BUFFER_MASK;
 800ae82:	4b0e      	ldr	r3, [pc, #56]	; (800aebc <CDC_ReadBuffer_Single+0x58>)
 800ae84:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 800ae88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ae8c:	b29a      	uxth	r2, r3
 800ae8e:	4b0b      	ldr	r3, [pc, #44]	; (800aebc <CDC_ReadBuffer_Single+0x58>)
 800ae90:	f8a3 2802 	strh.w	r2, [r3, #2050]	; 0x802
	if( usbbuf.op == usbbuf.ip ){
 800ae94:	4b09      	ldr	r3, [pc, #36]	; (800aebc <CDC_ReadBuffer_Single+0x58>)
 800ae96:	f8b3 2802 	ldrh.w	r2, [r3, #2050]	; 0x802
 800ae9a:	4b08      	ldr	r3, [pc, #32]	; (800aebc <CDC_ReadBuffer_Single+0x58>)
 800ae9c:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 800aea0:	429a      	cmp	r2, r3
 800aea2:	d103      	bne.n	800aeac <CDC_ReadBuffer_Single+0x48>
		usbbuf.status = USB_RX_EMPTY;
 800aea4:	4b05      	ldr	r3, [pc, #20]	; (800aebc <CDC_ReadBuffer_Single+0x58>)
 800aea6:	2200      	movs	r2, #0
 800aea8:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
	}
	return data;
 800aeac:	79fb      	ldrb	r3, [r7, #7]
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	370c      	adds	r7, #12
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb8:	4770      	bx	lr
 800aeba:	bf00      	nop
 800aebc:	20000cd0 	.word	0x20000cd0

0800aec0 <CDC_BytesAvailable>:
	// return early if no more bytes are available
	usbbuf.status = USB_RX_EMPTY;
	return count;
}

uint16_t CDC_BytesAvailable(void){
 800aec0:	b480      	push	{r7}
 800aec2:	af00      	add	r7, sp, #0
	return ( usbbuf.ip - usbbuf.op ) & USB_BUFFER_MASK;
 800aec4:	4b07      	ldr	r3, [pc, #28]	; (800aee4 <CDC_BytesAvailable+0x24>)
 800aec6:	f8b3 2800 	ldrh.w	r2, [r3, #2048]	; 0x800
 800aeca:	4b06      	ldr	r3, [pc, #24]	; (800aee4 <CDC_BytesAvailable+0x24>)
 800aecc:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 800aed0:	1ad3      	subs	r3, r2, r3
 800aed2:	b29b      	uxth	r3, r3
 800aed4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aed8:	b29b      	uxth	r3, r3
}
 800aeda:	4618      	mov	r0, r3
 800aedc:	46bd      	mov	sp, r7
 800aede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee2:	4770      	bx	lr
 800aee4:	20000cd0 	.word	0x20000cd0

0800aee8 <CDC_BytesAvailableTimeout>:

uint16_t CDC_BytesAvailableTimeout(uint32_t timeout_ms, uint16_t bytes_required){
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b084      	sub	sp, #16
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	460b      	mov	r3, r1
 800aef2:	807b      	strh	r3, [r7, #2]
	uint32_t start_ms = HAL_GetTick();
 800aef4:	f7f5 fb7e 	bl	80005f4 <HAL_GetTick>
 800aef8:	60f8      	str	r0, [r7, #12]
	uint16_t bytes_rx = 0;
 800aefa:	2300      	movs	r3, #0
 800aefc:	817b      	strh	r3, [r7, #10]
	while( (HAL_GetTick() - start_ms) < timeout_ms ){
 800aefe:	e010      	b.n	800af22 <CDC_BytesAvailableTimeout+0x3a>
		bytes_rx = ( usbbuf.ip - usbbuf.op ) & USB_BUFFER_MASK;
 800af00:	4b0e      	ldr	r3, [pc, #56]	; (800af3c <CDC_BytesAvailableTimeout+0x54>)
 800af02:	f8b3 2800 	ldrh.w	r2, [r3, #2048]	; 0x800
 800af06:	4b0d      	ldr	r3, [pc, #52]	; (800af3c <CDC_BytesAvailableTimeout+0x54>)
 800af08:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 800af0c:	1ad3      	subs	r3, r2, r3
 800af0e:	b29b      	uxth	r3, r3
 800af10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af14:	817b      	strh	r3, [r7, #10]
		if( bytes_rx >= bytes_required ){
 800af16:	897a      	ldrh	r2, [r7, #10]
 800af18:	887b      	ldrh	r3, [r7, #2]
 800af1a:	429a      	cmp	r2, r3
 800af1c:	d301      	bcc.n	800af22 <CDC_BytesAvailableTimeout+0x3a>
			return bytes_rx;
 800af1e:	897b      	ldrh	r3, [r7, #10]
 800af20:	e008      	b.n	800af34 <CDC_BytesAvailableTimeout+0x4c>
	while( (HAL_GetTick() - start_ms) < timeout_ms ){
 800af22:	f7f5 fb67 	bl	80005f4 <HAL_GetTick>
 800af26:	4602      	mov	r2, r0
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	1ad3      	subs	r3, r2, r3
 800af2c:	687a      	ldr	r2, [r7, #4]
 800af2e:	429a      	cmp	r2, r3
 800af30:	d8e6      	bhi.n	800af00 <CDC_BytesAvailableTimeout+0x18>
		}
	}
	return 0;
 800af32:	2300      	movs	r3, #0
}
 800af34:	4618      	mov	r0, r3
 800af36:	3710      	adds	r7, #16
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}
 800af3c:	20000cd0 	.word	0x20000cd0

0800af40 <CDC_InitBuffer>:

uint8_t CDC_PeakLast(void){
	return usbbuf.data.byte[(usbbuf.ip - 1) & USB_BUFFER_MASK];
}

void CDC_InitBuffer(void){
 800af40:	b480      	push	{r7}
 800af42:	b083      	sub	sp, #12
 800af44:	af00      	add	r7, sp, #0
	int i;
	for(i=0; i<(USB_BUFFER_SIZE/2); i++){
 800af46:	2300      	movs	r3, #0
 800af48:	607b      	str	r3, [r7, #4]
 800af4a:	e007      	b.n	800af5c <CDC_InitBuffer+0x1c>
		usbbuf.data.word[i] = 0;
 800af4c:	4a10      	ldr	r2, [pc, #64]	; (800af90 <CDC_InitBuffer+0x50>)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2100      	movs	r1, #0
 800af52:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(i=0; i<(USB_BUFFER_SIZE/2); i++){
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	3301      	adds	r3, #1
 800af5a:	607b      	str	r3, [r7, #4]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af62:	dbf3      	blt.n	800af4c <CDC_InitBuffer+0xc>
	}
	usbbuf.ip = 0;
 800af64:	4b0a      	ldr	r3, [pc, #40]	; (800af90 <CDC_InitBuffer+0x50>)
 800af66:	2200      	movs	r2, #0
 800af68:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
	usbbuf.op = 0;
 800af6c:	4b08      	ldr	r3, [pc, #32]	; (800af90 <CDC_InitBuffer+0x50>)
 800af6e:	2200      	movs	r2, #0
 800af70:	f8a3 2802 	strh.w	r2, [r3, #2050]	; 0x802
	usbbuf.status = USB_RX_EMPTY;
 800af74:	4b06      	ldr	r3, [pc, #24]	; (800af90 <CDC_InitBuffer+0x50>)
 800af76:	2200      	movs	r2, #0
 800af78:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
	usbbuf.packets = 0;
 800af7c:	4b04      	ldr	r3, [pc, #16]	; (800af90 <CDC_InitBuffer+0x50>)
 800af7e:	2200      	movs	r2, #0
 800af80:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
}
 800af84:	bf00      	nop
 800af86:	370c      	adds	r7, #12
 800af88:	46bd      	mov	sp, r7
 800af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8e:	4770      	bx	lr
 800af90:	20000cd0 	.word	0x20000cd0

0800af94 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b08a      	sub	sp, #40	; 0x28
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800af9c:	f107 0314 	add.w	r3, r7, #20
 800afa0:	2200      	movs	r2, #0
 800afa2:	601a      	str	r2, [r3, #0]
 800afa4:	605a      	str	r2, [r3, #4]
 800afa6:	609a      	str	r2, [r3, #8]
 800afa8:	60da      	str	r2, [r3, #12]
 800afaa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800afb4:	d152      	bne.n	800b05c <HAL_PCD_MspInit+0xc8>

	  // this additional code forces the PC to re-enumerate this USB device by pulling
	  // D+ low for 5ms, this is necessary for debugging because the STM32's usb
	  // temporarily disconnects while power remains ON and therefore causes a loss
	  // of communication between STM32 and PC at the start of a debug session
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 800afb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800afba:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800afbc:	2301      	movs	r3, #1
 800afbe:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afc0:	2300      	movs	r3, #0
 800afc2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800afc4:	2302      	movs	r3, #2
 800afc6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800afc8:	f107 0314 	add.w	r3, r7, #20
 800afcc:	4619      	mov	r1, r3
 800afce:	4825      	ldr	r0, [pc, #148]	; (800b064 <HAL_PCD_MspInit+0xd0>)
 800afd0:	f7f6 f818 	bl	8001004 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800afd4:	2200      	movs	r2, #0
 800afd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800afda:	4822      	ldr	r0, [pc, #136]	; (800b064 <HAL_PCD_MspInit+0xd0>)
 800afdc:	f7f6 f9bc 	bl	8001358 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800afe0:	2005      	movs	r0, #5
 800afe2:	f7f5 fb13 	bl	800060c <HAL_Delay>

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800afe6:	2300      	movs	r3, #0
 800afe8:	613b      	str	r3, [r7, #16]
 800afea:	4b1f      	ldr	r3, [pc, #124]	; (800b068 <HAL_PCD_MspInit+0xd4>)
 800afec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afee:	4a1e      	ldr	r2, [pc, #120]	; (800b068 <HAL_PCD_MspInit+0xd4>)
 800aff0:	f043 0301 	orr.w	r3, r3, #1
 800aff4:	6313      	str	r3, [r2, #48]	; 0x30
 800aff6:	4b1c      	ldr	r3, [pc, #112]	; (800b068 <HAL_PCD_MspInit+0xd4>)
 800aff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800affa:	f003 0301 	and.w	r3, r3, #1
 800affe:	613b      	str	r3, [r7, #16]
 800b000:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b002:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b006:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b008:	2302      	movs	r3, #2
 800b00a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b00c:	2300      	movs	r3, #0
 800b00e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b010:	2303      	movs	r3, #3
 800b012:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b014:	230a      	movs	r3, #10
 800b016:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b018:	f107 0314 	add.w	r3, r7, #20
 800b01c:	4619      	mov	r1, r3
 800b01e:	4811      	ldr	r0, [pc, #68]	; (800b064 <HAL_PCD_MspInit+0xd0>)
 800b020:	f7f5 fff0 	bl	8001004 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b024:	4b10      	ldr	r3, [pc, #64]	; (800b068 <HAL_PCD_MspInit+0xd4>)
 800b026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b028:	4a0f      	ldr	r2, [pc, #60]	; (800b068 <HAL_PCD_MspInit+0xd4>)
 800b02a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b02e:	6353      	str	r3, [r2, #52]	; 0x34
 800b030:	2300      	movs	r3, #0
 800b032:	60fb      	str	r3, [r7, #12]
 800b034:	4b0c      	ldr	r3, [pc, #48]	; (800b068 <HAL_PCD_MspInit+0xd4>)
 800b036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b038:	4a0b      	ldr	r2, [pc, #44]	; (800b068 <HAL_PCD_MspInit+0xd4>)
 800b03a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b03e:	6453      	str	r3, [r2, #68]	; 0x44
 800b040:	4b09      	ldr	r3, [pc, #36]	; (800b068 <HAL_PCD_MspInit+0xd4>)
 800b042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b044:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b048:	60fb      	str	r3, [r7, #12]
 800b04a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b04c:	2200      	movs	r2, #0
 800b04e:	2100      	movs	r1, #0
 800b050:	2043      	movs	r0, #67	; 0x43
 800b052:	f7f5 ff82 	bl	8000f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b056:	2043      	movs	r0, #67	; 0x43
 800b058:	f7f5 ff9b 	bl	8000f92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b05c:	bf00      	nop
 800b05e:	3728      	adds	r7, #40	; 0x28
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}
 800b064:	40020000 	.word	0x40020000
 800b068:	40023800 	.word	0x40023800

0800b06c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b082      	sub	sp, #8
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b080:	4619      	mov	r1, r3
 800b082:	4610      	mov	r0, r2
 800b084:	f7fc fcb4 	bl	80079f0 <USBD_LL_SetupStage>
}
 800b088:	bf00      	nop
 800b08a:	3708      	adds	r7, #8
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b082      	sub	sp, #8
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	460b      	mov	r3, r1
 800b09a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b0a2:	78fa      	ldrb	r2, [r7, #3]
 800b0a4:	6879      	ldr	r1, [r7, #4]
 800b0a6:	4613      	mov	r3, r2
 800b0a8:	00db      	lsls	r3, r3, #3
 800b0aa:	1a9b      	subs	r3, r3, r2
 800b0ac:	009b      	lsls	r3, r3, #2
 800b0ae:	440b      	add	r3, r1
 800b0b0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b0b4:	681a      	ldr	r2, [r3, #0]
 800b0b6:	78fb      	ldrb	r3, [r7, #3]
 800b0b8:	4619      	mov	r1, r3
 800b0ba:	f7fc fce4 	bl	8007a86 <USBD_LL_DataOutStage>
}
 800b0be:	bf00      	nop
 800b0c0:	3708      	adds	r7, #8
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}

0800b0c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0c6:	b580      	push	{r7, lr}
 800b0c8:	b082      	sub	sp, #8
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	6078      	str	r0, [r7, #4]
 800b0ce:	460b      	mov	r3, r1
 800b0d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b0d8:	78fa      	ldrb	r2, [r7, #3]
 800b0da:	6879      	ldr	r1, [r7, #4]
 800b0dc:	4613      	mov	r3, r2
 800b0de:	00db      	lsls	r3, r3, #3
 800b0e0:	1a9b      	subs	r3, r3, r2
 800b0e2:	009b      	lsls	r3, r3, #2
 800b0e4:	440b      	add	r3, r1
 800b0e6:	3348      	adds	r3, #72	; 0x48
 800b0e8:	681a      	ldr	r2, [r3, #0]
 800b0ea:	78fb      	ldrb	r3, [r7, #3]
 800b0ec:	4619      	mov	r1, r3
 800b0ee:	f7fc fd3b 	bl	8007b68 <USBD_LL_DataInStage>
}
 800b0f2:	bf00      	nop
 800b0f4:	3708      	adds	r7, #8
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}

0800b0fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0fa:	b580      	push	{r7, lr}
 800b0fc:	b082      	sub	sp, #8
 800b0fe:	af00      	add	r7, sp, #0
 800b100:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b108:	4618      	mov	r0, r3
 800b10a:	f7fc fe49 	bl	8007da0 <USBD_LL_SOF>
}
 800b10e:	bf00      	nop
 800b110:	3708      	adds	r7, #8
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}

0800b116 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800b116:	b580      	push	{r7, lr}
 800b118:	b084      	sub	sp, #16
 800b11a:	af00      	add	r7, sp, #0
 800b11c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b11e:	2301      	movs	r3, #1
 800b120:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	68db      	ldr	r3, [r3, #12]
 800b126:	2b02      	cmp	r3, #2
 800b128:	d001      	beq.n	800b12e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b12a:	f7ff f983 	bl	800a434 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b134:	7bfa      	ldrb	r2, [r7, #15]
 800b136:	4611      	mov	r1, r2
 800b138:	4618      	mov	r0, r3
 800b13a:	f7fc fdfb 	bl	8007d34 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b144:	4618      	mov	r0, r3
 800b146:	f7fc fdb4 	bl	8007cb2 <USBD_LL_Reset>
}
 800b14a:	bf00      	nop
 800b14c:	3710      	adds	r7, #16
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}
	...

0800b154 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b082      	sub	sp, #8
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b162:	4618      	mov	r0, r3
 800b164:	f7fc fdf6 	bl	8007d54 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	687a      	ldr	r2, [r7, #4]
 800b174:	6812      	ldr	r2, [r2, #0]
 800b176:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b17a:	f043 0301 	orr.w	r3, r3, #1
 800b17e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6a1b      	ldr	r3, [r3, #32]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d005      	beq.n	800b194 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b188:	4b04      	ldr	r3, [pc, #16]	; (800b19c <HAL_PCD_SuspendCallback+0x48>)
 800b18a:	691b      	ldr	r3, [r3, #16]
 800b18c:	4a03      	ldr	r2, [pc, #12]	; (800b19c <HAL_PCD_SuspendCallback+0x48>)
 800b18e:	f043 0306 	orr.w	r3, r3, #6
 800b192:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b194:	bf00      	nop
 800b196:	3708      	adds	r7, #8
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}
 800b19c:	e000ed00 	.word	0xe000ed00

0800b1a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b082      	sub	sp, #8
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f7fc fde5 	bl	8007d7e <USBD_LL_Resume>
}
 800b1b4:	bf00      	nop
 800b1b6:	3708      	adds	r7, #8
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}

0800b1bc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b082      	sub	sp, #8
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
 800b1c4:	460b      	mov	r3, r1
 800b1c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b1ce:	78fa      	ldrb	r2, [r7, #3]
 800b1d0:	4611      	mov	r1, r2
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f7fc fe0b 	bl	8007dee <USBD_LL_IsoOUTIncomplete>
}
 800b1d8:	bf00      	nop
 800b1da:	3708      	adds	r7, #8
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}

0800b1e0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b082      	sub	sp, #8
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
 800b1e8:	460b      	mov	r3, r1
 800b1ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b1f2:	78fa      	ldrb	r2, [r7, #3]
 800b1f4:	4611      	mov	r1, r2
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f7fc fdec 	bl	8007dd4 <USBD_LL_IsoINIncomplete>
}
 800b1fc:	bf00      	nop
 800b1fe:	3708      	adds	r7, #8
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}

0800b204 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b082      	sub	sp, #8
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b212:	4618      	mov	r0, r3
 800b214:	f7fc fdf8 	bl	8007e08 <USBD_LL_DevConnected>
}
 800b218:	bf00      	nop
 800b21a:	3708      	adds	r7, #8
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}

0800b220 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b082      	sub	sp, #8
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b22e:	4618      	mov	r0, r3
 800b230:	f7fc fdf5 	bl	8007e1e <USBD_LL_DevDisconnected>
}
 800b234:	bf00      	nop
 800b236:	3708      	adds	r7, #8
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b082      	sub	sp, #8
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	781b      	ldrb	r3, [r3, #0]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d13f      	bne.n	800b2cc <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b24c:	4a22      	ldr	r2, [pc, #136]	; (800b2d8 <USBD_LL_Init+0x9c>)
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	4a20      	ldr	r2, [pc, #128]	; (800b2d8 <USBD_LL_Init+0x9c>)
 800b258:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b25c:	4b1e      	ldr	r3, [pc, #120]	; (800b2d8 <USBD_LL_Init+0x9c>)
 800b25e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b262:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800b264:	4b1c      	ldr	r3, [pc, #112]	; (800b2d8 <USBD_LL_Init+0x9c>)
 800b266:	2206      	movs	r2, #6
 800b268:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b26a:	4b1b      	ldr	r3, [pc, #108]	; (800b2d8 <USBD_LL_Init+0x9c>)
 800b26c:	2202      	movs	r2, #2
 800b26e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b270:	4b19      	ldr	r3, [pc, #100]	; (800b2d8 <USBD_LL_Init+0x9c>)
 800b272:	2200      	movs	r2, #0
 800b274:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b276:	4b18      	ldr	r3, [pc, #96]	; (800b2d8 <USBD_LL_Init+0x9c>)
 800b278:	2202      	movs	r2, #2
 800b27a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b27c:	4b16      	ldr	r3, [pc, #88]	; (800b2d8 <USBD_LL_Init+0x9c>)
 800b27e:	2200      	movs	r2, #0
 800b280:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b282:	4b15      	ldr	r3, [pc, #84]	; (800b2d8 <USBD_LL_Init+0x9c>)
 800b284:	2200      	movs	r2, #0
 800b286:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b288:	4b13      	ldr	r3, [pc, #76]	; (800b2d8 <USBD_LL_Init+0x9c>)
 800b28a:	2200      	movs	r2, #0
 800b28c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800b28e:	4b12      	ldr	r3, [pc, #72]	; (800b2d8 <USBD_LL_Init+0x9c>)
 800b290:	2200      	movs	r2, #0
 800b292:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b294:	4b10      	ldr	r3, [pc, #64]	; (800b2d8 <USBD_LL_Init+0x9c>)
 800b296:	2200      	movs	r2, #0
 800b298:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b29a:	4b0f      	ldr	r3, [pc, #60]	; (800b2d8 <USBD_LL_Init+0x9c>)
 800b29c:	2200      	movs	r2, #0
 800b29e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b2a0:	480d      	ldr	r0, [pc, #52]	; (800b2d8 <USBD_LL_Init+0x9c>)
 800b2a2:	f7f6 f9f1 	bl	8001688 <HAL_PCD_Init>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d001      	beq.n	800b2b0 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 800b2ac:	f7ff f8c2 	bl	800a434 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b2b0:	2180      	movs	r1, #128	; 0x80
 800b2b2:	4809      	ldr	r0, [pc, #36]	; (800b2d8 <USBD_LL_Init+0x9c>)
 800b2b4:	f7f7 fb89 	bl	80029ca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b2b8:	2240      	movs	r2, #64	; 0x40
 800b2ba:	2100      	movs	r1, #0
 800b2bc:	4806      	ldr	r0, [pc, #24]	; (800b2d8 <USBD_LL_Init+0x9c>)
 800b2be:	f7f7 fb3d 	bl	800293c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b2c2:	2280      	movs	r2, #128	; 0x80
 800b2c4:	2101      	movs	r1, #1
 800b2c6:	4804      	ldr	r0, [pc, #16]	; (800b2d8 <USBD_LL_Init+0x9c>)
 800b2c8:	f7f7 fb38 	bl	800293c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b2cc:	2300      	movs	r3, #0
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3708      	adds	r7, #8
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}
 800b2d6:	bf00      	nop
 800b2d8:	200016dc 	.word	0x200016dc

0800b2dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b084      	sub	sp, #16
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f7f6 faec 	bl	80018d0 <HAL_PCD_Start>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800b2fc:	7bfb      	ldrb	r3, [r7, #15]
 800b2fe:	4618      	mov	r0, r3
 800b300:	f000 f92e 	bl	800b560 <USBD_Get_USB_Status>
 800b304:	4603      	mov	r3, r0
 800b306:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b308:	7bbb      	ldrb	r3, [r7, #14]
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3710      	adds	r7, #16
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}

0800b312 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b312:	b580      	push	{r7, lr}
 800b314:	b084      	sub	sp, #16
 800b316:	af00      	add	r7, sp, #0
 800b318:	6078      	str	r0, [r7, #4]
 800b31a:	4608      	mov	r0, r1
 800b31c:	4611      	mov	r1, r2
 800b31e:	461a      	mov	r2, r3
 800b320:	4603      	mov	r3, r0
 800b322:	70fb      	strb	r3, [r7, #3]
 800b324:	460b      	mov	r3, r1
 800b326:	70bb      	strb	r3, [r7, #2]
 800b328:	4613      	mov	r3, r2
 800b32a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b32c:	2300      	movs	r3, #0
 800b32e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b330:	2300      	movs	r3, #0
 800b332:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800b33a:	78bb      	ldrb	r3, [r7, #2]
 800b33c:	883a      	ldrh	r2, [r7, #0]
 800b33e:	78f9      	ldrb	r1, [r7, #3]
 800b340:	f7f6 feee 	bl	8002120 <HAL_PCD_EP_Open>
 800b344:	4603      	mov	r3, r0
 800b346:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b348:	7bfb      	ldrb	r3, [r7, #15]
 800b34a:	4618      	mov	r0, r3
 800b34c:	f000 f908 	bl	800b560 <USBD_Get_USB_Status>
 800b350:	4603      	mov	r3, r0
 800b352:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b354:	7bbb      	ldrb	r3, [r7, #14]
}
 800b356:	4618      	mov	r0, r3
 800b358:	3710      	adds	r7, #16
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}

0800b35e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b35e:	b580      	push	{r7, lr}
 800b360:	b084      	sub	sp, #16
 800b362:	af00      	add	r7, sp, #0
 800b364:	6078      	str	r0, [r7, #4]
 800b366:	460b      	mov	r3, r1
 800b368:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b36a:	2300      	movs	r3, #0
 800b36c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b36e:	2300      	movs	r3, #0
 800b370:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800b378:	78fa      	ldrb	r2, [r7, #3]
 800b37a:	4611      	mov	r1, r2
 800b37c:	4618      	mov	r0, r3
 800b37e:	f7f6 ff37 	bl	80021f0 <HAL_PCD_EP_Close>
 800b382:	4603      	mov	r3, r0
 800b384:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800b386:	7bfb      	ldrb	r3, [r7, #15]
 800b388:	4618      	mov	r0, r3
 800b38a:	f000 f8e9 	bl	800b560 <USBD_Get_USB_Status>
 800b38e:	4603      	mov	r3, r0
 800b390:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800b392:	7bbb      	ldrb	r3, [r7, #14]
}
 800b394:	4618      	mov	r0, r3
 800b396:	3710      	adds	r7, #16
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}

0800b39c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b084      	sub	sp, #16
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
 800b3a4:	460b      	mov	r3, r1
 800b3a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800b3b6:	78fa      	ldrb	r2, [r7, #3]
 800b3b8:	4611      	mov	r1, r2
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f7f7 f80f 	bl	80023de <HAL_PCD_EP_SetStall>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b3c4:	7bfb      	ldrb	r3, [r7, #15]
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f000 f8ca 	bl	800b560 <USBD_Get_USB_Status>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800b3d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3710      	adds	r7, #16
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}

0800b3da <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b3da:	b580      	push	{r7, lr}
 800b3dc:	b084      	sub	sp, #16
 800b3de:	af00      	add	r7, sp, #0
 800b3e0:	6078      	str	r0, [r7, #4]
 800b3e2:	460b      	mov	r3, r1
 800b3e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800b3f4:	78fa      	ldrb	r2, [r7, #3]
 800b3f6:	4611      	mov	r1, r2
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f7f7 f854 	bl	80024a6 <HAL_PCD_EP_ClrStall>
 800b3fe:	4603      	mov	r3, r0
 800b400:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800b402:	7bfb      	ldrb	r3, [r7, #15]
 800b404:	4618      	mov	r0, r3
 800b406:	f000 f8ab 	bl	800b560 <USBD_Get_USB_Status>
 800b40a:	4603      	mov	r3, r0
 800b40c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800b40e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b410:	4618      	mov	r0, r3
 800b412:	3710      	adds	r7, #16
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}

0800b418 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b418:	b480      	push	{r7}
 800b41a:	b085      	sub	sp, #20
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	460b      	mov	r3, r1
 800b422:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800b42a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800b42c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b430:	2b00      	cmp	r3, #0
 800b432:	da0b      	bge.n	800b44c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800b434:	78fb      	ldrb	r3, [r7, #3]
 800b436:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b43a:	68f9      	ldr	r1, [r7, #12]
 800b43c:	4613      	mov	r3, r2
 800b43e:	00db      	lsls	r3, r3, #3
 800b440:	1a9b      	subs	r3, r3, r2
 800b442:	009b      	lsls	r3, r3, #2
 800b444:	440b      	add	r3, r1
 800b446:	333e      	adds	r3, #62	; 0x3e
 800b448:	781b      	ldrb	r3, [r3, #0]
 800b44a:	e00b      	b.n	800b464 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800b44c:	78fb      	ldrb	r3, [r7, #3]
 800b44e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b452:	68f9      	ldr	r1, [r7, #12]
 800b454:	4613      	mov	r3, r2
 800b456:	00db      	lsls	r3, r3, #3
 800b458:	1a9b      	subs	r3, r3, r2
 800b45a:	009b      	lsls	r3, r3, #2
 800b45c:	440b      	add	r3, r1
 800b45e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b462:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b464:	4618      	mov	r0, r3
 800b466:	3714      	adds	r7, #20
 800b468:	46bd      	mov	sp, r7
 800b46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46e:	4770      	bx	lr

0800b470 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b084      	sub	sp, #16
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
 800b478:	460b      	mov	r3, r1
 800b47a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b47c:	2300      	movs	r3, #0
 800b47e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b480:	2300      	movs	r3, #0
 800b482:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800b48a:	78fa      	ldrb	r2, [r7, #3]
 800b48c:	4611      	mov	r1, r2
 800b48e:	4618      	mov	r0, r3
 800b490:	f7f6 fe21 	bl	80020d6 <HAL_PCD_SetAddress>
 800b494:	4603      	mov	r3, r0
 800b496:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b498:	7bfb      	ldrb	r3, [r7, #15]
 800b49a:	4618      	mov	r0, r3
 800b49c:	f000 f860 	bl	800b560 <USBD_Get_USB_Status>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800b4a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3710      	adds	r7, #16
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}

0800b4ae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b4ae:	b580      	push	{r7, lr}
 800b4b0:	b086      	sub	sp, #24
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	60f8      	str	r0, [r7, #12]
 800b4b6:	607a      	str	r2, [r7, #4]
 800b4b8:	461a      	mov	r2, r3
 800b4ba:	460b      	mov	r3, r1
 800b4bc:	72fb      	strb	r3, [r7, #11]
 800b4be:	4613      	mov	r3, r2
 800b4c0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800b4d0:	893b      	ldrh	r3, [r7, #8]
 800b4d2:	7af9      	ldrb	r1, [r7, #11]
 800b4d4:	687a      	ldr	r2, [r7, #4]
 800b4d6:	f7f6 ff38 	bl	800234a <HAL_PCD_EP_Transmit>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800b4de:	7dfb      	ldrb	r3, [r7, #23]
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f000 f83d 	bl	800b560 <USBD_Get_USB_Status>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800b4ea:	7dbb      	ldrb	r3, [r7, #22]
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3718      	adds	r7, #24
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}

0800b4f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b086      	sub	sp, #24
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	60f8      	str	r0, [r7, #12]
 800b4fc:	607a      	str	r2, [r7, #4]
 800b4fe:	461a      	mov	r2, r3
 800b500:	460b      	mov	r3, r1
 800b502:	72fb      	strb	r3, [r7, #11]
 800b504:	4613      	mov	r3, r2
 800b506:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b508:	2300      	movs	r3, #0
 800b50a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b50c:	2300      	movs	r3, #0
 800b50e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800b516:	893b      	ldrh	r3, [r7, #8]
 800b518:	7af9      	ldrb	r1, [r7, #11]
 800b51a:	687a      	ldr	r2, [r7, #4]
 800b51c:	f7f6 feb2 	bl	8002284 <HAL_PCD_EP_Receive>
 800b520:	4603      	mov	r3, r0
 800b522:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800b524:	7dfb      	ldrb	r3, [r7, #23]
 800b526:	4618      	mov	r0, r3
 800b528:	f000 f81a 	bl	800b560 <USBD_Get_USB_Status>
 800b52c:	4603      	mov	r3, r0
 800b52e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800b530:	7dbb      	ldrb	r3, [r7, #22]
}
 800b532:	4618      	mov	r0, r3
 800b534:	3718      	adds	r7, #24
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}

0800b53a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b53a:	b580      	push	{r7, lr}
 800b53c:	b082      	sub	sp, #8
 800b53e:	af00      	add	r7, sp, #0
 800b540:	6078      	str	r0, [r7, #4]
 800b542:	460b      	mov	r3, r1
 800b544:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800b54c:	78fa      	ldrb	r2, [r7, #3]
 800b54e:	4611      	mov	r1, r2
 800b550:	4618      	mov	r0, r3
 800b552:	f7f6 fee2 	bl	800231a <HAL_PCD_EP_GetRxCount>
 800b556:	4603      	mov	r3, r0
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3708      	adds	r7, #8
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b560:	b480      	push	{r7}
 800b562:	b085      	sub	sp, #20
 800b564:	af00      	add	r7, sp, #0
 800b566:	4603      	mov	r3, r0
 800b568:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b56a:	2300      	movs	r3, #0
 800b56c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b56e:	79fb      	ldrb	r3, [r7, #7]
 800b570:	2b03      	cmp	r3, #3
 800b572:	d817      	bhi.n	800b5a4 <USBD_Get_USB_Status+0x44>
 800b574:	a201      	add	r2, pc, #4	; (adr r2, 800b57c <USBD_Get_USB_Status+0x1c>)
 800b576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b57a:	bf00      	nop
 800b57c:	0800b58d 	.word	0x0800b58d
 800b580:	0800b593 	.word	0x0800b593
 800b584:	0800b599 	.word	0x0800b599
 800b588:	0800b59f 	.word	0x0800b59f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b58c:	2300      	movs	r3, #0
 800b58e:	73fb      	strb	r3, [r7, #15]
    break;
 800b590:	e00b      	b.n	800b5aa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b592:	2302      	movs	r3, #2
 800b594:	73fb      	strb	r3, [r7, #15]
    break;
 800b596:	e008      	b.n	800b5aa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b598:	2301      	movs	r3, #1
 800b59a:	73fb      	strb	r3, [r7, #15]
    break;
 800b59c:	e005      	b.n	800b5aa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b59e:	2302      	movs	r3, #2
 800b5a0:	73fb      	strb	r3, [r7, #15]
    break;
 800b5a2:	e002      	b.n	800b5aa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b5a4:	2302      	movs	r3, #2
 800b5a6:	73fb      	strb	r3, [r7, #15]
    break;
 800b5a8:	bf00      	nop
  }
  return usb_status;
 800b5aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3714      	adds	r7, #20
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b6:	4770      	bx	lr

0800b5b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b083      	sub	sp, #12
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	4603      	mov	r3, r0
 800b5c0:	6039      	str	r1, [r7, #0]
 800b5c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	2212      	movs	r2, #18
 800b5c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b5ca:	4b03      	ldr	r3, [pc, #12]	; (800b5d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	370c      	adds	r7, #12
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d6:	4770      	bx	lr
 800b5d8:	20000150 	.word	0x20000150

0800b5dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b083      	sub	sp, #12
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	6039      	str	r1, [r7, #0]
 800b5e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	2204      	movs	r2, #4
 800b5ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b5ee:	4b03      	ldr	r3, [pc, #12]	; (800b5fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	370c      	adds	r7, #12
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fa:	4770      	bx	lr
 800b5fc:	20000164 	.word	0x20000164

0800b600 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b082      	sub	sp, #8
 800b604:	af00      	add	r7, sp, #0
 800b606:	4603      	mov	r3, r0
 800b608:	6039      	str	r1, [r7, #0]
 800b60a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b60c:	79fb      	ldrb	r3, [r7, #7]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d105      	bne.n	800b61e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b612:	683a      	ldr	r2, [r7, #0]
 800b614:	4907      	ldr	r1, [pc, #28]	; (800b634 <USBD_FS_ProductStrDescriptor+0x34>)
 800b616:	4808      	ldr	r0, [pc, #32]	; (800b638 <USBD_FS_ProductStrDescriptor+0x38>)
 800b618:	f7fd f8d8 	bl	80087cc <USBD_GetString>
 800b61c:	e004      	b.n	800b628 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b61e:	683a      	ldr	r2, [r7, #0]
 800b620:	4904      	ldr	r1, [pc, #16]	; (800b634 <USBD_FS_ProductStrDescriptor+0x34>)
 800b622:	4805      	ldr	r0, [pc, #20]	; (800b638 <USBD_FS_ProductStrDescriptor+0x38>)
 800b624:	f7fd f8d2 	bl	80087cc <USBD_GetString>
  }
  return USBD_StrDesc;
 800b628:	4b02      	ldr	r3, [pc, #8]	; (800b634 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b62a:	4618      	mov	r0, r3
 800b62c:	3708      	adds	r7, #8
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}
 800b632:	bf00      	nop
 800b634:	20001ae4 	.word	0x20001ae4
 800b638:	0800bd4c 	.word	0x0800bd4c

0800b63c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b082      	sub	sp, #8
 800b640:	af00      	add	r7, sp, #0
 800b642:	4603      	mov	r3, r0
 800b644:	6039      	str	r1, [r7, #0]
 800b646:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b648:	683a      	ldr	r2, [r7, #0]
 800b64a:	4904      	ldr	r1, [pc, #16]	; (800b65c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b64c:	4804      	ldr	r0, [pc, #16]	; (800b660 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b64e:	f7fd f8bd 	bl	80087cc <USBD_GetString>
  return USBD_StrDesc;
 800b652:	4b02      	ldr	r3, [pc, #8]	; (800b65c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b654:	4618      	mov	r0, r3
 800b656:	3708      	adds	r7, #8
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}
 800b65c:	20001ae4 	.word	0x20001ae4
 800b660:	0800bd64 	.word	0x0800bd64

0800b664 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b082      	sub	sp, #8
 800b668:	af00      	add	r7, sp, #0
 800b66a:	4603      	mov	r3, r0
 800b66c:	6039      	str	r1, [r7, #0]
 800b66e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	221a      	movs	r2, #26
 800b674:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b676:	f000 f843 	bl	800b700 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b67a:	4b02      	ldr	r3, [pc, #8]	; (800b684 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3708      	adds	r7, #8
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}
 800b684:	20000168 	.word	0x20000168

0800b688 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b082      	sub	sp, #8
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	4603      	mov	r3, r0
 800b690:	6039      	str	r1, [r7, #0]
 800b692:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b694:	79fb      	ldrb	r3, [r7, #7]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d105      	bne.n	800b6a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b69a:	683a      	ldr	r2, [r7, #0]
 800b69c:	4907      	ldr	r1, [pc, #28]	; (800b6bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800b69e:	4808      	ldr	r0, [pc, #32]	; (800b6c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b6a0:	f7fd f894 	bl	80087cc <USBD_GetString>
 800b6a4:	e004      	b.n	800b6b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b6a6:	683a      	ldr	r2, [r7, #0]
 800b6a8:	4904      	ldr	r1, [pc, #16]	; (800b6bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800b6aa:	4805      	ldr	r0, [pc, #20]	; (800b6c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b6ac:	f7fd f88e 	bl	80087cc <USBD_GetString>
  }
  return USBD_StrDesc;
 800b6b0:	4b02      	ldr	r3, [pc, #8]	; (800b6bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3708      	adds	r7, #8
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}
 800b6ba:	bf00      	nop
 800b6bc:	20001ae4 	.word	0x20001ae4
 800b6c0:	0800bd78 	.word	0x0800bd78

0800b6c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b082      	sub	sp, #8
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	6039      	str	r1, [r7, #0]
 800b6ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b6d0:	79fb      	ldrb	r3, [r7, #7]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d105      	bne.n	800b6e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b6d6:	683a      	ldr	r2, [r7, #0]
 800b6d8:	4907      	ldr	r1, [pc, #28]	; (800b6f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b6da:	4808      	ldr	r0, [pc, #32]	; (800b6fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b6dc:	f7fd f876 	bl	80087cc <USBD_GetString>
 800b6e0:	e004      	b.n	800b6ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b6e2:	683a      	ldr	r2, [r7, #0]
 800b6e4:	4904      	ldr	r1, [pc, #16]	; (800b6f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b6e6:	4805      	ldr	r0, [pc, #20]	; (800b6fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b6e8:	f7fd f870 	bl	80087cc <USBD_GetString>
  }
  return USBD_StrDesc;
 800b6ec:	4b02      	ldr	r3, [pc, #8]	; (800b6f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3708      	adds	r7, #8
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}
 800b6f6:	bf00      	nop
 800b6f8:	20001ae4 	.word	0x20001ae4
 800b6fc:	0800bd84 	.word	0x0800bd84

0800b700 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b084      	sub	sp, #16
 800b704:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b706:	4b0f      	ldr	r3, [pc, #60]	; (800b744 <Get_SerialNum+0x44>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b70c:	4b0e      	ldr	r3, [pc, #56]	; (800b748 <Get_SerialNum+0x48>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b712:	4b0e      	ldr	r3, [pc, #56]	; (800b74c <Get_SerialNum+0x4c>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b718:	68fa      	ldr	r2, [r7, #12]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	4413      	add	r3, r2
 800b71e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d009      	beq.n	800b73a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b726:	2208      	movs	r2, #8
 800b728:	4909      	ldr	r1, [pc, #36]	; (800b750 <Get_SerialNum+0x50>)
 800b72a:	68f8      	ldr	r0, [r7, #12]
 800b72c:	f000 f814 	bl	800b758 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b730:	2204      	movs	r2, #4
 800b732:	4908      	ldr	r1, [pc, #32]	; (800b754 <Get_SerialNum+0x54>)
 800b734:	68b8      	ldr	r0, [r7, #8]
 800b736:	f000 f80f 	bl	800b758 <IntToUnicode>
  }
}
 800b73a:	bf00      	nop
 800b73c:	3710      	adds	r7, #16
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}
 800b742:	bf00      	nop
 800b744:	1fff7a10 	.word	0x1fff7a10
 800b748:	1fff7a14 	.word	0x1fff7a14
 800b74c:	1fff7a18 	.word	0x1fff7a18
 800b750:	2000016a 	.word	0x2000016a
 800b754:	2000017a 	.word	0x2000017a

0800b758 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b758:	b480      	push	{r7}
 800b75a:	b087      	sub	sp, #28
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	60f8      	str	r0, [r7, #12]
 800b760:	60b9      	str	r1, [r7, #8]
 800b762:	4613      	mov	r3, r2
 800b764:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b766:	2300      	movs	r3, #0
 800b768:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b76a:	2300      	movs	r3, #0
 800b76c:	75fb      	strb	r3, [r7, #23]
 800b76e:	e027      	b.n	800b7c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	0f1b      	lsrs	r3, r3, #28
 800b774:	2b09      	cmp	r3, #9
 800b776:	d80b      	bhi.n	800b790 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	0f1b      	lsrs	r3, r3, #28
 800b77c:	b2da      	uxtb	r2, r3
 800b77e:	7dfb      	ldrb	r3, [r7, #23]
 800b780:	005b      	lsls	r3, r3, #1
 800b782:	4619      	mov	r1, r3
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	440b      	add	r3, r1
 800b788:	3230      	adds	r2, #48	; 0x30
 800b78a:	b2d2      	uxtb	r2, r2
 800b78c:	701a      	strb	r2, [r3, #0]
 800b78e:	e00a      	b.n	800b7a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	0f1b      	lsrs	r3, r3, #28
 800b794:	b2da      	uxtb	r2, r3
 800b796:	7dfb      	ldrb	r3, [r7, #23]
 800b798:	005b      	lsls	r3, r3, #1
 800b79a:	4619      	mov	r1, r3
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	440b      	add	r3, r1
 800b7a0:	3237      	adds	r2, #55	; 0x37
 800b7a2:	b2d2      	uxtb	r2, r2
 800b7a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	011b      	lsls	r3, r3, #4
 800b7aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b7ac:	7dfb      	ldrb	r3, [r7, #23]
 800b7ae:	005b      	lsls	r3, r3, #1
 800b7b0:	3301      	adds	r3, #1
 800b7b2:	68ba      	ldr	r2, [r7, #8]
 800b7b4:	4413      	add	r3, r2
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b7ba:	7dfb      	ldrb	r3, [r7, #23]
 800b7bc:	3301      	adds	r3, #1
 800b7be:	75fb      	strb	r3, [r7, #23]
 800b7c0:	7dfa      	ldrb	r2, [r7, #23]
 800b7c2:	79fb      	ldrb	r3, [r7, #7]
 800b7c4:	429a      	cmp	r2, r3
 800b7c6:	d3d3      	bcc.n	800b770 <IntToUnicode+0x18>
  }
}
 800b7c8:	bf00      	nop
 800b7ca:	371c      	adds	r7, #28
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d2:	4770      	bx	lr

0800b7d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 800b7d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b80c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800b7d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b7da:	e003      	b.n	800b7e4 <LoopCopyDataInit>

0800b7dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b7dc:	4b0c      	ldr	r3, [pc, #48]	; (800b810 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b7de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b7e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b7e2:	3104      	adds	r1, #4

0800b7e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b7e4:	480b      	ldr	r0, [pc, #44]	; (800b814 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b7e6:	4b0c      	ldr	r3, [pc, #48]	; (800b818 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b7e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b7ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b7ec:	d3f6      	bcc.n	800b7dc <CopyDataInit>
  ldr  r2, =_sbss
 800b7ee:	4a0b      	ldr	r2, [pc, #44]	; (800b81c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b7f0:	e002      	b.n	800b7f8 <LoopFillZerobss>

0800b7f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800b7f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b7f4:	f842 3b04 	str.w	r3, [r2], #4

0800b7f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b7f8:	4b09      	ldr	r3, [pc, #36]	; (800b820 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b7fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b7fc:	d3f9      	bcc.n	800b7f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b7fe:	f7ff f911 	bl	800aa24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b802:	f000 f8c3 	bl	800b98c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b806:	f7fe fd4a 	bl	800a29e <main>
  bx  lr    
 800b80a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800b80c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800b810:	0800be14 	.word	0x0800be14
  ldr  r0, =_sdata
 800b814:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b818:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 800b81c:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 800b820:	20001ce8 	.word	0x20001ce8

0800b824 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b824:	e7fe      	b.n	800b824 <ADC_IRQHandler>

0800b826 <_Znwj>:
 800b826:	b510      	push	{r4, lr}
 800b828:	2800      	cmp	r0, #0
 800b82a:	bf14      	ite	ne
 800b82c:	4604      	movne	r4, r0
 800b82e:	2401      	moveq	r4, #1
 800b830:	4620      	mov	r0, r4
 800b832:	f000 f8cf 	bl	800b9d4 <malloc>
 800b836:	b930      	cbnz	r0, 800b846 <_Znwj+0x20>
 800b838:	f000 f806 	bl	800b848 <_ZSt15get_new_handlerv>
 800b83c:	b908      	cbnz	r0, 800b842 <_Znwj+0x1c>
 800b83e:	f000 f891 	bl	800b964 <abort>
 800b842:	4780      	blx	r0
 800b844:	e7f4      	b.n	800b830 <_Znwj+0xa>
 800b846:	bd10      	pop	{r4, pc}

0800b848 <_ZSt15get_new_handlerv>:
 800b848:	4b02      	ldr	r3, [pc, #8]	; (800b854 <_ZSt15get_new_handlerv+0xc>)
 800b84a:	6818      	ldr	r0, [r3, #0]
 800b84c:	f3bf 8f5b 	dmb	ish
 800b850:	4770      	bx	lr
 800b852:	bf00      	nop
 800b854:	20000234 	.word	0x20000234

0800b858 <_ZdlPv>:
 800b858:	f000 b8c4 	b.w	800b9e4 <free>

0800b85c <_ZNSaIcEC1Ev>:
 800b85c:	4770      	bx	lr

0800b85e <_ZNSaIcED1Ev>:
 800b85e:	4770      	bx	lr

0800b860 <_ZSt17__throw_bad_allocv>:
 800b860:	b508      	push	{r3, lr}
 800b862:	f000 f87f 	bl	800b964 <abort>

0800b866 <_ZSt19__throw_logic_errorPKc>:
 800b866:	b508      	push	{r3, lr}
 800b868:	f000 f87c 	bl	800b964 <abort>

0800b86c <_ZSt20__throw_length_errorPKc>:
 800b86c:	b508      	push	{r3, lr}
 800b86e:	f000 f879 	bl	800b964 <abort>

0800b872 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 800b872:	b10a      	cbz	r2, 800b878 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 800b874:	f000 b8be 	b.w	800b9f4 <memcpy>
 800b878:	4770      	bx	lr
	...

0800b87c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800b87c:	b508      	push	{r3, lr}
 800b87e:	680b      	ldr	r3, [r1, #0]
 800b880:	2b00      	cmp	r3, #0
 800b882:	da02      	bge.n	800b88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 800b884:	4809      	ldr	r0, [pc, #36]	; (800b8ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 800b886:	f7ff fff1 	bl	800b86c <_ZSt20__throw_length_errorPKc>
 800b88a:	4293      	cmp	r3, r2
 800b88c:	d908      	bls.n	800b8a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 800b88e:	0052      	lsls	r2, r2, #1
 800b890:	4293      	cmp	r3, r2
 800b892:	d205      	bcs.n	800b8a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 800b894:	2a00      	cmp	r2, #0
 800b896:	bfb6      	itet	lt
 800b898:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800b89c:	600a      	strge	r2, [r1, #0]
 800b89e:	600b      	strlt	r3, [r1, #0]
 800b8a0:	6808      	ldr	r0, [r1, #0]
 800b8a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b8a6:	3001      	adds	r0, #1
 800b8a8:	f7ff bfbd 	b.w	800b826 <_Znwj>
 800b8ac:	0800bdea 	.word	0x0800bdea

0800b8b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	f853 0b08 	ldr.w	r0, [r3], #8
 800b8b6:	4298      	cmp	r0, r3
 800b8b8:	d001      	beq.n	800b8be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800b8ba:	f7ff bfcd 	b.w	800b858 <_ZdlPv>
 800b8be:	4770      	bx	lr

0800b8c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800b8c0:	2a01      	cmp	r2, #1
 800b8c2:	b510      	push	{r4, lr}
 800b8c4:	d102      	bne.n	800b8cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 800b8c6:	780a      	ldrb	r2, [r1, #0]
 800b8c8:	7002      	strb	r2, [r0, #0]
 800b8ca:	bd10      	pop	{r4, pc}
 800b8cc:	f7ff ffd1 	bl	800b872 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 800b8d0:	e7fb      	b.n	800b8ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

0800b8d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800b8d2:	b508      	push	{r3, lr}
 800b8d4:	1a52      	subs	r2, r2, r1
 800b8d6:	f7ff fff3 	bl	800b8c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b8da:	bd08      	pop	{r3, pc}

0800b8dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800b8dc:	b510      	push	{r4, lr}
 800b8de:	4604      	mov	r4, r0
 800b8e0:	f7ff ffe6 	bl	800b8b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800b8e4:	4620      	mov	r0, r4
 800b8e6:	bd10      	pop	{r4, pc}

0800b8e8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 800b8e8:	6840      	ldr	r0, [r0, #4]
 800b8ea:	4770      	bx	lr

0800b8ec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800b8ec:	6800      	ldr	r0, [r0, #0]
 800b8ee:	4770      	bx	lr

0800b8f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800b8f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b8f2:	4604      	mov	r4, r0
 800b8f4:	4616      	mov	r6, r2
 800b8f6:	460d      	mov	r5, r1
 800b8f8:	b919      	cbnz	r1, 800b902 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800b8fa:	b112      	cbz	r2, 800b902 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800b8fc:	480d      	ldr	r0, [pc, #52]	; (800b934 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800b8fe:	f7ff ffb2 	bl	800b866 <_ZSt19__throw_logic_errorPKc>
 800b902:	1b73      	subs	r3, r6, r5
 800b904:	2b0f      	cmp	r3, #15
 800b906:	9301      	str	r3, [sp, #4]
 800b908:	d907      	bls.n	800b91a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800b90a:	2200      	movs	r2, #0
 800b90c:	a901      	add	r1, sp, #4
 800b90e:	4620      	mov	r0, r4
 800b910:	f7ff ffb4 	bl	800b87c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800b914:	9b01      	ldr	r3, [sp, #4]
 800b916:	6020      	str	r0, [r4, #0]
 800b918:	60a3      	str	r3, [r4, #8]
 800b91a:	4632      	mov	r2, r6
 800b91c:	4629      	mov	r1, r5
 800b91e:	6820      	ldr	r0, [r4, #0]
 800b920:	f7ff ffd7 	bl	800b8d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800b924:	9b01      	ldr	r3, [sp, #4]
 800b926:	6822      	ldr	r2, [r4, #0]
 800b928:	6063      	str	r3, [r4, #4]
 800b92a:	2100      	movs	r1, #0
 800b92c:	54d1      	strb	r1, [r2, r3]
 800b92e:	b002      	add	sp, #8
 800b930:	bd70      	pop	{r4, r5, r6, pc}
 800b932:	bf00      	nop
 800b934:	0800bdc0 	.word	0x0800bdc0

0800b938 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 800b938:	b538      	push	{r3, r4, r5, lr}
 800b93a:	f100 0308 	add.w	r3, r0, #8
 800b93e:	4604      	mov	r4, r0
 800b940:	6003      	str	r3, [r0, #0]
 800b942:	460d      	mov	r5, r1
 800b944:	b159      	cbz	r1, 800b95e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800b946:	4608      	mov	r0, r1
 800b948:	f7f4 fc66 	bl	8000218 <strlen>
 800b94c:	182a      	adds	r2, r5, r0
 800b94e:	4620      	mov	r0, r4
 800b950:	f04f 0300 	mov.w	r3, #0
 800b954:	4629      	mov	r1, r5
 800b956:	f7ff ffcb 	bl	800b8f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800b95a:	4620      	mov	r0, r4
 800b95c:	bd38      	pop	{r3, r4, r5, pc}
 800b95e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b962:	e7f4      	b.n	800b94e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0800b964 <abort>:
 800b964:	b508      	push	{r3, lr}
 800b966:	2006      	movs	r0, #6
 800b968:	f000 f950 	bl	800bc0c <raise>
 800b96c:	2001      	movs	r0, #1
 800b96e:	f7ff f823 	bl	800a9b8 <_exit>

0800b972 <atexit>:
 800b972:	2300      	movs	r3, #0
 800b974:	4601      	mov	r1, r0
 800b976:	461a      	mov	r2, r3
 800b978:	4618      	mov	r0, r3
 800b97a:	f000 b963 	b.w	800bc44 <__register_exitproc>
	...

0800b980 <__errno>:
 800b980:	4b01      	ldr	r3, [pc, #4]	; (800b988 <__errno+0x8>)
 800b982:	6818      	ldr	r0, [r3, #0]
 800b984:	4770      	bx	lr
 800b986:	bf00      	nop
 800b988:	20000184 	.word	0x20000184

0800b98c <__libc_init_array>:
 800b98c:	b570      	push	{r4, r5, r6, lr}
 800b98e:	4e0d      	ldr	r6, [pc, #52]	; (800b9c4 <__libc_init_array+0x38>)
 800b990:	4c0d      	ldr	r4, [pc, #52]	; (800b9c8 <__libc_init_array+0x3c>)
 800b992:	1ba4      	subs	r4, r4, r6
 800b994:	10a4      	asrs	r4, r4, #2
 800b996:	2500      	movs	r5, #0
 800b998:	42a5      	cmp	r5, r4
 800b99a:	d109      	bne.n	800b9b0 <__libc_init_array+0x24>
 800b99c:	4e0b      	ldr	r6, [pc, #44]	; (800b9cc <__libc_init_array+0x40>)
 800b99e:	4c0c      	ldr	r4, [pc, #48]	; (800b9d0 <__libc_init_array+0x44>)
 800b9a0:	f000 f9b6 	bl	800bd10 <_init>
 800b9a4:	1ba4      	subs	r4, r4, r6
 800b9a6:	10a4      	asrs	r4, r4, #2
 800b9a8:	2500      	movs	r5, #0
 800b9aa:	42a5      	cmp	r5, r4
 800b9ac:	d105      	bne.n	800b9ba <__libc_init_array+0x2e>
 800b9ae:	bd70      	pop	{r4, r5, r6, pc}
 800b9b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b9b4:	4798      	blx	r3
 800b9b6:	3501      	adds	r5, #1
 800b9b8:	e7ee      	b.n	800b998 <__libc_init_array+0xc>
 800b9ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b9be:	4798      	blx	r3
 800b9c0:	3501      	adds	r5, #1
 800b9c2:	e7f2      	b.n	800b9aa <__libc_init_array+0x1e>
 800b9c4:	0800be0c 	.word	0x0800be0c
 800b9c8:	0800be0c 	.word	0x0800be0c
 800b9cc:	0800be0c 	.word	0x0800be0c
 800b9d0:	0800be10 	.word	0x0800be10

0800b9d4 <malloc>:
 800b9d4:	4b02      	ldr	r3, [pc, #8]	; (800b9e0 <malloc+0xc>)
 800b9d6:	4601      	mov	r1, r0
 800b9d8:	6818      	ldr	r0, [r3, #0]
 800b9da:	f000 b885 	b.w	800bae8 <_malloc_r>
 800b9de:	bf00      	nop
 800b9e0:	20000184 	.word	0x20000184

0800b9e4 <free>:
 800b9e4:	4b02      	ldr	r3, [pc, #8]	; (800b9f0 <free+0xc>)
 800b9e6:	4601      	mov	r1, r0
 800b9e8:	6818      	ldr	r0, [r3, #0]
 800b9ea:	f000 b82f 	b.w	800ba4c <_free_r>
 800b9ee:	bf00      	nop
 800b9f0:	20000184 	.word	0x20000184

0800b9f4 <memcpy>:
 800b9f4:	b510      	push	{r4, lr}
 800b9f6:	1e43      	subs	r3, r0, #1
 800b9f8:	440a      	add	r2, r1
 800b9fa:	4291      	cmp	r1, r2
 800b9fc:	d100      	bne.n	800ba00 <memcpy+0xc>
 800b9fe:	bd10      	pop	{r4, pc}
 800ba00:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba04:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba08:	e7f7      	b.n	800b9fa <memcpy+0x6>

0800ba0a <memmove>:
 800ba0a:	4288      	cmp	r0, r1
 800ba0c:	b510      	push	{r4, lr}
 800ba0e:	eb01 0302 	add.w	r3, r1, r2
 800ba12:	d807      	bhi.n	800ba24 <memmove+0x1a>
 800ba14:	1e42      	subs	r2, r0, #1
 800ba16:	4299      	cmp	r1, r3
 800ba18:	d00a      	beq.n	800ba30 <memmove+0x26>
 800ba1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba1e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ba22:	e7f8      	b.n	800ba16 <memmove+0xc>
 800ba24:	4283      	cmp	r3, r0
 800ba26:	d9f5      	bls.n	800ba14 <memmove+0xa>
 800ba28:	1881      	adds	r1, r0, r2
 800ba2a:	1ad2      	subs	r2, r2, r3
 800ba2c:	42d3      	cmn	r3, r2
 800ba2e:	d100      	bne.n	800ba32 <memmove+0x28>
 800ba30:	bd10      	pop	{r4, pc}
 800ba32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba36:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ba3a:	e7f7      	b.n	800ba2c <memmove+0x22>

0800ba3c <memset>:
 800ba3c:	4402      	add	r2, r0
 800ba3e:	4603      	mov	r3, r0
 800ba40:	4293      	cmp	r3, r2
 800ba42:	d100      	bne.n	800ba46 <memset+0xa>
 800ba44:	4770      	bx	lr
 800ba46:	f803 1b01 	strb.w	r1, [r3], #1
 800ba4a:	e7f9      	b.n	800ba40 <memset+0x4>

0800ba4c <_free_r>:
 800ba4c:	b538      	push	{r3, r4, r5, lr}
 800ba4e:	4605      	mov	r5, r0
 800ba50:	2900      	cmp	r1, #0
 800ba52:	d045      	beq.n	800bae0 <_free_r+0x94>
 800ba54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba58:	1f0c      	subs	r4, r1, #4
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	bfb8      	it	lt
 800ba5e:	18e4      	addlt	r4, r4, r3
 800ba60:	f000 f954 	bl	800bd0c <__malloc_lock>
 800ba64:	4a1f      	ldr	r2, [pc, #124]	; (800bae4 <_free_r+0x98>)
 800ba66:	6813      	ldr	r3, [r2, #0]
 800ba68:	4610      	mov	r0, r2
 800ba6a:	b933      	cbnz	r3, 800ba7a <_free_r+0x2e>
 800ba6c:	6063      	str	r3, [r4, #4]
 800ba6e:	6014      	str	r4, [r2, #0]
 800ba70:	4628      	mov	r0, r5
 800ba72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba76:	f000 b94a 	b.w	800bd0e <__malloc_unlock>
 800ba7a:	42a3      	cmp	r3, r4
 800ba7c:	d90c      	bls.n	800ba98 <_free_r+0x4c>
 800ba7e:	6821      	ldr	r1, [r4, #0]
 800ba80:	1862      	adds	r2, r4, r1
 800ba82:	4293      	cmp	r3, r2
 800ba84:	bf04      	itt	eq
 800ba86:	681a      	ldreq	r2, [r3, #0]
 800ba88:	685b      	ldreq	r3, [r3, #4]
 800ba8a:	6063      	str	r3, [r4, #4]
 800ba8c:	bf04      	itt	eq
 800ba8e:	1852      	addeq	r2, r2, r1
 800ba90:	6022      	streq	r2, [r4, #0]
 800ba92:	6004      	str	r4, [r0, #0]
 800ba94:	e7ec      	b.n	800ba70 <_free_r+0x24>
 800ba96:	4613      	mov	r3, r2
 800ba98:	685a      	ldr	r2, [r3, #4]
 800ba9a:	b10a      	cbz	r2, 800baa0 <_free_r+0x54>
 800ba9c:	42a2      	cmp	r2, r4
 800ba9e:	d9fa      	bls.n	800ba96 <_free_r+0x4a>
 800baa0:	6819      	ldr	r1, [r3, #0]
 800baa2:	1858      	adds	r0, r3, r1
 800baa4:	42a0      	cmp	r0, r4
 800baa6:	d10b      	bne.n	800bac0 <_free_r+0x74>
 800baa8:	6820      	ldr	r0, [r4, #0]
 800baaa:	4401      	add	r1, r0
 800baac:	1858      	adds	r0, r3, r1
 800baae:	4282      	cmp	r2, r0
 800bab0:	6019      	str	r1, [r3, #0]
 800bab2:	d1dd      	bne.n	800ba70 <_free_r+0x24>
 800bab4:	6810      	ldr	r0, [r2, #0]
 800bab6:	6852      	ldr	r2, [r2, #4]
 800bab8:	605a      	str	r2, [r3, #4]
 800baba:	4401      	add	r1, r0
 800babc:	6019      	str	r1, [r3, #0]
 800babe:	e7d7      	b.n	800ba70 <_free_r+0x24>
 800bac0:	d902      	bls.n	800bac8 <_free_r+0x7c>
 800bac2:	230c      	movs	r3, #12
 800bac4:	602b      	str	r3, [r5, #0]
 800bac6:	e7d3      	b.n	800ba70 <_free_r+0x24>
 800bac8:	6820      	ldr	r0, [r4, #0]
 800baca:	1821      	adds	r1, r4, r0
 800bacc:	428a      	cmp	r2, r1
 800bace:	bf04      	itt	eq
 800bad0:	6811      	ldreq	r1, [r2, #0]
 800bad2:	6852      	ldreq	r2, [r2, #4]
 800bad4:	6062      	str	r2, [r4, #4]
 800bad6:	bf04      	itt	eq
 800bad8:	1809      	addeq	r1, r1, r0
 800bada:	6021      	streq	r1, [r4, #0]
 800badc:	605c      	str	r4, [r3, #4]
 800bade:	e7c7      	b.n	800ba70 <_free_r+0x24>
 800bae0:	bd38      	pop	{r3, r4, r5, pc}
 800bae2:	bf00      	nop
 800bae4:	20000238 	.word	0x20000238

0800bae8 <_malloc_r>:
 800bae8:	b570      	push	{r4, r5, r6, lr}
 800baea:	1ccd      	adds	r5, r1, #3
 800baec:	f025 0503 	bic.w	r5, r5, #3
 800baf0:	3508      	adds	r5, #8
 800baf2:	2d0c      	cmp	r5, #12
 800baf4:	bf38      	it	cc
 800baf6:	250c      	movcc	r5, #12
 800baf8:	2d00      	cmp	r5, #0
 800bafa:	4606      	mov	r6, r0
 800bafc:	db01      	blt.n	800bb02 <_malloc_r+0x1a>
 800bafe:	42a9      	cmp	r1, r5
 800bb00:	d903      	bls.n	800bb0a <_malloc_r+0x22>
 800bb02:	230c      	movs	r3, #12
 800bb04:	6033      	str	r3, [r6, #0]
 800bb06:	2000      	movs	r0, #0
 800bb08:	bd70      	pop	{r4, r5, r6, pc}
 800bb0a:	f000 f8ff 	bl	800bd0c <__malloc_lock>
 800bb0e:	4a21      	ldr	r2, [pc, #132]	; (800bb94 <_malloc_r+0xac>)
 800bb10:	6814      	ldr	r4, [r2, #0]
 800bb12:	4621      	mov	r1, r4
 800bb14:	b991      	cbnz	r1, 800bb3c <_malloc_r+0x54>
 800bb16:	4c20      	ldr	r4, [pc, #128]	; (800bb98 <_malloc_r+0xb0>)
 800bb18:	6823      	ldr	r3, [r4, #0]
 800bb1a:	b91b      	cbnz	r3, 800bb24 <_malloc_r+0x3c>
 800bb1c:	4630      	mov	r0, r6
 800bb1e:	f000 f83d 	bl	800bb9c <_sbrk_r>
 800bb22:	6020      	str	r0, [r4, #0]
 800bb24:	4629      	mov	r1, r5
 800bb26:	4630      	mov	r0, r6
 800bb28:	f000 f838 	bl	800bb9c <_sbrk_r>
 800bb2c:	1c43      	adds	r3, r0, #1
 800bb2e:	d124      	bne.n	800bb7a <_malloc_r+0x92>
 800bb30:	230c      	movs	r3, #12
 800bb32:	6033      	str	r3, [r6, #0]
 800bb34:	4630      	mov	r0, r6
 800bb36:	f000 f8ea 	bl	800bd0e <__malloc_unlock>
 800bb3a:	e7e4      	b.n	800bb06 <_malloc_r+0x1e>
 800bb3c:	680b      	ldr	r3, [r1, #0]
 800bb3e:	1b5b      	subs	r3, r3, r5
 800bb40:	d418      	bmi.n	800bb74 <_malloc_r+0x8c>
 800bb42:	2b0b      	cmp	r3, #11
 800bb44:	d90f      	bls.n	800bb66 <_malloc_r+0x7e>
 800bb46:	600b      	str	r3, [r1, #0]
 800bb48:	50cd      	str	r5, [r1, r3]
 800bb4a:	18cc      	adds	r4, r1, r3
 800bb4c:	4630      	mov	r0, r6
 800bb4e:	f000 f8de 	bl	800bd0e <__malloc_unlock>
 800bb52:	f104 000b 	add.w	r0, r4, #11
 800bb56:	1d23      	adds	r3, r4, #4
 800bb58:	f020 0007 	bic.w	r0, r0, #7
 800bb5c:	1ac3      	subs	r3, r0, r3
 800bb5e:	d0d3      	beq.n	800bb08 <_malloc_r+0x20>
 800bb60:	425a      	negs	r2, r3
 800bb62:	50e2      	str	r2, [r4, r3]
 800bb64:	e7d0      	b.n	800bb08 <_malloc_r+0x20>
 800bb66:	428c      	cmp	r4, r1
 800bb68:	684b      	ldr	r3, [r1, #4]
 800bb6a:	bf16      	itet	ne
 800bb6c:	6063      	strne	r3, [r4, #4]
 800bb6e:	6013      	streq	r3, [r2, #0]
 800bb70:	460c      	movne	r4, r1
 800bb72:	e7eb      	b.n	800bb4c <_malloc_r+0x64>
 800bb74:	460c      	mov	r4, r1
 800bb76:	6849      	ldr	r1, [r1, #4]
 800bb78:	e7cc      	b.n	800bb14 <_malloc_r+0x2c>
 800bb7a:	1cc4      	adds	r4, r0, #3
 800bb7c:	f024 0403 	bic.w	r4, r4, #3
 800bb80:	42a0      	cmp	r0, r4
 800bb82:	d005      	beq.n	800bb90 <_malloc_r+0xa8>
 800bb84:	1a21      	subs	r1, r4, r0
 800bb86:	4630      	mov	r0, r6
 800bb88:	f000 f808 	bl	800bb9c <_sbrk_r>
 800bb8c:	3001      	adds	r0, #1
 800bb8e:	d0cf      	beq.n	800bb30 <_malloc_r+0x48>
 800bb90:	6025      	str	r5, [r4, #0]
 800bb92:	e7db      	b.n	800bb4c <_malloc_r+0x64>
 800bb94:	20000238 	.word	0x20000238
 800bb98:	2000023c 	.word	0x2000023c

0800bb9c <_sbrk_r>:
 800bb9c:	b538      	push	{r3, r4, r5, lr}
 800bb9e:	4c06      	ldr	r4, [pc, #24]	; (800bbb8 <_sbrk_r+0x1c>)
 800bba0:	2300      	movs	r3, #0
 800bba2:	4605      	mov	r5, r0
 800bba4:	4608      	mov	r0, r1
 800bba6:	6023      	str	r3, [r4, #0]
 800bba8:	f7fe ff10 	bl	800a9cc <_sbrk>
 800bbac:	1c43      	adds	r3, r0, #1
 800bbae:	d102      	bne.n	800bbb6 <_sbrk_r+0x1a>
 800bbb0:	6823      	ldr	r3, [r4, #0]
 800bbb2:	b103      	cbz	r3, 800bbb6 <_sbrk_r+0x1a>
 800bbb4:	602b      	str	r3, [r5, #0]
 800bbb6:	bd38      	pop	{r3, r4, r5, pc}
 800bbb8:	20001ce4 	.word	0x20001ce4

0800bbbc <_raise_r>:
 800bbbc:	291f      	cmp	r1, #31
 800bbbe:	b538      	push	{r3, r4, r5, lr}
 800bbc0:	4604      	mov	r4, r0
 800bbc2:	460d      	mov	r5, r1
 800bbc4:	d904      	bls.n	800bbd0 <_raise_r+0x14>
 800bbc6:	2316      	movs	r3, #22
 800bbc8:	6003      	str	r3, [r0, #0]
 800bbca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bbce:	bd38      	pop	{r3, r4, r5, pc}
 800bbd0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bbd2:	b112      	cbz	r2, 800bbda <_raise_r+0x1e>
 800bbd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bbd8:	b94b      	cbnz	r3, 800bbee <_raise_r+0x32>
 800bbda:	4620      	mov	r0, r4
 800bbdc:	f000 f830 	bl	800bc40 <_getpid_r>
 800bbe0:	462a      	mov	r2, r5
 800bbe2:	4601      	mov	r1, r0
 800bbe4:	4620      	mov	r0, r4
 800bbe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbea:	f000 b817 	b.w	800bc1c <_kill_r>
 800bbee:	2b01      	cmp	r3, #1
 800bbf0:	d00a      	beq.n	800bc08 <_raise_r+0x4c>
 800bbf2:	1c59      	adds	r1, r3, #1
 800bbf4:	d103      	bne.n	800bbfe <_raise_r+0x42>
 800bbf6:	2316      	movs	r3, #22
 800bbf8:	6003      	str	r3, [r0, #0]
 800bbfa:	2001      	movs	r0, #1
 800bbfc:	e7e7      	b.n	800bbce <_raise_r+0x12>
 800bbfe:	2400      	movs	r4, #0
 800bc00:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bc04:	4628      	mov	r0, r5
 800bc06:	4798      	blx	r3
 800bc08:	2000      	movs	r0, #0
 800bc0a:	e7e0      	b.n	800bbce <_raise_r+0x12>

0800bc0c <raise>:
 800bc0c:	4b02      	ldr	r3, [pc, #8]	; (800bc18 <raise+0xc>)
 800bc0e:	4601      	mov	r1, r0
 800bc10:	6818      	ldr	r0, [r3, #0]
 800bc12:	f7ff bfd3 	b.w	800bbbc <_raise_r>
 800bc16:	bf00      	nop
 800bc18:	20000184 	.word	0x20000184

0800bc1c <_kill_r>:
 800bc1c:	b538      	push	{r3, r4, r5, lr}
 800bc1e:	4c07      	ldr	r4, [pc, #28]	; (800bc3c <_kill_r+0x20>)
 800bc20:	2300      	movs	r3, #0
 800bc22:	4605      	mov	r5, r0
 800bc24:	4608      	mov	r0, r1
 800bc26:	4611      	mov	r1, r2
 800bc28:	6023      	str	r3, [r4, #0]
 800bc2a:	f7fe feb5 	bl	800a998 <_kill>
 800bc2e:	1c43      	adds	r3, r0, #1
 800bc30:	d102      	bne.n	800bc38 <_kill_r+0x1c>
 800bc32:	6823      	ldr	r3, [r4, #0]
 800bc34:	b103      	cbz	r3, 800bc38 <_kill_r+0x1c>
 800bc36:	602b      	str	r3, [r5, #0]
 800bc38:	bd38      	pop	{r3, r4, r5, pc}
 800bc3a:	bf00      	nop
 800bc3c:	20001ce4 	.word	0x20001ce4

0800bc40 <_getpid_r>:
 800bc40:	f7fe bea2 	b.w	800a988 <_getpid>

0800bc44 <__register_exitproc>:
 800bc44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc48:	4d2c      	ldr	r5, [pc, #176]	; (800bcfc <__register_exitproc+0xb8>)
 800bc4a:	682c      	ldr	r4, [r5, #0]
 800bc4c:	4607      	mov	r7, r0
 800bc4e:	460e      	mov	r6, r1
 800bc50:	4691      	mov	r9, r2
 800bc52:	4698      	mov	r8, r3
 800bc54:	b934      	cbnz	r4, 800bc64 <__register_exitproc+0x20>
 800bc56:	4b2a      	ldr	r3, [pc, #168]	; (800bd00 <__register_exitproc+0xbc>)
 800bc58:	4c2a      	ldr	r4, [pc, #168]	; (800bd04 <__register_exitproc+0xc0>)
 800bc5a:	602c      	str	r4, [r5, #0]
 800bc5c:	b113      	cbz	r3, 800bc64 <__register_exitproc+0x20>
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800bc64:	6863      	ldr	r3, [r4, #4]
 800bc66:	2b1f      	cmp	r3, #31
 800bc68:	dd3d      	ble.n	800bce6 <__register_exitproc+0xa2>
 800bc6a:	4b27      	ldr	r3, [pc, #156]	; (800bd08 <__register_exitproc+0xc4>)
 800bc6c:	b91b      	cbnz	r3, 800bc76 <__register_exitproc+0x32>
 800bc6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc76:	208c      	movs	r0, #140	; 0x8c
 800bc78:	f7ff feac 	bl	800b9d4 <malloc>
 800bc7c:	4604      	mov	r4, r0
 800bc7e:	2800      	cmp	r0, #0
 800bc80:	d0f5      	beq.n	800bc6e <__register_exitproc+0x2a>
 800bc82:	2300      	movs	r3, #0
 800bc84:	682a      	ldr	r2, [r5, #0]
 800bc86:	6002      	str	r2, [r0, #0]
 800bc88:	6043      	str	r3, [r0, #4]
 800bc8a:	6028      	str	r0, [r5, #0]
 800bc8c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 800bc90:	b30f      	cbz	r7, 800bcd6 <__register_exitproc+0x92>
 800bc92:	f44f 7084 	mov.w	r0, #264	; 0x108
 800bc96:	f7ff fe9d 	bl	800b9d4 <malloc>
 800bc9a:	2800      	cmp	r0, #0
 800bc9c:	d0e7      	beq.n	800bc6e <__register_exitproc+0x2a>
 800bc9e:	2300      	movs	r3, #0
 800bca0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 800bca4:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 800bca8:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800bcac:	6862      	ldr	r2, [r4, #4]
 800bcae:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	4093      	lsls	r3, r2
 800bcb6:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 800bcba:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 800bcbe:	431a      	orrs	r2, r3
 800bcc0:	2f02      	cmp	r7, #2
 800bcc2:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 800bcc6:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 800bcca:	bf02      	ittt	eq
 800bccc:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 800bcd0:	4313      	orreq	r3, r2
 800bcd2:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 800bcd6:	6863      	ldr	r3, [r4, #4]
 800bcd8:	1c5a      	adds	r2, r3, #1
 800bcda:	3302      	adds	r3, #2
 800bcdc:	6062      	str	r2, [r4, #4]
 800bcde:	2000      	movs	r0, #0
 800bce0:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 800bce4:	e7c5      	b.n	800bc72 <__register_exitproc+0x2e>
 800bce6:	2f00      	cmp	r7, #0
 800bce8:	d0f5      	beq.n	800bcd6 <__register_exitproc+0x92>
 800bcea:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800bcee:	2800      	cmp	r0, #0
 800bcf0:	d1dc      	bne.n	800bcac <__register_exitproc+0x68>
 800bcf2:	4b05      	ldr	r3, [pc, #20]	; (800bd08 <__register_exitproc+0xc4>)
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d0ba      	beq.n	800bc6e <__register_exitproc+0x2a>
 800bcf8:	e7cb      	b.n	800bc92 <__register_exitproc+0x4e>
 800bcfa:	bf00      	nop
 800bcfc:	200002cc 	.word	0x200002cc
 800bd00:	00000000 	.word	0x00000000
 800bd04:	20000240 	.word	0x20000240
 800bd08:	0800b9d5 	.word	0x0800b9d5

0800bd0c <__malloc_lock>:
 800bd0c:	4770      	bx	lr

0800bd0e <__malloc_unlock>:
 800bd0e:	4770      	bx	lr

0800bd10 <_init>:
 800bd10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd12:	bf00      	nop
 800bd14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd16:	bc08      	pop	{r3}
 800bd18:	469e      	mov	lr, r3
 800bd1a:	4770      	bx	lr

0800bd1c <_fini>:
 800bd1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd1e:	bf00      	nop
 800bd20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd22:	bc08      	pop	{r3}
 800bd24:	469e      	mov	lr, r3
 800bd26:	4770      	bx	lr
