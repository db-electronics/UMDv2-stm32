
UMDv2-stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005504  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080056dc  080056dc  000156dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056f4  080056f4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080056f4  080056f4  000156f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056fc  080056fc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056fc  080056fc  000156fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005700  08005700  00015700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005704  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000728  2000000c  08005710  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000734  08005710  00020734  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001766f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000375e  00000000  00000000  000376ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001508  00000000  00000000  0003ae10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001330  00000000  00000000  0003c318  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024a4d  00000000  00000000  0003d648  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014efd  00000000  00000000  00062095  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d3af6  00000000  00000000  00076f92  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014aa88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005718  00000000  00000000  0014ab04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080056c4 	.word	0x080056c4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080056c4 	.word	0x080056c4

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800051c:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <HAL_Init+0x40>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a0d      	ldr	r2, [pc, #52]	; (8000558 <HAL_Init+0x40>)
 8000522:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000526:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000528:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <HAL_Init+0x40>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a0a      	ldr	r2, [pc, #40]	; (8000558 <HAL_Init+0x40>)
 800052e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000532:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000534:	4b08      	ldr	r3, [pc, #32]	; (8000558 <HAL_Init+0x40>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a07      	ldr	r2, [pc, #28]	; (8000558 <HAL_Init+0x40>)
 800053a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800053e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000540:	2003      	movs	r0, #3
 8000542:	f000 fba1 	bl	8000c88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000546:	2000      	movs	r0, #0
 8000548:	f000 f808 	bl	800055c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800054c:	f004 feea 	bl	8005324 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000550:	2300      	movs	r3, #0
}
 8000552:	4618      	mov	r0, r3
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40023c00 	.word	0x40023c00

0800055c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <HAL_InitTick+0x54>)
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <HAL_InitTick+0x58>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	4619      	mov	r1, r3
 800056e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000572:	fbb3 f3f1 	udiv	r3, r3, r1
 8000576:	fbb2 f3f3 	udiv	r3, r2, r3
 800057a:	4618      	mov	r0, r3
 800057c:	f000 fbab 	bl	8000cd6 <HAL_SYSTICK_Config>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000586:	2301      	movs	r3, #1
 8000588:	e00e      	b.n	80005a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2b0f      	cmp	r3, #15
 800058e:	d80a      	bhi.n	80005a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000590:	2200      	movs	r2, #0
 8000592:	6879      	ldr	r1, [r7, #4]
 8000594:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000598:	f000 fb81 	bl	8000c9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800059c:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <HAL_InitTick+0x5c>)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005a2:	2300      	movs	r3, #0
 80005a4:	e000      	b.n	80005a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005a6:	2301      	movs	r3, #1
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000008 	.word	0x20000008
 80005b4:	20000004 	.word	0x20000004
 80005b8:	20000000 	.word	0x20000000

080005bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005c0:	4b06      	ldr	r3, [pc, #24]	; (80005dc <HAL_IncTick+0x20>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	461a      	mov	r2, r3
 80005c6:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <HAL_IncTick+0x24>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4413      	add	r3, r2
 80005cc:	4a04      	ldr	r2, [pc, #16]	; (80005e0 <HAL_IncTick+0x24>)
 80005ce:	6013      	str	r3, [r2, #0]
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	20000004 	.word	0x20000004
 80005e0:	20000030 	.word	0x20000030

080005e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  return uwTick;
 80005e8:	4b03      	ldr	r3, [pc, #12]	; (80005f8 <HAL_GetTick+0x14>)
 80005ea:	681b      	ldr	r3, [r3, #0]
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	20000030 	.word	0x20000030

080005fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000604:	f7ff ffee 	bl	80005e4 <HAL_GetTick>
 8000608:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000614:	d005      	beq.n	8000622 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000616:	4b09      	ldr	r3, [pc, #36]	; (800063c <HAL_Delay+0x40>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	461a      	mov	r2, r3
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	4413      	add	r3, r2
 8000620:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000622:	bf00      	nop
 8000624:	f7ff ffde 	bl	80005e4 <HAL_GetTick>
 8000628:	4602      	mov	r2, r0
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	1ad3      	subs	r3, r2, r3
 800062e:	68fa      	ldr	r2, [r7, #12]
 8000630:	429a      	cmp	r2, r3
 8000632:	d8f7      	bhi.n	8000624 <HAL_Delay+0x28>
  {
  }
}
 8000634:	bf00      	nop
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000004 	.word	0x20000004

08000640 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000648:	2300      	movs	r3, #0
 800064a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d101      	bne.n	8000656 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000652:	2301      	movs	r3, #1
 8000654:	e033      	b.n	80006be <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065a:	2b00      	cmp	r3, #0
 800065c:	d109      	bne.n	8000672 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	f004 f814 	bl	800468c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2200      	movs	r2, #0
 8000668:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2200      	movs	r2, #0
 800066e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000676:	f003 0310 	and.w	r3, r3, #16
 800067a:	2b00      	cmp	r3, #0
 800067c:	d118      	bne.n	80006b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000682:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000686:	f023 0302 	bic.w	r3, r3, #2
 800068a:	f043 0202 	orr.w	r2, r3, #2
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f000 f94a 	bl	800092c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2200      	movs	r2, #0
 800069c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a2:	f023 0303 	bic.w	r3, r3, #3
 80006a6:	f043 0201 	orr.w	r2, r3, #1
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	641a      	str	r2, [r3, #64]	; 0x40
 80006ae:	e001      	b.n	80006b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80006b0:	2301      	movs	r3, #1
 80006b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2200      	movs	r2, #0
 80006b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80006bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3710      	adds	r7, #16
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
	...

080006c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d101      	bne.n	80006e4 <HAL_ADC_ConfigChannel+0x1c>
 80006e0:	2302      	movs	r3, #2
 80006e2:	e113      	b.n	800090c <HAL_ADC_ConfigChannel+0x244>
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2201      	movs	r2, #1
 80006e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2b09      	cmp	r3, #9
 80006f2:	d925      	bls.n	8000740 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	68d9      	ldr	r1, [r3, #12]
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	b29b      	uxth	r3, r3
 8000700:	461a      	mov	r2, r3
 8000702:	4613      	mov	r3, r2
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	4413      	add	r3, r2
 8000708:	3b1e      	subs	r3, #30
 800070a:	2207      	movs	r2, #7
 800070c:	fa02 f303 	lsl.w	r3, r2, r3
 8000710:	43da      	mvns	r2, r3
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	400a      	ands	r2, r1
 8000718:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	68d9      	ldr	r1, [r3, #12]
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	689a      	ldr	r2, [r3, #8]
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	b29b      	uxth	r3, r3
 800072a:	4618      	mov	r0, r3
 800072c:	4603      	mov	r3, r0
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	4403      	add	r3, r0
 8000732:	3b1e      	subs	r3, #30
 8000734:	409a      	lsls	r2, r3
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	430a      	orrs	r2, r1
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	e022      	b.n	8000786 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	6919      	ldr	r1, [r3, #16]
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	b29b      	uxth	r3, r3
 800074c:	461a      	mov	r2, r3
 800074e:	4613      	mov	r3, r2
 8000750:	005b      	lsls	r3, r3, #1
 8000752:	4413      	add	r3, r2
 8000754:	2207      	movs	r2, #7
 8000756:	fa02 f303 	lsl.w	r3, r2, r3
 800075a:	43da      	mvns	r2, r3
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	400a      	ands	r2, r1
 8000762:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	6919      	ldr	r1, [r3, #16]
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	689a      	ldr	r2, [r3, #8]
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	b29b      	uxth	r3, r3
 8000774:	4618      	mov	r0, r3
 8000776:	4603      	mov	r3, r0
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	4403      	add	r3, r0
 800077c:	409a      	lsls	r2, r3
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	430a      	orrs	r2, r1
 8000784:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	2b06      	cmp	r3, #6
 800078c:	d824      	bhi.n	80007d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	685a      	ldr	r2, [r3, #4]
 8000798:	4613      	mov	r3, r2
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	4413      	add	r3, r2
 800079e:	3b05      	subs	r3, #5
 80007a0:	221f      	movs	r2, #31
 80007a2:	fa02 f303 	lsl.w	r3, r2, r3
 80007a6:	43da      	mvns	r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	400a      	ands	r2, r1
 80007ae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	4618      	mov	r0, r3
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	685a      	ldr	r2, [r3, #4]
 80007c2:	4613      	mov	r3, r2
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	4413      	add	r3, r2
 80007c8:	3b05      	subs	r3, #5
 80007ca:	fa00 f203 	lsl.w	r2, r0, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	430a      	orrs	r2, r1
 80007d4:	635a      	str	r2, [r3, #52]	; 0x34
 80007d6:	e04c      	b.n	8000872 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	2b0c      	cmp	r3, #12
 80007de:	d824      	bhi.n	800082a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	685a      	ldr	r2, [r3, #4]
 80007ea:	4613      	mov	r3, r2
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	4413      	add	r3, r2
 80007f0:	3b23      	subs	r3, #35	; 0x23
 80007f2:	221f      	movs	r2, #31
 80007f4:	fa02 f303 	lsl.w	r3, r2, r3
 80007f8:	43da      	mvns	r2, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	400a      	ands	r2, r1
 8000800:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	b29b      	uxth	r3, r3
 800080e:	4618      	mov	r0, r3
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	685a      	ldr	r2, [r3, #4]
 8000814:	4613      	mov	r3, r2
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	4413      	add	r3, r2
 800081a:	3b23      	subs	r3, #35	; 0x23
 800081c:	fa00 f203 	lsl.w	r2, r0, r3
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	430a      	orrs	r2, r1
 8000826:	631a      	str	r2, [r3, #48]	; 0x30
 8000828:	e023      	b.n	8000872 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	685a      	ldr	r2, [r3, #4]
 8000834:	4613      	mov	r3, r2
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	4413      	add	r3, r2
 800083a:	3b41      	subs	r3, #65	; 0x41
 800083c:	221f      	movs	r2, #31
 800083e:	fa02 f303 	lsl.w	r3, r2, r3
 8000842:	43da      	mvns	r2, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	400a      	ands	r2, r1
 800084a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	b29b      	uxth	r3, r3
 8000858:	4618      	mov	r0, r3
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	685a      	ldr	r2, [r3, #4]
 800085e:	4613      	mov	r3, r2
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	4413      	add	r3, r2
 8000864:	3b41      	subs	r3, #65	; 0x41
 8000866:	fa00 f203 	lsl.w	r2, r0, r3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	430a      	orrs	r2, r1
 8000870:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000872:	4b29      	ldr	r3, [pc, #164]	; (8000918 <HAL_ADC_ConfigChannel+0x250>)
 8000874:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a28      	ldr	r2, [pc, #160]	; (800091c <HAL_ADC_ConfigChannel+0x254>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d10f      	bne.n	80008a0 <HAL_ADC_ConfigChannel+0x1d8>
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b12      	cmp	r3, #18
 8000886:	d10b      	bne.n	80008a0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a1d      	ldr	r2, [pc, #116]	; (800091c <HAL_ADC_ConfigChannel+0x254>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d12b      	bne.n	8000902 <HAL_ADC_ConfigChannel+0x23a>
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a1c      	ldr	r2, [pc, #112]	; (8000920 <HAL_ADC_ConfigChannel+0x258>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d003      	beq.n	80008bc <HAL_ADC_ConfigChannel+0x1f4>
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b11      	cmp	r3, #17
 80008ba:	d122      	bne.n	8000902 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a11      	ldr	r2, [pc, #68]	; (8000920 <HAL_ADC_ConfigChannel+0x258>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d111      	bne.n	8000902 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <HAL_ADC_ConfigChannel+0x25c>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a11      	ldr	r2, [pc, #68]	; (8000928 <HAL_ADC_ConfigChannel+0x260>)
 80008e4:	fba2 2303 	umull	r2, r3, r2, r3
 80008e8:	0c9a      	lsrs	r2, r3, #18
 80008ea:	4613      	mov	r3, r2
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	4413      	add	r3, r2
 80008f0:	005b      	lsls	r3, r3, #1
 80008f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80008f4:	e002      	b.n	80008fc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	3b01      	subs	r3, #1
 80008fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d1f9      	bne.n	80008f6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2200      	movs	r2, #0
 8000906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800090a:	2300      	movs	r3, #0
}
 800090c:	4618      	mov	r0, r3
 800090e:	3714      	adds	r7, #20
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	40012300 	.word	0x40012300
 800091c:	40012000 	.word	0x40012000
 8000920:	10000012 	.word	0x10000012
 8000924:	20000008 	.word	0x20000008
 8000928:	431bde83 	.word	0x431bde83

0800092c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000934:	4b79      	ldr	r3, [pc, #484]	; (8000b1c <ADC_Init+0x1f0>)
 8000936:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	685a      	ldr	r2, [r3, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	431a      	orrs	r2, r3
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	685a      	ldr	r2, [r3, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000960:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	6859      	ldr	r1, [r3, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	691b      	ldr	r3, [r3, #16]
 800096c:	021a      	lsls	r2, r3, #8
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	430a      	orrs	r2, r1
 8000974:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	685a      	ldr	r2, [r3, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000984:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	6859      	ldr	r1, [r3, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	689a      	ldr	r2, [r3, #8]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	430a      	orrs	r2, r1
 8000996:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	689a      	ldr	r2, [r3, #8]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80009a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	6899      	ldr	r1, [r3, #8]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	68da      	ldr	r2, [r3, #12]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	430a      	orrs	r2, r1
 80009b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009be:	4a58      	ldr	r2, [pc, #352]	; (8000b20 <ADC_Init+0x1f4>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d022      	beq.n	8000a0a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	689a      	ldr	r2, [r3, #8]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80009d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	6899      	ldr	r1, [r3, #8]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	430a      	orrs	r2, r1
 80009e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	689a      	ldr	r2, [r3, #8]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80009f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	6899      	ldr	r1, [r3, #8]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	430a      	orrs	r2, r1
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	e00f      	b.n	8000a2a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	689a      	ldr	r2, [r3, #8]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000a18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	689a      	ldr	r2, [r3, #8]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000a28:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	689a      	ldr	r2, [r3, #8]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f022 0202 	bic.w	r2, r2, #2
 8000a38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	6899      	ldr	r1, [r3, #8]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	7e1b      	ldrb	r3, [r3, #24]
 8000a44:	005a      	lsls	r2, r3, #1
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	430a      	orrs	r2, r1
 8000a4c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d01b      	beq.n	8000a90 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	685a      	ldr	r2, [r3, #4]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000a66:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	685a      	ldr	r2, [r3, #4]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000a76:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	6859      	ldr	r1, [r3, #4]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a82:	3b01      	subs	r3, #1
 8000a84:	035a      	lsls	r2, r3, #13
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	e007      	b.n	8000aa0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	685a      	ldr	r2, [r3, #4]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000a9e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000aae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	69db      	ldr	r3, [r3, #28]
 8000aba:	3b01      	subs	r3, #1
 8000abc:	051a      	lsls	r2, r3, #20
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	430a      	orrs	r2, r1
 8000ac4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	689a      	ldr	r2, [r3, #8]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000ad4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	6899      	ldr	r1, [r3, #8]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000ae2:	025a      	lsls	r2, r3, #9
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	689a      	ldr	r2, [r3, #8]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000afa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	6899      	ldr	r1, [r3, #8]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	695b      	ldr	r3, [r3, #20]
 8000b06:	029a      	lsls	r2, r3, #10
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	609a      	str	r2, [r3, #8]
}
 8000b10:	bf00      	nop
 8000b12:	3714      	adds	r7, #20
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	40012300 	.word	0x40012300
 8000b20:	0f000001 	.word	0x0f000001

08000b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f003 0307 	and.w	r3, r3, #7
 8000b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <__NVIC_SetPriorityGrouping+0x44>)
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b3a:	68ba      	ldr	r2, [r7, #8]
 8000b3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b40:	4013      	ands	r3, r2
 8000b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b56:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <__NVIC_SetPriorityGrouping+0x44>)
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	60d3      	str	r3, [r2, #12]
}
 8000b5c:	bf00      	nop
 8000b5e:	3714      	adds	r7, #20
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b70:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <__NVIC_GetPriorityGrouping+0x18>)
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	0a1b      	lsrs	r3, r3, #8
 8000b76:	f003 0307 	and.w	r3, r3, #7
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	6039      	str	r1, [r7, #0]
 8000b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	db0a      	blt.n	8000bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	490c      	ldr	r1, [pc, #48]	; (8000bd4 <__NVIC_SetPriority+0x4c>)
 8000ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba6:	0112      	lsls	r2, r2, #4
 8000ba8:	b2d2      	uxtb	r2, r2
 8000baa:	440b      	add	r3, r1
 8000bac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bb0:	e00a      	b.n	8000bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	4908      	ldr	r1, [pc, #32]	; (8000bd8 <__NVIC_SetPriority+0x50>)
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	f003 030f 	and.w	r3, r3, #15
 8000bbe:	3b04      	subs	r3, #4
 8000bc0:	0112      	lsls	r2, r2, #4
 8000bc2:	b2d2      	uxtb	r2, r2
 8000bc4:	440b      	add	r3, r1
 8000bc6:	761a      	strb	r2, [r3, #24]
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	e000e100 	.word	0xe000e100
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b089      	sub	sp, #36	; 0x24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	f003 0307 	and.w	r3, r3, #7
 8000bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	f1c3 0307 	rsb	r3, r3, #7
 8000bf6:	2b04      	cmp	r3, #4
 8000bf8:	bf28      	it	cs
 8000bfa:	2304      	movcs	r3, #4
 8000bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3304      	adds	r3, #4
 8000c02:	2b06      	cmp	r3, #6
 8000c04:	d902      	bls.n	8000c0c <NVIC_EncodePriority+0x30>
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	3b03      	subs	r3, #3
 8000c0a:	e000      	b.n	8000c0e <NVIC_EncodePriority+0x32>
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	43da      	mvns	r2, r3
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	401a      	ands	r2, r3
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2e:	43d9      	mvns	r1, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c34:	4313      	orrs	r3, r2
         );
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3724      	adds	r7, #36	; 0x24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
	...

08000c44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c54:	d301      	bcc.n	8000c5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c56:	2301      	movs	r3, #1
 8000c58:	e00f      	b.n	8000c7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c5a:	4a0a      	ldr	r2, [pc, #40]	; (8000c84 <SysTick_Config+0x40>)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c62:	210f      	movs	r1, #15
 8000c64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c68:	f7ff ff8e 	bl	8000b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <SysTick_Config+0x40>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c72:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <SysTick_Config+0x40>)
 8000c74:	2207      	movs	r2, #7
 8000c76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	e000e010 	.word	0xe000e010

08000c88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	f7ff ff47 	bl	8000b24 <__NVIC_SetPriorityGrouping>
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b086      	sub	sp, #24
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	60b9      	str	r1, [r7, #8]
 8000ca8:	607a      	str	r2, [r7, #4]
 8000caa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cb0:	f7ff ff5c 	bl	8000b6c <__NVIC_GetPriorityGrouping>
 8000cb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	68b9      	ldr	r1, [r7, #8]
 8000cba:	6978      	ldr	r0, [r7, #20]
 8000cbc:	f7ff ff8e 	bl	8000bdc <NVIC_EncodePriority>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cc6:	4611      	mov	r1, r2
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ff5d 	bl	8000b88 <__NVIC_SetPriority>
}
 8000cce:	bf00      	nop
 8000cd0:	3718      	adds	r7, #24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff ffb0 	bl	8000c44 <SysTick_Config>
 8000ce4:	4603      	mov	r3, r0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d101      	bne.n	8000d00 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	e011      	b.n	8000d24 <HAL_CRC_Init+0x36>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	795b      	ldrb	r3, [r3, #5]
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d105      	bne.n	8000d16 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f003 fd13 	bl	800473c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2202      	movs	r2, #2
 8000d1a:	715a      	strb	r2, [r3, #5]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2201      	movs	r2, #1
 8000d20:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000d22:	2300      	movs	r3, #0
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b089      	sub	sp, #36	; 0x24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
 8000d46:	e165      	b.n	8001014 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d48:	2201      	movs	r2, #1
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	697a      	ldr	r2, [r7, #20]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	f040 8154 	bne.w	800100e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d003      	beq.n	8000d76 <HAL_GPIO_Init+0x4a>
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	2b12      	cmp	r3, #18
 8000d74:	d123      	bne.n	8000dbe <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	08da      	lsrs	r2, r3, #3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3208      	adds	r2, #8
 8000d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	220f      	movs	r2, #15
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4013      	ands	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	691a      	ldr	r2, [r3, #16]
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	f003 0307 	and.w	r3, r3, #7
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	08da      	lsrs	r2, r3, #3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3208      	adds	r2, #8
 8000db8:	69b9      	ldr	r1, [r7, #24]
 8000dba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	2203      	movs	r2, #3
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f003 0203 	and.w	r2, r3, #3
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d00b      	beq.n	8000e12 <HAL_GPIO_Init+0xe6>
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d007      	beq.n	8000e12 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e06:	2b11      	cmp	r3, #17
 8000e08:	d003      	beq.n	8000e12 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	2b12      	cmp	r3, #18
 8000e10:	d130      	bne.n	8000e74 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43db      	mvns	r3, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4013      	ands	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	68da      	ldr	r2, [r3, #12]
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e48:	2201      	movs	r2, #1
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	4013      	ands	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	091b      	lsrs	r3, r3, #4
 8000e5e:	f003 0201 	and.w	r2, r3, #1
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	2203      	movs	r2, #3
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	689a      	ldr	r2, [r3, #8]
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	f000 80ae 	beq.w	800100e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	4b5c      	ldr	r3, [pc, #368]	; (8001028 <HAL_GPIO_Init+0x2fc>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eba:	4a5b      	ldr	r2, [pc, #364]	; (8001028 <HAL_GPIO_Init+0x2fc>)
 8000ebc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ec2:	4b59      	ldr	r3, [pc, #356]	; (8001028 <HAL_GPIO_Init+0x2fc>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ece:	4a57      	ldr	r2, [pc, #348]	; (800102c <HAL_GPIO_Init+0x300>)
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	089b      	lsrs	r3, r3, #2
 8000ed4:	3302      	adds	r3, #2
 8000ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f003 0303 	and.w	r3, r3, #3
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	220f      	movs	r2, #15
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43db      	mvns	r3, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a4e      	ldr	r2, [pc, #312]	; (8001030 <HAL_GPIO_Init+0x304>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d025      	beq.n	8000f46 <HAL_GPIO_Init+0x21a>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a4d      	ldr	r2, [pc, #308]	; (8001034 <HAL_GPIO_Init+0x308>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d01f      	beq.n	8000f42 <HAL_GPIO_Init+0x216>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a4c      	ldr	r2, [pc, #304]	; (8001038 <HAL_GPIO_Init+0x30c>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d019      	beq.n	8000f3e <HAL_GPIO_Init+0x212>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a4b      	ldr	r2, [pc, #300]	; (800103c <HAL_GPIO_Init+0x310>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d013      	beq.n	8000f3a <HAL_GPIO_Init+0x20e>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a4a      	ldr	r2, [pc, #296]	; (8001040 <HAL_GPIO_Init+0x314>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d00d      	beq.n	8000f36 <HAL_GPIO_Init+0x20a>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a49      	ldr	r2, [pc, #292]	; (8001044 <HAL_GPIO_Init+0x318>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d007      	beq.n	8000f32 <HAL_GPIO_Init+0x206>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a48      	ldr	r2, [pc, #288]	; (8001048 <HAL_GPIO_Init+0x31c>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d101      	bne.n	8000f2e <HAL_GPIO_Init+0x202>
 8000f2a:	2306      	movs	r3, #6
 8000f2c:	e00c      	b.n	8000f48 <HAL_GPIO_Init+0x21c>
 8000f2e:	2307      	movs	r3, #7
 8000f30:	e00a      	b.n	8000f48 <HAL_GPIO_Init+0x21c>
 8000f32:	2305      	movs	r3, #5
 8000f34:	e008      	b.n	8000f48 <HAL_GPIO_Init+0x21c>
 8000f36:	2304      	movs	r3, #4
 8000f38:	e006      	b.n	8000f48 <HAL_GPIO_Init+0x21c>
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e004      	b.n	8000f48 <HAL_GPIO_Init+0x21c>
 8000f3e:	2302      	movs	r3, #2
 8000f40:	e002      	b.n	8000f48 <HAL_GPIO_Init+0x21c>
 8000f42:	2301      	movs	r3, #1
 8000f44:	e000      	b.n	8000f48 <HAL_GPIO_Init+0x21c>
 8000f46:	2300      	movs	r3, #0
 8000f48:	69fa      	ldr	r2, [r7, #28]
 8000f4a:	f002 0203 	and.w	r2, r2, #3
 8000f4e:	0092      	lsls	r2, r2, #2
 8000f50:	4093      	lsls	r3, r2
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f58:	4934      	ldr	r1, [pc, #208]	; (800102c <HAL_GPIO_Init+0x300>)
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	089b      	lsrs	r3, r3, #2
 8000f5e:	3302      	adds	r3, #2
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f66:	4b39      	ldr	r3, [pc, #228]	; (800104c <HAL_GPIO_Init+0x320>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4013      	ands	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d003      	beq.n	8000f8a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f8a:	4a30      	ldr	r2, [pc, #192]	; (800104c <HAL_GPIO_Init+0x320>)
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f90:	4b2e      	ldr	r3, [pc, #184]	; (800104c <HAL_GPIO_Init+0x320>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d003      	beq.n	8000fb4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fb4:	4a25      	ldr	r2, [pc, #148]	; (800104c <HAL_GPIO_Init+0x320>)
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fba:	4b24      	ldr	r3, [pc, #144]	; (800104c <HAL_GPIO_Init+0x320>)
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fde:	4a1b      	ldr	r2, [pc, #108]	; (800104c <HAL_GPIO_Init+0x320>)
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fe4:	4b19      	ldr	r3, [pc, #100]	; (800104c <HAL_GPIO_Init+0x320>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d003      	beq.n	8001008 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001008:	4a10      	ldr	r2, [pc, #64]	; (800104c <HAL_GPIO_Init+0x320>)
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3301      	adds	r3, #1
 8001012:	61fb      	str	r3, [r7, #28]
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	2b0f      	cmp	r3, #15
 8001018:	f67f ae96 	bls.w	8000d48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800101c:	bf00      	nop
 800101e:	3724      	adds	r7, #36	; 0x24
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	40023800 	.word	0x40023800
 800102c:	40013800 	.word	0x40013800
 8001030:	40020000 	.word	0x40020000
 8001034:	40020400 	.word	0x40020400
 8001038:	40020800 	.word	0x40020800
 800103c:	40020c00 	.word	0x40020c00
 8001040:	40021000 	.word	0x40021000
 8001044:	40021400 	.word	0x40021400
 8001048:	40021800 	.word	0x40021800
 800104c:	40013c00 	.word	0x40013c00

08001050 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	807b      	strh	r3, [r7, #2]
 800105c:	4613      	mov	r3, r2
 800105e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001060:	787b      	ldrb	r3, [r7, #1]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001066:	887a      	ldrh	r2, [r7, #2]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800106c:	e003      	b.n	8001076 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800106e:	887b      	ldrh	r3, [r7, #2]
 8001070:	041a      	lsls	r2, r3, #16
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	619a      	str	r2, [r3, #24]
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
	...

08001084 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d101      	bne.n	8001096 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e10f      	b.n	80012b6 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d106      	bne.n	80010b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f003 ff26 	bl	8004efc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2224      	movs	r2, #36	; 0x24
 80010b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f022 0201 	bic.w	r2, r2, #1
 80010c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80010c8:	f000 fc68 	bl	800199c <HAL_RCC_GetPCLK1Freq>
 80010cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	4a7b      	ldr	r2, [pc, #492]	; (80012c0 <HAL_I2C_Init+0x23c>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d807      	bhi.n	80010e8 <HAL_I2C_Init+0x64>
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4a7a      	ldr	r2, [pc, #488]	; (80012c4 <HAL_I2C_Init+0x240>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	bf94      	ite	ls
 80010e0:	2301      	movls	r3, #1
 80010e2:	2300      	movhi	r3, #0
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	e006      	b.n	80010f6 <HAL_I2C_Init+0x72>
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	4a77      	ldr	r2, [pc, #476]	; (80012c8 <HAL_I2C_Init+0x244>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	bf94      	ite	ls
 80010f0:	2301      	movls	r3, #1
 80010f2:	2300      	movhi	r3, #0
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e0db      	b.n	80012b6 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	4a72      	ldr	r2, [pc, #456]	; (80012cc <HAL_I2C_Init+0x248>)
 8001102:	fba2 2303 	umull	r2, r3, r2, r3
 8001106:	0c9b      	lsrs	r3, r3, #18
 8001108:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	68ba      	ldr	r2, [r7, #8]
 800111a:	430a      	orrs	r2, r1
 800111c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	6a1b      	ldr	r3, [r3, #32]
 8001124:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	4a64      	ldr	r2, [pc, #400]	; (80012c0 <HAL_I2C_Init+0x23c>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d802      	bhi.n	8001138 <HAL_I2C_Init+0xb4>
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	3301      	adds	r3, #1
 8001136:	e009      	b.n	800114c <HAL_I2C_Init+0xc8>
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800113e:	fb02 f303 	mul.w	r3, r2, r3
 8001142:	4a63      	ldr	r2, [pc, #396]	; (80012d0 <HAL_I2C_Init+0x24c>)
 8001144:	fba2 2303 	umull	r2, r3, r2, r3
 8001148:	099b      	lsrs	r3, r3, #6
 800114a:	3301      	adds	r3, #1
 800114c:	687a      	ldr	r2, [r7, #4]
 800114e:	6812      	ldr	r2, [r2, #0]
 8001150:	430b      	orrs	r3, r1
 8001152:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	69db      	ldr	r3, [r3, #28]
 800115a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800115e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	4956      	ldr	r1, [pc, #344]	; (80012c0 <HAL_I2C_Init+0x23c>)
 8001168:	428b      	cmp	r3, r1
 800116a:	d80d      	bhi.n	8001188 <HAL_I2C_Init+0x104>
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	1e59      	subs	r1, r3, #1
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	fbb1 f3f3 	udiv	r3, r1, r3
 800117a:	3301      	adds	r3, #1
 800117c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001180:	2b04      	cmp	r3, #4
 8001182:	bf38      	it	cc
 8001184:	2304      	movcc	r3, #4
 8001186:	e04f      	b.n	8001228 <HAL_I2C_Init+0x1a4>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d111      	bne.n	80011b4 <HAL_I2C_Init+0x130>
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	1e58      	subs	r0, r3, #1
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6859      	ldr	r1, [r3, #4]
 8001198:	460b      	mov	r3, r1
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	440b      	add	r3, r1
 800119e:	fbb0 f3f3 	udiv	r3, r0, r3
 80011a2:	3301      	adds	r3, #1
 80011a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	bf0c      	ite	eq
 80011ac:	2301      	moveq	r3, #1
 80011ae:	2300      	movne	r3, #0
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	e012      	b.n	80011da <HAL_I2C_Init+0x156>
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	1e58      	subs	r0, r3, #1
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6859      	ldr	r1, [r3, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	440b      	add	r3, r1
 80011c2:	0099      	lsls	r1, r3, #2
 80011c4:	440b      	add	r3, r1
 80011c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80011ca:	3301      	adds	r3, #1
 80011cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	bf0c      	ite	eq
 80011d4:	2301      	moveq	r3, #1
 80011d6:	2300      	movne	r3, #0
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <HAL_I2C_Init+0x15e>
 80011de:	2301      	movs	r3, #1
 80011e0:	e022      	b.n	8001228 <HAL_I2C_Init+0x1a4>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d10e      	bne.n	8001208 <HAL_I2C_Init+0x184>
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	1e58      	subs	r0, r3, #1
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6859      	ldr	r1, [r3, #4]
 80011f2:	460b      	mov	r3, r1
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	440b      	add	r3, r1
 80011f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80011fc:	3301      	adds	r3, #1
 80011fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001206:	e00f      	b.n	8001228 <HAL_I2C_Init+0x1a4>
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	1e58      	subs	r0, r3, #1
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6859      	ldr	r1, [r3, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	440b      	add	r3, r1
 8001216:	0099      	lsls	r1, r3, #2
 8001218:	440b      	add	r3, r1
 800121a:	fbb0 f3f3 	udiv	r3, r0, r3
 800121e:	3301      	adds	r3, #1
 8001220:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001224:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001228:	6879      	ldr	r1, [r7, #4]
 800122a:	6809      	ldr	r1, [r1, #0]
 800122c:	4313      	orrs	r3, r2
 800122e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	69da      	ldr	r2, [r3, #28]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a1b      	ldr	r3, [r3, #32]
 8001242:	431a      	orrs	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	430a      	orrs	r2, r1
 800124a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001256:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	6911      	ldr	r1, [r2, #16]
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	68d2      	ldr	r2, [r2, #12]
 8001262:	4311      	orrs	r1, r2
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	6812      	ldr	r2, [r2, #0]
 8001268:	430b      	orrs	r3, r1
 800126a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	695a      	ldr	r2, [r3, #20]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	431a      	orrs	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	430a      	orrs	r2, r1
 8001286:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f042 0201 	orr.w	r2, r2, #1
 8001296:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2220      	movs	r2, #32
 80012a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	000186a0 	.word	0x000186a0
 80012c4:	001e847f 	.word	0x001e847f
 80012c8:	003d08ff 	.word	0x003d08ff
 80012cc:	431bde83 	.word	0x431bde83
 80012d0:	10624dd3 	.word	0x10624dd3

080012d4 <HAL_NOR_Init>:
  * @param  Timing pointer to NOR control timing structure 
  * @param  ExtTiming pointer to NOR extended mode timing structure    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
  /* Check the NOR handle parameter */
  if(hnor == NULL)
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d101      	bne.n	80012ea <HAL_NOR_Init+0x16>
  {
     return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e043      	b.n	8001372 <HAL_NOR_Init+0x9e>
  }
  
  if(hnor->State == HAL_NOR_STATE_RESET)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d106      	bne.n	8001304 <HAL_NOR_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	2200      	movs	r2, #0
 80012fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 80012fe:	68f8      	ldr	r0, [r7, #12]
 8001300:	f003 fc52 	bl	8004ba8 <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }
  
  /* Initialize NOR control Interface */
  FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	3308      	adds	r3, #8
 800130c:	4619      	mov	r1, r3
 800130e:	4610      	mov	r0, r2
 8001310:	f002 f93a 	bl	8003588 <FSMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank); 
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	6818      	ldr	r0, [r3, #0]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	461a      	mov	r2, r3
 800131e:	68b9      	ldr	r1, [r7, #8]
 8001320:	f002 f9a2 	bl	8003668 <FSMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	6858      	ldr	r0, [r3, #4]
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	689a      	ldr	r2, [r3, #8]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001330:	6879      	ldr	r1, [r7, #4]
 8001332:	f002 f9ed 	bl	8003710 <FSMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	6892      	ldr	r2, [r2, #8]
 800133e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	6892      	ldr	r2, [r2, #8]
 800134a:	f041 0101 	orr.w	r1, r1, #1
 800134e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d103      	bne.n	8001362 <HAL_NOR_Init+0x8e>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 800135a:	4b08      	ldr	r3, [pc, #32]	; (800137c <HAL_NOR_Init+0xa8>)
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	e002      	b.n	8001368 <HAL_NOR_Init+0x94>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_NOR_Init+0xa8>)
 8001364:	2201      	movs	r2, #1
 8001366:	601a      	str	r2, [r3, #0]
  }

  /* Check the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY; 
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2201      	movs	r2, #1
 800136c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  return HAL_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000028 	.word	0x20000028

08001380 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001382:	b08f      	sub	sp, #60	; 0x3c
 8001384:	af0a      	add	r7, sp, #40	; 0x28
 8001386:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d101      	bne.n	8001392 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e116      	b.n	80015c0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d106      	bne.n	80013b2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2200      	movs	r2, #0
 80013a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f004 f8e7 	bl	8005580 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2203      	movs	r2, #3
 80013b6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d102      	bne.n	80013cc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f002 feb4 	bl	800413e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	603b      	str	r3, [r7, #0]
 80013dc:	687e      	ldr	r6, [r7, #4]
 80013de:	466d      	mov	r5, sp
 80013e0:	f106 0410 	add.w	r4, r6, #16
 80013e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80013f4:	1d33      	adds	r3, r6, #4
 80013f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013f8:	6838      	ldr	r0, [r7, #0]
 80013fa:	f002 fe3f 	bl	800407c <USB_CoreInit>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d005      	beq.n	8001410 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2202      	movs	r2, #2
 8001408:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e0d7      	b.n	80015c0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2100      	movs	r1, #0
 8001416:	4618      	mov	r0, r3
 8001418:	f002 fea2 	bl	8004160 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800141c:	2300      	movs	r3, #0
 800141e:	73fb      	strb	r3, [r7, #15]
 8001420:	e04a      	b.n	80014b8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001422:	7bfa      	ldrb	r2, [r7, #15]
 8001424:	6879      	ldr	r1, [r7, #4]
 8001426:	4613      	mov	r3, r2
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	1a9b      	subs	r3, r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	440b      	add	r3, r1
 8001430:	333d      	adds	r3, #61	; 0x3d
 8001432:	2201      	movs	r2, #1
 8001434:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001436:	7bfa      	ldrb	r2, [r7, #15]
 8001438:	6879      	ldr	r1, [r7, #4]
 800143a:	4613      	mov	r3, r2
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	1a9b      	subs	r3, r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	440b      	add	r3, r1
 8001444:	333c      	adds	r3, #60	; 0x3c
 8001446:	7bfa      	ldrb	r2, [r7, #15]
 8001448:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800144a:	7bfa      	ldrb	r2, [r7, #15]
 800144c:	7bfb      	ldrb	r3, [r7, #15]
 800144e:	b298      	uxth	r0, r3
 8001450:	6879      	ldr	r1, [r7, #4]
 8001452:	4613      	mov	r3, r2
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	1a9b      	subs	r3, r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	440b      	add	r3, r1
 800145c:	3342      	adds	r3, #66	; 0x42
 800145e:	4602      	mov	r2, r0
 8001460:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001462:	7bfa      	ldrb	r2, [r7, #15]
 8001464:	6879      	ldr	r1, [r7, #4]
 8001466:	4613      	mov	r3, r2
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	1a9b      	subs	r3, r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	440b      	add	r3, r1
 8001470:	333f      	adds	r3, #63	; 0x3f
 8001472:	2200      	movs	r2, #0
 8001474:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001476:	7bfa      	ldrb	r2, [r7, #15]
 8001478:	6879      	ldr	r1, [r7, #4]
 800147a:	4613      	mov	r3, r2
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	1a9b      	subs	r3, r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	440b      	add	r3, r1
 8001484:	3344      	adds	r3, #68	; 0x44
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800148a:	7bfa      	ldrb	r2, [r7, #15]
 800148c:	6879      	ldr	r1, [r7, #4]
 800148e:	4613      	mov	r3, r2
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	1a9b      	subs	r3, r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	440b      	add	r3, r1
 8001498:	3348      	adds	r3, #72	; 0x48
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800149e:	7bfa      	ldrb	r2, [r7, #15]
 80014a0:	6879      	ldr	r1, [r7, #4]
 80014a2:	4613      	mov	r3, r2
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	1a9b      	subs	r3, r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	440b      	add	r3, r1
 80014ac:	3350      	adds	r3, #80	; 0x50
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
 80014b4:	3301      	adds	r3, #1
 80014b6:	73fb      	strb	r3, [r7, #15]
 80014b8:	7bfa      	ldrb	r2, [r7, #15]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d3af      	bcc.n	8001422 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014c2:	2300      	movs	r3, #0
 80014c4:	73fb      	strb	r3, [r7, #15]
 80014c6:	e044      	b.n	8001552 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80014c8:	7bfa      	ldrb	r2, [r7, #15]
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	4613      	mov	r3, r2
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	1a9b      	subs	r3, r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	440b      	add	r3, r1
 80014d6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80014da:	2200      	movs	r2, #0
 80014dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80014de:	7bfa      	ldrb	r2, [r7, #15]
 80014e0:	6879      	ldr	r1, [r7, #4]
 80014e2:	4613      	mov	r3, r2
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	1a9b      	subs	r3, r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	440b      	add	r3, r1
 80014ec:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80014f0:	7bfa      	ldrb	r2, [r7, #15]
 80014f2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014f4:	7bfa      	ldrb	r2, [r7, #15]
 80014f6:	6879      	ldr	r1, [r7, #4]
 80014f8:	4613      	mov	r3, r2
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	1a9b      	subs	r3, r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	440b      	add	r3, r1
 8001502:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001506:	2200      	movs	r2, #0
 8001508:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800150a:	7bfa      	ldrb	r2, [r7, #15]
 800150c:	6879      	ldr	r1, [r7, #4]
 800150e:	4613      	mov	r3, r2
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	1a9b      	subs	r3, r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	440b      	add	r3, r1
 8001518:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001520:	7bfa      	ldrb	r2, [r7, #15]
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	4613      	mov	r3, r2
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	1a9b      	subs	r3, r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	440b      	add	r3, r1
 800152e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001536:	7bfa      	ldrb	r2, [r7, #15]
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	4613      	mov	r3, r2
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	1a9b      	subs	r3, r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	440b      	add	r3, r1
 8001544:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800154c:	7bfb      	ldrb	r3, [r7, #15]
 800154e:	3301      	adds	r3, #1
 8001550:	73fb      	strb	r3, [r7, #15]
 8001552:	7bfa      	ldrb	r2, [r7, #15]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	429a      	cmp	r2, r3
 800155a:	d3b5      	bcc.n	80014c8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	603b      	str	r3, [r7, #0]
 8001562:	687e      	ldr	r6, [r7, #4]
 8001564:	466d      	mov	r5, sp
 8001566:	f106 0410 	add.w	r4, r6, #16
 800156a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800156c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800156e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001570:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001572:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001576:	e885 0003 	stmia.w	r5, {r0, r1}
 800157a:	1d33      	adds	r3, r6, #4
 800157c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800157e:	6838      	ldr	r0, [r7, #0]
 8001580:	f002 fe18 	bl	80041b4 <USB_DevInit>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d005      	beq.n	8001596 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2202      	movs	r2, #2
 800158e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e014      	b.n	80015c0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2201      	movs	r2, #1
 80015a2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d102      	bne.n	80015b4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f000 f80a 	bl	80015c8 <HAL_PCDEx_ActivateLPM>
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f002 ffc8 	bl	800454e <USB_DevDisconnect>

  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015c8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2201      	movs	r2, #1
 80015da:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015fa:	f043 0303 	orr.w	r3, r3, #3
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d101      	bne.n	8001624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e0ca      	b.n	80017ba <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001624:	4b67      	ldr	r3, [pc, #412]	; (80017c4 <HAL_RCC_ClockConfig+0x1b4>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 030f 	and.w	r3, r3, #15
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	429a      	cmp	r2, r3
 8001630:	d90c      	bls.n	800164c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001632:	4b64      	ldr	r3, [pc, #400]	; (80017c4 <HAL_RCC_ClockConfig+0x1b4>)
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800163a:	4b62      	ldr	r3, [pc, #392]	; (80017c4 <HAL_RCC_ClockConfig+0x1b4>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 030f 	and.w	r3, r3, #15
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	429a      	cmp	r2, r3
 8001646:	d001      	beq.n	800164c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e0b6      	b.n	80017ba <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	2b00      	cmp	r3, #0
 8001656:	d020      	beq.n	800169a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0304 	and.w	r3, r3, #4
 8001660:	2b00      	cmp	r3, #0
 8001662:	d005      	beq.n	8001670 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001664:	4b58      	ldr	r3, [pc, #352]	; (80017c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	4a57      	ldr	r2, [pc, #348]	; (80017c8 <HAL_RCC_ClockConfig+0x1b8>)
 800166a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800166e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0308 	and.w	r3, r3, #8
 8001678:	2b00      	cmp	r3, #0
 800167a:	d005      	beq.n	8001688 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800167c:	4b52      	ldr	r3, [pc, #328]	; (80017c8 <HAL_RCC_ClockConfig+0x1b8>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	4a51      	ldr	r2, [pc, #324]	; (80017c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001682:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001686:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001688:	4b4f      	ldr	r3, [pc, #316]	; (80017c8 <HAL_RCC_ClockConfig+0x1b8>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	494c      	ldr	r1, [pc, #304]	; (80017c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001696:	4313      	orrs	r3, r2
 8001698:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d044      	beq.n	8001730 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d107      	bne.n	80016be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ae:	4b46      	ldr	r3, [pc, #280]	; (80017c8 <HAL_RCC_ClockConfig+0x1b8>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d119      	bne.n	80016ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e07d      	b.n	80017ba <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d003      	beq.n	80016ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ca:	2b03      	cmp	r3, #3
 80016cc:	d107      	bne.n	80016de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ce:	4b3e      	ldr	r3, [pc, #248]	; (80017c8 <HAL_RCC_ClockConfig+0x1b8>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d109      	bne.n	80016ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e06d      	b.n	80017ba <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016de:	4b3a      	ldr	r3, [pc, #232]	; (80017c8 <HAL_RCC_ClockConfig+0x1b8>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d101      	bne.n	80016ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e065      	b.n	80017ba <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016ee:	4b36      	ldr	r3, [pc, #216]	; (80017c8 <HAL_RCC_ClockConfig+0x1b8>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f023 0203 	bic.w	r2, r3, #3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	4933      	ldr	r1, [pc, #204]	; (80017c8 <HAL_RCC_ClockConfig+0x1b8>)
 80016fc:	4313      	orrs	r3, r2
 80016fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001700:	f7fe ff70 	bl	80005e4 <HAL_GetTick>
 8001704:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001706:	e00a      	b.n	800171e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001708:	f7fe ff6c 	bl	80005e4 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	f241 3288 	movw	r2, #5000	; 0x1388
 8001716:	4293      	cmp	r3, r2
 8001718:	d901      	bls.n	800171e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e04d      	b.n	80017ba <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800171e:	4b2a      	ldr	r3, [pc, #168]	; (80017c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f003 020c 	and.w	r2, r3, #12
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	429a      	cmp	r2, r3
 800172e:	d1eb      	bne.n	8001708 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001730:	4b24      	ldr	r3, [pc, #144]	; (80017c4 <HAL_RCC_ClockConfig+0x1b4>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 030f 	and.w	r3, r3, #15
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	429a      	cmp	r2, r3
 800173c:	d20c      	bcs.n	8001758 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800173e:	4b21      	ldr	r3, [pc, #132]	; (80017c4 <HAL_RCC_ClockConfig+0x1b4>)
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001746:	4b1f      	ldr	r3, [pc, #124]	; (80017c4 <HAL_RCC_ClockConfig+0x1b4>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 030f 	and.w	r3, r3, #15
 800174e:	683a      	ldr	r2, [r7, #0]
 8001750:	429a      	cmp	r2, r3
 8001752:	d001      	beq.n	8001758 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e030      	b.n	80017ba <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	2b00      	cmp	r3, #0
 8001762:	d008      	beq.n	8001776 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001764:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	4915      	ldr	r1, [pc, #84]	; (80017c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001772:	4313      	orrs	r3, r2
 8001774:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0308 	and.w	r3, r3, #8
 800177e:	2b00      	cmp	r3, #0
 8001780:	d009      	beq.n	8001796 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001782:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	490d      	ldr	r1, [pc, #52]	; (80017c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001792:	4313      	orrs	r3, r2
 8001794:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001796:	f000 f81d 	bl	80017d4 <HAL_RCC_GetSysClockFreq>
 800179a:	4601      	mov	r1, r0
 800179c:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <HAL_RCC_ClockConfig+0x1b8>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	091b      	lsrs	r3, r3, #4
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	4a09      	ldr	r2, [pc, #36]	; (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 80017a8:	5cd3      	ldrb	r3, [r2, r3]
 80017aa:	fa21 f303 	lsr.w	r3, r1, r3
 80017ae:	4a08      	ldr	r2, [pc, #32]	; (80017d0 <HAL_RCC_ClockConfig+0x1c0>)
 80017b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80017b2:	2000      	movs	r0, #0
 80017b4:	f7fe fed2 	bl	800055c <HAL_InitTick>

  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40023c00 	.word	0x40023c00
 80017c8:	40023800 	.word	0x40023800
 80017cc:	080056dc 	.word	0x080056dc
 80017d0:	20000008 	.word	0x20000008

080017d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017da:	2300      	movs	r3, #0
 80017dc:	607b      	str	r3, [r7, #4]
 80017de:	2300      	movs	r3, #0
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	2300      	movs	r3, #0
 80017e4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017ea:	4b63      	ldr	r3, [pc, #396]	; (8001978 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f003 030c 	and.w	r3, r3, #12
 80017f2:	2b04      	cmp	r3, #4
 80017f4:	d007      	beq.n	8001806 <HAL_RCC_GetSysClockFreq+0x32>
 80017f6:	2b08      	cmp	r3, #8
 80017f8:	d008      	beq.n	800180c <HAL_RCC_GetSysClockFreq+0x38>
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f040 80b4 	bne.w	8001968 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001800:	4b5e      	ldr	r3, [pc, #376]	; (800197c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001802:	60bb      	str	r3, [r7, #8]
       break;
 8001804:	e0b3      	b.n	800196e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001806:	4b5e      	ldr	r3, [pc, #376]	; (8001980 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001808:	60bb      	str	r3, [r7, #8]
      break;
 800180a:	e0b0      	b.n	800196e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800180c:	4b5a      	ldr	r3, [pc, #360]	; (8001978 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001814:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001816:	4b58      	ldr	r3, [pc, #352]	; (8001978 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d04a      	beq.n	80018b8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001822:	4b55      	ldr	r3, [pc, #340]	; (8001978 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	099b      	lsrs	r3, r3, #6
 8001828:	f04f 0400 	mov.w	r4, #0
 800182c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001830:	f04f 0200 	mov.w	r2, #0
 8001834:	ea03 0501 	and.w	r5, r3, r1
 8001838:	ea04 0602 	and.w	r6, r4, r2
 800183c:	4629      	mov	r1, r5
 800183e:	4632      	mov	r2, r6
 8001840:	f04f 0300 	mov.w	r3, #0
 8001844:	f04f 0400 	mov.w	r4, #0
 8001848:	0154      	lsls	r4, r2, #5
 800184a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800184e:	014b      	lsls	r3, r1, #5
 8001850:	4619      	mov	r1, r3
 8001852:	4622      	mov	r2, r4
 8001854:	1b49      	subs	r1, r1, r5
 8001856:	eb62 0206 	sbc.w	r2, r2, r6
 800185a:	f04f 0300 	mov.w	r3, #0
 800185e:	f04f 0400 	mov.w	r4, #0
 8001862:	0194      	lsls	r4, r2, #6
 8001864:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001868:	018b      	lsls	r3, r1, #6
 800186a:	1a5b      	subs	r3, r3, r1
 800186c:	eb64 0402 	sbc.w	r4, r4, r2
 8001870:	f04f 0100 	mov.w	r1, #0
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	00e2      	lsls	r2, r4, #3
 800187a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800187e:	00d9      	lsls	r1, r3, #3
 8001880:	460b      	mov	r3, r1
 8001882:	4614      	mov	r4, r2
 8001884:	195b      	adds	r3, r3, r5
 8001886:	eb44 0406 	adc.w	r4, r4, r6
 800188a:	f04f 0100 	mov.w	r1, #0
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	0262      	lsls	r2, r4, #9
 8001894:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001898:	0259      	lsls	r1, r3, #9
 800189a:	460b      	mov	r3, r1
 800189c:	4614      	mov	r4, r2
 800189e:	4618      	mov	r0, r3
 80018a0:	4621      	mov	r1, r4
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f04f 0400 	mov.w	r4, #0
 80018a8:	461a      	mov	r2, r3
 80018aa:	4623      	mov	r3, r4
 80018ac:	f7fe fcb4 	bl	8000218 <__aeabi_uldivmod>
 80018b0:	4603      	mov	r3, r0
 80018b2:	460c      	mov	r4, r1
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	e049      	b.n	800194c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018b8:	4b2f      	ldr	r3, [pc, #188]	; (8001978 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	099b      	lsrs	r3, r3, #6
 80018be:	f04f 0400 	mov.w	r4, #0
 80018c2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	ea03 0501 	and.w	r5, r3, r1
 80018ce:	ea04 0602 	and.w	r6, r4, r2
 80018d2:	4629      	mov	r1, r5
 80018d4:	4632      	mov	r2, r6
 80018d6:	f04f 0300 	mov.w	r3, #0
 80018da:	f04f 0400 	mov.w	r4, #0
 80018de:	0154      	lsls	r4, r2, #5
 80018e0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018e4:	014b      	lsls	r3, r1, #5
 80018e6:	4619      	mov	r1, r3
 80018e8:	4622      	mov	r2, r4
 80018ea:	1b49      	subs	r1, r1, r5
 80018ec:	eb62 0206 	sbc.w	r2, r2, r6
 80018f0:	f04f 0300 	mov.w	r3, #0
 80018f4:	f04f 0400 	mov.w	r4, #0
 80018f8:	0194      	lsls	r4, r2, #6
 80018fa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80018fe:	018b      	lsls	r3, r1, #6
 8001900:	1a5b      	subs	r3, r3, r1
 8001902:	eb64 0402 	sbc.w	r4, r4, r2
 8001906:	f04f 0100 	mov.w	r1, #0
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	00e2      	lsls	r2, r4, #3
 8001910:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001914:	00d9      	lsls	r1, r3, #3
 8001916:	460b      	mov	r3, r1
 8001918:	4614      	mov	r4, r2
 800191a:	195b      	adds	r3, r3, r5
 800191c:	eb44 0406 	adc.w	r4, r4, r6
 8001920:	f04f 0100 	mov.w	r1, #0
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	02a2      	lsls	r2, r4, #10
 800192a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800192e:	0299      	lsls	r1, r3, #10
 8001930:	460b      	mov	r3, r1
 8001932:	4614      	mov	r4, r2
 8001934:	4618      	mov	r0, r3
 8001936:	4621      	mov	r1, r4
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f04f 0400 	mov.w	r4, #0
 800193e:	461a      	mov	r2, r3
 8001940:	4623      	mov	r3, r4
 8001942:	f7fe fc69 	bl	8000218 <__aeabi_uldivmod>
 8001946:	4603      	mov	r3, r0
 8001948:	460c      	mov	r4, r1
 800194a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800194c:	4b0a      	ldr	r3, [pc, #40]	; (8001978 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	0c1b      	lsrs	r3, r3, #16
 8001952:	f003 0303 	and.w	r3, r3, #3
 8001956:	3301      	adds	r3, #1
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800195c:	68fa      	ldr	r2, [r7, #12]
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	fbb2 f3f3 	udiv	r3, r2, r3
 8001964:	60bb      	str	r3, [r7, #8]
      break;
 8001966:	e002      	b.n	800196e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001968:	4b04      	ldr	r3, [pc, #16]	; (800197c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800196a:	60bb      	str	r3, [r7, #8]
      break;
 800196c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800196e:	68bb      	ldr	r3, [r7, #8]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001978:	40023800 	.word	0x40023800
 800197c:	00f42400 	.word	0x00f42400
 8001980:	007a1200 	.word	0x007a1200

08001984 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001988:	4b03      	ldr	r3, [pc, #12]	; (8001998 <HAL_RCC_GetHCLKFreq+0x14>)
 800198a:	681b      	ldr	r3, [r3, #0]
}
 800198c:	4618      	mov	r0, r3
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	20000008 	.word	0x20000008

0800199c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019a0:	f7ff fff0 	bl	8001984 <HAL_RCC_GetHCLKFreq>
 80019a4:	4601      	mov	r1, r0
 80019a6:	4b05      	ldr	r3, [pc, #20]	; (80019bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	0a9b      	lsrs	r3, r3, #10
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	4a03      	ldr	r2, [pc, #12]	; (80019c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019b2:	5cd3      	ldrb	r3, [r2, r3]
 80019b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40023800 	.word	0x40023800
 80019c0:	080056ec 	.word	0x080056ec

080019c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019c8:	f7ff ffdc 	bl	8001984 <HAL_RCC_GetHCLKFreq>
 80019cc:	4601      	mov	r1, r0
 80019ce:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	0b5b      	lsrs	r3, r3, #13
 80019d4:	f003 0307 	and.w	r3, r3, #7
 80019d8:	4a03      	ldr	r2, [pc, #12]	; (80019e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019da:	5cd3      	ldrb	r3, [r2, r3]
 80019dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40023800 	.word	0x40023800
 80019e8:	080056ec 	.word	0x080056ec

080019ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b088      	sub	sp, #32
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019f4:	2300      	movs	r3, #0
 80019f6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8001a00:	2300      	movs	r3, #0
 8001a02:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d010      	beq.n	8001a32 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001a10:	4b7a      	ldr	r3, [pc, #488]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001a12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a16:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	4977      	ldr	r1, [pc, #476]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d010      	beq.n	8001a60 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001a3e:	4b6f      	ldr	r3, [pc, #444]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a44:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	496b      	ldr	r1, [pc, #428]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d101      	bne.n	8001a60 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d022      	beq.n	8001ab2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8001a6c:	4b63      	ldr	r3, [pc, #396]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001a6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a7a:	4960      	ldr	r1, [pc, #384]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a96:	d10c      	bne.n	8001ab2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8001a98:	4b58      	ldr	r3, [pc, #352]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a9e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	021b      	lsls	r3, r3, #8
 8001aaa:	4954      	ldr	r1, [pc, #336]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d022      	beq.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8001abe:	4b4f      	ldr	r3, [pc, #316]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ac4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001acc:	494b      	ldr	r1, [pc, #300]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d101      	bne.n	8001ae0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001adc:	2301      	movs	r3, #1
 8001ade:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ae8:	d10c      	bne.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8001aea:	4b44      	ldr	r3, [pc, #272]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001aec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001af0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	695b      	ldr	r3, [r3, #20]
 8001af8:	3b01      	subs	r3, #1
 8001afa:	021b      	lsls	r3, r3, #8
 8001afc:	493f      	ldr	r1, [pc, #252]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0308 	and.w	r3, r3, #8
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f000 808a 	beq.w	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	4b39      	ldr	r3, [pc, #228]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	4a38      	ldr	r2, [pc, #224]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b20:	6413      	str	r3, [r2, #64]	; 0x40
 8001b22:	4b36      	ldr	r3, [pc, #216]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001b2e:	4b34      	ldr	r3, [pc, #208]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a33      	ldr	r2, [pc, #204]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8001b34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b38:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b3a:	f7fe fd53 	bl	80005e4 <HAL_GetTick>
 8001b3e:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001b40:	e008      	b.n	8001b54 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001b42:	f7fe fd4f 	bl	80005e4 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e1d1      	b.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001b54:	4b2a      	ldr	r3, [pc, #168]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0f0      	beq.n	8001b42 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b60:	4b26      	ldr	r3, [pc, #152]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b68:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d02f      	beq.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b78:	697a      	ldr	r2, [r7, #20]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d028      	beq.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b7e:	4b1f      	ldr	r3, [pc, #124]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b86:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b88:	4b1e      	ldr	r3, [pc, #120]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b8e:	4b1d      	ldr	r3, [pc, #116]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001b94:	4a19      	ldr	r2, [pc, #100]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001b9a:	4b18      	ldr	r3, [pc, #96]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d114      	bne.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001ba6:	f7fe fd1d 	bl	80005e4 <HAL_GetTick>
 8001baa:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bac:	e00a      	b.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bae:	f7fe fd19 	bl	80005e4 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e199      	b.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc4:	4b0d      	ldr	r3, [pc, #52]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d0ee      	beq.n	8001bae <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001bdc:	d114      	bne.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8001bde:	4b07      	ldr	r3, [pc, #28]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001bee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bf2:	4902      	ldr	r1, [pc, #8]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	608b      	str	r3, [r1, #8]
 8001bf8:	e00c      	b.n	8001c14 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40007000 	.word	0x40007000
 8001c04:	42470e40 	.word	0x42470e40
 8001c08:	4b89      	ldr	r3, [pc, #548]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	4a88      	ldr	r2, [pc, #544]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001c0e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001c12:	6093      	str	r3, [r2, #8]
 8001c14:	4b86      	ldr	r3, [pc, #536]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001c16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c20:	4983      	ldr	r1, [pc, #524]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0304 	and.w	r3, r3, #4
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d004      	beq.n	8001c3c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8001c38:	4b7e      	ldr	r3, [pc, #504]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8001c3a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0310 	and.w	r3, r3, #16
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d00a      	beq.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001c48:	4b79      	ldr	r3, [pc, #484]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c4e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c56:	4976      	ldr	r1, [pc, #472]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0320 	and.w	r3, r3, #32
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d011      	beq.n	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001c6a:	4b71      	ldr	r3, [pc, #452]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001c6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c70:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c78:	496d      	ldr	r1, [pc, #436]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c88:	d101      	bne.n	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d00a      	beq.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001c9a:	4b65      	ldr	r3, [pc, #404]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001c9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ca0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca8:	4961      	ldr	r1, [pc, #388]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d004      	beq.n	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2b80      	cmp	r3, #128	; 0x80
 8001cbc:	f040 80c6 	bne.w	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001cc0:	4b5d      	ldr	r3, [pc, #372]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001cc6:	f7fe fc8d 	bl	80005e4 <HAL_GetTick>
 8001cca:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001ccc:	e008      	b.n	8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001cce:	f7fe fc89 	bl	80005e4 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e10b      	b.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001ce0:	4b53      	ldr	r3, [pc, #332]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1f0      	bne.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8001cec:	4a53      	ldr	r2, [pc, #332]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cf2:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d003      	beq.n	8001d08 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	69db      	ldr	r3, [r3, #28]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d023      	beq.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d003      	beq.n	8001d1c <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d019      	beq.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d004      	beq.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d30:	d00e      	beq.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d019      	beq.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d115      	bne.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d4e:	d110      	bne.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	019b      	lsls	r3, r3, #6
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	061b      	lsls	r3, r3, #24
 8001d62:	431a      	orrs	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	071b      	lsls	r3, r3, #28
 8001d6a:	4931      	ldr	r1, [pc, #196]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d009      	beq.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d026      	beq.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d122      	bne.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001d9a:	4b25      	ldr	r3, [pc, #148]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001d9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001da0:	0e1b      	lsrs	r3, r3, #24
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	019b      	lsls	r3, r3, #6
 8001db2:	431a      	orrs	r2, r3
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	061b      	lsls	r3, r3, #24
 8001db8:	431a      	orrs	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	071b      	lsls	r3, r3, #28
 8001dc0:	491b      	ldr	r1, [pc, #108]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8001dc8:	4b19      	ldr	r3, [pc, #100]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001dca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dce:	f023 021f 	bic.w	r2, r3, #31
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	4915      	ldr	r1, [pc, #84]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d010      	beq.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	019b      	lsls	r3, r3, #6
 8001df6:	431a      	orrs	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	061b      	lsls	r3, r3, #24
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	071b      	lsls	r3, r3, #28
 8001e06:	490a      	ldr	r1, [pc, #40]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001e0e:	4b0a      	ldr	r3, [pc, #40]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8001e10:	2201      	movs	r2, #1
 8001e12:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e14:	f7fe fbe6 	bl	80005e4 <HAL_GetTick>
 8001e18:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e1a:	e011      	b.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001e1c:	f7fe fbe2 	bl	80005e4 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d90a      	bls.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e064      	b.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8001e2e:	bf00      	nop
 8001e30:	40023800 	.word	0x40023800
 8001e34:	424711e0 	.word	0x424711e0
 8001e38:	42470068 	.word	0x42470068
 8001e3c:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e40:	4b2f      	ldr	r3, [pc, #188]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0e7      	beq.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00a      	beq.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001e58:	4b29      	ldr	r3, [pc, #164]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001e5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e5e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e66:	4926      	ldr	r1, [pc, #152]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00a      	beq.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001e7a:	4b21      	ldr	r3, [pc, #132]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001e7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e80:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e88:	491d      	ldr	r1, [pc, #116]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d00a      	beq.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8001e9c:	4b18      	ldr	r3, [pc, #96]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001e9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ea2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eaa:	4915      	ldr	r1, [pc, #84]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00a      	beq.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8001ebe:	4b10      	ldr	r3, [pc, #64]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001ec0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ec4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ecc:	490c      	ldr	r1, [pc, #48]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d00a      	beq.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001ee0:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ee6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eee:	4904      	ldr	r1, [pc, #16]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3720      	adds	r7, #32
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40023800 	.word	0x40023800

08001f04 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d075      	beq.n	8002008 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f1c:	4ba2      	ldr	r3, [pc, #648]	; (80021a8 <HAL_RCC_OscConfig+0x2a4>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 030c 	and.w	r3, r3, #12
 8001f24:	2b04      	cmp	r3, #4
 8001f26:	d00c      	beq.n	8001f42 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f28:	4b9f      	ldr	r3, [pc, #636]	; (80021a8 <HAL_RCC_OscConfig+0x2a4>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f30:	2b08      	cmp	r3, #8
 8001f32:	d112      	bne.n	8001f5a <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f34:	4b9c      	ldr	r3, [pc, #624]	; (80021a8 <HAL_RCC_OscConfig+0x2a4>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f40:	d10b      	bne.n	8001f5a <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f42:	4b99      	ldr	r3, [pc, #612]	; (80021a8 <HAL_RCC_OscConfig+0x2a4>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d05b      	beq.n	8002006 <HAL_RCC_OscConfig+0x102>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d157      	bne.n	8002006 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e20b      	b.n	8002372 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f62:	d106      	bne.n	8001f72 <HAL_RCC_OscConfig+0x6e>
 8001f64:	4b90      	ldr	r3, [pc, #576]	; (80021a8 <HAL_RCC_OscConfig+0x2a4>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a8f      	ldr	r2, [pc, #572]	; (80021a8 <HAL_RCC_OscConfig+0x2a4>)
 8001f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f6e:	6013      	str	r3, [r2, #0]
 8001f70:	e01d      	b.n	8001fae <HAL_RCC_OscConfig+0xaa>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f7a:	d10c      	bne.n	8001f96 <HAL_RCC_OscConfig+0x92>
 8001f7c:	4b8a      	ldr	r3, [pc, #552]	; (80021a8 <HAL_RCC_OscConfig+0x2a4>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a89      	ldr	r2, [pc, #548]	; (80021a8 <HAL_RCC_OscConfig+0x2a4>)
 8001f82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f86:	6013      	str	r3, [r2, #0]
 8001f88:	4b87      	ldr	r3, [pc, #540]	; (80021a8 <HAL_RCC_OscConfig+0x2a4>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a86      	ldr	r2, [pc, #536]	; (80021a8 <HAL_RCC_OscConfig+0x2a4>)
 8001f8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f92:	6013      	str	r3, [r2, #0]
 8001f94:	e00b      	b.n	8001fae <HAL_RCC_OscConfig+0xaa>
 8001f96:	4b84      	ldr	r3, [pc, #528]	; (80021a8 <HAL_RCC_OscConfig+0x2a4>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a83      	ldr	r2, [pc, #524]	; (80021a8 <HAL_RCC_OscConfig+0x2a4>)
 8001f9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	4b81      	ldr	r3, [pc, #516]	; (80021a8 <HAL_RCC_OscConfig+0x2a4>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a80      	ldr	r2, [pc, #512]	; (80021a8 <HAL_RCC_OscConfig+0x2a4>)
 8001fa8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fac:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d013      	beq.n	8001fde <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb6:	f7fe fb15 	bl	80005e4 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fbe:	f7fe fb11 	bl	80005e4 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b64      	cmp	r3, #100	; 0x64
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e1d0      	b.n	8002372 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd0:	4b75      	ldr	r3, [pc, #468]	; (80021a8 <HAL_RCC_OscConfig+0x2a4>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0f0      	beq.n	8001fbe <HAL_RCC_OscConfig+0xba>
 8001fdc:	e014      	b.n	8002008 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fde:	f7fe fb01 	bl	80005e4 <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fe6:	f7fe fafd 	bl	80005e4 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b64      	cmp	r3, #100	; 0x64
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e1bc      	b.n	8002372 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ff8:	4b6b      	ldr	r3, [pc, #428]	; (80021a8 <HAL_RCC_OscConfig+0x2a4>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1f0      	bne.n	8001fe6 <HAL_RCC_OscConfig+0xe2>
 8002004:	e000      	b.n	8002008 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002006:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d063      	beq.n	80020dc <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002014:	4b64      	ldr	r3, [pc, #400]	; (80021a8 <HAL_RCC_OscConfig+0x2a4>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f003 030c 	and.w	r3, r3, #12
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00b      	beq.n	8002038 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002020:	4b61      	ldr	r3, [pc, #388]	; (80021a8 <HAL_RCC_OscConfig+0x2a4>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002028:	2b08      	cmp	r3, #8
 800202a:	d11c      	bne.n	8002066 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800202c:	4b5e      	ldr	r3, [pc, #376]	; (80021a8 <HAL_RCC_OscConfig+0x2a4>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d116      	bne.n	8002066 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002038:	4b5b      	ldr	r3, [pc, #364]	; (80021a8 <HAL_RCC_OscConfig+0x2a4>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d005      	beq.n	8002050 <HAL_RCC_OscConfig+0x14c>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d001      	beq.n	8002050 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e190      	b.n	8002372 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002050:	4b55      	ldr	r3, [pc, #340]	; (80021a8 <HAL_RCC_OscConfig+0x2a4>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	4952      	ldr	r1, [pc, #328]	; (80021a8 <HAL_RCC_OscConfig+0x2a4>)
 8002060:	4313      	orrs	r3, r2
 8002062:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002064:	e03a      	b.n	80020dc <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d020      	beq.n	80020b0 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800206e:	4b4f      	ldr	r3, [pc, #316]	; (80021ac <HAL_RCC_OscConfig+0x2a8>)
 8002070:	2201      	movs	r2, #1
 8002072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002074:	f7fe fab6 	bl	80005e4 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800207c:	f7fe fab2 	bl	80005e4 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e171      	b.n	8002372 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800208e:	4b46      	ldr	r3, [pc, #280]	; (80021a8 <HAL_RCC_OscConfig+0x2a4>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0f0      	beq.n	800207c <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800209a:	4b43      	ldr	r3, [pc, #268]	; (80021a8 <HAL_RCC_OscConfig+0x2a4>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	493f      	ldr	r1, [pc, #252]	; (80021a8 <HAL_RCC_OscConfig+0x2a4>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	600b      	str	r3, [r1, #0]
 80020ae:	e015      	b.n	80020dc <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020b0:	4b3e      	ldr	r3, [pc, #248]	; (80021ac <HAL_RCC_OscConfig+0x2a8>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b6:	f7fe fa95 	bl	80005e4 <HAL_GetTick>
 80020ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020bc:	e008      	b.n	80020d0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020be:	f7fe fa91 	bl	80005e4 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e150      	b.n	8002372 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020d0:	4b35      	ldr	r3, [pc, #212]	; (80021a8 <HAL_RCC_OscConfig+0x2a4>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1f0      	bne.n	80020be <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d030      	beq.n	800214a <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d016      	beq.n	800211e <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020f0:	4b2f      	ldr	r3, [pc, #188]	; (80021b0 <HAL_RCC_OscConfig+0x2ac>)
 80020f2:	2201      	movs	r2, #1
 80020f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f6:	f7fe fa75 	bl	80005e4 <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020fe:	f7fe fa71 	bl	80005e4 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e130      	b.n	8002372 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002110:	4b25      	ldr	r3, [pc, #148]	; (80021a8 <HAL_RCC_OscConfig+0x2a4>)
 8002112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0f0      	beq.n	80020fe <HAL_RCC_OscConfig+0x1fa>
 800211c:	e015      	b.n	800214a <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800211e:	4b24      	ldr	r3, [pc, #144]	; (80021b0 <HAL_RCC_OscConfig+0x2ac>)
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002124:	f7fe fa5e 	bl	80005e4 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800212c:	f7fe fa5a 	bl	80005e4 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e119      	b.n	8002372 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800213e:	4b1a      	ldr	r3, [pc, #104]	; (80021a8 <HAL_RCC_OscConfig+0x2a4>)
 8002140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1f0      	bne.n	800212c <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0304 	and.w	r3, r3, #4
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 809f 	beq.w	8002296 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002158:	2300      	movs	r3, #0
 800215a:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800215c:	4b12      	ldr	r3, [pc, #72]	; (80021a8 <HAL_RCC_OscConfig+0x2a4>)
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d10f      	bne.n	8002188 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002168:	2300      	movs	r3, #0
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	4b0e      	ldr	r3, [pc, #56]	; (80021a8 <HAL_RCC_OscConfig+0x2a4>)
 800216e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002170:	4a0d      	ldr	r2, [pc, #52]	; (80021a8 <HAL_RCC_OscConfig+0x2a4>)
 8002172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002176:	6413      	str	r3, [r2, #64]	; 0x40
 8002178:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <HAL_RCC_OscConfig+0x2a4>)
 800217a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002184:	2301      	movs	r3, #1
 8002186:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002188:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <HAL_RCC_OscConfig+0x2b0>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002190:	2b00      	cmp	r3, #0
 8002192:	d120      	bne.n	80021d6 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002194:	4b07      	ldr	r3, [pc, #28]	; (80021b4 <HAL_RCC_OscConfig+0x2b0>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a06      	ldr	r2, [pc, #24]	; (80021b4 <HAL_RCC_OscConfig+0x2b0>)
 800219a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800219e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021a0:	f7fe fa20 	bl	80005e4 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a6:	e010      	b.n	80021ca <HAL_RCC_OscConfig+0x2c6>
 80021a8:	40023800 	.word	0x40023800
 80021ac:	42470000 	.word	0x42470000
 80021b0:	42470e80 	.word	0x42470e80
 80021b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b8:	f7fe fa14 	bl	80005e4 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e0d3      	b.n	8002372 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ca:	4b6c      	ldr	r3, [pc, #432]	; (800237c <HAL_RCC_OscConfig+0x478>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0f0      	beq.n	80021b8 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d106      	bne.n	80021ec <HAL_RCC_OscConfig+0x2e8>
 80021de:	4b68      	ldr	r3, [pc, #416]	; (8002380 <HAL_RCC_OscConfig+0x47c>)
 80021e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e2:	4a67      	ldr	r2, [pc, #412]	; (8002380 <HAL_RCC_OscConfig+0x47c>)
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	6713      	str	r3, [r2, #112]	; 0x70
 80021ea:	e01c      	b.n	8002226 <HAL_RCC_OscConfig+0x322>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	2b05      	cmp	r3, #5
 80021f2:	d10c      	bne.n	800220e <HAL_RCC_OscConfig+0x30a>
 80021f4:	4b62      	ldr	r3, [pc, #392]	; (8002380 <HAL_RCC_OscConfig+0x47c>)
 80021f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f8:	4a61      	ldr	r2, [pc, #388]	; (8002380 <HAL_RCC_OscConfig+0x47c>)
 80021fa:	f043 0304 	orr.w	r3, r3, #4
 80021fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002200:	4b5f      	ldr	r3, [pc, #380]	; (8002380 <HAL_RCC_OscConfig+0x47c>)
 8002202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002204:	4a5e      	ldr	r2, [pc, #376]	; (8002380 <HAL_RCC_OscConfig+0x47c>)
 8002206:	f043 0301 	orr.w	r3, r3, #1
 800220a:	6713      	str	r3, [r2, #112]	; 0x70
 800220c:	e00b      	b.n	8002226 <HAL_RCC_OscConfig+0x322>
 800220e:	4b5c      	ldr	r3, [pc, #368]	; (8002380 <HAL_RCC_OscConfig+0x47c>)
 8002210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002212:	4a5b      	ldr	r2, [pc, #364]	; (8002380 <HAL_RCC_OscConfig+0x47c>)
 8002214:	f023 0301 	bic.w	r3, r3, #1
 8002218:	6713      	str	r3, [r2, #112]	; 0x70
 800221a:	4b59      	ldr	r3, [pc, #356]	; (8002380 <HAL_RCC_OscConfig+0x47c>)
 800221c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221e:	4a58      	ldr	r2, [pc, #352]	; (8002380 <HAL_RCC_OscConfig+0x47c>)
 8002220:	f023 0304 	bic.w	r3, r3, #4
 8002224:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d015      	beq.n	800225a <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222e:	f7fe f9d9 	bl	80005e4 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002234:	e00a      	b.n	800224c <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002236:	f7fe f9d5 	bl	80005e4 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	f241 3288 	movw	r2, #5000	; 0x1388
 8002244:	4293      	cmp	r3, r2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e092      	b.n	8002372 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800224c:	4b4c      	ldr	r3, [pc, #304]	; (8002380 <HAL_RCC_OscConfig+0x47c>)
 800224e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0ee      	beq.n	8002236 <HAL_RCC_OscConfig+0x332>
 8002258:	e014      	b.n	8002284 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800225a:	f7fe f9c3 	bl	80005e4 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002260:	e00a      	b.n	8002278 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002262:	f7fe f9bf 	bl	80005e4 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002270:	4293      	cmp	r3, r2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e07c      	b.n	8002372 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002278:	4b41      	ldr	r3, [pc, #260]	; (8002380 <HAL_RCC_OscConfig+0x47c>)
 800227a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1ee      	bne.n	8002262 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002284:	7dfb      	ldrb	r3, [r7, #23]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d105      	bne.n	8002296 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800228a:	4b3d      	ldr	r3, [pc, #244]	; (8002380 <HAL_RCC_OscConfig+0x47c>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	4a3c      	ldr	r2, [pc, #240]	; (8002380 <HAL_RCC_OscConfig+0x47c>)
 8002290:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002294:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d068      	beq.n	8002370 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800229e:	4b38      	ldr	r3, [pc, #224]	; (8002380 <HAL_RCC_OscConfig+0x47c>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 030c 	and.w	r3, r3, #12
 80022a6:	2b08      	cmp	r3, #8
 80022a8:	d060      	beq.n	800236c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d145      	bne.n	800233e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b2:	4b34      	ldr	r3, [pc, #208]	; (8002384 <HAL_RCC_OscConfig+0x480>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b8:	f7fe f994 	bl	80005e4 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c0:	f7fe f990 	bl	80005e4 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e04f      	b.n	8002372 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d2:	4b2b      	ldr	r3, [pc, #172]	; (8002380 <HAL_RCC_OscConfig+0x47c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69da      	ldr	r2, [r3, #28]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ec:	019b      	lsls	r3, r3, #6
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f4:	085b      	lsrs	r3, r3, #1
 80022f6:	3b01      	subs	r3, #1
 80022f8:	041b      	lsls	r3, r3, #16
 80022fa:	431a      	orrs	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002300:	061b      	lsls	r3, r3, #24
 8002302:	431a      	orrs	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002308:	071b      	lsls	r3, r3, #28
 800230a:	491d      	ldr	r1, [pc, #116]	; (8002380 <HAL_RCC_OscConfig+0x47c>)
 800230c:	4313      	orrs	r3, r2
 800230e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002310:	4b1c      	ldr	r3, [pc, #112]	; (8002384 <HAL_RCC_OscConfig+0x480>)
 8002312:	2201      	movs	r2, #1
 8002314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002316:	f7fe f965 	bl	80005e4 <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800231e:	f7fe f961 	bl	80005e4 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e020      	b.n	8002372 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002330:	4b13      	ldr	r3, [pc, #76]	; (8002380 <HAL_RCC_OscConfig+0x47c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0f0      	beq.n	800231e <HAL_RCC_OscConfig+0x41a>
 800233c:	e018      	b.n	8002370 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800233e:	4b11      	ldr	r3, [pc, #68]	; (8002384 <HAL_RCC_OscConfig+0x480>)
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002344:	f7fe f94e 	bl	80005e4 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800234c:	f7fe f94a 	bl	80005e4 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e009      	b.n	8002372 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800235e:	4b08      	ldr	r3, [pc, #32]	; (8002380 <HAL_RCC_OscConfig+0x47c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1f0      	bne.n	800234c <HAL_RCC_OscConfig+0x448>
 800236a:	e001      	b.n	8002370 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e000      	b.n	8002372 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3718      	adds	r7, #24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40007000 	.word	0x40007000
 8002380:	40023800 	.word	0x40023800
 8002384:	42470060 	.word	0x42470060

08002388 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e01d      	b.n	80023d6 <HAL_SD_Init+0x4e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d105      	bne.n	80023b2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f002 fed3 	bl	8005158 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2203      	movs	r2, #3
 80023b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 f810 	bl	80023e0 <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
	...

080023e0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80023e0:	b5b0      	push	{r4, r5, r7, lr}
 80023e2:	b08e      	sub	sp, #56	; 0x38
 80023e4:	af04      	add	r7, sp, #16
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80023e8:	2300      	movs	r3, #0
 80023ea:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80023ec:	2300      	movs	r3, #0
 80023ee:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80023f0:	2300      	movs	r3, #0
 80023f2:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80023f8:	2300      	movs	r3, #0
 80023fa:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80023fc:	2300      	movs	r3, #0
 80023fe:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002400:	2376      	movs	r3, #118	; 0x76
 8002402:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681d      	ldr	r5, [r3, #0]
 8002408:	466c      	mov	r4, sp
 800240a:	f107 0318 	add.w	r3, r7, #24
 800240e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002412:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002416:	f107 030c 	add.w	r3, r7, #12
 800241a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800241c:	4628      	mov	r0, r5
 800241e:	f001 f9b7 	bl	8003790 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd); 
 8002422:	4b1c      	ldr	r3, [pc, #112]	; (8002494 <HAL_SD_InitCard+0xb4>)
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4618      	mov	r0, r3
 800242e:	f001 f9e7 	bl	8003800 <SDIO_PowerState_ON>
  
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002432:	4b18      	ldr	r3, [pc, #96]	; (8002494 <HAL_SD_InitCard+0xb4>)
 8002434:	2201      	movs	r2, #1
 8002436:	601a      	str	r2, [r3, #0]
  
  /* Required power up waiting time before starting the SD initialization 
  sequence */
  HAL_Delay(2U);
 8002438:	2002      	movs	r0, #2
 800243a:	f7fe f8df 	bl	80005fc <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 fb98 	bl	8002b74 <SD_PowerON>
 8002444:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00b      	beq.n	8002464 <HAL_SD_InitCard+0x84>
  {
    hsd->State = HAL_SD_STATE_READY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	431a      	orrs	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e013      	b.n	800248c <HAL_SD_InitCard+0xac>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 fabc 	bl	80029e2 <SD_InitCard>
 800246a:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00b      	beq.n	800248a <HAL_SD_InitCard+0xaa>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2201      	movs	r2, #1
 8002476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	431a      	orrs	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e000      	b.n	800248c <HAL_SD_InitCard+0xac>
  }

  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3728      	adds	r7, #40	; 0x28
 8002490:	46bd      	mov	sp, r7
 8002492:	bdb0      	pop	{r4, r5, r7, pc}
 8002494:	422580a0 	.word	0x422580a0

08002498 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024aa:	0e1b      	lsrs	r3, r3, #24
 80024ac:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	099b      	lsrs	r3, r3, #6
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	f003 0303 	and.w	r3, r3, #3
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	089b      	lsrs	r3, r3, #2
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	f003 030f 	and.w	r3, r3, #15
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	f003 0303 	and.w	r3, r3, #3
 80024d6:	b2da      	uxtb	r2, r3
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024e0:	0c1b      	lsrs	r3, r3, #16
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	b2da      	uxtb	r2, r3
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024f2:	0a1b      	lsrs	r3, r3, #8
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002504:	b2db      	uxtb	r3, r3
 8002506:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	b2da      	uxtb	r2, r3
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002514:	0e1b      	lsrs	r3, r3, #24
 8002516:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	b29b      	uxth	r3, r3
 800251c:	011b      	lsls	r3, r3, #4
 800251e:	b29a      	uxth	r2, r3
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002528:	0c1b      	lsrs	r3, r3, #16
 800252a:	b2db      	uxtb	r3, r3
 800252c:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	88db      	ldrh	r3, [r3, #6]
 8002532:	b29a      	uxth	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	091b      	lsrs	r3, r3, #4
 8002538:	b29b      	uxth	r3, r3
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	b29b      	uxth	r3, r3
 8002540:	4313      	orrs	r3, r2
 8002542:	b29a      	uxth	r2, r3
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	b2db      	uxtb	r3, r3
 800254c:	f003 030f 	and.w	r3, r3, #15
 8002550:	b2da      	uxtb	r2, r3
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800255a:	0a1b      	lsrs	r3, r3, #8
 800255c:	b2db      	uxtb	r3, r3
 800255e:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	09db      	lsrs	r3, r3, #7
 8002564:	b2db      	uxtb	r3, r3
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	b2da      	uxtb	r2, r3
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	099b      	lsrs	r3, r3, #6
 8002574:	b2db      	uxtb	r3, r3
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	b2da      	uxtb	r2, r3
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	095b      	lsrs	r3, r3, #5
 8002584:	b2db      	uxtb	r3, r3
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	b2da      	uxtb	r2, r3
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	091b      	lsrs	r3, r3, #4
 8002594:	b2db      	uxtb	r3, r3
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	b2da      	uxtb	r2, r3
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	2200      	movs	r2, #0
 80025a4:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f040 8087 	bne.w	80026be <HAL_SD_GetCardCSD+0x226>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	029b      	lsls	r3, r3, #10
 80025b4:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2U;
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	691a      	ldr	r2, [r3, #16]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	431a      	orrs	r2, r3
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025d6:	0e1b      	lsrs	r3, r3, #24
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	691a      	ldr	r2, [r3, #16]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	099b      	lsrs	r3, r3, #6
 80025e4:	f003 0303 	and.w	r3, r3, #3
 80025e8:	431a      	orrs	r2, r3
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	08db      	lsrs	r3, r3, #3
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	b2db      	uxtb	r3, r3
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	b2da      	uxtb	r2, r3
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002610:	0c1b      	lsrs	r3, r3, #16
 8002612:	b2db      	uxtb	r3, r3
 8002614:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	095b      	lsrs	r3, r3, #5
 800261a:	b2db      	uxtb	r3, r3
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	b2da      	uxtb	r2, r3
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	089b      	lsrs	r3, r3, #2
 800262a:	b2db      	uxtb	r3, r3
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	b2da      	uxtb	r2, r3
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	b2db      	uxtb	r3, r3
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	b2db      	uxtb	r3, r3
 800263e:	f003 0306 	and.w	r3, r3, #6
 8002642:	b2da      	uxtb	r2, r3
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800264c:	0a1b      	lsrs	r3, r3, #8
 800264e:	b2db      	uxtb	r3, r3
 8002650:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	7e1b      	ldrb	r3, [r3, #24]
 8002656:	b2da      	uxtb	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	09db      	lsrs	r3, r3, #7
 800265c:	b2db      	uxtb	r3, r3
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	b2db      	uxtb	r3, r3
 8002664:	4313      	orrs	r3, r2
 8002666:	b2da      	uxtb	r2, r3
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	1c5a      	adds	r2, r3, #1
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	7e1b      	ldrb	r3, [r3, #24]
 800267a:	b2db      	uxtb	r3, r3
 800267c:	3302      	adds	r3, #2
 800267e:	2201      	movs	r2, #1
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002688:	fb02 f203 	mul.w	r2, r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	7a1b      	ldrb	r3, [r3, #8]
 8002694:	b2db      	uxtb	r3, r3
 8002696:	461a      	mov	r2, r3
 8002698:	2301      	movs	r3, #1
 800269a:	fa03 f202 	lsl.w	r2, r3, r2
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80026aa:	0a52      	lsrs	r2, r2, #9
 80026ac:	fb02 f203 	mul.w	r2, r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026ba:	661a      	str	r2, [r3, #96]	; 0x60
 80026bc:	e04d      	b.n	800275a <HAL_SD_GetCardCSD+0x2c2>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d138      	bne.n	8002738 <HAL_SD_GetCardCSD+0x2a0>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	041b      	lsls	r3, r3, #16
 80026d2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026de:	0e1b      	lsrs	r3, r3, #24
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8U);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	691a      	ldr	r2, [r3, #16]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	021b      	lsls	r3, r3, #8
 80026ec:	431a      	orrs	r2, r3
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026f6:	0c1b      	lsrs	r3, r3, #16
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	691a      	ldr	r2, [r3, #16]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	431a      	orrs	r2, r3
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800270c:	0a1b      	lsrs	r3, r3, #8
 800270e:	b2db      	uxtb	r3, r3
 8002710:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	3301      	adds	r3, #1
 8002718:	029a      	lsls	r2, r3, #10
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	655a      	str	r2, [r3, #84]	; 0x54
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800272c:	659a      	str	r2, [r3, #88]	; 0x58
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	661a      	str	r2, [r3, #96]	; 0x60
 8002736:	e010      	b.n	800275a <HAL_SD_GetCardCSD+0x2c2>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002740:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002746:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e0c1      	b.n	80028de <HAL_SD_GetCardCSD+0x446>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	099b      	lsrs	r3, r3, #6
 800275e:	b2db      	uxtb	r3, r3
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	b2da      	uxtb	r2, r3
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	b2db      	uxtb	r3, r3
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	b2db      	uxtb	r3, r3
 8002772:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8002776:	b2da      	uxtb	r2, r3
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002780:	b2db      	uxtb	r3, r3
 8002782:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	7e9b      	ldrb	r3, [r3, #26]
 8002788:	b2da      	uxtb	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	09db      	lsrs	r3, r3, #7
 800278e:	b2db      	uxtb	r3, r3
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	b2db      	uxtb	r3, r3
 8002796:	4313      	orrs	r3, r2
 8002798:	b2da      	uxtb	r2, r3
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b0:	0e1b      	lsrs	r3, r3, #24
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	09db      	lsrs	r3, r3, #7
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	095b      	lsrs	r3, r3, #5
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	f003 0303 	and.w	r3, r3, #3
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	089b      	lsrs	r3, r3, #2
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	f003 030c 	and.w	r3, r3, #12
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fc:	0c1b      	lsrs	r3, r3, #16
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	7fdb      	ldrb	r3, [r3, #31]
 8002806:	b2da      	uxtb	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	099b      	lsrs	r3, r3, #6
 800280c:	b2db      	uxtb	r3, r3
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	b2db      	uxtb	r3, r3
 8002814:	4313      	orrs	r3, r2
 8002816:	b2da      	uxtb	r2, r3
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	095b      	lsrs	r3, r3, #5
 8002820:	b2db      	uxtb	r3, r3
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	b2da      	uxtb	r2, r3
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0U;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	b2db      	uxtb	r3, r3
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	b2da      	uxtb	r2, r3
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284a:	0a1b      	lsrs	r3, r3, #8
 800284c:	b2db      	uxtb	r3, r3
 800284e:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	09db      	lsrs	r3, r3, #7
 8002854:	b2db      	uxtb	r3, r3
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	b2da      	uxtb	r2, r3
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	099b      	lsrs	r3, r3, #6
 8002866:	b2db      	uxtb	r3, r3
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	b2da      	uxtb	r2, r3
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	095b      	lsrs	r3, r3, #5
 8002878:	b2db      	uxtb	r3, r3
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	b2da      	uxtb	r2, r3
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	091b      	lsrs	r3, r3, #4
 800288a:	b2db      	uxtb	r3, r3
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	b2da      	uxtb	r2, r3
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	089b      	lsrs	r3, r3, #2
 800289c:	b2db      	uxtb	r3, r3
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	b2da      	uxtb	r2, r3
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	f003 0303 	and.w	r3, r3, #3
 80028b2:	b2da      	uxtb	r2, r3
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	085b      	lsrs	r3, r3, #1
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028cc:	b2da      	uxtb	r2, r3
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3714      	adds	r7, #20
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80028ea:	b5b0      	push	{r4, r5, r7, lr}
 80028ec:	b08e      	sub	sp, #56	; 0x38
 80028ee:	af04      	add	r7, sp, #16
 80028f0:	6078      	str	r0, [r7, #4]
 80028f2:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80028f4:	2300      	movs	r3, #0
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2203      	movs	r2, #3
 80028fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002904:	2b03      	cmp	r3, #3
 8002906:	d02e      	beq.n	8002966 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800290e:	d106      	bne.n	800291e <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002914:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	639a      	str	r2, [r3, #56]	; 0x38
 800291c:	e029      	b.n	8002972 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002924:	d10a      	bne.n	800293c <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f9cc 	bl	8002cc4 <SD_WideBus_Enable>
 800292c:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002934:	431a      	orrs	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	639a      	str	r2, [r3, #56]	; 0x38
 800293a:	e01a      	b.n	8002972 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d10a      	bne.n	8002958 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 fa0b 	bl	8002d5e <SD_WideBus_Disable>
 8002948:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	431a      	orrs	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	639a      	str	r2, [r3, #56]	; 0x38
 8002956:	e00c      	b.n	8002972 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	639a      	str	r2, [r3, #56]	; 0x38
 8002964:	e005      	b.n	8002972 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00a      	beq.n	8002990 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002982:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e024      	b.n	80029da <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	623b      	str	r3, [r7, #32]
    SDIO_Init(hsd->Instance, Init);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681d      	ldr	r5, [r3, #0]
 80029b6:	466c      	mov	r4, sp
 80029b8:	f107 0318 	add.w	r3, r7, #24
 80029bc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80029c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80029c4:	f107 030c 	add.w	r3, r7, #12
 80029c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029ca:	4628      	mov	r0, r5
 80029cc:	f000 fee0 	bl	8003790 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3728      	adds	r7, #40	; 0x28
 80029de:	46bd      	mov	sp, r7
 80029e0:	bdb0      	pop	{r4, r5, r7, pc}

080029e2 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80029e2:	b5b0      	push	{r4, r5, r7, lr}
 80029e4:	b094      	sub	sp, #80	; 0x50
 80029e6:	af04      	add	r7, sp, #16
 80029e8:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80029ea:	2300      	movs	r3, #0
 80029ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1U;
 80029ee:	2301      	movs	r3, #1
 80029f0:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f000 ff10 	bl	800381c <SDIO_GetPowerState>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d102      	bne.n	8002a08 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002a02:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002a06:	e0b1      	b.n	8002b6c <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0c:	2b03      	cmp	r3, #3
 8002a0e:	d02f      	beq.n	8002a70 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f001 f8a1 	bl	8003b5c <SDMMC_CmdSendCID>
 8002a1a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <SD_InitCard+0x44>
    {
      return errorstate;
 8002a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a24:	e0a2      	b.n	8002b6c <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f000 ff3a 	bl	80038a6 <SDIO_GetResponse>
 8002a32:	4602      	mov	r2, r0
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2104      	movs	r1, #4
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 ff31 	bl	80038a6 <SDIO_GetResponse>
 8002a44:	4602      	mov	r2, r0
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2108      	movs	r1, #8
 8002a50:	4618      	mov	r0, r3
 8002a52:	f000 ff28 	bl	80038a6 <SDIO_GetResponse>
 8002a56:	4602      	mov	r2, r0
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	210c      	movs	r1, #12
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 ff1f 	bl	80038a6 <SDIO_GetResponse>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a74:	2b03      	cmp	r3, #3
 8002a76:	d00d      	beq.n	8002a94 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f107 020e 	add.w	r2, r7, #14
 8002a80:	4611      	mov	r1, r2
 8002a82:	4618      	mov	r0, r3
 8002a84:	f001 f8ab 	bl	8003bde <SDMMC_CmdSetRelAdd>
 8002a88:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <SD_InitCard+0xb2>
    {
      return errorstate;
 8002a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a92:	e06b      	b.n	8002b6c <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a98:	2b03      	cmp	r3, #3
 8002a9a:	d036      	beq.n	8002b0a <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8002a9c:	89fb      	ldrh	r3, [r7, #14]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aac:	041b      	lsls	r3, r3, #16
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4610      	mov	r0, r2
 8002ab2:	f001 f873 	bl	8003b9c <SDMMC_CmdSendCSD>
 8002ab6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002ab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <SD_InitCard+0xe0>
    {
      return errorstate;
 8002abe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ac0:	e054      	b.n	8002b6c <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f000 feec 	bl	80038a6 <SDIO_GetResponse>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2104      	movs	r1, #4
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 fee3 	bl	80038a6 <SDIO_GetResponse>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2108      	movs	r1, #8
 8002aec:	4618      	mov	r0, r3
 8002aee:	f000 feda 	bl	80038a6 <SDIO_GetResponse>
 8002af2:	4602      	mov	r2, r0
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	210c      	movs	r1, #12
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 fed1 	bl	80038a6 <SDIO_GetResponse>
 8002b04:	4602      	mov	r2, r0
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2104      	movs	r1, #4
 8002b10:	4618      	mov	r0, r3
 8002b12:	f000 fec8 	bl	80038a6 <SDIO_GetResponse>
 8002b16:	4603      	mov	r3, r0
 8002b18:	0d1a      	lsrs	r2, r3, #20
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 8002b1e:	f107 0310 	add.w	r3, r7, #16
 8002b22:	4619      	mov	r1, r3
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f7ff fcb7 	bl	8002498 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6819      	ldr	r1, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b32:	041b      	lsls	r3, r3, #16
 8002b34:	f04f 0400 	mov.w	r4, #0
 8002b38:	461a      	mov	r2, r3
 8002b3a:	4623      	mov	r3, r4
 8002b3c:	4608      	mov	r0, r1
 8002b3e:	f000 ff17 	bl	8003970 <SDMMC_CmdSelDesel>
 8002b42:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8002b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <SD_InitCard+0x16c>
  {
    return errorstate;
 8002b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b4c:	e00e      	b.n	8002b6c <SD_InitCard+0x18a>
  }

  /* Configure SDIO peripheral interface */     
  SDIO_Init(hsd->Instance, hsd->Init);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681d      	ldr	r5, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	466c      	mov	r4, sp
 8002b56:	f103 0210 	add.w	r2, r3, #16
 8002b5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002b60:	3304      	adds	r3, #4
 8002b62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b64:	4628      	mov	r0, r5
 8002b66:	f000 fe13 	bl	8003790 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3740      	adds	r7, #64	; 0x40
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bdb0      	pop	{r4, r5, r7, pc}

08002b74 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8002b80:	2300      	movs	r3, #0
 8002b82:	617b      	str	r3, [r7, #20]
 8002b84:	2300      	movs	r3, #0
 8002b86:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f000 ff12 	bl	80039ba <SDMMC_CmdGoIdleState>
 8002b96:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <SD_PowerON+0x2e>
  {
    return errorstate;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	e08c      	b.n	8002cbc <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 ff27 	bl	80039fa <SDMMC_CmdOperCond>
 8002bac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d03d      	beq.n	8002c30 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 8002bba:	e032      	b.n	8002c22 <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	1c5a      	adds	r2, r3, #1
 8002bc0:	60ba      	str	r2, [r7, #8]
 8002bc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d102      	bne.n	8002bd0 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002bca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bce:	e075      	b.n	8002cbc <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f000 ff30 	bl	8003a3c <SDMMC_CmdAppCommand>
 8002bdc:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d002      	beq.n	8002bea <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002be4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002be8:	e068      	b.n	8002cbc <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2100      	movs	r1, #0
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f000 ff47 	bl	8003a84 <SDMMC_CmdAppOperCommand>
 8002bf6:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d002      	beq.n	8002c04 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002bfe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002c02:	e05b      	b.n	8002cbc <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2100      	movs	r1, #0
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 fe4b 	bl	80038a6 <SDIO_GetResponse>
 8002c10:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	0fdb      	lsrs	r3, r3, #31
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d101      	bne.n	8002c1e <SD_PowerON+0xaa>
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e000      	b.n	8002c20 <SD_PowerON+0xac>
 8002c1e:	2300      	movs	r3, #0
 8002c20:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d0c9      	beq.n	8002bbc <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	645a      	str	r2, [r3, #68]	; 0x44
 8002c2e:	e044      	b.n	8002cba <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 8002c36:	e031      	b.n	8002c9c <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	1c5a      	adds	r2, r3, #1
 8002c3c:	60ba      	str	r2, [r7, #8]
 8002c3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d102      	bne.n	8002c4c <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002c46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c4a:	e037      	b.n	8002cbc <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2100      	movs	r1, #0
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 fef2 	bl	8003a3c <SDMMC_CmdAppCommand>
 8002c58:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <SD_PowerON+0xf0>
      {
        return errorstate;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	e02b      	b.n	8002cbc <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f000 ff09 	bl	8003a84 <SDMMC_CmdAppOperCommand>
 8002c72:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <SD_PowerON+0x10a>
      {
        return errorstate;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	e01e      	b.n	8002cbc <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2100      	movs	r1, #0
 8002c84:	4618      	mov	r0, r3
 8002c86:	f000 fe0e 	bl	80038a6 <SDIO_GetResponse>
 8002c8a:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	0fdb      	lsrs	r3, r3, #31
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d101      	bne.n	8002c98 <SD_PowerON+0x124>
 8002c94:	2301      	movs	r3, #1
 8002c96:	e000      	b.n	8002c9a <SD_PowerON+0x126>
 8002c98:	2300      	movs	r3, #0
 8002c9a:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d0ca      	beq.n	8002c38 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	645a      	str	r2, [r3, #68]	; 0x44
 8002cb2:	e002      	b.n	8002cba <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8002ccc:	2300      	movs	r3, #0
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2100      	movs	r1, #0
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f000 fde1 	bl	80038a6 <SDIO_GetResponse>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002cee:	d102      	bne.n	8002cf6 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002cf0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002cf4:	e02f      	b.n	8002d56 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8002cf6:	f107 030c 	add.w	r3, r7, #12
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 f87b 	bl	8002df8 <SD_FindSCR>
 8002d02:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	e023      	b.n	8002d56 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d01c      	beq.n	8002d52 <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d20:	041b      	lsls	r3, r3, #16
 8002d22:	4619      	mov	r1, r3
 8002d24:	4610      	mov	r0, r2
 8002d26:	f000 fe89 	bl	8003a3c <SDMMC_CmdAppCommand>
 8002d2a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	e00f      	b.n	8002d56 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2102      	movs	r1, #2
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f000 fec6 	bl	8003ace <SDMMC_CmdBusWidth>
 8002d42:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	e003      	b.n	8002d56 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	e001      	b.n	8002d56 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002d52:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3718      	adds	r7, #24
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b086      	sub	sp, #24
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8002d66:	2300      	movs	r3, #0
 8002d68:	60fb      	str	r3, [r7, #12]
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2100      	movs	r1, #0
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f000 fd94 	bl	80038a6 <SDIO_GetResponse>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d88:	d102      	bne.n	8002d90 <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002d8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d8e:	e02f      	b.n	8002df0 <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8002d90:	f107 030c 	add.w	r3, r7, #12
 8002d94:	4619      	mov	r1, r3
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 f82e 	bl	8002df8 <SD_FindSCR>
 8002d9c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	e023      	b.n	8002df0 <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d01c      	beq.n	8002dec <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dba:	041b      	lsls	r3, r3, #16
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4610      	mov	r0, r2
 8002dc0:	f000 fe3c 	bl	8003a3c <SDMMC_CmdAppCommand>
 8002dc4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	e00f      	b.n	8002df0 <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 fe79 	bl	8003ace <SDMMC_CmdBusWidth>
 8002ddc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	e003      	b.n	8002df0 <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 8002de8:	2300      	movs	r3, #0
 8002dea:	e001      	b.n	8002df0 <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002dec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3718      	adds	r7, #24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8002df8:	b590      	push	{r4, r7, lr}
 8002dfa:	b08f      	sub	sp, #60	; 0x3c
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002e02:	2300      	movs	r3, #0
 8002e04:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8002e06:	f7fd fbed 	bl	80005e4 <HAL_GetTick>
 8002e0a:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0U;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8002e10:	2300      	movs	r3, #0
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	2300      	movs	r3, #0
 8002e16:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2108      	movs	r1, #8
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 fd82 	bl	8003928 <SDMMC_CmdBlockLength>
 8002e24:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8002e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <SD_FindSCR+0x38>
  {
    return errorstate;
 8002e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2e:	e0a8      	b.n	8002f82 <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e38:	041b      	lsls	r3, r3, #16
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4610      	mov	r0, r2
 8002e3e:	f000 fdfd 	bl	8003a3c <SDMMC_CmdAppCommand>
 8002e42:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8002e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <SD_FindSCR+0x56>
  {
    return errorstate;
 8002e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4c:	e099      	b.n	8002f82 <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002e4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e52:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8U;
 8002e54:	2308      	movs	r3, #8
 8002e56:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8002e58:	2330      	movs	r3, #48	; 0x30
 8002e5a:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002e60:	2300      	movs	r3, #0
 8002e62:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDIO_DPSM_ENABLE;
 8002e64:	2301      	movs	r3, #1
 8002e66:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_ConfigData(hsd->Instance, &config);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f107 0214 	add.w	r2, r7, #20
 8002e70:	4611      	mov	r1, r2
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 fd2c 	bl	80038d0 <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f000 fe4a 	bl	8003b16 <SDMMC_CmdSendSCR>
 8002e82:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8002e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d022      	beq.n	8002ed0 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8002e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8c:	e079      	b.n	8002f82 <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00e      	beq.n	8002eba <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6819      	ldr	r1, [r3, #0]
 8002ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	f107 020c 	add.w	r2, r7, #12
 8002ea8:	18d4      	adds	r4, r2, r3
 8002eaa:	4608      	mov	r0, r1
 8002eac:	f000 fc9b 	bl	80037e6 <SDIO_ReadFIFO>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	6023      	str	r3, [r4, #0]
      index++;
 8002eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8002eba:	f7fd fb93 	bl	80005e4 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ec8:	d102      	bne.n	8002ed0 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8002eca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002ece:	e058      	b.n	8002f82 <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ed6:	f240 432a 	movw	r3, #1066	; 0x42a
 8002eda:	4013      	ands	r3, r2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d0d6      	beq.n	8002e8e <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee6:	f003 0308 	and.w	r3, r3, #8
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d005      	beq.n	8002efa <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2208      	movs	r2, #8
 8002ef4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8002ef6:	2308      	movs	r3, #8
 8002ef8:	e043      	b.n	8002f82 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d005      	beq.n	8002f14 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8002f10:	2302      	movs	r3, #2
 8002f12:	e036      	b.n	8002f82 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f1a:	f003 0320 	and.w	r3, r3, #32
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d005      	beq.n	8002f2e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2220      	movs	r2, #32
 8002f28:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 8002f2a:	2320      	movs	r3, #32
 8002f2c:	e029      	b.n	8002f82 <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002f36:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	061a      	lsls	r2, r3, #24
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	021b      	lsls	r3, r3, #8
 8002f40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002f44:	431a      	orrs	r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	0a1b      	lsrs	r3, r3, #8
 8002f4a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8002f4e:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	3304      	adds	r3, #4
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8002f5a:	430a      	orrs	r2, r1
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8002f5c:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	061a      	lsls	r2, r3, #24
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	021b      	lsls	r3, r3, #8
 8002f66:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002f6a:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	0a1b      	lsrs	r3, r3, #8
 8002f70:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8002f74:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	0e1b      	lsrs	r3, r3, #24
 8002f7a:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	373c      	adds	r7, #60	; 0x3c
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd90      	pop	{r4, r7, pc}

08002f8a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b082      	sub	sp, #8
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e056      	b.n	800304a <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d106      	bne.n	8002fbc <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f002 f96c 	bl	8005294 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fd2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	431a      	orrs	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ff8:	431a      	orrs	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	431a      	orrs	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	ea42 0103 	orr.w	r1, r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	0c1b      	lsrs	r3, r3, #16
 800301a:	f003 0104 	and.w	r1, r3, #4
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	69da      	ldr	r2, [r3, #28]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003038:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8003052:	b580      	push	{r7, lr}
 8003054:	b084      	sub	sp, #16
 8003056:	af00      	add	r7, sp, #0
 8003058:	60f8      	str	r0, [r7, #12]
 800305a:	60b9      	str	r1, [r7, #8]
 800305c:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e034      	b.n	80030d2 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b00      	cmp	r3, #0
 8003072:	d106      	bne.n	8003082 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f001 fd9d 	bl	8004bbc <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	3308      	adds	r3, #8
 800308a:	4619      	mov	r1, r3
 800308c:	4610      	mov	r0, r2
 800308e:	f000 fa7b 	bl	8003588 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6818      	ldr	r0, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	461a      	mov	r2, r3
 800309c:	68b9      	ldr	r1, [r7, #8]
 800309e:	f000 fae3 	bl	8003668 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6858      	ldr	r0, [r3, #4]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	f000 fb2e 	bl	8003710 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	6892      	ldr	r2, [r2, #8]
 80030bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	6892      	ldr	r2, [r2, #8]
 80030c8:	f041 0101 	orr.w	r1, r1, #1
 80030cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b082      	sub	sp, #8
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d101      	bne.n	80030ec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e03f      	b.n	800316c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d106      	bne.n	8003106 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f002 f9c5 	bl	8005490 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2224      	movs	r2, #36	; 0x24
 800310a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68da      	ldr	r2, [r3, #12]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800311c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f828 	bl	8003174 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	691a      	ldr	r2, [r3, #16]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003132:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	695a      	ldr	r2, [r3, #20]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003142:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68da      	ldr	r2, [r3, #12]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003152:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2220      	movs	r2, #32
 800315e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2220      	movs	r2, #32
 8003166:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003174:	b5b0      	push	{r4, r5, r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68da      	ldr	r2, [r3, #12]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	431a      	orrs	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	431a      	orrs	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80031b4:	f023 030c 	bic.w	r3, r3, #12
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6812      	ldr	r2, [r2, #0]
 80031bc:	68f9      	ldr	r1, [r7, #12]
 80031be:	430b      	orrs	r3, r1
 80031c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	699a      	ldr	r2, [r3, #24]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	430a      	orrs	r2, r1
 80031d6:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	69db      	ldr	r3, [r3, #28]
 80031dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031e0:	f040 80e4 	bne.w	80033ac <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4aab      	ldr	r2, [pc, #684]	; (8003498 <UART_SetConfig+0x324>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d004      	beq.n	80031f8 <UART_SetConfig+0x84>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4aaa      	ldr	r2, [pc, #680]	; (800349c <UART_SetConfig+0x328>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d16c      	bne.n	80032d2 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80031f8:	f7fe fbe4 	bl	80019c4 <HAL_RCC_GetPCLK2Freq>
 80031fc:	4602      	mov	r2, r0
 80031fe:	4613      	mov	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4413      	add	r3, r2
 8003204:	009a      	lsls	r2, r3, #2
 8003206:	441a      	add	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003212:	4aa3      	ldr	r2, [pc, #652]	; (80034a0 <UART_SetConfig+0x32c>)
 8003214:	fba2 2303 	umull	r2, r3, r2, r3
 8003218:	095b      	lsrs	r3, r3, #5
 800321a:	011c      	lsls	r4, r3, #4
 800321c:	f7fe fbd2 	bl	80019c4 <HAL_RCC_GetPCLK2Freq>
 8003220:	4602      	mov	r2, r0
 8003222:	4613      	mov	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4413      	add	r3, r2
 8003228:	009a      	lsls	r2, r3, #2
 800322a:	441a      	add	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	fbb2 f5f3 	udiv	r5, r2, r3
 8003236:	f7fe fbc5 	bl	80019c4 <HAL_RCC_GetPCLK2Freq>
 800323a:	4602      	mov	r2, r0
 800323c:	4613      	mov	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	4413      	add	r3, r2
 8003242:	009a      	lsls	r2, r3, #2
 8003244:	441a      	add	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003250:	4a93      	ldr	r2, [pc, #588]	; (80034a0 <UART_SetConfig+0x32c>)
 8003252:	fba2 2303 	umull	r2, r3, r2, r3
 8003256:	095b      	lsrs	r3, r3, #5
 8003258:	2264      	movs	r2, #100	; 0x64
 800325a:	fb02 f303 	mul.w	r3, r2, r3
 800325e:	1aeb      	subs	r3, r5, r3
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	3332      	adds	r3, #50	; 0x32
 8003264:	4a8e      	ldr	r2, [pc, #568]	; (80034a0 <UART_SetConfig+0x32c>)
 8003266:	fba2 2303 	umull	r2, r3, r2, r3
 800326a:	095b      	lsrs	r3, r3, #5
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003272:	441c      	add	r4, r3
 8003274:	f7fe fba6 	bl	80019c4 <HAL_RCC_GetPCLK2Freq>
 8003278:	4602      	mov	r2, r0
 800327a:	4613      	mov	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	009a      	lsls	r2, r3, #2
 8003282:	441a      	add	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	fbb2 f5f3 	udiv	r5, r2, r3
 800328e:	f7fe fb99 	bl	80019c4 <HAL_RCC_GetPCLK2Freq>
 8003292:	4602      	mov	r2, r0
 8003294:	4613      	mov	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	009a      	lsls	r2, r3, #2
 800329c:	441a      	add	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a8:	4a7d      	ldr	r2, [pc, #500]	; (80034a0 <UART_SetConfig+0x32c>)
 80032aa:	fba2 2303 	umull	r2, r3, r2, r3
 80032ae:	095b      	lsrs	r3, r3, #5
 80032b0:	2264      	movs	r2, #100	; 0x64
 80032b2:	fb02 f303 	mul.w	r3, r2, r3
 80032b6:	1aeb      	subs	r3, r5, r3
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	3332      	adds	r3, #50	; 0x32
 80032bc:	4a78      	ldr	r2, [pc, #480]	; (80034a0 <UART_SetConfig+0x32c>)
 80032be:	fba2 2303 	umull	r2, r3, r2, r3
 80032c2:	095b      	lsrs	r3, r3, #5
 80032c4:	f003 0207 	and.w	r2, r3, #7
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4422      	add	r2, r4
 80032ce:	609a      	str	r2, [r3, #8]
 80032d0:	e154      	b.n	800357c <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80032d2:	f7fe fb63 	bl	800199c <HAL_RCC_GetPCLK1Freq>
 80032d6:	4602      	mov	r2, r0
 80032d8:	4613      	mov	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4413      	add	r3, r2
 80032de:	009a      	lsls	r2, r3, #2
 80032e0:	441a      	add	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ec:	4a6c      	ldr	r2, [pc, #432]	; (80034a0 <UART_SetConfig+0x32c>)
 80032ee:	fba2 2303 	umull	r2, r3, r2, r3
 80032f2:	095b      	lsrs	r3, r3, #5
 80032f4:	011c      	lsls	r4, r3, #4
 80032f6:	f7fe fb51 	bl	800199c <HAL_RCC_GetPCLK1Freq>
 80032fa:	4602      	mov	r2, r0
 80032fc:	4613      	mov	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4413      	add	r3, r2
 8003302:	009a      	lsls	r2, r3, #2
 8003304:	441a      	add	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	fbb2 f5f3 	udiv	r5, r2, r3
 8003310:	f7fe fb44 	bl	800199c <HAL_RCC_GetPCLK1Freq>
 8003314:	4602      	mov	r2, r0
 8003316:	4613      	mov	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	009a      	lsls	r2, r3, #2
 800331e:	441a      	add	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	fbb2 f3f3 	udiv	r3, r2, r3
 800332a:	4a5d      	ldr	r2, [pc, #372]	; (80034a0 <UART_SetConfig+0x32c>)
 800332c:	fba2 2303 	umull	r2, r3, r2, r3
 8003330:	095b      	lsrs	r3, r3, #5
 8003332:	2264      	movs	r2, #100	; 0x64
 8003334:	fb02 f303 	mul.w	r3, r2, r3
 8003338:	1aeb      	subs	r3, r5, r3
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	3332      	adds	r3, #50	; 0x32
 800333e:	4a58      	ldr	r2, [pc, #352]	; (80034a0 <UART_SetConfig+0x32c>)
 8003340:	fba2 2303 	umull	r2, r3, r2, r3
 8003344:	095b      	lsrs	r3, r3, #5
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800334c:	441c      	add	r4, r3
 800334e:	f7fe fb25 	bl	800199c <HAL_RCC_GetPCLK1Freq>
 8003352:	4602      	mov	r2, r0
 8003354:	4613      	mov	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4413      	add	r3, r2
 800335a:	009a      	lsls	r2, r3, #2
 800335c:	441a      	add	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	fbb2 f5f3 	udiv	r5, r2, r3
 8003368:	f7fe fb18 	bl	800199c <HAL_RCC_GetPCLK1Freq>
 800336c:	4602      	mov	r2, r0
 800336e:	4613      	mov	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	009a      	lsls	r2, r3, #2
 8003376:	441a      	add	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003382:	4a47      	ldr	r2, [pc, #284]	; (80034a0 <UART_SetConfig+0x32c>)
 8003384:	fba2 2303 	umull	r2, r3, r2, r3
 8003388:	095b      	lsrs	r3, r3, #5
 800338a:	2264      	movs	r2, #100	; 0x64
 800338c:	fb02 f303 	mul.w	r3, r2, r3
 8003390:	1aeb      	subs	r3, r5, r3
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	3332      	adds	r3, #50	; 0x32
 8003396:	4a42      	ldr	r2, [pc, #264]	; (80034a0 <UART_SetConfig+0x32c>)
 8003398:	fba2 2303 	umull	r2, r3, r2, r3
 800339c:	095b      	lsrs	r3, r3, #5
 800339e:	f003 0207 	and.w	r2, r3, #7
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4422      	add	r2, r4
 80033a8:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80033aa:	e0e7      	b.n	800357c <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a39      	ldr	r2, [pc, #228]	; (8003498 <UART_SetConfig+0x324>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d004      	beq.n	80033c0 <UART_SetConfig+0x24c>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a38      	ldr	r2, [pc, #224]	; (800349c <UART_SetConfig+0x328>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d171      	bne.n	80034a4 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80033c0:	f7fe fb00 	bl	80019c4 <HAL_RCC_GetPCLK2Freq>
 80033c4:	4602      	mov	r2, r0
 80033c6:	4613      	mov	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	009a      	lsls	r2, r3, #2
 80033ce:	441a      	add	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033da:	4a31      	ldr	r2, [pc, #196]	; (80034a0 <UART_SetConfig+0x32c>)
 80033dc:	fba2 2303 	umull	r2, r3, r2, r3
 80033e0:	095b      	lsrs	r3, r3, #5
 80033e2:	011c      	lsls	r4, r3, #4
 80033e4:	f7fe faee 	bl	80019c4 <HAL_RCC_GetPCLK2Freq>
 80033e8:	4602      	mov	r2, r0
 80033ea:	4613      	mov	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	009a      	lsls	r2, r3, #2
 80033f2:	441a      	add	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	fbb2 f5f3 	udiv	r5, r2, r3
 80033fe:	f7fe fae1 	bl	80019c4 <HAL_RCC_GetPCLK2Freq>
 8003402:	4602      	mov	r2, r0
 8003404:	4613      	mov	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4413      	add	r3, r2
 800340a:	009a      	lsls	r2, r3, #2
 800340c:	441a      	add	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	fbb2 f3f3 	udiv	r3, r2, r3
 8003418:	4a21      	ldr	r2, [pc, #132]	; (80034a0 <UART_SetConfig+0x32c>)
 800341a:	fba2 2303 	umull	r2, r3, r2, r3
 800341e:	095b      	lsrs	r3, r3, #5
 8003420:	2264      	movs	r2, #100	; 0x64
 8003422:	fb02 f303 	mul.w	r3, r2, r3
 8003426:	1aeb      	subs	r3, r5, r3
 8003428:	011b      	lsls	r3, r3, #4
 800342a:	3332      	adds	r3, #50	; 0x32
 800342c:	4a1c      	ldr	r2, [pc, #112]	; (80034a0 <UART_SetConfig+0x32c>)
 800342e:	fba2 2303 	umull	r2, r3, r2, r3
 8003432:	095b      	lsrs	r3, r3, #5
 8003434:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003438:	441c      	add	r4, r3
 800343a:	f7fe fac3 	bl	80019c4 <HAL_RCC_GetPCLK2Freq>
 800343e:	4602      	mov	r2, r0
 8003440:	4613      	mov	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	009a      	lsls	r2, r3, #2
 8003448:	441a      	add	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	fbb2 f5f3 	udiv	r5, r2, r3
 8003454:	f7fe fab6 	bl	80019c4 <HAL_RCC_GetPCLK2Freq>
 8003458:	4602      	mov	r2, r0
 800345a:	4613      	mov	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4413      	add	r3, r2
 8003460:	009a      	lsls	r2, r3, #2
 8003462:	441a      	add	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	fbb2 f3f3 	udiv	r3, r2, r3
 800346e:	4a0c      	ldr	r2, [pc, #48]	; (80034a0 <UART_SetConfig+0x32c>)
 8003470:	fba2 2303 	umull	r2, r3, r2, r3
 8003474:	095b      	lsrs	r3, r3, #5
 8003476:	2264      	movs	r2, #100	; 0x64
 8003478:	fb02 f303 	mul.w	r3, r2, r3
 800347c:	1aeb      	subs	r3, r5, r3
 800347e:	011b      	lsls	r3, r3, #4
 8003480:	3332      	adds	r3, #50	; 0x32
 8003482:	4a07      	ldr	r2, [pc, #28]	; (80034a0 <UART_SetConfig+0x32c>)
 8003484:	fba2 2303 	umull	r2, r3, r2, r3
 8003488:	095b      	lsrs	r3, r3, #5
 800348a:	f003 020f 	and.w	r2, r3, #15
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4422      	add	r2, r4
 8003494:	609a      	str	r2, [r3, #8]
 8003496:	e071      	b.n	800357c <UART_SetConfig+0x408>
 8003498:	40011000 	.word	0x40011000
 800349c:	40011400 	.word	0x40011400
 80034a0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80034a4:	f7fe fa7a 	bl	800199c <HAL_RCC_GetPCLK1Freq>
 80034a8:	4602      	mov	r2, r0
 80034aa:	4613      	mov	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4413      	add	r3, r2
 80034b0:	009a      	lsls	r2, r3, #2
 80034b2:	441a      	add	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80034be:	4a31      	ldr	r2, [pc, #196]	; (8003584 <UART_SetConfig+0x410>)
 80034c0:	fba2 2303 	umull	r2, r3, r2, r3
 80034c4:	095b      	lsrs	r3, r3, #5
 80034c6:	011c      	lsls	r4, r3, #4
 80034c8:	f7fe fa68 	bl	800199c <HAL_RCC_GetPCLK1Freq>
 80034cc:	4602      	mov	r2, r0
 80034ce:	4613      	mov	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	4413      	add	r3, r2
 80034d4:	009a      	lsls	r2, r3, #2
 80034d6:	441a      	add	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	fbb2 f5f3 	udiv	r5, r2, r3
 80034e2:	f7fe fa5b 	bl	800199c <HAL_RCC_GetPCLK1Freq>
 80034e6:	4602      	mov	r2, r0
 80034e8:	4613      	mov	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4413      	add	r3, r2
 80034ee:	009a      	lsls	r2, r3, #2
 80034f0:	441a      	add	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fc:	4a21      	ldr	r2, [pc, #132]	; (8003584 <UART_SetConfig+0x410>)
 80034fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003502:	095b      	lsrs	r3, r3, #5
 8003504:	2264      	movs	r2, #100	; 0x64
 8003506:	fb02 f303 	mul.w	r3, r2, r3
 800350a:	1aeb      	subs	r3, r5, r3
 800350c:	011b      	lsls	r3, r3, #4
 800350e:	3332      	adds	r3, #50	; 0x32
 8003510:	4a1c      	ldr	r2, [pc, #112]	; (8003584 <UART_SetConfig+0x410>)
 8003512:	fba2 2303 	umull	r2, r3, r2, r3
 8003516:	095b      	lsrs	r3, r3, #5
 8003518:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800351c:	441c      	add	r4, r3
 800351e:	f7fe fa3d 	bl	800199c <HAL_RCC_GetPCLK1Freq>
 8003522:	4602      	mov	r2, r0
 8003524:	4613      	mov	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	009a      	lsls	r2, r3, #2
 800352c:	441a      	add	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	fbb2 f5f3 	udiv	r5, r2, r3
 8003538:	f7fe fa30 	bl	800199c <HAL_RCC_GetPCLK1Freq>
 800353c:	4602      	mov	r2, r0
 800353e:	4613      	mov	r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	4413      	add	r3, r2
 8003544:	009a      	lsls	r2, r3, #2
 8003546:	441a      	add	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003552:	4a0c      	ldr	r2, [pc, #48]	; (8003584 <UART_SetConfig+0x410>)
 8003554:	fba2 2303 	umull	r2, r3, r2, r3
 8003558:	095b      	lsrs	r3, r3, #5
 800355a:	2264      	movs	r2, #100	; 0x64
 800355c:	fb02 f303 	mul.w	r3, r2, r3
 8003560:	1aeb      	subs	r3, r5, r3
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	3332      	adds	r3, #50	; 0x32
 8003566:	4a07      	ldr	r2, [pc, #28]	; (8003584 <UART_SetConfig+0x410>)
 8003568:	fba2 2303 	umull	r2, r3, r2, r3
 800356c:	095b      	lsrs	r3, r3, #5
 800356e:	f003 020f 	and.w	r2, r3, #15
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4422      	add	r2, r4
 8003578:	609a      	str	r2, [r3, #8]
}
 800357a:	e7ff      	b.n	800357c <UART_SetConfig+0x408>
 800357c:	bf00      	nop
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bdb0      	pop	{r4, r5, r7, pc}
 8003584:	51eb851f 	.word	0x51eb851f

08003588 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8003592:	2300      	movs	r3, #0
 8003594:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035a0:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	4b2f      	ldr	r3, [pc, #188]	; (8003664 <FSMC_NORSRAM_Init+0xdc>)
 80035a6:	4013      	ands	r3, r2
 80035a8:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80035b2:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80035b8:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80035be:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80035c4:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 80035ca:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80035d0:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 80035d6:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 80035dc:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 80035e2:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 80035e8:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 80035ee:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 80035f4:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 80035fa:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	4313      	orrs	r3, r2
 8003600:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	2b08      	cmp	r3, #8
 8003608:	d103      	bne.n	8003612 <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003610:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68f9      	ldr	r1, [r7, #12]
 800361a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003622:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003626:	d10a      	bne.n	800363e <FSMC_NORSRAM_Init+0xb6>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d006      	beq.n	800363e <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003638:	431a      	orrs	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d006      	beq.n	8003654 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364e:	431a      	orrs	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3714      	adds	r7, #20
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	ffc00480 	.word	0xffc00480

08003668 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003668:	b480      	push	{r7}
 800366a:	b087      	sub	sp, #28
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8003674:	2300      	movs	r3, #0
 8003676:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	1c5a      	adds	r2, r3, #1
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003682:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800368a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8003696:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800369e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80036a6:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	3b01      	subs	r3, #1
 80036ae:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80036b0:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	3b02      	subs	r3, #2
 80036b8:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80036ba:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80036c0:	4313      	orrs	r3, r2
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	1c5a      	adds	r2, r3, #1
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6979      	ldr	r1, [r7, #20]
 80036d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036e0:	d10e      	bne.n	8003700 <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80036ea:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	3b01      	subs	r3, #1
 80036f2:	051b      	lsls	r3, r3, #20
 80036f4:	697a      	ldr	r2, [r7, #20]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	371c      	adds	r7, #28
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
	...

08003710 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8003710:	b480      	push	{r7}
 8003712:	b087      	sub	sp, #28
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
 800371c:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800371e:	2300      	movs	r3, #0
 8003720:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003728:	d122      	bne.n	8003770 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003732:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	4b15      	ldr	r3, [pc, #84]	; (800378c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8003738:	4013      	ands	r3, r2
 800373a:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8003746:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800374e:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8003756:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800375c:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	4313      	orrs	r3, r2
 8003762:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6979      	ldr	r1, [r7, #20]
 800376a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800376e:	e005      	b.n	800377c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8003778:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	371c      	adds	r7, #28
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	cff00000 	.word	0xcff00000

08003790 <SDIO_Init>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8003790:	b084      	sub	sp, #16
 8003792:	b480      	push	{r7}
 8003794:	b085      	sub	sp, #20
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
 800379a:	f107 001c 	add.w	r0, r7, #28
 800379e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U;
 80037a2:	2300      	movs	r3, #0
 80037a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80037a6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80037a8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80037aa:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80037ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80037ae:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80037b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80037b2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80037b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80037b6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80037b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80037ba:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	4313      	orrs	r3, r2
 80037c0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80037ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	431a      	orrs	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3714      	adds	r7, #20
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	b004      	add	sp, #16
 80037e4:	4770      	bx	lr

080037e6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80037e6:	b480      	push	{r7}
 80037e8:	b083      	sub	sp, #12
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2203      	movs	r2, #3
 800380c:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0303 	and.w	r3, r3, #3
}
 800382c:	4618      	mov	r0, r3
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <SDIO_SendCommand>:
  * @param  Command pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003842:	2300      	movs	r3, #0
 8003844:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003856:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800385c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8003862:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	4313      	orrs	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003872:	f023 030f 	bic.w	r3, r3, #15
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	431a      	orrs	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	b2db      	uxtb	r3, r3
}
 800389a:	4618      	mov	r0, r3
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <SDIO_GetResponse>:
  *            @arg SDIO_RESP1: Response Register 3
  *            @arg SDIO_RESP1: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b085      	sub	sp, #20
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
 80038ae:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 80038b0:	2300      	movs	r3, #0
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	3314      	adds	r3, #20
 80038b8:	461a      	mov	r2, r3
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	4413      	add	r3, r2
 80038be:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
}  
 80038c4:	4618      	mov	r0, r3
 80038c6:	3714      	adds	r7, #20
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <SDIO_ConfigData>:
  * @param  Data  pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80038da:	2300      	movs	r3, #0
 80038dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80038f6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80038fc:	431a      	orrs	r2, r3
                       Data->DPSM);
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8003902:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	4313      	orrs	r3, r2
 8003908:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	431a      	orrs	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800391a:	2300      	movs	r3, #0

}
 800391c:	4618      	mov	r0, r3
 800391e:	3714      	adds	r7, #20
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b088      	sub	sp, #32
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003932:	2300      	movs	r3, #0
 8003934:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800393a:	2310      	movs	r3, #16
 800393c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800393e:	2340      	movs	r3, #64	; 0x40
 8003940:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003942:	2300      	movs	r3, #0
 8003944:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003946:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800394a:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800394c:	f107 0308 	add.w	r3, r7, #8
 8003950:	4619      	mov	r1, r3
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7ff ff70 	bl	8003838 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8003958:	f241 3288 	movw	r2, #5000	; 0x1388
 800395c:	2110      	movs	r1, #16
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f98a 	bl	8003c78 <SDMMC_GetCmdResp1>
 8003964:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003966:	69fb      	ldr	r3, [r7, #28]
}
 8003968:	4618      	mov	r0, r3
 800396a:	3720      	adds	r7, #32
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <SDMMC_CmdSelDesel>:
  * @param  SDIOx Pointer to SDIO register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b08a      	sub	sp, #40	; 0x28
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800397c:	2300      	movs	r3, #0
 800397e:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003984:	2307      	movs	r3, #7
 8003986:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003988:	2340      	movs	r3, #64	; 0x40
 800398a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800398c:	2300      	movs	r3, #0
 800398e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003990:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003994:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003996:	f107 0310 	add.w	r3, r7, #16
 800399a:	4619      	mov	r1, r3
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f7ff ff4b 	bl	8003838 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80039a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a6:	2107      	movs	r1, #7
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f000 f965 	bl	8003c78 <SDMMC_GetCmdResp1>
 80039ae:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3728      	adds	r7, #40	; 0x28
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b088      	sub	sp, #32
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80039c2:	2300      	movs	r3, #0
 80039c4:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0U;
 80039c6:	2300      	movs	r3, #0
 80039c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80039ca:	2300      	movs	r3, #0
 80039cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80039ce:	2300      	movs	r3, #0
 80039d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80039d2:	2300      	movs	r3, #0
 80039d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80039d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039da:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80039dc:	f107 0308 	add.w	r3, r7, #8
 80039e0:	4619      	mov	r1, r3
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7ff ff28 	bl	8003838 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 f91b 	bl	8003c24 <SDMMC_GetCmdError>
 80039ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80039f0:	69fb      	ldr	r3, [r7, #28]
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3720      	adds	r7, #32
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b088      	sub	sp, #32
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003a02:	2300      	movs	r3, #0
 8003a04:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8003a06:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8003a0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8003a0c:	2308      	movs	r3, #8
 8003a0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003a10:	2340      	movs	r3, #64	; 0x40
 8003a12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a14:	2300      	movs	r3, #0
 8003a16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003a18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a1c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a1e:	f107 0308 	add.w	r3, r7, #8
 8003a22:	4619      	mov	r1, r3
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7ff ff07 	bl	8003838 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 faec 	bl	8004008 <SDMMC_GetCmdResp7>
 8003a30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003a32:	69fb      	ldr	r3, [r7, #28]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3720      	adds	r7, #32
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b088      	sub	sp, #32
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003a46:	2300      	movs	r3, #0
 8003a48:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8003a4e:	2337      	movs	r3, #55	; 0x37
 8003a50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003a52:	2340      	movs	r3, #64	; 0x40
 8003a54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a56:	2300      	movs	r3, #0
 8003a58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003a5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a5e:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a60:	f107 0308 	add.w	r3, r7, #8
 8003a64:	4619      	mov	r1, r3
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7ff fee6 	bl	8003838 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8003a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a70:	2137      	movs	r1, #55	; 0x37
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f900 	bl	8003c78 <SDMMC_GetCmdResp1>
 8003a78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003a7a:	69fb      	ldr	r3, [r7, #28]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3720      	adds	r7, #32
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b088      	sub	sp, #32
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8003a9e:	2329      	movs	r3, #41	; 0x29
 8003aa0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003aa2:	2340      	movs	r3, #64	; 0x40
 8003aa4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003aaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003aae:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ab0:	f107 0308 	add.w	r3, r7, #8
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7ff febe 	bl	8003838 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 fa01 	bl	8003ec4 <SDMMC_GetCmdResp3>
 8003ac2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003ac4:	69fb      	ldr	r3, [r7, #28]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3720      	adds	r7, #32
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b088      	sub	sp, #32
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
 8003ad6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8003ae0:	2306      	movs	r3, #6
 8003ae2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003ae4:	2340      	movs	r3, #64	; 0x40
 8003ae6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003aec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003af0:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003af2:	f107 0308 	add.w	r3, r7, #8
 8003af6:	4619      	mov	r1, r3
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f7ff fe9d 	bl	8003838 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8003afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b02:	2106      	movs	r1, #6
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 f8b7 	bl	8003c78 <SDMMC_GetCmdResp1>
 8003b0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003b0c:	69fb      	ldr	r3, [r7, #28]
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3720      	adds	r7, #32
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b088      	sub	sp, #32
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8003b22:	2300      	movs	r3, #0
 8003b24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8003b26:	2333      	movs	r3, #51	; 0x33
 8003b28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003b2a:	2340      	movs	r3, #64	; 0x40
 8003b2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003b32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b36:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003b38:	f107 0308 	add.w	r3, r7, #8
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7ff fe7a 	bl	8003838 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8003b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b48:	2133      	movs	r1, #51	; 0x33
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f894 	bl	8003c78 <SDMMC_GetCmdResp1>
 8003b50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003b52:	69fb      	ldr	r3, [r7, #28]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3720      	adds	r7, #32
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b088      	sub	sp, #32
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003b64:	2300      	movs	r3, #0
 8003b66:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003b70:	23c0      	movs	r3, #192	; 0xc0
 8003b72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003b74:	2300      	movs	r3, #0
 8003b76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003b78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b7c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003b7e:	f107 0308 	add.w	r3, r7, #8
 8003b82:	4619      	mov	r1, r3
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f7ff fe57 	bl	8003838 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f95a 	bl	8003e44 <SDMMC_GetCmdResp2>
 8003b90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003b92:	69fb      	ldr	r3, [r7, #28]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3720      	adds	r7, #32
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b088      	sub	sp, #32
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8003bae:	2309      	movs	r3, #9
 8003bb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003bb2:	23c0      	movs	r3, #192	; 0xc0
 8003bb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003bba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bbe:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003bc0:	f107 0308 	add.w	r3, r7, #8
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f7ff fe36 	bl	8003838 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 f939 	bl	8003e44 <SDMMC_GetCmdResp2>
 8003bd2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003bd4:	69fb      	ldr	r3, [r7, #28]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3720      	adds	r7, #32
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b088      	sub	sp, #32
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
 8003be6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003be8:	2300      	movs	r3, #0
 8003bea:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8003bec:	2300      	movs	r3, #0
 8003bee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003bf4:	2340      	movs	r3, #64	; 0x40
 8003bf6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003bfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c00:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c02:	f107 0308 	add.w	r3, r7, #8
 8003c06:	4619      	mov	r1, r3
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f7ff fe15 	bl	8003838 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	2103      	movs	r1, #3
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 f98a 	bl	8003f2c <SDMMC_GetCmdResp6>
 8003c18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003c1a:	69fb      	ldr	r3, [r7, #28]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3720      	adds	r7, #32
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8003c24:	b490      	push	{r4, r7}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003c2c:	4b10      	ldr	r3, [pc, #64]	; (8003c70 <SDMMC_GetCmdError+0x4c>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a10      	ldr	r2, [pc, #64]	; (8003c74 <SDMMC_GetCmdError+0x50>)
 8003c32:	fba2 2303 	umull	r2, r3, r2, r3
 8003c36:	0a5b      	lsrs	r3, r3, #9
 8003c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c3c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003c40:	4623      	mov	r3, r4
 8003c42:	1e5c      	subs	r4, r3, #1
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d102      	bne.n	8003c4e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003c48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003c4c:	e00a      	b.n	8003c64 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0f2      	beq.n	8003c40 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003c60:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3708      	adds	r7, #8
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bc90      	pop	{r4, r7}
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	20000008 	.word	0x20000008
 8003c74:	10624dd3 	.word	0x10624dd3

08003c78 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8003c78:	b590      	push	{r4, r7, lr}
 8003c7a:	b087      	sub	sp, #28
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	460b      	mov	r3, r1
 8003c82:	607a      	str	r2, [r7, #4]
 8003c84:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003c86:	4b6c      	ldr	r3, [pc, #432]	; (8003e38 <SDMMC_GetCmdResp1+0x1c0>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a6c      	ldr	r2, [pc, #432]	; (8003e3c <SDMMC_GetCmdResp1+0x1c4>)
 8003c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c90:	0a5b      	lsrs	r3, r3, #9
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003c98:	4623      	mov	r3, r4
 8003c9a:	1e5c      	subs	r4, r3, #1
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d102      	bne.n	8003ca6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003ca0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003ca4:	e0c3      	b.n	8003e2e <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003caa:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d0f2      	beq.n	8003c98 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb6:	f003 0304 	and.w	r3, r3, #4
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d004      	beq.n	8003cc8 <SDMMC_GetCmdResp1+0x50>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2204      	movs	r2, #4
 8003cc2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003cc4:	2304      	movs	r3, #4
 8003cc6:	e0b2      	b.n	8003e2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d004      	beq.n	8003cde <SDMMC_GetCmdResp1+0x66>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e0a7      	b.n	8003e2e <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f7ff fdd4 	bl	800388c <SDIO_GetCommandResponse>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	7afb      	ldrb	r3, [r7, #11]
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d001      	beq.n	8003cf2 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e09d      	b.n	8003e2e <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003cf8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f7ff fdd2 	bl	80038a6 <SDIO_GetResponse>
 8003d02:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	4b4e      	ldr	r3, [pc, #312]	; (8003e40 <SDMMC_GetCmdResp1+0x1c8>)
 8003d08:	4013      	ands	r3, r2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	e08d      	b.n	8003e2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	da02      	bge.n	8003d1e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003d18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d1c:	e087      	b.n	8003e2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003d28:	2340      	movs	r3, #64	; 0x40
 8003d2a:	e080      	b.n	8003e2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003d36:	2380      	movs	r3, #128	; 0x80
 8003d38:	e079      	b.n	8003e2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d002      	beq.n	8003d4a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003d44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d48:	e071      	b.n	8003e2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d002      	beq.n	8003d5a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003d54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d58:	e069      	b.n	8003e2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d002      	beq.n	8003d6a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003d64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d68:	e061      	b.n	8003e2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d002      	beq.n	8003d7a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003d74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d78:	e059      	b.n	8003e2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d002      	beq.n	8003d8a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003d84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d88:	e051      	b.n	8003e2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d002      	beq.n	8003d9a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003d94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d98:	e049      	b.n	8003e2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d002      	beq.n	8003daa <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003da4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003da8:	e041      	b.n	8003e2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d002      	beq.n	8003dba <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 8003db4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003db8:	e039      	b.n	8003e2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d002      	beq.n	8003dca <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003dc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003dc8:	e031      	b.n	8003e2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d002      	beq.n	8003dda <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003dd4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003dd8:	e029      	b.n	8003e2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d002      	beq.n	8003dea <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8003de4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003de8:	e021      	b.n	8003e2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d002      	beq.n	8003dfa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003df4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003df8:	e019      	b.n	8003e2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d002      	beq.n	8003e0a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8003e04:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003e08:	e011      	b.n	8003e2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d002      	beq.n	8003e1a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8003e14:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e18:	e009      	b.n	8003e2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f003 0308 	and.w	r3, r3, #8
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d002      	beq.n	8003e2a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8003e24:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003e28:	e001      	b.n	8003e2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003e2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	371c      	adds	r7, #28
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd90      	pop	{r4, r7, pc}
 8003e36:	bf00      	nop
 8003e38:	20000008 	.word	0x20000008
 8003e3c:	10624dd3 	.word	0x10624dd3
 8003e40:	fdffe008 	.word	0xfdffe008

08003e44 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8003e44:	b490      	push	{r4, r7}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003e4c:	4b1b      	ldr	r3, [pc, #108]	; (8003ebc <SDMMC_GetCmdResp2+0x78>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a1b      	ldr	r2, [pc, #108]	; (8003ec0 <SDMMC_GetCmdResp2+0x7c>)
 8003e52:	fba2 2303 	umull	r2, r3, r2, r3
 8003e56:	0a5b      	lsrs	r3, r3, #9
 8003e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003e60:	4623      	mov	r3, r4
 8003e62:	1e5c      	subs	r4, r3, #1
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d102      	bne.n	8003e6e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003e68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003e6c:	e020      	b.n	8003eb0 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e72:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0f2      	beq.n	8003e60 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e7e:	f003 0304 	and.w	r3, r3, #4
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d004      	beq.n	8003e90 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2204      	movs	r2, #4
 8003e8a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003e8c:	2304      	movs	r3, #4
 8003e8e:	e00f      	b.n	8003eb0 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d004      	beq.n	8003ea6 <SDMMC_GetCmdResp2+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e004      	b.n	8003eb0 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003eac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bc90      	pop	{r4, r7}
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	20000008 	.word	0x20000008
 8003ec0:	10624dd3 	.word	0x10624dd3

08003ec4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8003ec4:	b490      	push	{r4, r7}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003ecc:	4b15      	ldr	r3, [pc, #84]	; (8003f24 <SDMMC_GetCmdResp3+0x60>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a15      	ldr	r2, [pc, #84]	; (8003f28 <SDMMC_GetCmdResp3+0x64>)
 8003ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed6:	0a5b      	lsrs	r3, r3, #9
 8003ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003edc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003ee0:	4623      	mov	r3, r4
 8003ee2:	1e5c      	subs	r4, r3, #1
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d102      	bne.n	8003eee <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003ee8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003eec:	e015      	b.n	8003f1a <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0f2      	beq.n	8003ee0 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003efe:	f003 0304 	and.w	r3, r3, #4
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d004      	beq.n	8003f10 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2204      	movs	r2, #4
 8003f0a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003f0c:	2304      	movs	r3, #4
 8003f0e:	e004      	b.n	8003f1a <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003f16:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bc90      	pop	{r4, r7}
 8003f22:	4770      	bx	lr
 8003f24:	20000008 	.word	0x20000008
 8003f28:	10624dd3 	.word	0x10624dd3

08003f2c <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8003f2c:	b590      	push	{r4, r7, lr}
 8003f2e:	b087      	sub	sp, #28
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	460b      	mov	r3, r1
 8003f36:	607a      	str	r2, [r7, #4]
 8003f38:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003f3a:	4b31      	ldr	r3, [pc, #196]	; (8004000 <SDMMC_GetCmdResp6+0xd4>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a31      	ldr	r2, [pc, #196]	; (8004004 <SDMMC_GetCmdResp6+0xd8>)
 8003f40:	fba2 2303 	umull	r2, r3, r2, r3
 8003f44:	0a5b      	lsrs	r3, r3, #9
 8003f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f4a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003f4e:	4623      	mov	r3, r4
 8003f50:	1e5c      	subs	r4, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d102      	bne.n	8003f5c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003f56:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003f5a:	e04c      	b.n	8003ff6 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f60:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d0f2      	beq.n	8003f4e <SDMMC_GetCmdResp6+0x22>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f6c:	f003 0304 	and.w	r3, r3, #4
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d004      	beq.n	8003f7e <SDMMC_GetCmdResp6+0x52>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2204      	movs	r2, #4
 8003f78:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003f7a:	2304      	movs	r3, #4
 8003f7c:	e03b      	b.n	8003ff6 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d004      	beq.n	8003f94 <SDMMC_GetCmdResp6+0x68>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e030      	b.n	8003ff6 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f7ff fc79 	bl	800388c <SDIO_GetCommandResponse>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	7afb      	ldrb	r3, [r7, #11]
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d001      	beq.n	8003fa8 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e026      	b.n	8003ff6 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003fae:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f7ff fc77 	bl	80038a6 <SDIO_GetResponse>
 8003fb8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d106      	bne.n	8003fd2 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	0c1b      	lsrs	r3, r3, #16
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	e011      	b.n	8003ff6 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d002      	beq.n	8003fe2 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003fdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003fe0:	e009      	b.n	8003ff6 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d002      	beq.n	8003ff2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003fec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ff0:	e001      	b.n	8003ff6 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003ff2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	371c      	adds	r7, #28
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd90      	pop	{r4, r7, pc}
 8003ffe:	bf00      	nop
 8004000:	20000008 	.word	0x20000008
 8004004:	10624dd3 	.word	0x10624dd3

08004008 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004008:	b490      	push	{r4, r7}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004010:	4b18      	ldr	r3, [pc, #96]	; (8004074 <SDMMC_GetCmdResp7+0x6c>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a18      	ldr	r2, [pc, #96]	; (8004078 <SDMMC_GetCmdResp7+0x70>)
 8004016:	fba2 2303 	umull	r2, r3, r2, r3
 800401a:	0a5b      	lsrs	r3, r3, #9
 800401c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004020:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004024:	4623      	mov	r3, r4
 8004026:	1e5c      	subs	r4, r3, #1
 8004028:	2b00      	cmp	r3, #0
 800402a:	d102      	bne.n	8004032 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800402c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004030:	e01a      	b.n	8004068 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004036:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800403a:	2b00      	cmp	r3, #0
 800403c:	d0f2      	beq.n	8004024 <SDMMC_GetCmdResp7+0x1c>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004042:	f003 0304 	and.w	r3, r3, #4
 8004046:	2b00      	cmp	r3, #0
 8004048:	d004      	beq.n	8004054 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2240      	movs	r2, #64	; 0x40
 800404e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004050:	2304      	movs	r3, #4
 8004052:	e009      	b.n	8004068 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405c:	2b00      	cmp	r3, #0
 800405e:	d002      	beq.n	8004066 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2240      	movs	r2, #64	; 0x40
 8004064:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004066:	2300      	movs	r3, #0
  
}
 8004068:	4618      	mov	r0, r3
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bc90      	pop	{r4, r7}
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	20000008 	.word	0x20000008
 8004078:	10624dd3 	.word	0x10624dd3

0800407c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800407c:	b084      	sub	sp, #16
 800407e:	b580      	push	{r7, lr}
 8004080:	b084      	sub	sp, #16
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
 8004086:	f107 001c 	add.w	r0, r7, #28
 800408a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800408e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004090:	2b01      	cmp	r3, #1
 8004092:	d122      	bne.n	80040da <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004098:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80040a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80040bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d105      	bne.n	80040ce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 fa56 	bl	8004580 <USB_CoreReset>
 80040d4:	4603      	mov	r3, r0
 80040d6:	73fb      	strb	r3, [r7, #15]
 80040d8:	e01a      	b.n	8004110 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 fa4a 	bl	8004580 <USB_CoreReset>
 80040ec:	4603      	mov	r3, r0
 80040ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80040f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d106      	bne.n	8004104 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	639a      	str	r2, [r3, #56]	; 0x38
 8004102:	e005      	b.n	8004110 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004108:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004112:	2b01      	cmp	r3, #1
 8004114:	d10b      	bne.n	800412e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f043 0206 	orr.w	r2, r3, #6
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f043 0220 	orr.w	r2, r3, #32
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800412e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800413a:	b004      	add	sp, #16
 800413c:	4770      	bx	lr

0800413e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800413e:	b480      	push	{r7}
 8004140:	b083      	sub	sp, #12
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f023 0201 	bic.w	r2, r3, #1
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	460b      	mov	r3, r1
 800416a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004178:	78fb      	ldrb	r3, [r7, #3]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d106      	bne.n	800418c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	60da      	str	r2, [r3, #12]
 800418a:	e00b      	b.n	80041a4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800418c:	78fb      	ldrb	r3, [r7, #3]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d106      	bne.n	80041a0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	60da      	str	r2, [r3, #12]
 800419e:	e001      	b.n	80041a4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e003      	b.n	80041ac <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80041a4:	2032      	movs	r0, #50	; 0x32
 80041a6:	f7fc fa29 	bl	80005fc <HAL_Delay>

  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3708      	adds	r7, #8
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041b4:	b084      	sub	sp, #16
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b086      	sub	sp, #24
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
 80041be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80041c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80041c6:	2300      	movs	r3, #0
 80041c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80041ce:	2300      	movs	r3, #0
 80041d0:	613b      	str	r3, [r7, #16]
 80041d2:	e009      	b.n	80041e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	3340      	adds	r3, #64	; 0x40
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4413      	add	r3, r2
 80041de:	2200      	movs	r2, #0
 80041e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	3301      	adds	r3, #1
 80041e6:	613b      	str	r3, [r7, #16]
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	2b0e      	cmp	r3, #14
 80041ec:	d9f2      	bls.n	80041d4 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80041ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d112      	bne.n	800421a <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	e005      	b.n	8004226 <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800422c:	461a      	mov	r2, r3
 800422e:	2300      	movs	r3, #0
 8004230:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004238:	4619      	mov	r1, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004240:	461a      	mov	r2, r3
 8004242:	680b      	ldr	r3, [r1, #0]
 8004244:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004248:	2b01      	cmp	r3, #1
 800424a:	d10c      	bne.n	8004266 <USB_DevInit+0xb2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800424c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800424e:	2b00      	cmp	r3, #0
 8004250:	d104      	bne.n	800425c <USB_DevInit+0xa8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004252:	2100      	movs	r1, #0
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 f961 	bl	800451c <USB_SetDevSpeed>
 800425a:	e008      	b.n	800426e <USB_DevInit+0xba>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800425c:	2101      	movs	r1, #1
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f95c 	bl	800451c <USB_SetDevSpeed>
 8004264:	e003      	b.n	800426e <USB_DevInit+0xba>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004266:	2103      	movs	r1, #3
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 f957 	bl	800451c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800426e:	2110      	movs	r1, #16
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f90b 	bl	800448c <USB_FlushTxFifo>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d001      	beq.n	8004280 <USB_DevInit+0xcc>
  {
    ret = HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 f929 	bl	80044d8 <USB_FlushRxFifo>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <USB_DevInit+0xdc>
  {
    ret = HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004296:	461a      	mov	r2, r3
 8004298:	2300      	movs	r3, #0
 800429a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a2:	461a      	mov	r2, r3
 80042a4:	2300      	movs	r3, #0
 80042a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ae:	461a      	mov	r2, r3
 80042b0:	2300      	movs	r3, #0
 80042b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042b4:	2300      	movs	r3, #0
 80042b6:	613b      	str	r3, [r7, #16]
 80042b8:	e043      	b.n	8004342 <USB_DevInit+0x18e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	015a      	lsls	r2, r3, #5
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	4413      	add	r3, r2
 80042c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042d0:	d118      	bne.n	8004304 <USB_DevInit+0x150>
    {
      if (i == 0U)
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10a      	bne.n	80042ee <USB_DevInit+0x13a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	015a      	lsls	r2, r3, #5
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	4413      	add	r3, r2
 80042e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042e4:	461a      	mov	r2, r3
 80042e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80042ea:	6013      	str	r3, [r2, #0]
 80042ec:	e013      	b.n	8004316 <USB_DevInit+0x162>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	015a      	lsls	r2, r3, #5
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	4413      	add	r3, r2
 80042f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042fa:	461a      	mov	r2, r3
 80042fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004300:	6013      	str	r3, [r2, #0]
 8004302:	e008      	b.n	8004316 <USB_DevInit+0x162>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	015a      	lsls	r2, r3, #5
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	4413      	add	r3, r2
 800430c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004310:	461a      	mov	r2, r3
 8004312:	2300      	movs	r3, #0
 8004314:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	015a      	lsls	r2, r3, #5
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	4413      	add	r3, r2
 800431e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004322:	461a      	mov	r2, r3
 8004324:	2300      	movs	r3, #0
 8004326:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	015a      	lsls	r2, r3, #5
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	4413      	add	r3, r2
 8004330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004334:	461a      	mov	r2, r3
 8004336:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800433a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	3301      	adds	r3, #1
 8004340:	613b      	str	r3, [r7, #16]
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	429a      	cmp	r2, r3
 8004348:	d3b7      	bcc.n	80042ba <USB_DevInit+0x106>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800434a:	2300      	movs	r3, #0
 800434c:	613b      	str	r3, [r7, #16]
 800434e:	e043      	b.n	80043d8 <USB_DevInit+0x224>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	015a      	lsls	r2, r3, #5
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	4413      	add	r3, r2
 8004358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004362:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004366:	d118      	bne.n	800439a <USB_DevInit+0x1e6>
    {
      if (i == 0U)
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10a      	bne.n	8004384 <USB_DevInit+0x1d0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	015a      	lsls	r2, r3, #5
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	4413      	add	r3, r2
 8004376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800437a:	461a      	mov	r2, r3
 800437c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004380:	6013      	str	r3, [r2, #0]
 8004382:	e013      	b.n	80043ac <USB_DevInit+0x1f8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	015a      	lsls	r2, r3, #5
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	4413      	add	r3, r2
 800438c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004390:	461a      	mov	r2, r3
 8004392:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004396:	6013      	str	r3, [r2, #0]
 8004398:	e008      	b.n	80043ac <USB_DevInit+0x1f8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	015a      	lsls	r2, r3, #5
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	4413      	add	r3, r2
 80043a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a6:	461a      	mov	r2, r3
 80043a8:	2300      	movs	r3, #0
 80043aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	015a      	lsls	r2, r3, #5
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4413      	add	r3, r2
 80043b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b8:	461a      	mov	r2, r3
 80043ba:	2300      	movs	r3, #0
 80043bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	015a      	lsls	r2, r3, #5
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	4413      	add	r3, r2
 80043c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ca:	461a      	mov	r2, r3
 80043cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	3301      	adds	r3, #1
 80043d6:	613b      	str	r3, [r7, #16]
 80043d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d3b7      	bcc.n	8004350 <USB_DevInit+0x19c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043f2:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 80043f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d111      	bne.n	800441e <USB_DevInit+0x26a>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004400:	461a      	mov	r2, r3
 8004402:	4b20      	ldr	r3, [pc, #128]	; (8004484 <USB_DevInit+0x2d0>)
 8004404:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800440c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004418:	f043 0303 	orr.w	r3, r3, #3
 800441c:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800442a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800442c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442e:	2b00      	cmp	r3, #0
 8004430:	d105      	bne.n	800443e <USB_DevInit+0x28a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	f043 0210 	orr.w	r2, r3, #16
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	699a      	ldr	r2, [r3, #24]
 8004442:	4b11      	ldr	r3, [pc, #68]	; (8004488 <USB_DevInit+0x2d4>)
 8004444:	4313      	orrs	r3, r2
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800444a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800444c:	2b00      	cmp	r3, #0
 800444e:	d005      	beq.n	800445c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	f043 0208 	orr.w	r2, r3, #8
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800445c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800445e:	2b01      	cmp	r3, #1
 8004460:	d107      	bne.n	8004472 <USB_DevInit+0x2be>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800446a:	f043 0304 	orr.w	r3, r3, #4
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004472:	7dfb      	ldrb	r3, [r7, #23]
}
 8004474:	4618      	mov	r0, r3
 8004476:	3718      	adds	r7, #24
 8004478:	46bd      	mov	sp, r7
 800447a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800447e:	b004      	add	sp, #16
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	00800100 	.word	0x00800100
 8004488:	803c3800 	.word	0x803c3800

0800448c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004496:	2300      	movs	r3, #0
 8004498:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	019b      	lsls	r3, r3, #6
 800449e:	f043 0220 	orr.w	r2, r3, #32
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	3301      	adds	r3, #1
 80044aa:	60fb      	str	r3, [r7, #12]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	4a09      	ldr	r2, [pc, #36]	; (80044d4 <USB_FlushTxFifo+0x48>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d901      	bls.n	80044b8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e006      	b.n	80044c6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	f003 0320 	and.w	r3, r3, #32
 80044c0:	2b20      	cmp	r3, #32
 80044c2:	d0f0      	beq.n	80044a6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3714      	adds	r7, #20
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	00030d40 	.word	0x00030d40

080044d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80044e0:	2300      	movs	r3, #0
 80044e2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2210      	movs	r2, #16
 80044e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	3301      	adds	r3, #1
 80044ee:	60fb      	str	r3, [r7, #12]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	4a09      	ldr	r2, [pc, #36]	; (8004518 <USB_FlushRxFifo+0x40>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d901      	bls.n	80044fc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e006      	b.n	800450a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	f003 0310 	and.w	r3, r3, #16
 8004504:	2b10      	cmp	r3, #16
 8004506:	d0f0      	beq.n	80044ea <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3714      	adds	r7, #20
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	00030d40 	.word	0x00030d40

0800451c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	460b      	mov	r3, r1
 8004526:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	78fb      	ldrb	r3, [r7, #3]
 8004536:	68f9      	ldr	r1, [r7, #12]
 8004538:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800453c:	4313      	orrs	r3, r2
 800453e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3714      	adds	r7, #20
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b084      	sub	sp, #16
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004568:	f043 0302 	orr.w	r3, r3, #2
 800456c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800456e:	2003      	movs	r0, #3
 8004570:	f7fc f844 	bl	80005fc <HAL_Delay>

  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
	...

08004580 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004588:	2300      	movs	r3, #0
 800458a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	3301      	adds	r3, #1
 8004590:	60fb      	str	r3, [r7, #12]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	4a13      	ldr	r2, [pc, #76]	; (80045e4 <USB_CoreReset+0x64>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d901      	bls.n	800459e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e01b      	b.n	80045d6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	daf2      	bge.n	800458c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80045a6:	2300      	movs	r3, #0
 80045a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	f043 0201 	orr.w	r2, r3, #1
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	3301      	adds	r3, #1
 80045ba:	60fb      	str	r3, [r7, #12]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	4a09      	ldr	r2, [pc, #36]	; (80045e4 <USB_CoreReset+0x64>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d901      	bls.n	80045c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e006      	b.n	80045d6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d0f0      	beq.n	80045b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3714      	adds	r7, #20
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	00030d40 	.word	0x00030d40

080045e8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80045ee:	463b      	mov	r3, r7
 80045f0:	2200      	movs	r2, #0
 80045f2:	601a      	str	r2, [r3, #0]
 80045f4:	605a      	str	r2, [r3, #4]
 80045f6:	609a      	str	r2, [r3, #8]
 80045f8:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80045fa:	4b21      	ldr	r3, [pc, #132]	; (8004680 <MX_ADC1_Init+0x98>)
 80045fc:	4a21      	ldr	r2, [pc, #132]	; (8004684 <MX_ADC1_Init+0x9c>)
 80045fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004600:	4b1f      	ldr	r3, [pc, #124]	; (8004680 <MX_ADC1_Init+0x98>)
 8004602:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004606:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004608:	4b1d      	ldr	r3, [pc, #116]	; (8004680 <MX_ADC1_Init+0x98>)
 800460a:	2200      	movs	r2, #0
 800460c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800460e:	4b1c      	ldr	r3, [pc, #112]	; (8004680 <MX_ADC1_Init+0x98>)
 8004610:	2200      	movs	r2, #0
 8004612:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004614:	4b1a      	ldr	r3, [pc, #104]	; (8004680 <MX_ADC1_Init+0x98>)
 8004616:	2200      	movs	r2, #0
 8004618:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800461a:	4b19      	ldr	r3, [pc, #100]	; (8004680 <MX_ADC1_Init+0x98>)
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004622:	4b17      	ldr	r3, [pc, #92]	; (8004680 <MX_ADC1_Init+0x98>)
 8004624:	2200      	movs	r2, #0
 8004626:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004628:	4b15      	ldr	r3, [pc, #84]	; (8004680 <MX_ADC1_Init+0x98>)
 800462a:	4a17      	ldr	r2, [pc, #92]	; (8004688 <MX_ADC1_Init+0xa0>)
 800462c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800462e:	4b14      	ldr	r3, [pc, #80]	; (8004680 <MX_ADC1_Init+0x98>)
 8004630:	2200      	movs	r2, #0
 8004632:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004634:	4b12      	ldr	r3, [pc, #72]	; (8004680 <MX_ADC1_Init+0x98>)
 8004636:	2201      	movs	r2, #1
 8004638:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800463a:	4b11      	ldr	r3, [pc, #68]	; (8004680 <MX_ADC1_Init+0x98>)
 800463c:	2200      	movs	r2, #0
 800463e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004642:	4b0f      	ldr	r3, [pc, #60]	; (8004680 <MX_ADC1_Init+0x98>)
 8004644:	2201      	movs	r2, #1
 8004646:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004648:	480d      	ldr	r0, [pc, #52]	; (8004680 <MX_ADC1_Init+0x98>)
 800464a:	f7fb fff9 	bl	8000640 <HAL_ADC_Init>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d001      	beq.n	8004658 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8004654:	f000 fd48 	bl	80050e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8004658:	2307      	movs	r3, #7
 800465a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800465c:	2301      	movs	r3, #1
 800465e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004660:	2300      	movs	r3, #0
 8004662:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004664:	463b      	mov	r3, r7
 8004666:	4619      	mov	r1, r3
 8004668:	4805      	ldr	r0, [pc, #20]	; (8004680 <MX_ADC1_Init+0x98>)
 800466a:	f7fc f82d 	bl	80006c8 <HAL_ADC_ConfigChannel>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8004674:	f000 fd38 	bl	80050e8 <Error_Handler>
  }

}
 8004678:	bf00      	nop
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	20000034 	.word	0x20000034
 8004684:	40012000 	.word	0x40012000
 8004688:	0f000001 	.word	0x0f000001

0800468c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b08a      	sub	sp, #40	; 0x28
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004694:	f107 0314 	add.w	r3, r7, #20
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]
 800469c:	605a      	str	r2, [r3, #4]
 800469e:	609a      	str	r2, [r3, #8]
 80046a0:	60da      	str	r2, [r3, #12]
 80046a2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a17      	ldr	r2, [pc, #92]	; (8004708 <HAL_ADC_MspInit+0x7c>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d127      	bne.n	80046fe <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80046ae:	2300      	movs	r3, #0
 80046b0:	613b      	str	r3, [r7, #16]
 80046b2:	4b16      	ldr	r3, [pc, #88]	; (800470c <HAL_ADC_MspInit+0x80>)
 80046b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b6:	4a15      	ldr	r2, [pc, #84]	; (800470c <HAL_ADC_MspInit+0x80>)
 80046b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046bc:	6453      	str	r3, [r2, #68]	; 0x44
 80046be:	4b13      	ldr	r3, [pc, #76]	; (800470c <HAL_ADC_MspInit+0x80>)
 80046c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c6:	613b      	str	r3, [r7, #16]
 80046c8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046ca:	2300      	movs	r3, #0
 80046cc:	60fb      	str	r3, [r7, #12]
 80046ce:	4b0f      	ldr	r3, [pc, #60]	; (800470c <HAL_ADC_MspInit+0x80>)
 80046d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d2:	4a0e      	ldr	r2, [pc, #56]	; (800470c <HAL_ADC_MspInit+0x80>)
 80046d4:	f043 0301 	orr.w	r3, r3, #1
 80046d8:	6313      	str	r3, [r2, #48]	; 0x30
 80046da:	4b0c      	ldr	r3, [pc, #48]	; (800470c <HAL_ADC_MspInit+0x80>)
 80046dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	60fb      	str	r3, [r7, #12]
 80046e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA7     ------> ADC1_IN7 
    */
    GPIO_InitStruct.Pin = ICART_Pin;
 80046e6:	2380      	movs	r3, #128	; 0x80
 80046e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80046ea:	2303      	movs	r3, #3
 80046ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ee:	2300      	movs	r3, #0
 80046f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ICART_GPIO_Port, &GPIO_InitStruct);
 80046f2:	f107 0314 	add.w	r3, r7, #20
 80046f6:	4619      	mov	r1, r3
 80046f8:	4805      	ldr	r0, [pc, #20]	; (8004710 <HAL_ADC_MspInit+0x84>)
 80046fa:	f7fc fb17 	bl	8000d2c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80046fe:	bf00      	nop
 8004700:	3728      	adds	r7, #40	; 0x28
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	40012000 	.word	0x40012000
 800470c:	40023800 	.word	0x40023800
 8004710:	40020000 	.word	0x40020000

08004714 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8004718:	4b06      	ldr	r3, [pc, #24]	; (8004734 <MX_CRC_Init+0x20>)
 800471a:	4a07      	ldr	r2, [pc, #28]	; (8004738 <MX_CRC_Init+0x24>)
 800471c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800471e:	4805      	ldr	r0, [pc, #20]	; (8004734 <MX_CRC_Init+0x20>)
 8004720:	f7fc fae5 	bl	8000cee <HAL_CRC_Init>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d001      	beq.n	800472e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800472a:	f000 fcdd 	bl	80050e8 <Error_Handler>
  }

}
 800472e:	bf00      	nop
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	2000007c 	.word	0x2000007c
 8004738:	40023000 	.word	0x40023000

0800473c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a0b      	ldr	r2, [pc, #44]	; (8004778 <HAL_CRC_MspInit+0x3c>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d10d      	bne.n	800476a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800474e:	2300      	movs	r3, #0
 8004750:	60fb      	str	r3, [r7, #12]
 8004752:	4b0a      	ldr	r3, [pc, #40]	; (800477c <HAL_CRC_MspInit+0x40>)
 8004754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004756:	4a09      	ldr	r2, [pc, #36]	; (800477c <HAL_CRC_MspInit+0x40>)
 8004758:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800475c:	6313      	str	r3, [r2, #48]	; 0x30
 800475e:	4b07      	ldr	r3, [pc, #28]	; (800477c <HAL_CRC_MspInit+0x40>)
 8004760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004762:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800476a:	bf00      	nop
 800476c:	3714      	adds	r7, #20
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	40023000 	.word	0x40023000
 800477c:	40023800 	.word	0x40023800

08004780 <MX_FSMC_Init>:
NOR_HandleTypeDef hnor3;
SRAM_HandleTypeDef hsram4;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b08e      	sub	sp, #56	; 0x38
 8004784:	af00      	add	r7, sp, #0
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8004786:	f107 031c 	add.w	r3, r7, #28
 800478a:	2200      	movs	r2, #0
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	605a      	str	r2, [r3, #4]
 8004790:	609a      	str	r2, [r3, #8]
 8004792:	60da      	str	r2, [r3, #12]
 8004794:	611a      	str	r2, [r3, #16]
 8004796:	615a      	str	r2, [r3, #20]
 8004798:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800479a:	463b      	mov	r3, r7
 800479c:	2200      	movs	r2, #0
 800479e:	601a      	str	r2, [r3, #0]
 80047a0:	605a      	str	r2, [r3, #4]
 80047a2:	609a      	str	r2, [r3, #8]
 80047a4:	60da      	str	r2, [r3, #12]
 80047a6:	611a      	str	r2, [r3, #16]
 80047a8:	615a      	str	r2, [r3, #20]
 80047aa:	619a      	str	r2, [r3, #24]

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FSMC_NORSRAM_DEVICE;
 80047ac:	4ba4      	ldr	r3, [pc, #656]	; (8004a40 <MX_FSMC_Init+0x2c0>)
 80047ae:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80047b2:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80047b4:	4ba2      	ldr	r3, [pc, #648]	; (8004a40 <MX_FSMC_Init+0x2c0>)
 80047b6:	4aa3      	ldr	r2, [pc, #652]	; (8004a44 <MX_FSMC_Init+0x2c4>)
 80047b8:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80047ba:	4ba1      	ldr	r3, [pc, #644]	; (8004a40 <MX_FSMC_Init+0x2c0>)
 80047bc:	2200      	movs	r2, #0
 80047be:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80047c0:	4b9f      	ldr	r3, [pc, #636]	; (8004a40 <MX_FSMC_Init+0x2c0>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FSMC_MEMORY_TYPE_NOR;
 80047c6:	4b9e      	ldr	r3, [pc, #632]	; (8004a40 <MX_FSMC_Init+0x2c0>)
 80047c8:	2208      	movs	r2, #8
 80047ca:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_8;
 80047cc:	4b9c      	ldr	r3, [pc, #624]	; (8004a40 <MX_FSMC_Init+0x2c0>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80047d2:	4b9b      	ldr	r3, [pc, #620]	; (8004a40 <MX_FSMC_Init+0x2c0>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80047d8:	4b99      	ldr	r3, [pc, #612]	; (8004a40 <MX_FSMC_Init+0x2c0>)
 80047da:	2200      	movs	r2, #0
 80047dc:	61da      	str	r2, [r3, #28]
  hnor1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80047de:	4b98      	ldr	r3, [pc, #608]	; (8004a40 <MX_FSMC_Init+0x2c0>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80047e4:	4b96      	ldr	r3, [pc, #600]	; (8004a40 <MX_FSMC_Init+0x2c0>)
 80047e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80047ea:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80047ec:	4b94      	ldr	r3, [pc, #592]	; (8004a40 <MX_FSMC_Init+0x2c0>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80047f2:	4b93      	ldr	r3, [pc, #588]	; (8004a40 <MX_FSMC_Init+0x2c0>)
 80047f4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80047f8:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80047fa:	4b91      	ldr	r3, [pc, #580]	; (8004a40 <MX_FSMC_Init+0x2c0>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8004800:	4b8f      	ldr	r3, [pc, #572]	; (8004a40 <MX_FSMC_Init+0x2c0>)
 8004802:	2200      	movs	r2, #0
 8004804:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8004806:	4b8e      	ldr	r3, [pc, #568]	; (8004a40 <MX_FSMC_Init+0x2c0>)
 8004808:	2200      	movs	r2, #0
 800480a:	63da      	str	r2, [r3, #60]	; 0x3c
  hnor1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 800480c:	4b8c      	ldr	r3, [pc, #560]	; (8004a40 <MX_FSMC_Init+0x2c0>)
 800480e:	2200      	movs	r2, #0
 8004810:	641a      	str	r2, [r3, #64]	; 0x40
  hnor1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8004812:	4b8b      	ldr	r3, [pc, #556]	; (8004a40 <MX_FSMC_Init+0x2c0>)
 8004814:	2200      	movs	r2, #0
 8004816:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8004818:	230f      	movs	r3, #15
 800481a:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800481c:	230f      	movs	r3, #15
 800481e:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 255;
 8004820:	23ff      	movs	r3, #255	; 0xff
 8004822:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 8004824:	230f      	movs	r3, #15
 8004826:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8004828:	2310      	movs	r3, #16
 800482a:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800482c:	2311      	movs	r3, #17
 800482e:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_B;
 8004830:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004834:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 15;
 8004836:	230f      	movs	r3, #15
 8004838:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800483a:	230f      	movs	r3, #15
 800483c:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 255;
 800483e:	23ff      	movs	r3, #255	; 0xff
 8004840:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 15;
 8004842:	230f      	movs	r3, #15
 8004844:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8004846:	2310      	movs	r3, #16
 8004848:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800484a:	2311      	movs	r3, #17
 800484c:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_B;
 800484e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004852:	61bb      	str	r3, [r7, #24]

  if (HAL_NOR_Init(&hnor1, &Timing, &ExtTiming) != HAL_OK)
 8004854:	463a      	mov	r2, r7
 8004856:	f107 031c 	add.w	r3, r7, #28
 800485a:	4619      	mov	r1, r3
 800485c:	4878      	ldr	r0, [pc, #480]	; (8004a40 <MX_FSMC_Init+0x2c0>)
 800485e:	f7fc fd39 	bl	80012d4 <HAL_NOR_Init>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d001      	beq.n	800486c <MX_FSMC_Init+0xec>
  {
    Error_Handler( );
 8004868:	f000 fc3e 	bl	80050e8 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 800486c:	4b76      	ldr	r3, [pc, #472]	; (8004a48 <MX_FSMC_Init+0x2c8>)
 800486e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8004872:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8004874:	4b74      	ldr	r3, [pc, #464]	; (8004a48 <MX_FSMC_Init+0x2c8>)
 8004876:	4a73      	ldr	r2, [pc, #460]	; (8004a44 <MX_FSMC_Init+0x2c4>)
 8004878:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK2;
 800487a:	4b73      	ldr	r3, [pc, #460]	; (8004a48 <MX_FSMC_Init+0x2c8>)
 800487c:	2202      	movs	r2, #2
 800487e:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8004880:	4b71      	ldr	r3, [pc, #452]	; (8004a48 <MX_FSMC_Init+0x2c8>)
 8004882:	2200      	movs	r2, #0
 8004884:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8004886:	4b70      	ldr	r3, [pc, #448]	; (8004a48 <MX_FSMC_Init+0x2c8>)
 8004888:	2200      	movs	r2, #0
 800488a:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_8;
 800488c:	4b6e      	ldr	r3, [pc, #440]	; (8004a48 <MX_FSMC_Init+0x2c8>)
 800488e:	2200      	movs	r2, #0
 8004890:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8004892:	4b6d      	ldr	r3, [pc, #436]	; (8004a48 <MX_FSMC_Init+0x2c8>)
 8004894:	2200      	movs	r2, #0
 8004896:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8004898:	4b6b      	ldr	r3, [pc, #428]	; (8004a48 <MX_FSMC_Init+0x2c8>)
 800489a:	2200      	movs	r2, #0
 800489c:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800489e:	4b6a      	ldr	r3, [pc, #424]	; (8004a48 <MX_FSMC_Init+0x2c8>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80048a4:	4b68      	ldr	r3, [pc, #416]	; (8004a48 <MX_FSMC_Init+0x2c8>)
 80048a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80048aa:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80048ac:	4b66      	ldr	r3, [pc, #408]	; (8004a48 <MX_FSMC_Init+0x2c8>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80048b2:	4b65      	ldr	r3, [pc, #404]	; (8004a48 <MX_FSMC_Init+0x2c8>)
 80048b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80048b8:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80048ba:	4b63      	ldr	r3, [pc, #396]	; (8004a48 <MX_FSMC_Init+0x2c8>)
 80048bc:	2200      	movs	r2, #0
 80048be:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80048c0:	4b61      	ldr	r3, [pc, #388]	; (8004a48 <MX_FSMC_Init+0x2c8>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80048c6:	4b60      	ldr	r3, [pc, #384]	; (8004a48 <MX_FSMC_Init+0x2c8>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 80048cc:	4b5e      	ldr	r3, [pc, #376]	; (8004a48 <MX_FSMC_Init+0x2c8>)
 80048ce:	2200      	movs	r2, #0
 80048d0:	641a      	str	r2, [r3, #64]	; 0x40
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80048d2:	4b5d      	ldr	r3, [pc, #372]	; (8004a48 <MX_FSMC_Init+0x2c8>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 80048d8:	230f      	movs	r3, #15
 80048da:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80048dc:	230f      	movs	r3, #15
 80048de:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 255;
 80048e0:	23ff      	movs	r3, #255	; 0xff
 80048e2:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 80048e4:	230f      	movs	r3, #15
 80048e6:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80048e8:	2310      	movs	r3, #16
 80048ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80048ec:	2311      	movs	r3, #17
 80048ee:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80048f0:	2300      	movs	r3, #0
 80048f2:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 15;
 80048f4:	230f      	movs	r3, #15
 80048f6:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80048f8:	230f      	movs	r3, #15
 80048fa:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 255;
 80048fc:	23ff      	movs	r3, #255	; 0xff
 80048fe:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 15;
 8004900:	230f      	movs	r3, #15
 8004902:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8004904:	2310      	movs	r3, #16
 8004906:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8004908:	2311      	movs	r3, #17
 800490a:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800490c:	2300      	movs	r3, #0
 800490e:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram2, &Timing, &ExtTiming) != HAL_OK)
 8004910:	463a      	mov	r2, r7
 8004912:	f107 031c 	add.w	r3, r7, #28
 8004916:	4619      	mov	r1, r3
 8004918:	484b      	ldr	r0, [pc, #300]	; (8004a48 <MX_FSMC_Init+0x2c8>)
 800491a:	f7fe fb9a 	bl	8003052 <HAL_SRAM_Init>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d001      	beq.n	8004928 <MX_FSMC_Init+0x1a8>
  {
    Error_Handler( );
 8004924:	f000 fbe0 	bl	80050e8 <Error_Handler>
  }

  /** Perform the NOR3 memory initialization sequence
  */
  hnor3.Instance = FSMC_NORSRAM_DEVICE;
 8004928:	4b48      	ldr	r3, [pc, #288]	; (8004a4c <MX_FSMC_Init+0x2cc>)
 800492a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800492e:	601a      	str	r2, [r3, #0]
  hnor3.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8004930:	4b46      	ldr	r3, [pc, #280]	; (8004a4c <MX_FSMC_Init+0x2cc>)
 8004932:	4a44      	ldr	r2, [pc, #272]	; (8004a44 <MX_FSMC_Init+0x2c4>)
 8004934:	605a      	str	r2, [r3, #4]
  /* hnor3.Init */
  hnor3.Init.NSBank = FSMC_NORSRAM_BANK3;
 8004936:	4b45      	ldr	r3, [pc, #276]	; (8004a4c <MX_FSMC_Init+0x2cc>)
 8004938:	2204      	movs	r2, #4
 800493a:	609a      	str	r2, [r3, #8]
  hnor3.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800493c:	4b43      	ldr	r3, [pc, #268]	; (8004a4c <MX_FSMC_Init+0x2cc>)
 800493e:	2200      	movs	r2, #0
 8004940:	60da      	str	r2, [r3, #12]
  hnor3.Init.MemoryType = FSMC_MEMORY_TYPE_NOR;
 8004942:	4b42      	ldr	r3, [pc, #264]	; (8004a4c <MX_FSMC_Init+0x2cc>)
 8004944:	2208      	movs	r2, #8
 8004946:	611a      	str	r2, [r3, #16]
  hnor3.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8004948:	4b40      	ldr	r3, [pc, #256]	; (8004a4c <MX_FSMC_Init+0x2cc>)
 800494a:	2210      	movs	r2, #16
 800494c:	615a      	str	r2, [r3, #20]
  hnor3.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800494e:	4b3f      	ldr	r3, [pc, #252]	; (8004a4c <MX_FSMC_Init+0x2cc>)
 8004950:	2200      	movs	r2, #0
 8004952:	619a      	str	r2, [r3, #24]
  hnor3.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8004954:	4b3d      	ldr	r3, [pc, #244]	; (8004a4c <MX_FSMC_Init+0x2cc>)
 8004956:	2200      	movs	r2, #0
 8004958:	61da      	str	r2, [r3, #28]
  hnor3.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800495a:	4b3c      	ldr	r3, [pc, #240]	; (8004a4c <MX_FSMC_Init+0x2cc>)
 800495c:	2200      	movs	r2, #0
 800495e:	625a      	str	r2, [r3, #36]	; 0x24
  hnor3.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8004960:	4b3a      	ldr	r3, [pc, #232]	; (8004a4c <MX_FSMC_Init+0x2cc>)
 8004962:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004966:	629a      	str	r2, [r3, #40]	; 0x28
  hnor3.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8004968:	4b38      	ldr	r3, [pc, #224]	; (8004a4c <MX_FSMC_Init+0x2cc>)
 800496a:	2200      	movs	r2, #0
 800496c:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor3.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 800496e:	4b37      	ldr	r3, [pc, #220]	; (8004a4c <MX_FSMC_Init+0x2cc>)
 8004970:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004974:	631a      	str	r2, [r3, #48]	; 0x30
  hnor3.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8004976:	4b35      	ldr	r3, [pc, #212]	; (8004a4c <MX_FSMC_Init+0x2cc>)
 8004978:	2200      	movs	r2, #0
 800497a:	635a      	str	r2, [r3, #52]	; 0x34
  hnor3.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800497c:	4b33      	ldr	r3, [pc, #204]	; (8004a4c <MX_FSMC_Init+0x2cc>)
 800497e:	2200      	movs	r2, #0
 8004980:	639a      	str	r2, [r3, #56]	; 0x38
  hnor3.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8004982:	4b32      	ldr	r3, [pc, #200]	; (8004a4c <MX_FSMC_Init+0x2cc>)
 8004984:	2200      	movs	r2, #0
 8004986:	63da      	str	r2, [r3, #60]	; 0x3c
  hnor3.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8004988:	4b30      	ldr	r3, [pc, #192]	; (8004a4c <MX_FSMC_Init+0x2cc>)
 800498a:	2200      	movs	r2, #0
 800498c:	641a      	str	r2, [r3, #64]	; 0x40
  hnor3.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800498e:	4b2f      	ldr	r3, [pc, #188]	; (8004a4c <MX_FSMC_Init+0x2cc>)
 8004990:	2200      	movs	r2, #0
 8004992:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8004994:	230f      	movs	r3, #15
 8004996:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8004998:	230f      	movs	r3, #15
 800499a:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 255;
 800499c:	23ff      	movs	r3, #255	; 0xff
 800499e:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 80049a0:	230f      	movs	r3, #15
 80049a2:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80049a4:	2310      	movs	r3, #16
 80049a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80049a8:	2311      	movs	r3, #17
 80049aa:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_B;
 80049ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80049b0:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 15;
 80049b2:	230f      	movs	r3, #15
 80049b4:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80049b6:	230f      	movs	r3, #15
 80049b8:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 255;
 80049ba:	23ff      	movs	r3, #255	; 0xff
 80049bc:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 15;
 80049be:	230f      	movs	r3, #15
 80049c0:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80049c2:	2310      	movs	r3, #16
 80049c4:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80049c6:	2311      	movs	r3, #17
 80049c8:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_B;
 80049ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80049ce:	61bb      	str	r3, [r7, #24]

  if (HAL_NOR_Init(&hnor3, &Timing, &ExtTiming) != HAL_OK)
 80049d0:	463a      	mov	r2, r7
 80049d2:	f107 031c 	add.w	r3, r7, #28
 80049d6:	4619      	mov	r1, r3
 80049d8:	481c      	ldr	r0, [pc, #112]	; (8004a4c <MX_FSMC_Init+0x2cc>)
 80049da:	f7fc fc7b 	bl	80012d4 <HAL_NOR_Init>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <MX_FSMC_Init+0x268>
  {
    Error_Handler( );
 80049e4:	f000 fb80 	bl	80050e8 <Error_Handler>
  }

  /** Perform the SRAM4 memory initialization sequence
  */
  hsram4.Instance = FSMC_NORSRAM_DEVICE;
 80049e8:	4b19      	ldr	r3, [pc, #100]	; (8004a50 <MX_FSMC_Init+0x2d0>)
 80049ea:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80049ee:	601a      	str	r2, [r3, #0]
  hsram4.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80049f0:	4b17      	ldr	r3, [pc, #92]	; (8004a50 <MX_FSMC_Init+0x2d0>)
 80049f2:	4a14      	ldr	r2, [pc, #80]	; (8004a44 <MX_FSMC_Init+0x2c4>)
 80049f4:	605a      	str	r2, [r3, #4]
  /* hsram4.Init */
  hsram4.Init.NSBank = FSMC_NORSRAM_BANK4;
 80049f6:	4b16      	ldr	r3, [pc, #88]	; (8004a50 <MX_FSMC_Init+0x2d0>)
 80049f8:	2206      	movs	r2, #6
 80049fa:	609a      	str	r2, [r3, #8]
  hsram4.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80049fc:	4b14      	ldr	r3, [pc, #80]	; (8004a50 <MX_FSMC_Init+0x2d0>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	60da      	str	r2, [r3, #12]
  hsram4.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8004a02:	4b13      	ldr	r3, [pc, #76]	; (8004a50 <MX_FSMC_Init+0x2d0>)
 8004a04:	2200      	movs	r2, #0
 8004a06:	611a      	str	r2, [r3, #16]
  hsram4.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8004a08:	4b11      	ldr	r3, [pc, #68]	; (8004a50 <MX_FSMC_Init+0x2d0>)
 8004a0a:	2210      	movs	r2, #16
 8004a0c:	615a      	str	r2, [r3, #20]
  hsram4.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8004a0e:	4b10      	ldr	r3, [pc, #64]	; (8004a50 <MX_FSMC_Init+0x2d0>)
 8004a10:	2200      	movs	r2, #0
 8004a12:	619a      	str	r2, [r3, #24]
  hsram4.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8004a14:	4b0e      	ldr	r3, [pc, #56]	; (8004a50 <MX_FSMC_Init+0x2d0>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	61da      	str	r2, [r3, #28]
  hsram4.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8004a1a:	4b0d      	ldr	r3, [pc, #52]	; (8004a50 <MX_FSMC_Init+0x2d0>)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	625a      	str	r2, [r3, #36]	; 0x24
  hsram4.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8004a20:	4b0b      	ldr	r3, [pc, #44]	; (8004a50 <MX_FSMC_Init+0x2d0>)
 8004a22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004a26:	629a      	str	r2, [r3, #40]	; 0x28
  hsram4.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8004a28:	4b09      	ldr	r3, [pc, #36]	; (8004a50 <MX_FSMC_Init+0x2d0>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram4.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8004a2e:	4b08      	ldr	r3, [pc, #32]	; (8004a50 <MX_FSMC_Init+0x2d0>)
 8004a30:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004a34:	631a      	str	r2, [r3, #48]	; 0x30
  hsram4.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8004a36:	4b06      	ldr	r3, [pc, #24]	; (8004a50 <MX_FSMC_Init+0x2d0>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	635a      	str	r2, [r3, #52]	; 0x34
 8004a3c:	e00a      	b.n	8004a54 <MX_FSMC_Init+0x2d4>
 8004a3e:	bf00      	nop
 8004a40:	20000084 	.word	0x20000084
 8004a44:	a0000104 	.word	0xa0000104
 8004a48:	200000d0 	.word	0x200000d0
 8004a4c:	20000170 	.word	0x20000170
 8004a50:	20000120 	.word	0x20000120
  hsram4.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8004a54:	4b1b      	ldr	r3, [pc, #108]	; (8004ac4 <MX_FSMC_Init+0x344>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	639a      	str	r2, [r3, #56]	; 0x38
  hsram4.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8004a5a:	4b1a      	ldr	r3, [pc, #104]	; (8004ac4 <MX_FSMC_Init+0x344>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram4.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8004a60:	4b18      	ldr	r3, [pc, #96]	; (8004ac4 <MX_FSMC_Init+0x344>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	641a      	str	r2, [r3, #64]	; 0x40
  hsram4.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8004a66:	4b17      	ldr	r3, [pc, #92]	; (8004ac4 <MX_FSMC_Init+0x344>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8004a6c:	230f      	movs	r3, #15
 8004a6e:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8004a70:	230f      	movs	r3, #15
 8004a72:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 255;
 8004a74:	23ff      	movs	r3, #255	; 0xff
 8004a76:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 8004a78:	230f      	movs	r3, #15
 8004a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8004a7c:	2310      	movs	r3, #16
 8004a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8004a80:	2311      	movs	r3, #17
 8004a82:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8004a84:	2300      	movs	r3, #0
 8004a86:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 15;
 8004a88:	230f      	movs	r3, #15
 8004a8a:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8004a8c:	230f      	movs	r3, #15
 8004a8e:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 255;
 8004a90:	23ff      	movs	r3, #255	; 0xff
 8004a92:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 15;
 8004a94:	230f      	movs	r3, #15
 8004a96:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8004a98:	2310      	movs	r3, #16
 8004a9a:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8004a9c:	2311      	movs	r3, #17
 8004a9e:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram4, &Timing, &ExtTiming) != HAL_OK)
 8004aa4:	463a      	mov	r2, r7
 8004aa6:	f107 031c 	add.w	r3, r7, #28
 8004aaa:	4619      	mov	r1, r3
 8004aac:	4805      	ldr	r0, [pc, #20]	; (8004ac4 <MX_FSMC_Init+0x344>)
 8004aae:	f7fe fad0 	bl	8003052 <HAL_SRAM_Init>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d001      	beq.n	8004abc <MX_FSMC_Init+0x33c>
  {
    Error_Handler( );
 8004ab8:	f000 fb16 	bl	80050e8 <Error_Handler>
  }

}
 8004abc:	bf00      	nop
 8004abe:	3738      	adds	r7, #56	; 0x38
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	20000120 	.word	0x20000120

08004ac8 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ace:	1d3b      	adds	r3, r7, #4
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	601a      	str	r2, [r3, #0]
 8004ad4:	605a      	str	r2, [r3, #4]
 8004ad6:	609a      	str	r2, [r3, #8]
 8004ad8:	60da      	str	r2, [r3, #12]
 8004ada:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8004adc:	4b2c      	ldr	r3, [pc, #176]	; (8004b90 <HAL_FSMC_MspInit+0xc8>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d151      	bne.n	8004b88 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8004ae4:	4b2a      	ldr	r3, [pc, #168]	; (8004b90 <HAL_FSMC_MspInit+0xc8>)
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8004aea:	2300      	movs	r3, #0
 8004aec:	603b      	str	r3, [r7, #0]
 8004aee:	4b29      	ldr	r3, [pc, #164]	; (8004b94 <HAL_FSMC_MspInit+0xcc>)
 8004af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af2:	4a28      	ldr	r2, [pc, #160]	; (8004b94 <HAL_FSMC_MspInit+0xcc>)
 8004af4:	f043 0301 	orr.w	r3, r3, #1
 8004af8:	6393      	str	r3, [r2, #56]	; 0x38
 8004afa:	4b26      	ldr	r3, [pc, #152]	; (8004b94 <HAL_FSMC_MspInit+0xcc>)
 8004afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	603b      	str	r3, [r7, #0]
 8004b04:	683b      	ldr	r3, [r7, #0]
  PG14   ------> FSMC_A25
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8004b06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b0a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b0c:	2302      	movs	r3, #2
 8004b0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b10:	2300      	movs	r3, #0
 8004b12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b14:	2303      	movs	r3, #3
 8004b16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004b18:	230c      	movs	r3, #12
 8004b1a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004b1c:	1d3b      	adds	r3, r7, #4
 8004b1e:	4619      	mov	r1, r3
 8004b20:	481d      	ldr	r0, [pc, #116]	; (8004b98 <HAL_FSMC_MspInit+0xd0>)
 8004b22:	f7fc f903 	bl	8000d2c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8004b26:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8004b2a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b30:	2300      	movs	r3, #0
 8004b32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b34:	2303      	movs	r3, #3
 8004b36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004b38:	230c      	movs	r3, #12
 8004b3a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004b3c:	1d3b      	adds	r3, r7, #4
 8004b3e:	4619      	mov	r1, r3
 8004b40:	4816      	ldr	r0, [pc, #88]	; (8004b9c <HAL_FSMC_MspInit+0xd4>)
 8004b42:	f7fc f8f3 	bl	8000d2c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8004b46:	f247 633f 	movw	r3, #30271	; 0x763f
 8004b4a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|nCE1_Pin|nCE2_Pin 
                          |nCE3_Pin|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b50:	2300      	movs	r3, #0
 8004b52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b54:	2303      	movs	r3, #3
 8004b56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004b58:	230c      	movs	r3, #12
 8004b5a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004b5c:	1d3b      	adds	r3, r7, #4
 8004b5e:	4619      	mov	r1, r3
 8004b60:	480f      	ldr	r0, [pc, #60]	; (8004ba0 <HAL_FSMC_MspInit+0xd8>)
 8004b62:	f7fc f8e3 	bl	8000d2c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8004b66:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 8004b6a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_0|GPIO_PIN_1|nRD_Pin|nWR_Pin 
                          |nCE0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b70:	2300      	movs	r3, #0
 8004b72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b74:	2303      	movs	r3, #3
 8004b76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004b78:	230c      	movs	r3, #12
 8004b7a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b7c:	1d3b      	adds	r3, r7, #4
 8004b7e:	4619      	mov	r1, r3
 8004b80:	4808      	ldr	r0, [pc, #32]	; (8004ba4 <HAL_FSMC_MspInit+0xdc>)
 8004b82:	f7fc f8d3 	bl	8000d2c <HAL_GPIO_Init>
 8004b86:	e000      	b.n	8004b8a <HAL_FSMC_MspInit+0xc2>
    return;
 8004b88:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8004b8a:	3718      	adds	r7, #24
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	2000002c 	.word	0x2000002c
 8004b94:	40023800 	.word	0x40023800
 8004b98:	40021000 	.word	0x40021000
 8004b9c:	40021400 	.word	0x40021400
 8004ba0:	40021800 	.word	0x40021800
 8004ba4:	40020c00 	.word	0x40020c00

08004ba8 <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* norHandle){
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FSMC_MspInit();
 8004bb0:	f7ff ff8a 	bl	8004ac8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 8004bb4:	bf00      	nop
 8004bb6:	3708      	adds	r7, #8
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8004bc4:	f7ff ff80 	bl	8004ac8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8004bc8:	bf00      	nop
 8004bca:	3708      	adds	r7, #8
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <MX_GPIO_Init>:
     PB0   ------> SharedStack_PB0
     PB1   ------> SharedStack_PB1
     PC6   ------> SharedStack_PC6
*/
void MX_GPIO_Init(void)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b08e      	sub	sp, #56	; 0x38
 8004bd4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bda:	2200      	movs	r2, #0
 8004bdc:	601a      	str	r2, [r3, #0]
 8004bde:	605a      	str	r2, [r3, #4]
 8004be0:	609a      	str	r2, [r3, #8]
 8004be2:	60da      	str	r2, [r3, #12]
 8004be4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004be6:	2300      	movs	r3, #0
 8004be8:	623b      	str	r3, [r7, #32]
 8004bea:	4ba6      	ldr	r3, [pc, #664]	; (8004e84 <MX_GPIO_Init+0x2b4>)
 8004bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bee:	4aa5      	ldr	r2, [pc, #660]	; (8004e84 <MX_GPIO_Init+0x2b4>)
 8004bf0:	f043 0310 	orr.w	r3, r3, #16
 8004bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8004bf6:	4ba3      	ldr	r3, [pc, #652]	; (8004e84 <MX_GPIO_Init+0x2b4>)
 8004bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfa:	f003 0310 	and.w	r3, r3, #16
 8004bfe:	623b      	str	r3, [r7, #32]
 8004c00:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c02:	2300      	movs	r3, #0
 8004c04:	61fb      	str	r3, [r7, #28]
 8004c06:	4b9f      	ldr	r3, [pc, #636]	; (8004e84 <MX_GPIO_Init+0x2b4>)
 8004c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0a:	4a9e      	ldr	r2, [pc, #632]	; (8004e84 <MX_GPIO_Init+0x2b4>)
 8004c0c:	f043 0304 	orr.w	r3, r3, #4
 8004c10:	6313      	str	r3, [r2, #48]	; 0x30
 8004c12:	4b9c      	ldr	r3, [pc, #624]	; (8004e84 <MX_GPIO_Init+0x2b4>)
 8004c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c16:	f003 0304 	and.w	r3, r3, #4
 8004c1a:	61fb      	str	r3, [r7, #28]
 8004c1c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004c1e:	2300      	movs	r3, #0
 8004c20:	61bb      	str	r3, [r7, #24]
 8004c22:	4b98      	ldr	r3, [pc, #608]	; (8004e84 <MX_GPIO_Init+0x2b4>)
 8004c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c26:	4a97      	ldr	r2, [pc, #604]	; (8004e84 <MX_GPIO_Init+0x2b4>)
 8004c28:	f043 0320 	orr.w	r3, r3, #32
 8004c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c2e:	4b95      	ldr	r3, [pc, #596]	; (8004e84 <MX_GPIO_Init+0x2b4>)
 8004c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c32:	f003 0320 	and.w	r3, r3, #32
 8004c36:	61bb      	str	r3, [r7, #24]
 8004c38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	617b      	str	r3, [r7, #20]
 8004c3e:	4b91      	ldr	r3, [pc, #580]	; (8004e84 <MX_GPIO_Init+0x2b4>)
 8004c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c42:	4a90      	ldr	r2, [pc, #576]	; (8004e84 <MX_GPIO_Init+0x2b4>)
 8004c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c48:	6313      	str	r3, [r2, #48]	; 0x30
 8004c4a:	4b8e      	ldr	r3, [pc, #568]	; (8004e84 <MX_GPIO_Init+0x2b4>)
 8004c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c52:	617b      	str	r3, [r7, #20]
 8004c54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c56:	2300      	movs	r3, #0
 8004c58:	613b      	str	r3, [r7, #16]
 8004c5a:	4b8a      	ldr	r3, [pc, #552]	; (8004e84 <MX_GPIO_Init+0x2b4>)
 8004c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5e:	4a89      	ldr	r2, [pc, #548]	; (8004e84 <MX_GPIO_Init+0x2b4>)
 8004c60:	f043 0301 	orr.w	r3, r3, #1
 8004c64:	6313      	str	r3, [r2, #48]	; 0x30
 8004c66:	4b87      	ldr	r3, [pc, #540]	; (8004e84 <MX_GPIO_Init+0x2b4>)
 8004c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	613b      	str	r3, [r7, #16]
 8004c70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c72:	2300      	movs	r3, #0
 8004c74:	60fb      	str	r3, [r7, #12]
 8004c76:	4b83      	ldr	r3, [pc, #524]	; (8004e84 <MX_GPIO_Init+0x2b4>)
 8004c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7a:	4a82      	ldr	r2, [pc, #520]	; (8004e84 <MX_GPIO_Init+0x2b4>)
 8004c7c:	f043 0302 	orr.w	r3, r3, #2
 8004c80:	6313      	str	r3, [r2, #48]	; 0x30
 8004c82:	4b80      	ldr	r3, [pc, #512]	; (8004e84 <MX_GPIO_Init+0x2b4>)
 8004c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	60fb      	str	r3, [r7, #12]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004c8e:	2300      	movs	r3, #0
 8004c90:	60bb      	str	r3, [r7, #8]
 8004c92:	4b7c      	ldr	r3, [pc, #496]	; (8004e84 <MX_GPIO_Init+0x2b4>)
 8004c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c96:	4a7b      	ldr	r2, [pc, #492]	; (8004e84 <MX_GPIO_Init+0x2b4>)
 8004c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c9e:	4b79      	ldr	r3, [pc, #484]	; (8004e84 <MX_GPIO_Init+0x2b4>)
 8004ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca6:	60bb      	str	r3, [r7, #8]
 8004ca8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004caa:	2300      	movs	r3, #0
 8004cac:	607b      	str	r3, [r7, #4]
 8004cae:	4b75      	ldr	r3, [pc, #468]	; (8004e84 <MX_GPIO_Init+0x2b4>)
 8004cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb2:	4a74      	ldr	r2, [pc, #464]	; (8004e84 <MX_GPIO_Init+0x2b4>)
 8004cb4:	f043 0308 	orr.w	r3, r3, #8
 8004cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8004cba:	4b72      	ldr	r3, [pc, #456]	; (8004e84 <MX_GPIO_Init+0x2b4>)
 8004cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbe:	f003 0308 	and.w	r3, r3, #8
 8004cc2:	607b      	str	r3, [r7, #4]
 8004cc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED3_Pin|LED2_Pin|LED1_Pin|LED0_Pin 
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f240 111f 	movw	r1, #287	; 0x11f
 8004ccc:	486e      	ldr	r0, [pc, #440]	; (8004e88 <MX_GPIO_Init+0x2b8>)
 8004cce:	f7fc f9bf 	bl	8001050 <HAL_GPIO_WritePin>
                          |nOUT_EN0_Pin|VSEL0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GP3_GPIO_Port, GP3_Pin, GPIO_PIN_RESET);
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	2120      	movs	r1, #32
 8004cd6:	486d      	ldr	r0, [pc, #436]	; (8004e8c <MX_GPIO_Init+0x2bc>)
 8004cd8:	f7fc f9ba 	bl	8001050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nOUT_EN1_GPIO_Port, nOUT_EN1_Pin, GPIO_PIN_RESET);
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004ce2:	486b      	ldr	r0, [pc, #428]	; (8004e90 <MX_GPIO_Init+0x2c0>)
 8004ce4:	f7fc f9b4 	bl	8001050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, SEL0_Pin|SEL1_Pin, GPIO_PIN_RESET);
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8004cee:	4869      	ldr	r0, [pc, #420]	; (8004e94 <MX_GPIO_Init+0x2c4>)
 8004cf0:	f7fc f9ae 	bl	8001050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOOT_EN_GPIO_Port, BOOT_EN_Pin, GPIO_PIN_RESET);
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004cfa:	4867      	ldr	r0, [pc, #412]	; (8004e98 <MX_GPIO_Init+0x2c8>)
 8004cfc:	f7fc f9a8 	bl	8001050 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = nDTCT_Pin|GP2_Pin|GP8_Pin;
 8004d00:	f242 0350 	movw	r3, #8272	; 0x2050
 8004d04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d06:	2300      	movs	r3, #0
 8004d08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d12:	4619      	mov	r1, r3
 8004d14:	485d      	ldr	r0, [pc, #372]	; (8004e8c <MX_GPIO_Init+0x2bc>)
 8004d16:	f7fc f809 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1 
                           PC2 PC3 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1 
 8004d1a:	f24c 038f 	movw	r3, #49295	; 0xc08f
 8004d1e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d20:	2303      	movs	r3, #3
 8004d22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d24:	2300      	movs	r3, #0
 8004d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	4857      	ldr	r0, [pc, #348]	; (8004e8c <MX_GPIO_Init+0x2bc>)
 8004d30:	f7fb fffc 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF8 PF9 
                           PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
 8004d34:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8004d38:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d46:	4619      	mov	r1, r3
 8004d48:	4851      	ldr	r0, [pc, #324]	; (8004e90 <MX_GPIO_Init+0x2c0>)
 8004d4a:	f7fb ffef 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin|LED1_Pin|LED0_Pin 
 8004d4e:	f240 131f 	movw	r3, #287	; 0x11f
 8004d52:	627b      	str	r3, [r7, #36]	; 0x24
                          |nOUT_EN0_Pin|VSEL0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d54:	2301      	movs	r3, #1
 8004d56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d64:	4619      	mov	r1, r3
 8004d66:	4848      	ldr	r0, [pc, #288]	; (8004e88 <MX_GPIO_Init+0x2b8>)
 8004d68:	f7fb ffe0 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_9|GPIO_PIN_10;
 8004d6c:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 8004d70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d72:	2303      	movs	r3, #3
 8004d74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d76:	2300      	movs	r3, #0
 8004d78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d7e:	4619      	mov	r1, r3
 8004d80:	4841      	ldr	r0, [pc, #260]	; (8004e88 <MX_GPIO_Init+0x2b8>)
 8004d82:	f7fb ffd3 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GP3_Pin;
 8004d86:	2320      	movs	r3, #32
 8004d88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d92:	2300      	movs	r3, #0
 8004d94:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GP3_GPIO_Port, &GPIO_InitStruct);
 8004d96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	483b      	ldr	r0, [pc, #236]	; (8004e8c <MX_GPIO_Init+0x2bc>)
 8004d9e:	f7fb ffc5 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GP0_Pin|GP1_Pin|BOOT1_Pin|nSDWP_Pin;
 8004da2:	f240 2307 	movw	r3, #519	; 0x207
 8004da6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004da8:	2300      	movs	r3, #0
 8004daa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dac:	2300      	movs	r3, #0
 8004dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004db0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004db4:	4619      	mov	r1, r3
 8004db6:	4838      	ldr	r0, [pc, #224]	; (8004e98 <MX_GPIO_Init+0x2c8>)
 8004db8:	f7fb ffb8 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nOUT_EN1_Pin;
 8004dbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004dc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(nOUT_EN1_GPIO_Port, &GPIO_InitStruct);
 8004dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	482e      	ldr	r0, [pc, #184]	; (8004e90 <MX_GPIO_Init+0x2c0>)
 8004dd6:	f7fb ffa9 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG6 PG11 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_11;
 8004dda:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8004dde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004de0:	2303      	movs	r3, #3
 8004de2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004de4:	2300      	movs	r3, #0
 8004de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dec:	4619      	mov	r1, r3
 8004dee:	4829      	ldr	r0, [pc, #164]	; (8004e94 <MX_GPIO_Init+0x2c4>)
 8004df0:	f7fb ff9c 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = SEL0_Pin|SEL1_Pin;
 8004df4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004df8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e02:	2300      	movs	r3, #0
 8004e04:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	4821      	ldr	r0, [pc, #132]	; (8004e94 <MX_GPIO_Init+0x2c4>)
 8004e0e:	f7fb ff8d 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8004e12:	2348      	movs	r3, #72	; 0x48
 8004e14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e16:	2303      	movs	r3, #3
 8004e18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e22:	4619      	mov	r1, r3
 8004e24:	481d      	ldr	r0, [pc, #116]	; (8004e9c <MX_GPIO_Init+0x2cc>)
 8004e26:	f7fb ff81 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nSDCD_Pin;
 8004e2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e30:	2300      	movs	r3, #0
 8004e32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e34:	2300      	movs	r3, #0
 8004e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(nSDCD_GPIO_Port, &GPIO_InitStruct);
 8004e38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	4815      	ldr	r0, [pc, #84]	; (8004e94 <MX_GPIO_Init+0x2c4>)
 8004e40:	f7fb ff74 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004e44:	2320      	movs	r3, #32
 8004e46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e54:	4619      	mov	r1, r3
 8004e56:	4810      	ldr	r0, [pc, #64]	; (8004e98 <MX_GPIO_Init+0x2c8>)
 8004e58:	f7fb ff68 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT_EN_Pin;
 8004e5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e62:	2301      	movs	r3, #1
 8004e64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e66:	2300      	movs	r3, #0
 8004e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BOOT_EN_GPIO_Port, &GPIO_InitStruct);
 8004e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e72:	4619      	mov	r1, r3
 8004e74:	4808      	ldr	r0, [pc, #32]	; (8004e98 <MX_GPIO_Init+0x2c8>)
 8004e76:	f7fb ff59 	bl	8000d2c <HAL_GPIO_Init>

}
 8004e7a:	bf00      	nop
 8004e7c:	3738      	adds	r7, #56	; 0x38
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	40023800 	.word	0x40023800
 8004e88:	40020000 	.word	0x40020000
 8004e8c:	40020800 	.word	0x40020800
 8004e90:	40021400 	.word	0x40021400
 8004e94:	40021800 	.word	0x40021800
 8004e98:	40020400 	.word	0x40020400
 8004e9c:	40020c00 	.word	0x40020c00

08004ea0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8004ea4:	4b12      	ldr	r3, [pc, #72]	; (8004ef0 <MX_I2C1_Init+0x50>)
 8004ea6:	4a13      	ldr	r2, [pc, #76]	; (8004ef4 <MX_I2C1_Init+0x54>)
 8004ea8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004eaa:	4b11      	ldr	r3, [pc, #68]	; (8004ef0 <MX_I2C1_Init+0x50>)
 8004eac:	4a12      	ldr	r2, [pc, #72]	; (8004ef8 <MX_I2C1_Init+0x58>)
 8004eae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004eb0:	4b0f      	ldr	r3, [pc, #60]	; (8004ef0 <MX_I2C1_Init+0x50>)
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004eb6:	4b0e      	ldr	r3, [pc, #56]	; (8004ef0 <MX_I2C1_Init+0x50>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004ebc:	4b0c      	ldr	r3, [pc, #48]	; (8004ef0 <MX_I2C1_Init+0x50>)
 8004ebe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004ec2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004ec4:	4b0a      	ldr	r3, [pc, #40]	; (8004ef0 <MX_I2C1_Init+0x50>)
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004eca:	4b09      	ldr	r3, [pc, #36]	; (8004ef0 <MX_I2C1_Init+0x50>)
 8004ecc:	2200      	movs	r2, #0
 8004ece:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004ed0:	4b07      	ldr	r3, [pc, #28]	; (8004ef0 <MX_I2C1_Init+0x50>)
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004ed6:	4b06      	ldr	r3, [pc, #24]	; (8004ef0 <MX_I2C1_Init+0x50>)
 8004ed8:	2200      	movs	r2, #0
 8004eda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004edc:	4804      	ldr	r0, [pc, #16]	; (8004ef0 <MX_I2C1_Init+0x50>)
 8004ede:	f7fc f8d1 	bl	8001084 <HAL_I2C_Init>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d001      	beq.n	8004eec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004ee8:	f000 f8fe 	bl	80050e8 <Error_Handler>
  }

}
 8004eec:	bf00      	nop
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	200001bc 	.word	0x200001bc
 8004ef4:	40005400 	.word	0x40005400
 8004ef8:	000186a0 	.word	0x000186a0

08004efc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b08a      	sub	sp, #40	; 0x28
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f04:	f107 0314 	add.w	r3, r7, #20
 8004f08:	2200      	movs	r2, #0
 8004f0a:	601a      	str	r2, [r3, #0]
 8004f0c:	605a      	str	r2, [r3, #4]
 8004f0e:	609a      	str	r2, [r3, #8]
 8004f10:	60da      	str	r2, [r3, #12]
 8004f12:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a19      	ldr	r2, [pc, #100]	; (8004f80 <HAL_I2C_MspInit+0x84>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d12b      	bne.n	8004f76 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f1e:	2300      	movs	r3, #0
 8004f20:	613b      	str	r3, [r7, #16]
 8004f22:	4b18      	ldr	r3, [pc, #96]	; (8004f84 <HAL_I2C_MspInit+0x88>)
 8004f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f26:	4a17      	ldr	r2, [pc, #92]	; (8004f84 <HAL_I2C_MspInit+0x88>)
 8004f28:	f043 0302 	orr.w	r3, r3, #2
 8004f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8004f2e:	4b15      	ldr	r3, [pc, #84]	; (8004f84 <HAL_I2C_MspInit+0x88>)
 8004f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	613b      	str	r3, [r7, #16]
 8004f38:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL1_Pin|SDA1_Pin;
 8004f3a:	23c0      	movs	r3, #192	; 0xc0
 8004f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f3e:	2312      	movs	r3, #18
 8004f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f42:	2301      	movs	r3, #1
 8004f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f46:	2303      	movs	r3, #3
 8004f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004f4a:	2304      	movs	r3, #4
 8004f4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f4e:	f107 0314 	add.w	r3, r7, #20
 8004f52:	4619      	mov	r1, r3
 8004f54:	480c      	ldr	r0, [pc, #48]	; (8004f88 <HAL_I2C_MspInit+0x8c>)
 8004f56:	f7fb fee9 	bl	8000d2c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	60fb      	str	r3, [r7, #12]
 8004f5e:	4b09      	ldr	r3, [pc, #36]	; (8004f84 <HAL_I2C_MspInit+0x88>)
 8004f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f62:	4a08      	ldr	r2, [pc, #32]	; (8004f84 <HAL_I2C_MspInit+0x88>)
 8004f64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f68:	6413      	str	r3, [r2, #64]	; 0x40
 8004f6a:	4b06      	ldr	r3, [pc, #24]	; (8004f84 <HAL_I2C_MspInit+0x88>)
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f72:	60fb      	str	r3, [r7, #12]
 8004f74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8004f76:	bf00      	nop
 8004f78:	3728      	adds	r7, #40	; 0x28
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	40005400 	.word	0x40005400
 8004f84:	40023800 	.word	0x40023800
 8004f88:	40020400 	.word	0x40020400

08004f8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004f90:	f7fb fac2 	bl	8000518 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004f94:	f000 f814 	bl	8004fc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004f98:	f7ff fe1a 	bl	8004bd0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8004f9c:	f7ff fb24 	bl	80045e8 <MX_ADC1_Init>
  MX_CRC_Init();
 8004fa0:	f7ff fbb8 	bl	8004714 <MX_CRC_Init>
  MX_FSMC_Init();
 8004fa4:	f7ff fbec 	bl	8004780 <MX_FSMC_Init>
  MX_I2C1_Init();
 8004fa8:	f7ff ff7a 	bl	8004ea0 <MX_I2C1_Init>
  MX_SDIO_SD_Init();
 8004fac:	f000 f8a4 	bl	80050f8 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8004fb0:	f000 f93a 	bl	8005228 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8004fb4:	f000 fa42 	bl	800543c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8004fb8:	f000 fab2 	bl	8005520 <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004fbc:	e7fe      	b.n	8004fbc <main+0x30>
	...

08004fc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b0aa      	sub	sp, #168	; 0xa8
 8004fc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004fc6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004fca:	2234      	movs	r2, #52	; 0x34
 8004fcc:	2100      	movs	r1, #0
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f000 fb70 	bl	80056b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004fd4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004fd8:	2200      	movs	r2, #0
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	605a      	str	r2, [r3, #4]
 8004fde:	609a      	str	r2, [r3, #8]
 8004fe0:	60da      	str	r2, [r3, #12]
 8004fe2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004fe4:	f107 0308 	add.w	r3, r7, #8
 8004fe8:	2258      	movs	r2, #88	; 0x58
 8004fea:	2100      	movs	r1, #0
 8004fec:	4618      	mov	r0, r3
 8004fee:	f000 fb61 	bl	80056b4 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	607b      	str	r3, [r7, #4]
 8004ff6:	4b3a      	ldr	r3, [pc, #232]	; (80050e0 <SystemClock_Config+0x120>)
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffa:	4a39      	ldr	r2, [pc, #228]	; (80050e0 <SystemClock_Config+0x120>)
 8004ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005000:	6413      	str	r3, [r2, #64]	; 0x40
 8005002:	4b37      	ldr	r3, [pc, #220]	; (80050e0 <SystemClock_Config+0x120>)
 8005004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800500a:	607b      	str	r3, [r7, #4]
 800500c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800500e:	2300      	movs	r3, #0
 8005010:	603b      	str	r3, [r7, #0]
 8005012:	4b34      	ldr	r3, [pc, #208]	; (80050e4 <SystemClock_Config+0x124>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a33      	ldr	r2, [pc, #204]	; (80050e4 <SystemClock_Config+0x124>)
 8005018:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800501c:	6013      	str	r3, [r2, #0]
 800501e:	4b31      	ldr	r3, [pc, #196]	; (80050e4 <SystemClock_Config+0x124>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005026:	603b      	str	r3, [r7, #0]
 8005028:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800502a:	2301      	movs	r3, #1
 800502c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800502e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005032:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005034:	2302      	movs	r3, #2
 8005036:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800503a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800503e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005042:	2308      	movs	r3, #8
 8005044:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 200;
 8005048:	23c8      	movs	r3, #200	; 0xc8
 800504a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800504e:	2302      	movs	r3, #2
 8005050:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005054:	2302      	movs	r3, #2
 8005056:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 800505a:	2302      	movs	r3, #2
 800505c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005060:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005064:	4618      	mov	r0, r3
 8005066:	f7fc ff4d 	bl	8001f04 <HAL_RCC_OscConfig>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d001      	beq.n	8005074 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8005070:	f000 f83a 	bl	80050e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005074:	230f      	movs	r3, #15
 8005076:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005078:	2302      	movs	r3, #2
 800507a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800507c:	2300      	movs	r3, #0
 800507e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005080:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005084:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005086:	2300      	movs	r3, #0
 8005088:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800508a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800508e:	2103      	movs	r1, #3
 8005090:	4618      	mov	r0, r3
 8005092:	f7fc fabd 	bl	8001610 <HAL_RCC_ClockConfig>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d001      	beq.n	80050a0 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 800509c:	f000 f824 	bl	80050e8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80050a0:	2360      	movs	r3, #96	; 0x60
 80050a2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80050a4:	23c0      	movs	r3, #192	; 0xc0
 80050a6:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 80050a8:	2308      	movs	r3, #8
 80050aa:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80050ac:	2302      	movs	r3, #2
 80050ae:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 4;
 80050b0:	2304      	movs	r3, #4
 80050b2:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLI2SQ;
 80050b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80050b8:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80050ba:	2300      	movs	r3, #0
 80050bc:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 80050be:	2300      	movs	r3, #0
 80050c0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80050c2:	f107 0308 	add.w	r3, r7, #8
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7fc fc90 	bl	80019ec <HAL_RCCEx_PeriphCLKConfig>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <SystemClock_Config+0x116>
  {
    Error_Handler();
 80050d2:	f000 f809 	bl	80050e8 <Error_Handler>
  }
}
 80050d6:	bf00      	nop
 80050d8:	37a8      	adds	r7, #168	; 0xa8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	40023800 	.word	0x40023800
 80050e4:	40007000 	.word	0x40007000

080050e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80050e8:	b480      	push	{r7}
 80050ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80050ec:	bf00      	nop
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
	...

080050f8 <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 80050fc:	4b14      	ldr	r3, [pc, #80]	; (8005150 <MX_SDIO_SD_Init+0x58>)
 80050fe:	4a15      	ldr	r2, [pc, #84]	; (8005154 <MX_SDIO_SD_Init+0x5c>)
 8005100:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8005102:	4b13      	ldr	r3, [pc, #76]	; (8005150 <MX_SDIO_SD_Init+0x58>)
 8005104:	2200      	movs	r2, #0
 8005106:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8005108:	4b11      	ldr	r3, [pc, #68]	; (8005150 <MX_SDIO_SD_Init+0x58>)
 800510a:	2200      	movs	r2, #0
 800510c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800510e:	4b10      	ldr	r3, [pc, #64]	; (8005150 <MX_SDIO_SD_Init+0x58>)
 8005110:	2200      	movs	r2, #0
 8005112:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8005114:	4b0e      	ldr	r3, [pc, #56]	; (8005150 <MX_SDIO_SD_Init+0x58>)
 8005116:	2200      	movs	r2, #0
 8005118:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800511a:	4b0d      	ldr	r3, [pc, #52]	; (8005150 <MX_SDIO_SD_Init+0x58>)
 800511c:	2200      	movs	r2, #0
 800511e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8005120:	4b0b      	ldr	r3, [pc, #44]	; (8005150 <MX_SDIO_SD_Init+0x58>)
 8005122:	2200      	movs	r2, #0
 8005124:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8005126:	480a      	ldr	r0, [pc, #40]	; (8005150 <MX_SDIO_SD_Init+0x58>)
 8005128:	f7fd f92e 	bl	8002388 <HAL_SD_Init>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d001      	beq.n	8005136 <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 8005132:	f7ff ffd9 	bl	80050e8 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8005136:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800513a:	4805      	ldr	r0, [pc, #20]	; (8005150 <MX_SDIO_SD_Init+0x58>)
 800513c:	f7fd fbd5 	bl	80028ea <HAL_SD_ConfigWideBusOperation>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 8005146:	f7ff ffcf 	bl	80050e8 <Error_Handler>
  }

}
 800514a:	bf00      	nop
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	20000210 	.word	0x20000210
 8005154:	40012c00 	.word	0x40012c00

08005158 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b08a      	sub	sp, #40	; 0x28
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005160:	f107 0314 	add.w	r3, r7, #20
 8005164:	2200      	movs	r2, #0
 8005166:	601a      	str	r2, [r3, #0]
 8005168:	605a      	str	r2, [r3, #4]
 800516a:	609a      	str	r2, [r3, #8]
 800516c:	60da      	str	r2, [r3, #12]
 800516e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a28      	ldr	r2, [pc, #160]	; (8005218 <HAL_SD_MspInit+0xc0>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d14a      	bne.n	8005210 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800517a:	2300      	movs	r3, #0
 800517c:	613b      	str	r3, [r7, #16]
 800517e:	4b27      	ldr	r3, [pc, #156]	; (800521c <HAL_SD_MspInit+0xc4>)
 8005180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005182:	4a26      	ldr	r2, [pc, #152]	; (800521c <HAL_SD_MspInit+0xc4>)
 8005184:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005188:	6453      	str	r3, [r2, #68]	; 0x44
 800518a:	4b24      	ldr	r3, [pc, #144]	; (800521c <HAL_SD_MspInit+0xc4>)
 800518c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800518e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005192:	613b      	str	r3, [r7, #16]
 8005194:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005196:	2300      	movs	r3, #0
 8005198:	60fb      	str	r3, [r7, #12]
 800519a:	4b20      	ldr	r3, [pc, #128]	; (800521c <HAL_SD_MspInit+0xc4>)
 800519c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519e:	4a1f      	ldr	r2, [pc, #124]	; (800521c <HAL_SD_MspInit+0xc4>)
 80051a0:	f043 0304 	orr.w	r3, r3, #4
 80051a4:	6313      	str	r3, [r2, #48]	; 0x30
 80051a6:	4b1d      	ldr	r3, [pc, #116]	; (800521c <HAL_SD_MspInit+0xc4>)
 80051a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051aa:	f003 0304 	and.w	r3, r3, #4
 80051ae:	60fb      	str	r3, [r7, #12]
 80051b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80051b2:	2300      	movs	r3, #0
 80051b4:	60bb      	str	r3, [r7, #8]
 80051b6:	4b19      	ldr	r3, [pc, #100]	; (800521c <HAL_SD_MspInit+0xc4>)
 80051b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ba:	4a18      	ldr	r2, [pc, #96]	; (800521c <HAL_SD_MspInit+0xc4>)
 80051bc:	f043 0308 	orr.w	r3, r3, #8
 80051c0:	6313      	str	r3, [r2, #48]	; 0x30
 80051c2:	4b16      	ldr	r3, [pc, #88]	; (800521c <HAL_SD_MspInit+0xc4>)
 80051c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c6:	f003 0308 	and.w	r3, r3, #8
 80051ca:	60bb      	str	r3, [r7, #8]
 80051cc:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80051ce:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80051d2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051d4:	2302      	movs	r3, #2
 80051d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051d8:	2300      	movs	r3, #0
 80051da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051dc:	2303      	movs	r3, #3
 80051de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80051e0:	230c      	movs	r3, #12
 80051e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051e4:	f107 0314 	add.w	r3, r7, #20
 80051e8:	4619      	mov	r1, r3
 80051ea:	480d      	ldr	r0, [pc, #52]	; (8005220 <HAL_SD_MspInit+0xc8>)
 80051ec:	f7fb fd9e 	bl	8000d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80051f0:	2304      	movs	r3, #4
 80051f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051f4:	2302      	movs	r3, #2
 80051f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051f8:	2300      	movs	r3, #0
 80051fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051fc:	2303      	movs	r3, #3
 80051fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8005200:	230c      	movs	r3, #12
 8005202:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005204:	f107 0314 	add.w	r3, r7, #20
 8005208:	4619      	mov	r1, r3
 800520a:	4806      	ldr	r0, [pc, #24]	; (8005224 <HAL_SD_MspInit+0xcc>)
 800520c:	f7fb fd8e 	bl	8000d2c <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8005210:	bf00      	nop
 8005212:	3728      	adds	r7, #40	; 0x28
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	40012c00 	.word	0x40012c00
 800521c:	40023800 	.word	0x40023800
 8005220:	40020800 	.word	0x40020800
 8005224:	40020c00 	.word	0x40020c00

08005228 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 800522c:	4b17      	ldr	r3, [pc, #92]	; (800528c <MX_SPI2_Init+0x64>)
 800522e:	4a18      	ldr	r2, [pc, #96]	; (8005290 <MX_SPI2_Init+0x68>)
 8005230:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005232:	4b16      	ldr	r3, [pc, #88]	; (800528c <MX_SPI2_Init+0x64>)
 8005234:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005238:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800523a:	4b14      	ldr	r3, [pc, #80]	; (800528c <MX_SPI2_Init+0x64>)
 800523c:	2200      	movs	r2, #0
 800523e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005240:	4b12      	ldr	r3, [pc, #72]	; (800528c <MX_SPI2_Init+0x64>)
 8005242:	2200      	movs	r2, #0
 8005244:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005246:	4b11      	ldr	r3, [pc, #68]	; (800528c <MX_SPI2_Init+0x64>)
 8005248:	2200      	movs	r2, #0
 800524a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800524c:	4b0f      	ldr	r3, [pc, #60]	; (800528c <MX_SPI2_Init+0x64>)
 800524e:	2200      	movs	r2, #0
 8005250:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8005252:	4b0e      	ldr	r3, [pc, #56]	; (800528c <MX_SPI2_Init+0x64>)
 8005254:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005258:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800525a:	4b0c      	ldr	r3, [pc, #48]	; (800528c <MX_SPI2_Init+0x64>)
 800525c:	2200      	movs	r2, #0
 800525e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005260:	4b0a      	ldr	r3, [pc, #40]	; (800528c <MX_SPI2_Init+0x64>)
 8005262:	2200      	movs	r2, #0
 8005264:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005266:	4b09      	ldr	r3, [pc, #36]	; (800528c <MX_SPI2_Init+0x64>)
 8005268:	2200      	movs	r2, #0
 800526a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800526c:	4b07      	ldr	r3, [pc, #28]	; (800528c <MX_SPI2_Init+0x64>)
 800526e:	2200      	movs	r2, #0
 8005270:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005272:	4b06      	ldr	r3, [pc, #24]	; (800528c <MX_SPI2_Init+0x64>)
 8005274:	220a      	movs	r2, #10
 8005276:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005278:	4804      	ldr	r0, [pc, #16]	; (800528c <MX_SPI2_Init+0x64>)
 800527a:	f7fd fe86 	bl	8002f8a <HAL_SPI_Init>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d001      	beq.n	8005288 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8005284:	f7ff ff30 	bl	80050e8 <Error_Handler>
  }

}
 8005288:	bf00      	nop
 800528a:	bd80      	pop	{r7, pc}
 800528c:	20000294 	.word	0x20000294
 8005290:	40003800 	.word	0x40003800

08005294 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b08a      	sub	sp, #40	; 0x28
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800529c:	f107 0314 	add.w	r3, r7, #20
 80052a0:	2200      	movs	r2, #0
 80052a2:	601a      	str	r2, [r3, #0]
 80052a4:	605a      	str	r2, [r3, #4]
 80052a6:	609a      	str	r2, [r3, #8]
 80052a8:	60da      	str	r2, [r3, #12]
 80052aa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a19      	ldr	r2, [pc, #100]	; (8005318 <HAL_SPI_MspInit+0x84>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d12c      	bne.n	8005310 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80052b6:	2300      	movs	r3, #0
 80052b8:	613b      	str	r3, [r7, #16]
 80052ba:	4b18      	ldr	r3, [pc, #96]	; (800531c <HAL_SPI_MspInit+0x88>)
 80052bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052be:	4a17      	ldr	r2, [pc, #92]	; (800531c <HAL_SPI_MspInit+0x88>)
 80052c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052c4:	6413      	str	r3, [r2, #64]	; 0x40
 80052c6:	4b15      	ldr	r3, [pc, #84]	; (800531c <HAL_SPI_MspInit+0x88>)
 80052c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052ce:	613b      	str	r3, [r7, #16]
 80052d0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052d2:	2300      	movs	r3, #0
 80052d4:	60fb      	str	r3, [r7, #12]
 80052d6:	4b11      	ldr	r3, [pc, #68]	; (800531c <HAL_SPI_MspInit+0x88>)
 80052d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052da:	4a10      	ldr	r2, [pc, #64]	; (800531c <HAL_SPI_MspInit+0x88>)
 80052dc:	f043 0302 	orr.w	r3, r3, #2
 80052e0:	6313      	str	r3, [r2, #48]	; 0x30
 80052e2:	4b0e      	ldr	r3, [pc, #56]	; (800531c <HAL_SPI_MspInit+0x88>)
 80052e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	60fb      	str	r3, [r7, #12]
 80052ec:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80052ee:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80052f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052f4:	2302      	movs	r3, #2
 80052f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052f8:	2300      	movs	r3, #0
 80052fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052fc:	2303      	movs	r3, #3
 80052fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005300:	2305      	movs	r3, #5
 8005302:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005304:	f107 0314 	add.w	r3, r7, #20
 8005308:	4619      	mov	r1, r3
 800530a:	4805      	ldr	r0, [pc, #20]	; (8005320 <HAL_SPI_MspInit+0x8c>)
 800530c:	f7fb fd0e 	bl	8000d2c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8005310:	bf00      	nop
 8005312:	3728      	adds	r7, #40	; 0x28
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	40003800 	.word	0x40003800
 800531c:	40023800 	.word	0x40023800
 8005320:	40020400 	.word	0x40020400

08005324 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800532a:	2300      	movs	r3, #0
 800532c:	607b      	str	r3, [r7, #4]
 800532e:	4b10      	ldr	r3, [pc, #64]	; (8005370 <HAL_MspInit+0x4c>)
 8005330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005332:	4a0f      	ldr	r2, [pc, #60]	; (8005370 <HAL_MspInit+0x4c>)
 8005334:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005338:	6453      	str	r3, [r2, #68]	; 0x44
 800533a:	4b0d      	ldr	r3, [pc, #52]	; (8005370 <HAL_MspInit+0x4c>)
 800533c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800533e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005342:	607b      	str	r3, [r7, #4]
 8005344:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005346:	2300      	movs	r3, #0
 8005348:	603b      	str	r3, [r7, #0]
 800534a:	4b09      	ldr	r3, [pc, #36]	; (8005370 <HAL_MspInit+0x4c>)
 800534c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534e:	4a08      	ldr	r2, [pc, #32]	; (8005370 <HAL_MspInit+0x4c>)
 8005350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005354:	6413      	str	r3, [r2, #64]	; 0x40
 8005356:	4b06      	ldr	r3, [pc, #24]	; (8005370 <HAL_MspInit+0x4c>)
 8005358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800535e:	603b      	str	r3, [r7, #0]
 8005360:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005362:	bf00      	nop
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	40023800 	.word	0x40023800

08005374 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005374:	b480      	push	{r7}
 8005376:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005378:	bf00      	nop
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005382:	b480      	push	{r7}
 8005384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005386:	e7fe      	b.n	8005386 <HardFault_Handler+0x4>

08005388 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005388:	b480      	push	{r7}
 800538a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800538c:	e7fe      	b.n	800538c <MemManage_Handler+0x4>

0800538e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800538e:	b480      	push	{r7}
 8005390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005392:	e7fe      	b.n	8005392 <BusFault_Handler+0x4>

08005394 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005394:	b480      	push	{r7}
 8005396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005398:	e7fe      	b.n	8005398 <UsageFault_Handler+0x4>

0800539a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800539a:	b480      	push	{r7}
 800539c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800539e:	bf00      	nop
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80053a8:	b480      	push	{r7}
 80053aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80053ac:	bf00      	nop
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr

080053b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80053b6:	b480      	push	{r7}
 80053b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80053ba:	bf00      	nop
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80053c8:	f7fb f8f8 	bl	80005bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80053cc:	bf00      	nop
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80053d0:	b480      	push	{r7}
 80053d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80053d4:	4b16      	ldr	r3, [pc, #88]	; (8005430 <SystemInit+0x60>)
 80053d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053da:	4a15      	ldr	r2, [pc, #84]	; (8005430 <SystemInit+0x60>)
 80053dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80053e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80053e4:	4b13      	ldr	r3, [pc, #76]	; (8005434 <SystemInit+0x64>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a12      	ldr	r2, [pc, #72]	; (8005434 <SystemInit+0x64>)
 80053ea:	f043 0301 	orr.w	r3, r3, #1
 80053ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80053f0:	4b10      	ldr	r3, [pc, #64]	; (8005434 <SystemInit+0x64>)
 80053f2:	2200      	movs	r2, #0
 80053f4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80053f6:	4b0f      	ldr	r3, [pc, #60]	; (8005434 <SystemInit+0x64>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a0e      	ldr	r2, [pc, #56]	; (8005434 <SystemInit+0x64>)
 80053fc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005404:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005406:	4b0b      	ldr	r3, [pc, #44]	; (8005434 <SystemInit+0x64>)
 8005408:	4a0b      	ldr	r2, [pc, #44]	; (8005438 <SystemInit+0x68>)
 800540a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800540c:	4b09      	ldr	r3, [pc, #36]	; (8005434 <SystemInit+0x64>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a08      	ldr	r2, [pc, #32]	; (8005434 <SystemInit+0x64>)
 8005412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005416:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005418:	4b06      	ldr	r3, [pc, #24]	; (8005434 <SystemInit+0x64>)
 800541a:	2200      	movs	r2, #0
 800541c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800541e:	4b04      	ldr	r3, [pc, #16]	; (8005430 <SystemInit+0x60>)
 8005420:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005424:	609a      	str	r2, [r3, #8]
#endif
}
 8005426:	bf00      	nop
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr
 8005430:	e000ed00 	.word	0xe000ed00
 8005434:	40023800 	.word	0x40023800
 8005438:	24003010 	.word	0x24003010

0800543c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8005440:	4b11      	ldr	r3, [pc, #68]	; (8005488 <MX_USART3_UART_Init+0x4c>)
 8005442:	4a12      	ldr	r2, [pc, #72]	; (800548c <MX_USART3_UART_Init+0x50>)
 8005444:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005446:	4b10      	ldr	r3, [pc, #64]	; (8005488 <MX_USART3_UART_Init+0x4c>)
 8005448:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800544c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800544e:	4b0e      	ldr	r3, [pc, #56]	; (8005488 <MX_USART3_UART_Init+0x4c>)
 8005450:	2200      	movs	r2, #0
 8005452:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005454:	4b0c      	ldr	r3, [pc, #48]	; (8005488 <MX_USART3_UART_Init+0x4c>)
 8005456:	2200      	movs	r2, #0
 8005458:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800545a:	4b0b      	ldr	r3, [pc, #44]	; (8005488 <MX_USART3_UART_Init+0x4c>)
 800545c:	2200      	movs	r2, #0
 800545e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005460:	4b09      	ldr	r3, [pc, #36]	; (8005488 <MX_USART3_UART_Init+0x4c>)
 8005462:	220c      	movs	r2, #12
 8005464:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005466:	4b08      	ldr	r3, [pc, #32]	; (8005488 <MX_USART3_UART_Init+0x4c>)
 8005468:	2200      	movs	r2, #0
 800546a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800546c:	4b06      	ldr	r3, [pc, #24]	; (8005488 <MX_USART3_UART_Init+0x4c>)
 800546e:	2200      	movs	r2, #0
 8005470:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005472:	4805      	ldr	r0, [pc, #20]	; (8005488 <MX_USART3_UART_Init+0x4c>)
 8005474:	f7fd fe31 	bl	80030da <HAL_UART_Init>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d001      	beq.n	8005482 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800547e:	f7ff fe33 	bl	80050e8 <Error_Handler>
  }

}
 8005482:	bf00      	nop
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	200002ec 	.word	0x200002ec
 800548c:	40004800 	.word	0x40004800

08005490 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b08a      	sub	sp, #40	; 0x28
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005498:	f107 0314 	add.w	r3, r7, #20
 800549c:	2200      	movs	r2, #0
 800549e:	601a      	str	r2, [r3, #0]
 80054a0:	605a      	str	r2, [r3, #4]
 80054a2:	609a      	str	r2, [r3, #8]
 80054a4:	60da      	str	r2, [r3, #12]
 80054a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a19      	ldr	r2, [pc, #100]	; (8005514 <HAL_UART_MspInit+0x84>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d12c      	bne.n	800550c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80054b2:	2300      	movs	r3, #0
 80054b4:	613b      	str	r3, [r7, #16]
 80054b6:	4b18      	ldr	r3, [pc, #96]	; (8005518 <HAL_UART_MspInit+0x88>)
 80054b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ba:	4a17      	ldr	r2, [pc, #92]	; (8005518 <HAL_UART_MspInit+0x88>)
 80054bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054c0:	6413      	str	r3, [r2, #64]	; 0x40
 80054c2:	4b15      	ldr	r3, [pc, #84]	; (8005518 <HAL_UART_MspInit+0x88>)
 80054c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054ca:	613b      	str	r3, [r7, #16]
 80054cc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054ce:	2300      	movs	r3, #0
 80054d0:	60fb      	str	r3, [r7, #12]
 80054d2:	4b11      	ldr	r3, [pc, #68]	; (8005518 <HAL_UART_MspInit+0x88>)
 80054d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d6:	4a10      	ldr	r2, [pc, #64]	; (8005518 <HAL_UART_MspInit+0x88>)
 80054d8:	f043 0302 	orr.w	r3, r3, #2
 80054dc:	6313      	str	r3, [r2, #48]	; 0x30
 80054de:	4b0e      	ldr	r3, [pc, #56]	; (8005518 <HAL_UART_MspInit+0x88>)
 80054e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e2:	f003 0302 	and.w	r3, r3, #2
 80054e6:	60fb      	str	r3, [r7, #12]
 80054e8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80054ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80054ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054f0:	2302      	movs	r3, #2
 80054f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80054f4:	2301      	movs	r3, #1
 80054f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054f8:	2303      	movs	r3, #3
 80054fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80054fc:	2307      	movs	r3, #7
 80054fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005500:	f107 0314 	add.w	r3, r7, #20
 8005504:	4619      	mov	r1, r3
 8005506:	4805      	ldr	r0, [pc, #20]	; (800551c <HAL_UART_MspInit+0x8c>)
 8005508:	f7fb fc10 	bl	8000d2c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800550c:	bf00      	nop
 800550e:	3728      	adds	r7, #40	; 0x28
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	40004800 	.word	0x40004800
 8005518:	40023800 	.word	0x40023800
 800551c:	40020400 	.word	0x40020400

08005520 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005524:	4b15      	ldr	r3, [pc, #84]	; (800557c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8005526:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800552a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800552c:	4b13      	ldr	r3, [pc, #76]	; (800557c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800552e:	2206      	movs	r2, #6
 8005530:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005532:	4b12      	ldr	r3, [pc, #72]	; (800557c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8005534:	2202      	movs	r2, #2
 8005536:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005538:	4b10      	ldr	r3, [pc, #64]	; (800557c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800553a:	2200      	movs	r2, #0
 800553c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800553e:	4b0f      	ldr	r3, [pc, #60]	; (800557c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8005540:	2202      	movs	r2, #2
 8005542:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8005544:	4b0d      	ldr	r3, [pc, #52]	; (800557c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8005546:	2200      	movs	r2, #0
 8005548:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800554a:	4b0c      	ldr	r3, [pc, #48]	; (800557c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800554c:	2200      	movs	r2, #0
 800554e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8005550:	4b0a      	ldr	r3, [pc, #40]	; (800557c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8005552:	2200      	movs	r2, #0
 8005554:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8005556:	4b09      	ldr	r3, [pc, #36]	; (800557c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8005558:	2200      	movs	r2, #0
 800555a:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800555c:	4b07      	ldr	r3, [pc, #28]	; (800557c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800555e:	2200      	movs	r2, #0
 8005560:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8005562:	4b06      	ldr	r3, [pc, #24]	; (800557c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8005564:	2200      	movs	r2, #0
 8005566:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8005568:	4804      	ldr	r0, [pc, #16]	; (800557c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800556a:	f7fb ff09 	bl	8001380 <HAL_PCD_Init>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d001      	beq.n	8005578 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 8005574:	f7ff fdb8 	bl	80050e8 <Error_Handler>
  }

}
 8005578:	bf00      	nop
 800557a:	bd80      	pop	{r7, pc}
 800557c:	2000032c 	.word	0x2000032c

08005580 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b08a      	sub	sp, #40	; 0x28
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005588:	f107 0314 	add.w	r3, r7, #20
 800558c:	2200      	movs	r2, #0
 800558e:	601a      	str	r2, [r3, #0]
 8005590:	605a      	str	r2, [r3, #4]
 8005592:	609a      	str	r2, [r3, #8]
 8005594:	60da      	str	r2, [r3, #12]
 8005596:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055a0:	d132      	bne.n	8005608 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055a2:	2300      	movs	r3, #0
 80055a4:	613b      	str	r3, [r7, #16]
 80055a6:	4b1a      	ldr	r3, [pc, #104]	; (8005610 <HAL_PCD_MspInit+0x90>)
 80055a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055aa:	4a19      	ldr	r2, [pc, #100]	; (8005610 <HAL_PCD_MspInit+0x90>)
 80055ac:	f043 0301 	orr.w	r3, r3, #1
 80055b0:	6313      	str	r3, [r2, #48]	; 0x30
 80055b2:	4b17      	ldr	r3, [pc, #92]	; (8005610 <HAL_PCD_MspInit+0x90>)
 80055b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	613b      	str	r3, [r7, #16]
 80055bc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80055be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80055c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055c4:	2302      	movs	r3, #2
 80055c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055c8:	2300      	movs	r3, #0
 80055ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055cc:	2303      	movs	r3, #3
 80055ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80055d0:	230a      	movs	r3, #10
 80055d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055d4:	f107 0314 	add.w	r3, r7, #20
 80055d8:	4619      	mov	r1, r3
 80055da:	480e      	ldr	r0, [pc, #56]	; (8005614 <HAL_PCD_MspInit+0x94>)
 80055dc:	f7fb fba6 	bl	8000d2c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80055e0:	4b0b      	ldr	r3, [pc, #44]	; (8005610 <HAL_PCD_MspInit+0x90>)
 80055e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e4:	4a0a      	ldr	r2, [pc, #40]	; (8005610 <HAL_PCD_MspInit+0x90>)
 80055e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055ea:	6353      	str	r3, [r2, #52]	; 0x34
 80055ec:	2300      	movs	r3, #0
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	4b07      	ldr	r3, [pc, #28]	; (8005610 <HAL_PCD_MspInit+0x90>)
 80055f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f4:	4a06      	ldr	r2, [pc, #24]	; (8005610 <HAL_PCD_MspInit+0x90>)
 80055f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055fa:	6453      	str	r3, [r2, #68]	; 0x44
 80055fc:	4b04      	ldr	r3, [pc, #16]	; (8005610 <HAL_PCD_MspInit+0x90>)
 80055fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005604:	60fb      	str	r3, [r7, #12]
 8005606:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005608:	bf00      	nop
 800560a:	3728      	adds	r7, #40	; 0x28
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	40023800 	.word	0x40023800
 8005614:	40020000 	.word	0x40020000

08005618 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8005618:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005650 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800561c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800561e:	e003      	b.n	8005628 <LoopCopyDataInit>

08005620 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005620:	4b0c      	ldr	r3, [pc, #48]	; (8005654 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005622:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005624:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005626:	3104      	adds	r1, #4

08005628 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005628:	480b      	ldr	r0, [pc, #44]	; (8005658 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800562a:	4b0c      	ldr	r3, [pc, #48]	; (800565c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800562c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800562e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005630:	d3f6      	bcc.n	8005620 <CopyDataInit>
  ldr  r2, =_sbss
 8005632:	4a0b      	ldr	r2, [pc, #44]	; (8005660 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005634:	e002      	b.n	800563c <LoopFillZerobss>

08005636 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8005636:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005638:	f842 3b04 	str.w	r3, [r2], #4

0800563c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800563c:	4b09      	ldr	r3, [pc, #36]	; (8005664 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800563e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005640:	d3f9      	bcc.n	8005636 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005642:	f7ff fec5 	bl	80053d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005646:	f000 f811 	bl	800566c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800564a:	f7ff fc9f 	bl	8004f8c <main>
  bx  lr    
 800564e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8005650:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8005654:	08005704 	.word	0x08005704
  ldr  r0, =_sdata
 8005658:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800565c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8005660:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8005664:	20000734 	.word	0x20000734

08005668 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005668:	e7fe      	b.n	8005668 <ADC_IRQHandler>
	...

0800566c <__libc_init_array>:
 800566c:	b570      	push	{r4, r5, r6, lr}
 800566e:	4e0d      	ldr	r6, [pc, #52]	; (80056a4 <__libc_init_array+0x38>)
 8005670:	4c0d      	ldr	r4, [pc, #52]	; (80056a8 <__libc_init_array+0x3c>)
 8005672:	1ba4      	subs	r4, r4, r6
 8005674:	10a4      	asrs	r4, r4, #2
 8005676:	2500      	movs	r5, #0
 8005678:	42a5      	cmp	r5, r4
 800567a:	d109      	bne.n	8005690 <__libc_init_array+0x24>
 800567c:	4e0b      	ldr	r6, [pc, #44]	; (80056ac <__libc_init_array+0x40>)
 800567e:	4c0c      	ldr	r4, [pc, #48]	; (80056b0 <__libc_init_array+0x44>)
 8005680:	f000 f820 	bl	80056c4 <_init>
 8005684:	1ba4      	subs	r4, r4, r6
 8005686:	10a4      	asrs	r4, r4, #2
 8005688:	2500      	movs	r5, #0
 800568a:	42a5      	cmp	r5, r4
 800568c:	d105      	bne.n	800569a <__libc_init_array+0x2e>
 800568e:	bd70      	pop	{r4, r5, r6, pc}
 8005690:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005694:	4798      	blx	r3
 8005696:	3501      	adds	r5, #1
 8005698:	e7ee      	b.n	8005678 <__libc_init_array+0xc>
 800569a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800569e:	4798      	blx	r3
 80056a0:	3501      	adds	r5, #1
 80056a2:	e7f2      	b.n	800568a <__libc_init_array+0x1e>
 80056a4:	080056fc 	.word	0x080056fc
 80056a8:	080056fc 	.word	0x080056fc
 80056ac:	080056fc 	.word	0x080056fc
 80056b0:	08005700 	.word	0x08005700

080056b4 <memset>:
 80056b4:	4402      	add	r2, r0
 80056b6:	4603      	mov	r3, r0
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d100      	bne.n	80056be <memset+0xa>
 80056bc:	4770      	bx	lr
 80056be:	f803 1b01 	strb.w	r1, [r3], #1
 80056c2:	e7f9      	b.n	80056b8 <memset+0x4>

080056c4 <_init>:
 80056c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056c6:	bf00      	nop
 80056c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ca:	bc08      	pop	{r3}
 80056cc:	469e      	mov	lr, r3
 80056ce:	4770      	bx	lr

080056d0 <_fini>:
 80056d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056d2:	bf00      	nop
 80056d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056d6:	bc08      	pop	{r3}
 80056d8:	469e      	mov	lr, r3
 80056da:	4770      	bx	lr
