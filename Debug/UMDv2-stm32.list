
UMDv2-stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008278  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08008450  08008450  00018450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084c4  080084c4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080084c4  080084c4  000184c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084cc  080084cc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084cc  080084cc  000184cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084d0  080084d0  000184d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080084d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002048  200001e0  080086b4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002228  080086b4  00022228  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026bfa  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005871  00000000  00000000  00046e0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a98  00000000  00000000  0004c680  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017e0  00000000  00000000  0004e118  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002c48e  00000000  00000000  0004f8f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ec02  00000000  00000000  0007bd86  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dc89e  00000000  00000000  0009a988  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00177226  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ca0  00000000  00000000  001772a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001e0 	.word	0x200001e0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008438 	.word	0x08008438

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001e4 	.word	0x200001e4
 8000214:	08008438 	.word	0x08008438

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800051c:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <HAL_Init+0x40>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a0d      	ldr	r2, [pc, #52]	; (8000558 <HAL_Init+0x40>)
 8000522:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000526:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000528:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <HAL_Init+0x40>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a0a      	ldr	r2, [pc, #40]	; (8000558 <HAL_Init+0x40>)
 800052e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000532:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000534:	4b08      	ldr	r3, [pc, #32]	; (8000558 <HAL_Init+0x40>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a07      	ldr	r2, [pc, #28]	; (8000558 <HAL_Init+0x40>)
 800053a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800053e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000540:	2003      	movs	r0, #3
 8000542:	f000 fba1 	bl	8000c88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000546:	2000      	movs	r0, #0
 8000548:	f000 f808 	bl	800055c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800054c:	f007 f9b8 	bl	80078c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000550:	2300      	movs	r3, #0
}
 8000552:	4618      	mov	r0, r3
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40023c00 	.word	0x40023c00

0800055c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <HAL_InitTick+0x54>)
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <HAL_InitTick+0x58>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	4619      	mov	r1, r3
 800056e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000572:	fbb3 f3f1 	udiv	r3, r3, r1
 8000576:	fbb2 f3f3 	udiv	r3, r2, r3
 800057a:	4618      	mov	r0, r3
 800057c:	f000 fbab 	bl	8000cd6 <HAL_SYSTICK_Config>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000586:	2301      	movs	r3, #1
 8000588:	e00e      	b.n	80005a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2b0f      	cmp	r3, #15
 800058e:	d80a      	bhi.n	80005a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000590:	2200      	movs	r2, #0
 8000592:	6879      	ldr	r1, [r7, #4]
 8000594:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000598:	f000 fb81 	bl	8000c9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800059c:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <HAL_InitTick+0x5c>)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005a2:	2300      	movs	r3, #0
 80005a4:	e000      	b.n	80005a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005a6:	2301      	movs	r3, #1
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000118 	.word	0x20000118
 80005b4:	20000004 	.word	0x20000004
 80005b8:	20000000 	.word	0x20000000

080005bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005c0:	4b06      	ldr	r3, [pc, #24]	; (80005dc <HAL_IncTick+0x20>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	461a      	mov	r2, r3
 80005c6:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <HAL_IncTick+0x24>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4413      	add	r3, r2
 80005cc:	4a04      	ldr	r2, [pc, #16]	; (80005e0 <HAL_IncTick+0x24>)
 80005ce:	6013      	str	r3, [r2, #0]
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	20000004 	.word	0x20000004
 80005e0:	2000021c 	.word	0x2000021c

080005e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  return uwTick;
 80005e8:	4b03      	ldr	r3, [pc, #12]	; (80005f8 <HAL_GetTick+0x14>)
 80005ea:	681b      	ldr	r3, [r3, #0]
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	2000021c 	.word	0x2000021c

080005fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000604:	f7ff ffee 	bl	80005e4 <HAL_GetTick>
 8000608:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000614:	d005      	beq.n	8000622 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000616:	4b09      	ldr	r3, [pc, #36]	; (800063c <HAL_Delay+0x40>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	461a      	mov	r2, r3
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	4413      	add	r3, r2
 8000620:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000622:	bf00      	nop
 8000624:	f7ff ffde 	bl	80005e4 <HAL_GetTick>
 8000628:	4602      	mov	r2, r0
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	1ad3      	subs	r3, r2, r3
 800062e:	68fa      	ldr	r2, [r7, #12]
 8000630:	429a      	cmp	r2, r3
 8000632:	d8f7      	bhi.n	8000624 <HAL_Delay+0x28>
  {
  }
}
 8000634:	bf00      	nop
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000004 	.word	0x20000004

08000640 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000648:	2300      	movs	r3, #0
 800064a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d101      	bne.n	8000656 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000652:	2301      	movs	r3, #1
 8000654:	e033      	b.n	80006be <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065a:	2b00      	cmp	r3, #0
 800065c:	d109      	bne.n	8000672 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	f006 f93c 	bl	80068dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2200      	movs	r2, #0
 8000668:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2200      	movs	r2, #0
 800066e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000676:	f003 0310 	and.w	r3, r3, #16
 800067a:	2b00      	cmp	r3, #0
 800067c:	d118      	bne.n	80006b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000682:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000686:	f023 0302 	bic.w	r3, r3, #2
 800068a:	f043 0202 	orr.w	r2, r3, #2
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f000 f94a 	bl	800092c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2200      	movs	r2, #0
 800069c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a2:	f023 0303 	bic.w	r3, r3, #3
 80006a6:	f043 0201 	orr.w	r2, r3, #1
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	641a      	str	r2, [r3, #64]	; 0x40
 80006ae:	e001      	b.n	80006b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80006b0:	2301      	movs	r3, #1
 80006b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2200      	movs	r2, #0
 80006b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80006bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3710      	adds	r7, #16
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
	...

080006c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d101      	bne.n	80006e4 <HAL_ADC_ConfigChannel+0x1c>
 80006e0:	2302      	movs	r3, #2
 80006e2:	e113      	b.n	800090c <HAL_ADC_ConfigChannel+0x244>
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2201      	movs	r2, #1
 80006e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2b09      	cmp	r3, #9
 80006f2:	d925      	bls.n	8000740 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	68d9      	ldr	r1, [r3, #12]
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	b29b      	uxth	r3, r3
 8000700:	461a      	mov	r2, r3
 8000702:	4613      	mov	r3, r2
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	4413      	add	r3, r2
 8000708:	3b1e      	subs	r3, #30
 800070a:	2207      	movs	r2, #7
 800070c:	fa02 f303 	lsl.w	r3, r2, r3
 8000710:	43da      	mvns	r2, r3
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	400a      	ands	r2, r1
 8000718:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	68d9      	ldr	r1, [r3, #12]
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	689a      	ldr	r2, [r3, #8]
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	b29b      	uxth	r3, r3
 800072a:	4618      	mov	r0, r3
 800072c:	4603      	mov	r3, r0
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	4403      	add	r3, r0
 8000732:	3b1e      	subs	r3, #30
 8000734:	409a      	lsls	r2, r3
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	430a      	orrs	r2, r1
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	e022      	b.n	8000786 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	6919      	ldr	r1, [r3, #16]
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	b29b      	uxth	r3, r3
 800074c:	461a      	mov	r2, r3
 800074e:	4613      	mov	r3, r2
 8000750:	005b      	lsls	r3, r3, #1
 8000752:	4413      	add	r3, r2
 8000754:	2207      	movs	r2, #7
 8000756:	fa02 f303 	lsl.w	r3, r2, r3
 800075a:	43da      	mvns	r2, r3
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	400a      	ands	r2, r1
 8000762:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	6919      	ldr	r1, [r3, #16]
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	689a      	ldr	r2, [r3, #8]
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	b29b      	uxth	r3, r3
 8000774:	4618      	mov	r0, r3
 8000776:	4603      	mov	r3, r0
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	4403      	add	r3, r0
 800077c:	409a      	lsls	r2, r3
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	430a      	orrs	r2, r1
 8000784:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	2b06      	cmp	r3, #6
 800078c:	d824      	bhi.n	80007d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	685a      	ldr	r2, [r3, #4]
 8000798:	4613      	mov	r3, r2
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	4413      	add	r3, r2
 800079e:	3b05      	subs	r3, #5
 80007a0:	221f      	movs	r2, #31
 80007a2:	fa02 f303 	lsl.w	r3, r2, r3
 80007a6:	43da      	mvns	r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	400a      	ands	r2, r1
 80007ae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	4618      	mov	r0, r3
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	685a      	ldr	r2, [r3, #4]
 80007c2:	4613      	mov	r3, r2
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	4413      	add	r3, r2
 80007c8:	3b05      	subs	r3, #5
 80007ca:	fa00 f203 	lsl.w	r2, r0, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	430a      	orrs	r2, r1
 80007d4:	635a      	str	r2, [r3, #52]	; 0x34
 80007d6:	e04c      	b.n	8000872 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	2b0c      	cmp	r3, #12
 80007de:	d824      	bhi.n	800082a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	685a      	ldr	r2, [r3, #4]
 80007ea:	4613      	mov	r3, r2
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	4413      	add	r3, r2
 80007f0:	3b23      	subs	r3, #35	; 0x23
 80007f2:	221f      	movs	r2, #31
 80007f4:	fa02 f303 	lsl.w	r3, r2, r3
 80007f8:	43da      	mvns	r2, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	400a      	ands	r2, r1
 8000800:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	b29b      	uxth	r3, r3
 800080e:	4618      	mov	r0, r3
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	685a      	ldr	r2, [r3, #4]
 8000814:	4613      	mov	r3, r2
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	4413      	add	r3, r2
 800081a:	3b23      	subs	r3, #35	; 0x23
 800081c:	fa00 f203 	lsl.w	r2, r0, r3
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	430a      	orrs	r2, r1
 8000826:	631a      	str	r2, [r3, #48]	; 0x30
 8000828:	e023      	b.n	8000872 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	685a      	ldr	r2, [r3, #4]
 8000834:	4613      	mov	r3, r2
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	4413      	add	r3, r2
 800083a:	3b41      	subs	r3, #65	; 0x41
 800083c:	221f      	movs	r2, #31
 800083e:	fa02 f303 	lsl.w	r3, r2, r3
 8000842:	43da      	mvns	r2, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	400a      	ands	r2, r1
 800084a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	b29b      	uxth	r3, r3
 8000858:	4618      	mov	r0, r3
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	685a      	ldr	r2, [r3, #4]
 800085e:	4613      	mov	r3, r2
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	4413      	add	r3, r2
 8000864:	3b41      	subs	r3, #65	; 0x41
 8000866:	fa00 f203 	lsl.w	r2, r0, r3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	430a      	orrs	r2, r1
 8000870:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000872:	4b29      	ldr	r3, [pc, #164]	; (8000918 <HAL_ADC_ConfigChannel+0x250>)
 8000874:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a28      	ldr	r2, [pc, #160]	; (800091c <HAL_ADC_ConfigChannel+0x254>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d10f      	bne.n	80008a0 <HAL_ADC_ConfigChannel+0x1d8>
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b12      	cmp	r3, #18
 8000886:	d10b      	bne.n	80008a0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a1d      	ldr	r2, [pc, #116]	; (800091c <HAL_ADC_ConfigChannel+0x254>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d12b      	bne.n	8000902 <HAL_ADC_ConfigChannel+0x23a>
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a1c      	ldr	r2, [pc, #112]	; (8000920 <HAL_ADC_ConfigChannel+0x258>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d003      	beq.n	80008bc <HAL_ADC_ConfigChannel+0x1f4>
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b11      	cmp	r3, #17
 80008ba:	d122      	bne.n	8000902 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a11      	ldr	r2, [pc, #68]	; (8000920 <HAL_ADC_ConfigChannel+0x258>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d111      	bne.n	8000902 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <HAL_ADC_ConfigChannel+0x25c>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a11      	ldr	r2, [pc, #68]	; (8000928 <HAL_ADC_ConfigChannel+0x260>)
 80008e4:	fba2 2303 	umull	r2, r3, r2, r3
 80008e8:	0c9a      	lsrs	r2, r3, #18
 80008ea:	4613      	mov	r3, r2
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	4413      	add	r3, r2
 80008f0:	005b      	lsls	r3, r3, #1
 80008f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80008f4:	e002      	b.n	80008fc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	3b01      	subs	r3, #1
 80008fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d1f9      	bne.n	80008f6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2200      	movs	r2, #0
 8000906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800090a:	2300      	movs	r3, #0
}
 800090c:	4618      	mov	r0, r3
 800090e:	3714      	adds	r7, #20
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	40012300 	.word	0x40012300
 800091c:	40012000 	.word	0x40012000
 8000920:	10000012 	.word	0x10000012
 8000924:	20000118 	.word	0x20000118
 8000928:	431bde83 	.word	0x431bde83

0800092c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000934:	4b79      	ldr	r3, [pc, #484]	; (8000b1c <ADC_Init+0x1f0>)
 8000936:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	685a      	ldr	r2, [r3, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	431a      	orrs	r2, r3
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	685a      	ldr	r2, [r3, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000960:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	6859      	ldr	r1, [r3, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	691b      	ldr	r3, [r3, #16]
 800096c:	021a      	lsls	r2, r3, #8
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	430a      	orrs	r2, r1
 8000974:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	685a      	ldr	r2, [r3, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000984:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	6859      	ldr	r1, [r3, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	689a      	ldr	r2, [r3, #8]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	430a      	orrs	r2, r1
 8000996:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	689a      	ldr	r2, [r3, #8]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80009a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	6899      	ldr	r1, [r3, #8]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	68da      	ldr	r2, [r3, #12]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	430a      	orrs	r2, r1
 80009b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009be:	4a58      	ldr	r2, [pc, #352]	; (8000b20 <ADC_Init+0x1f4>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d022      	beq.n	8000a0a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	689a      	ldr	r2, [r3, #8]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80009d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	6899      	ldr	r1, [r3, #8]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	430a      	orrs	r2, r1
 80009e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	689a      	ldr	r2, [r3, #8]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80009f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	6899      	ldr	r1, [r3, #8]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	430a      	orrs	r2, r1
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	e00f      	b.n	8000a2a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	689a      	ldr	r2, [r3, #8]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000a18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	689a      	ldr	r2, [r3, #8]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000a28:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	689a      	ldr	r2, [r3, #8]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f022 0202 	bic.w	r2, r2, #2
 8000a38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	6899      	ldr	r1, [r3, #8]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	7e1b      	ldrb	r3, [r3, #24]
 8000a44:	005a      	lsls	r2, r3, #1
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	430a      	orrs	r2, r1
 8000a4c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d01b      	beq.n	8000a90 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	685a      	ldr	r2, [r3, #4]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000a66:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	685a      	ldr	r2, [r3, #4]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000a76:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	6859      	ldr	r1, [r3, #4]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a82:	3b01      	subs	r3, #1
 8000a84:	035a      	lsls	r2, r3, #13
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	e007      	b.n	8000aa0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	685a      	ldr	r2, [r3, #4]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000a9e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000aae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	69db      	ldr	r3, [r3, #28]
 8000aba:	3b01      	subs	r3, #1
 8000abc:	051a      	lsls	r2, r3, #20
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	430a      	orrs	r2, r1
 8000ac4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	689a      	ldr	r2, [r3, #8]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000ad4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	6899      	ldr	r1, [r3, #8]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000ae2:	025a      	lsls	r2, r3, #9
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	689a      	ldr	r2, [r3, #8]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000afa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	6899      	ldr	r1, [r3, #8]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	695b      	ldr	r3, [r3, #20]
 8000b06:	029a      	lsls	r2, r3, #10
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	609a      	str	r2, [r3, #8]
}
 8000b10:	bf00      	nop
 8000b12:	3714      	adds	r7, #20
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	40012300 	.word	0x40012300
 8000b20:	0f000001 	.word	0x0f000001

08000b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f003 0307 	and.w	r3, r3, #7
 8000b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <__NVIC_SetPriorityGrouping+0x44>)
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b3a:	68ba      	ldr	r2, [r7, #8]
 8000b3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b40:	4013      	ands	r3, r2
 8000b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b56:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <__NVIC_SetPriorityGrouping+0x44>)
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	60d3      	str	r3, [r2, #12]
}
 8000b5c:	bf00      	nop
 8000b5e:	3714      	adds	r7, #20
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b70:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <__NVIC_GetPriorityGrouping+0x18>)
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	0a1b      	lsrs	r3, r3, #8
 8000b76:	f003 0307 	and.w	r3, r3, #7
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	6039      	str	r1, [r7, #0]
 8000b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	db0a      	blt.n	8000bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	490c      	ldr	r1, [pc, #48]	; (8000bd4 <__NVIC_SetPriority+0x4c>)
 8000ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba6:	0112      	lsls	r2, r2, #4
 8000ba8:	b2d2      	uxtb	r2, r2
 8000baa:	440b      	add	r3, r1
 8000bac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bb0:	e00a      	b.n	8000bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	4908      	ldr	r1, [pc, #32]	; (8000bd8 <__NVIC_SetPriority+0x50>)
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	f003 030f 	and.w	r3, r3, #15
 8000bbe:	3b04      	subs	r3, #4
 8000bc0:	0112      	lsls	r2, r2, #4
 8000bc2:	b2d2      	uxtb	r2, r2
 8000bc4:	440b      	add	r3, r1
 8000bc6:	761a      	strb	r2, [r3, #24]
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	e000e100 	.word	0xe000e100
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b089      	sub	sp, #36	; 0x24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	f003 0307 	and.w	r3, r3, #7
 8000bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	f1c3 0307 	rsb	r3, r3, #7
 8000bf6:	2b04      	cmp	r3, #4
 8000bf8:	bf28      	it	cs
 8000bfa:	2304      	movcs	r3, #4
 8000bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3304      	adds	r3, #4
 8000c02:	2b06      	cmp	r3, #6
 8000c04:	d902      	bls.n	8000c0c <NVIC_EncodePriority+0x30>
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	3b03      	subs	r3, #3
 8000c0a:	e000      	b.n	8000c0e <NVIC_EncodePriority+0x32>
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	43da      	mvns	r2, r3
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	401a      	ands	r2, r3
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2e:	43d9      	mvns	r1, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c34:	4313      	orrs	r3, r2
         );
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3724      	adds	r7, #36	; 0x24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
	...

08000c44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c54:	d301      	bcc.n	8000c5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c56:	2301      	movs	r3, #1
 8000c58:	e00f      	b.n	8000c7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c5a:	4a0a      	ldr	r2, [pc, #40]	; (8000c84 <SysTick_Config+0x40>)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c62:	210f      	movs	r1, #15
 8000c64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c68:	f7ff ff8e 	bl	8000b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <SysTick_Config+0x40>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c72:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <SysTick_Config+0x40>)
 8000c74:	2207      	movs	r2, #7
 8000c76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	e000e010 	.word	0xe000e010

08000c88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	f7ff ff47 	bl	8000b24 <__NVIC_SetPriorityGrouping>
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b086      	sub	sp, #24
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	60b9      	str	r1, [r7, #8]
 8000ca8:	607a      	str	r2, [r7, #4]
 8000caa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cb0:	f7ff ff5c 	bl	8000b6c <__NVIC_GetPriorityGrouping>
 8000cb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	68b9      	ldr	r1, [r7, #8]
 8000cba:	6978      	ldr	r0, [r7, #20]
 8000cbc:	f7ff ff8e 	bl	8000bdc <NVIC_EncodePriority>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cc6:	4611      	mov	r1, r2
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ff5d 	bl	8000b88 <__NVIC_SetPriority>
}
 8000cce:	bf00      	nop
 8000cd0:	3718      	adds	r7, #24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff ffb0 	bl	8000c44 <SysTick_Config>
 8000ce4:	4603      	mov	r3, r0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d101      	bne.n	8000d00 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	e011      	b.n	8000d24 <HAL_CRC_Init+0x36>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	795b      	ldrb	r3, [r3, #5]
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d105      	bne.n	8000d16 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f005 fecd 	bl	8006ab0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2202      	movs	r2, #2
 8000d1a:	715a      	strb	r2, [r3, #5]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2201      	movs	r2, #1
 8000d20:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000d22:	2300      	movs	r3, #0
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b089      	sub	sp, #36	; 0x24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
 8000d46:	e165      	b.n	8001014 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d48:	2201      	movs	r2, #1
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	697a      	ldr	r2, [r7, #20]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	f040 8154 	bne.w	800100e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d003      	beq.n	8000d76 <HAL_GPIO_Init+0x4a>
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	2b12      	cmp	r3, #18
 8000d74:	d123      	bne.n	8000dbe <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	08da      	lsrs	r2, r3, #3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3208      	adds	r2, #8
 8000d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	220f      	movs	r2, #15
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4013      	ands	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	691a      	ldr	r2, [r3, #16]
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	f003 0307 	and.w	r3, r3, #7
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	08da      	lsrs	r2, r3, #3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3208      	adds	r2, #8
 8000db8:	69b9      	ldr	r1, [r7, #24]
 8000dba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	2203      	movs	r2, #3
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f003 0203 	and.w	r2, r3, #3
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d00b      	beq.n	8000e12 <HAL_GPIO_Init+0xe6>
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d007      	beq.n	8000e12 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e06:	2b11      	cmp	r3, #17
 8000e08:	d003      	beq.n	8000e12 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	2b12      	cmp	r3, #18
 8000e10:	d130      	bne.n	8000e74 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43db      	mvns	r3, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4013      	ands	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	68da      	ldr	r2, [r3, #12]
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e48:	2201      	movs	r2, #1
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	4013      	ands	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	091b      	lsrs	r3, r3, #4
 8000e5e:	f003 0201 	and.w	r2, r3, #1
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	2203      	movs	r2, #3
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	689a      	ldr	r2, [r3, #8]
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	f000 80ae 	beq.w	800100e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	4b5c      	ldr	r3, [pc, #368]	; (8001028 <HAL_GPIO_Init+0x2fc>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eba:	4a5b      	ldr	r2, [pc, #364]	; (8001028 <HAL_GPIO_Init+0x2fc>)
 8000ebc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ec2:	4b59      	ldr	r3, [pc, #356]	; (8001028 <HAL_GPIO_Init+0x2fc>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ece:	4a57      	ldr	r2, [pc, #348]	; (800102c <HAL_GPIO_Init+0x300>)
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	089b      	lsrs	r3, r3, #2
 8000ed4:	3302      	adds	r3, #2
 8000ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f003 0303 	and.w	r3, r3, #3
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	220f      	movs	r2, #15
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43db      	mvns	r3, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a4e      	ldr	r2, [pc, #312]	; (8001030 <HAL_GPIO_Init+0x304>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d025      	beq.n	8000f46 <HAL_GPIO_Init+0x21a>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a4d      	ldr	r2, [pc, #308]	; (8001034 <HAL_GPIO_Init+0x308>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d01f      	beq.n	8000f42 <HAL_GPIO_Init+0x216>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a4c      	ldr	r2, [pc, #304]	; (8001038 <HAL_GPIO_Init+0x30c>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d019      	beq.n	8000f3e <HAL_GPIO_Init+0x212>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a4b      	ldr	r2, [pc, #300]	; (800103c <HAL_GPIO_Init+0x310>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d013      	beq.n	8000f3a <HAL_GPIO_Init+0x20e>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a4a      	ldr	r2, [pc, #296]	; (8001040 <HAL_GPIO_Init+0x314>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d00d      	beq.n	8000f36 <HAL_GPIO_Init+0x20a>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a49      	ldr	r2, [pc, #292]	; (8001044 <HAL_GPIO_Init+0x318>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d007      	beq.n	8000f32 <HAL_GPIO_Init+0x206>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a48      	ldr	r2, [pc, #288]	; (8001048 <HAL_GPIO_Init+0x31c>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d101      	bne.n	8000f2e <HAL_GPIO_Init+0x202>
 8000f2a:	2306      	movs	r3, #6
 8000f2c:	e00c      	b.n	8000f48 <HAL_GPIO_Init+0x21c>
 8000f2e:	2307      	movs	r3, #7
 8000f30:	e00a      	b.n	8000f48 <HAL_GPIO_Init+0x21c>
 8000f32:	2305      	movs	r3, #5
 8000f34:	e008      	b.n	8000f48 <HAL_GPIO_Init+0x21c>
 8000f36:	2304      	movs	r3, #4
 8000f38:	e006      	b.n	8000f48 <HAL_GPIO_Init+0x21c>
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e004      	b.n	8000f48 <HAL_GPIO_Init+0x21c>
 8000f3e:	2302      	movs	r3, #2
 8000f40:	e002      	b.n	8000f48 <HAL_GPIO_Init+0x21c>
 8000f42:	2301      	movs	r3, #1
 8000f44:	e000      	b.n	8000f48 <HAL_GPIO_Init+0x21c>
 8000f46:	2300      	movs	r3, #0
 8000f48:	69fa      	ldr	r2, [r7, #28]
 8000f4a:	f002 0203 	and.w	r2, r2, #3
 8000f4e:	0092      	lsls	r2, r2, #2
 8000f50:	4093      	lsls	r3, r2
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f58:	4934      	ldr	r1, [pc, #208]	; (800102c <HAL_GPIO_Init+0x300>)
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	089b      	lsrs	r3, r3, #2
 8000f5e:	3302      	adds	r3, #2
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f66:	4b39      	ldr	r3, [pc, #228]	; (800104c <HAL_GPIO_Init+0x320>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4013      	ands	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d003      	beq.n	8000f8a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f8a:	4a30      	ldr	r2, [pc, #192]	; (800104c <HAL_GPIO_Init+0x320>)
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f90:	4b2e      	ldr	r3, [pc, #184]	; (800104c <HAL_GPIO_Init+0x320>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d003      	beq.n	8000fb4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fb4:	4a25      	ldr	r2, [pc, #148]	; (800104c <HAL_GPIO_Init+0x320>)
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fba:	4b24      	ldr	r3, [pc, #144]	; (800104c <HAL_GPIO_Init+0x320>)
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fde:	4a1b      	ldr	r2, [pc, #108]	; (800104c <HAL_GPIO_Init+0x320>)
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fe4:	4b19      	ldr	r3, [pc, #100]	; (800104c <HAL_GPIO_Init+0x320>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d003      	beq.n	8001008 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001008:	4a10      	ldr	r2, [pc, #64]	; (800104c <HAL_GPIO_Init+0x320>)
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3301      	adds	r3, #1
 8001012:	61fb      	str	r3, [r7, #28]
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	2b0f      	cmp	r3, #15
 8001018:	f67f ae96 	bls.w	8000d48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800101c:	bf00      	nop
 800101e:	3724      	adds	r7, #36	; 0x24
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	40023800 	.word	0x40023800
 800102c:	40013800 	.word	0x40013800
 8001030:	40020000 	.word	0x40020000
 8001034:	40020400 	.word	0x40020400
 8001038:	40020800 	.word	0x40020800
 800103c:	40020c00 	.word	0x40020c00
 8001040:	40021000 	.word	0x40021000
 8001044:	40021400 	.word	0x40021400
 8001048:	40021800 	.word	0x40021800
 800104c:	40013c00 	.word	0x40013c00

08001050 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	691a      	ldr	r2, [r3, #16]
 8001060:	887b      	ldrh	r3, [r7, #2]
 8001062:	4013      	ands	r3, r2
 8001064:	2b00      	cmp	r3, #0
 8001066:	d002      	beq.n	800106e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001068:	2301      	movs	r3, #1
 800106a:	73fb      	strb	r3, [r7, #15]
 800106c:	e001      	b.n	8001072 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800106e:	2300      	movs	r3, #0
 8001070:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001072:	7bfb      	ldrb	r3, [r7, #15]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	807b      	strh	r3, [r7, #2]
 800108c:	4613      	mov	r3, r2
 800108e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001090:	787b      	ldrb	r3, [r7, #1]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001096:	887a      	ldrh	r2, [r7, #2]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800109c:	e003      	b.n	80010a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800109e:	887b      	ldrh	r3, [r7, #2]
 80010a0:	041a      	lsls	r2, r3, #16
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	619a      	str	r2, [r3, #24]
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
	...

080010b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e10f      	b.n	80012e6 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d106      	bne.n	80010e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f006 f8f0 	bl	80072c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2224      	movs	r2, #36	; 0x24
 80010e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f022 0201 	bic.w	r2, r2, #1
 80010f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80010f8:	f000 feb6 	bl	8001e68 <HAL_RCC_GetPCLK1Freq>
 80010fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	4a7b      	ldr	r2, [pc, #492]	; (80012f0 <HAL_I2C_Init+0x23c>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d807      	bhi.n	8001118 <HAL_I2C_Init+0x64>
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4a7a      	ldr	r2, [pc, #488]	; (80012f4 <HAL_I2C_Init+0x240>)
 800110c:	4293      	cmp	r3, r2
 800110e:	bf94      	ite	ls
 8001110:	2301      	movls	r3, #1
 8001112:	2300      	movhi	r3, #0
 8001114:	b2db      	uxtb	r3, r3
 8001116:	e006      	b.n	8001126 <HAL_I2C_Init+0x72>
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4a77      	ldr	r2, [pc, #476]	; (80012f8 <HAL_I2C_Init+0x244>)
 800111c:	4293      	cmp	r3, r2
 800111e:	bf94      	ite	ls
 8001120:	2301      	movls	r3, #1
 8001122:	2300      	movhi	r3, #0
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e0db      	b.n	80012e6 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	4a72      	ldr	r2, [pc, #456]	; (80012fc <HAL_I2C_Init+0x248>)
 8001132:	fba2 2303 	umull	r2, r3, r2, r3
 8001136:	0c9b      	lsrs	r3, r3, #18
 8001138:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	68ba      	ldr	r2, [r7, #8]
 800114a:	430a      	orrs	r2, r1
 800114c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	6a1b      	ldr	r3, [r3, #32]
 8001154:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	4a64      	ldr	r2, [pc, #400]	; (80012f0 <HAL_I2C_Init+0x23c>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d802      	bhi.n	8001168 <HAL_I2C_Init+0xb4>
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	3301      	adds	r3, #1
 8001166:	e009      	b.n	800117c <HAL_I2C_Init+0xc8>
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800116e:	fb02 f303 	mul.w	r3, r2, r3
 8001172:	4a63      	ldr	r2, [pc, #396]	; (8001300 <HAL_I2C_Init+0x24c>)
 8001174:	fba2 2303 	umull	r2, r3, r2, r3
 8001178:	099b      	lsrs	r3, r3, #6
 800117a:	3301      	adds	r3, #1
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	6812      	ldr	r2, [r2, #0]
 8001180:	430b      	orrs	r3, r1
 8001182:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800118e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	4956      	ldr	r1, [pc, #344]	; (80012f0 <HAL_I2C_Init+0x23c>)
 8001198:	428b      	cmp	r3, r1
 800119a:	d80d      	bhi.n	80011b8 <HAL_I2C_Init+0x104>
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	1e59      	subs	r1, r3, #1
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80011aa:	3301      	adds	r3, #1
 80011ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011b0:	2b04      	cmp	r3, #4
 80011b2:	bf38      	it	cc
 80011b4:	2304      	movcc	r3, #4
 80011b6:	e04f      	b.n	8001258 <HAL_I2C_Init+0x1a4>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d111      	bne.n	80011e4 <HAL_I2C_Init+0x130>
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	1e58      	subs	r0, r3, #1
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6859      	ldr	r1, [r3, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	440b      	add	r3, r1
 80011ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80011d2:	3301      	adds	r3, #1
 80011d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011d8:	2b00      	cmp	r3, #0
 80011da:	bf0c      	ite	eq
 80011dc:	2301      	moveq	r3, #1
 80011de:	2300      	movne	r3, #0
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	e012      	b.n	800120a <HAL_I2C_Init+0x156>
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	1e58      	subs	r0, r3, #1
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6859      	ldr	r1, [r3, #4]
 80011ec:	460b      	mov	r3, r1
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	440b      	add	r3, r1
 80011f2:	0099      	lsls	r1, r3, #2
 80011f4:	440b      	add	r3, r1
 80011f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80011fa:	3301      	adds	r3, #1
 80011fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001200:	2b00      	cmp	r3, #0
 8001202:	bf0c      	ite	eq
 8001204:	2301      	moveq	r3, #1
 8001206:	2300      	movne	r3, #0
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <HAL_I2C_Init+0x15e>
 800120e:	2301      	movs	r3, #1
 8001210:	e022      	b.n	8001258 <HAL_I2C_Init+0x1a4>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d10e      	bne.n	8001238 <HAL_I2C_Init+0x184>
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	1e58      	subs	r0, r3, #1
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6859      	ldr	r1, [r3, #4]
 8001222:	460b      	mov	r3, r1
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	440b      	add	r3, r1
 8001228:	fbb0 f3f3 	udiv	r3, r0, r3
 800122c:	3301      	adds	r3, #1
 800122e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001236:	e00f      	b.n	8001258 <HAL_I2C_Init+0x1a4>
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	1e58      	subs	r0, r3, #1
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6859      	ldr	r1, [r3, #4]
 8001240:	460b      	mov	r3, r1
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	440b      	add	r3, r1
 8001246:	0099      	lsls	r1, r3, #2
 8001248:	440b      	add	r3, r1
 800124a:	fbb0 f3f3 	udiv	r3, r0, r3
 800124e:	3301      	adds	r3, #1
 8001250:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001254:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001258:	6879      	ldr	r1, [r7, #4]
 800125a:	6809      	ldr	r1, [r1, #0]
 800125c:	4313      	orrs	r3, r2
 800125e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69da      	ldr	r2, [r3, #28]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6a1b      	ldr	r3, [r3, #32]
 8001272:	431a      	orrs	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	430a      	orrs	r2, r1
 800127a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001286:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	6911      	ldr	r1, [r2, #16]
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	68d2      	ldr	r2, [r2, #12]
 8001292:	4311      	orrs	r1, r2
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	6812      	ldr	r2, [r2, #0]
 8001298:	430b      	orrs	r3, r1
 800129a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	695a      	ldr	r2, [r3, #20]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	699b      	ldr	r3, [r3, #24]
 80012ae:	431a      	orrs	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	430a      	orrs	r2, r1
 80012b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f042 0201 	orr.w	r2, r2, #1
 80012c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2220      	movs	r2, #32
 80012d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	000186a0 	.word	0x000186a0
 80012f4:	001e847f 	.word	0x001e847f
 80012f8:	003d08ff 	.word	0x003d08ff
 80012fc:	431bde83 	.word	0x431bde83
 8001300:	10624dd3 	.word	0x10624dd3

08001304 <HAL_NOR_Init>:
  * @param  Timing pointer to NOR control timing structure 
  * @param  ExtTiming pointer to NOR extended mode timing structure    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
  /* Check the NOR handle parameter */
  if(hnor == NULL)
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d101      	bne.n	800131a <HAL_NOR_Init+0x16>
  {
     return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e043      	b.n	80013a2 <HAL_NOR_Init+0x9e>
  }
  
  if(hnor->State == HAL_NOR_STATE_RESET)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b00      	cmp	r3, #0
 8001324:	d106      	bne.n	8001334 <HAL_NOR_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	2200      	movs	r2, #0
 800132a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 800132e:	68f8      	ldr	r0, [r7, #12]
 8001330:	f005 fe1c 	bl	8006f6c <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }
  
  /* Initialize NOR control Interface */
  FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	3308      	adds	r3, #8
 800133c:	4619      	mov	r1, r3
 800133e:	4610      	mov	r0, r2
 8001340:	f002 ff00 	bl	8004144 <FSMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank); 
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	6818      	ldr	r0, [r3, #0]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	461a      	mov	r2, r3
 800134e:	68b9      	ldr	r1, [r7, #8]
 8001350:	f002 ff68 	bl	8004224 <FSMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	6858      	ldr	r0, [r3, #4]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001360:	6879      	ldr	r1, [r7, #4]
 8001362:	f002 ffb3 	bl	80042cc <FSMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	6892      	ldr	r2, [r2, #8]
 800136e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	6892      	ldr	r2, [r2, #8]
 800137a:	f041 0101 	orr.w	r1, r1, #1
 800137e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d103      	bne.n	8001392 <HAL_NOR_Init+0x8e>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 800138a:	4b08      	ldr	r3, [pc, #32]	; (80013ac <HAL_NOR_Init+0xa8>)
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	e002      	b.n	8001398 <HAL_NOR_Init+0x94>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 8001392:	4b06      	ldr	r3, [pc, #24]	; (80013ac <HAL_NOR_Init+0xa8>)
 8001394:	2201      	movs	r2, #1
 8001396:	601a      	str	r2, [r3, #0]
  }

  /* Check the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY; 
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2201      	movs	r2, #1
 800139c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	200001fc 	.word	0x200001fc

080013b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80013b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013b2:	b08f      	sub	sp, #60	; 0x3c
 80013b4:	af0a      	add	r7, sp, #40	; 0x28
 80013b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e116      	b.n	80015f0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d106      	bne.n	80013e2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f006 fc57 	bl	8007c90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2203      	movs	r2, #3
 80013e6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d102      	bne.n	80013fc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f003 fd75 	bl	8004ef0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	603b      	str	r3, [r7, #0]
 800140c:	687e      	ldr	r6, [r7, #4]
 800140e:	466d      	mov	r5, sp
 8001410:	f106 0410 	add.w	r4, r6, #16
 8001414:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001416:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001418:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800141a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800141c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001420:	e885 0003 	stmia.w	r5, {r0, r1}
 8001424:	1d33      	adds	r3, r6, #4
 8001426:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001428:	6838      	ldr	r0, [r7, #0]
 800142a:	f003 fcef 	bl	8004e0c <USB_CoreInit>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d005      	beq.n	8001440 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2202      	movs	r2, #2
 8001438:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e0d7      	b.n	80015f0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2100      	movs	r1, #0
 8001446:	4618      	mov	r0, r3
 8001448:	f003 fd63 	bl	8004f12 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800144c:	2300      	movs	r3, #0
 800144e:	73fb      	strb	r3, [r7, #15]
 8001450:	e04a      	b.n	80014e8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001452:	7bfa      	ldrb	r2, [r7, #15]
 8001454:	6879      	ldr	r1, [r7, #4]
 8001456:	4613      	mov	r3, r2
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	1a9b      	subs	r3, r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	440b      	add	r3, r1
 8001460:	333d      	adds	r3, #61	; 0x3d
 8001462:	2201      	movs	r2, #1
 8001464:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001466:	7bfa      	ldrb	r2, [r7, #15]
 8001468:	6879      	ldr	r1, [r7, #4]
 800146a:	4613      	mov	r3, r2
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	1a9b      	subs	r3, r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	440b      	add	r3, r1
 8001474:	333c      	adds	r3, #60	; 0x3c
 8001476:	7bfa      	ldrb	r2, [r7, #15]
 8001478:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800147a:	7bfa      	ldrb	r2, [r7, #15]
 800147c:	7bfb      	ldrb	r3, [r7, #15]
 800147e:	b298      	uxth	r0, r3
 8001480:	6879      	ldr	r1, [r7, #4]
 8001482:	4613      	mov	r3, r2
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	1a9b      	subs	r3, r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	440b      	add	r3, r1
 800148c:	3342      	adds	r3, #66	; 0x42
 800148e:	4602      	mov	r2, r0
 8001490:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001492:	7bfa      	ldrb	r2, [r7, #15]
 8001494:	6879      	ldr	r1, [r7, #4]
 8001496:	4613      	mov	r3, r2
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	1a9b      	subs	r3, r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	440b      	add	r3, r1
 80014a0:	333f      	adds	r3, #63	; 0x3f
 80014a2:	2200      	movs	r2, #0
 80014a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80014a6:	7bfa      	ldrb	r2, [r7, #15]
 80014a8:	6879      	ldr	r1, [r7, #4]
 80014aa:	4613      	mov	r3, r2
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	1a9b      	subs	r3, r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	440b      	add	r3, r1
 80014b4:	3344      	adds	r3, #68	; 0x44
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80014ba:	7bfa      	ldrb	r2, [r7, #15]
 80014bc:	6879      	ldr	r1, [r7, #4]
 80014be:	4613      	mov	r3, r2
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	1a9b      	subs	r3, r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	440b      	add	r3, r1
 80014c8:	3348      	adds	r3, #72	; 0x48
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80014ce:	7bfa      	ldrb	r2, [r7, #15]
 80014d0:	6879      	ldr	r1, [r7, #4]
 80014d2:	4613      	mov	r3, r2
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	1a9b      	subs	r3, r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	440b      	add	r3, r1
 80014dc:	3350      	adds	r3, #80	; 0x50
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
 80014e4:	3301      	adds	r3, #1
 80014e6:	73fb      	strb	r3, [r7, #15]
 80014e8:	7bfa      	ldrb	r2, [r7, #15]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d3af      	bcc.n	8001452 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014f2:	2300      	movs	r3, #0
 80014f4:	73fb      	strb	r3, [r7, #15]
 80014f6:	e044      	b.n	8001582 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80014f8:	7bfa      	ldrb	r2, [r7, #15]
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	4613      	mov	r3, r2
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	1a9b      	subs	r3, r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	440b      	add	r3, r1
 8001506:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800150e:	7bfa      	ldrb	r2, [r7, #15]
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	4613      	mov	r3, r2
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	1a9b      	subs	r3, r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	440b      	add	r3, r1
 800151c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001520:	7bfa      	ldrb	r2, [r7, #15]
 8001522:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001524:	7bfa      	ldrb	r2, [r7, #15]
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	4613      	mov	r3, r2
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	1a9b      	subs	r3, r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	440b      	add	r3, r1
 8001532:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001536:	2200      	movs	r2, #0
 8001538:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800153a:	7bfa      	ldrb	r2, [r7, #15]
 800153c:	6879      	ldr	r1, [r7, #4]
 800153e:	4613      	mov	r3, r2
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	1a9b      	subs	r3, r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	440b      	add	r3, r1
 8001548:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001550:	7bfa      	ldrb	r2, [r7, #15]
 8001552:	6879      	ldr	r1, [r7, #4]
 8001554:	4613      	mov	r3, r2
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	1a9b      	subs	r3, r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	440b      	add	r3, r1
 800155e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001566:	7bfa      	ldrb	r2, [r7, #15]
 8001568:	6879      	ldr	r1, [r7, #4]
 800156a:	4613      	mov	r3, r2
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	1a9b      	subs	r3, r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	440b      	add	r3, r1
 8001574:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	3301      	adds	r3, #1
 8001580:	73fb      	strb	r3, [r7, #15]
 8001582:	7bfa      	ldrb	r2, [r7, #15]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	429a      	cmp	r2, r3
 800158a:	d3b5      	bcc.n	80014f8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	603b      	str	r3, [r7, #0]
 8001592:	687e      	ldr	r6, [r7, #4]
 8001594:	466d      	mov	r5, sp
 8001596:	f106 0410 	add.w	r4, r6, #16
 800159a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800159c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800159e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80015aa:	1d33      	adds	r3, r6, #4
 80015ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015ae:	6838      	ldr	r0, [r7, #0]
 80015b0:	f003 fcda 	bl	8004f68 <USB_DevInit>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d005      	beq.n	80015c6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2202      	movs	r2, #2
 80015be:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e014      	b.n	80015f0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2201      	movs	r2, #1
 80015d2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d102      	bne.n	80015e4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f000 fa58 	bl	8001a94 <HAL_PCDEx_ActivateLPM>
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f004 fbe7 	bl	8005dbc <USB_DevDisconnect>

  return HAL_OK;
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015f8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800160c:	2b01      	cmp	r3, #1
 800160e:	d101      	bne.n	8001614 <HAL_PCD_Start+0x1c>
 8001610:	2302      	movs	r3, #2
 8001612:	e020      	b.n	8001656 <HAL_PCD_Start+0x5e>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001620:	2b01      	cmp	r3, #1
 8001622:	d109      	bne.n	8001638 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001628:	2b01      	cmp	r3, #1
 800162a:	d005      	beq.n	8001638 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001630:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f004 fba5 	bl	8005d8c <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f003 fc41 	bl	8004ece <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b084      	sub	sp, #16
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
 8001666:	4608      	mov	r0, r1
 8001668:	4611      	mov	r1, r2
 800166a:	461a      	mov	r2, r3
 800166c:	4603      	mov	r3, r0
 800166e:	70fb      	strb	r3, [r7, #3]
 8001670:	460b      	mov	r3, r1
 8001672:	803b      	strh	r3, [r7, #0]
 8001674:	4613      	mov	r3, r2
 8001676:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001678:	2300      	movs	r3, #0
 800167a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800167c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001680:	2b00      	cmp	r3, #0
 8001682:	da0f      	bge.n	80016a4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001684:	78fb      	ldrb	r3, [r7, #3]
 8001686:	f003 020f 	and.w	r2, r3, #15
 800168a:	4613      	mov	r3, r2
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	1a9b      	subs	r3, r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	3338      	adds	r3, #56	; 0x38
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	4413      	add	r3, r2
 8001698:	3304      	adds	r3, #4
 800169a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2201      	movs	r2, #1
 80016a0:	705a      	strb	r2, [r3, #1]
 80016a2:	e00f      	b.n	80016c4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016a4:	78fb      	ldrb	r3, [r7, #3]
 80016a6:	f003 020f 	and.w	r2, r3, #15
 80016aa:	4613      	mov	r3, r2
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	1a9b      	subs	r3, r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	4413      	add	r3, r2
 80016ba:	3304      	adds	r3, #4
 80016bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2200      	movs	r2, #0
 80016c2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80016c4:	78fb      	ldrb	r3, [r7, #3]
 80016c6:	f003 030f 	and.w	r3, r3, #15
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80016d0:	883a      	ldrh	r2, [r7, #0]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	78ba      	ldrb	r2, [r7, #2]
 80016da:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	785b      	ldrb	r3, [r3, #1]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d004      	beq.n	80016ee <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80016ee:	78bb      	ldrb	r3, [r7, #2]
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d102      	bne.n	80016fa <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2200      	movs	r2, #0
 80016f8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001700:	2b01      	cmp	r3, #1
 8001702:	d101      	bne.n	8001708 <HAL_PCD_EP_Open+0xaa>
 8001704:	2302      	movs	r3, #2
 8001706:	e00e      	b.n	8001726 <HAL_PCD_EP_Open+0xc8>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2201      	movs	r2, #1
 800170c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	68f9      	ldr	r1, [r7, #12]
 8001716:	4618      	mov	r0, r3
 8001718:	f003 fdf3 	bl	8005302 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001724:	7afb      	ldrb	r3, [r7, #11]
}
 8001726:	4618      	mov	r0, r3
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b084      	sub	sp, #16
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
 8001736:	460b      	mov	r3, r1
 8001738:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800173a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800173e:	2b00      	cmp	r3, #0
 8001740:	da0f      	bge.n	8001762 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001742:	78fb      	ldrb	r3, [r7, #3]
 8001744:	f003 020f 	and.w	r2, r3, #15
 8001748:	4613      	mov	r3, r2
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	1a9b      	subs	r3, r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	3338      	adds	r3, #56	; 0x38
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	3304      	adds	r3, #4
 8001758:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2201      	movs	r2, #1
 800175e:	705a      	strb	r2, [r3, #1]
 8001760:	e00f      	b.n	8001782 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001762:	78fb      	ldrb	r3, [r7, #3]
 8001764:	f003 020f 	and.w	r2, r3, #15
 8001768:	4613      	mov	r3, r2
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	1a9b      	subs	r3, r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	4413      	add	r3, r2
 8001778:	3304      	adds	r3, #4
 800177a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2200      	movs	r2, #0
 8001780:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001782:	78fb      	ldrb	r3, [r7, #3]
 8001784:	f003 030f 	and.w	r3, r3, #15
 8001788:	b2da      	uxtb	r2, r3
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001794:	2b01      	cmp	r3, #1
 8001796:	d101      	bne.n	800179c <HAL_PCD_EP_Close+0x6e>
 8001798:	2302      	movs	r3, #2
 800179a:	e00e      	b.n	80017ba <HAL_PCD_EP_Close+0x8c>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2201      	movs	r2, #1
 80017a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	68f9      	ldr	r1, [r7, #12]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f003 fe30 	bl	8005410 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b086      	sub	sp, #24
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	60f8      	str	r0, [r7, #12]
 80017ca:	607a      	str	r2, [r7, #4]
 80017cc:	603b      	str	r3, [r7, #0]
 80017ce:	460b      	mov	r3, r1
 80017d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017d2:	7afb      	ldrb	r3, [r7, #11]
 80017d4:	f003 020f 	and.w	r2, r3, #15
 80017d8:	4613      	mov	r3, r2
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	1a9b      	subs	r3, r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	4413      	add	r3, r2
 80017e8:	3304      	adds	r3, #4
 80017ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	2200      	movs	r2, #0
 80017fc:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	2200      	movs	r2, #0
 8001802:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001804:	7afb      	ldrb	r3, [r7, #11]
 8001806:	f003 030f 	and.w	r3, r3, #15
 800180a:	b2da      	uxtb	r2, r3
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d102      	bne.n	800181e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800181e:	7afb      	ldrb	r3, [r7, #11]
 8001820:	f003 030f 	and.w	r3, r3, #15
 8001824:	2b00      	cmp	r3, #0
 8001826:	d109      	bne.n	800183c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6818      	ldr	r0, [r3, #0]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	b2db      	uxtb	r3, r3
 8001832:	461a      	mov	r2, r3
 8001834:	6979      	ldr	r1, [r7, #20]
 8001836:	f004 f8b3 	bl	80059a0 <USB_EP0StartXfer>
 800183a:	e008      	b.n	800184e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6818      	ldr	r0, [r3, #0]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	b2db      	uxtb	r3, r3
 8001846:	461a      	mov	r2, r3
 8001848:	6979      	ldr	r1, [r7, #20]
 800184a:	f003 fe65 	bl	8005518 <USB_EPStartXfer>
  }

  return HAL_OK;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	3718      	adds	r7, #24
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	460b      	mov	r3, r1
 8001862:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001864:	78fb      	ldrb	r3, [r7, #3]
 8001866:	f003 020f 	and.w	r2, r3, #15
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	4613      	mov	r3, r2
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	1a9b      	subs	r3, r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	440b      	add	r3, r1
 8001876:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800187a:	681b      	ldr	r3, [r3, #0]
}
 800187c:	4618      	mov	r0, r3
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	607a      	str	r2, [r7, #4]
 8001892:	603b      	str	r3, [r7, #0]
 8001894:	460b      	mov	r3, r1
 8001896:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001898:	7afb      	ldrb	r3, [r7, #11]
 800189a:	f003 020f 	and.w	r2, r3, #15
 800189e:	4613      	mov	r3, r2
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	1a9b      	subs	r3, r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	3338      	adds	r3, #56	; 0x38
 80018a8:	68fa      	ldr	r2, [r7, #12]
 80018aa:	4413      	add	r3, r2
 80018ac:	3304      	adds	r3, #4
 80018ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	2200      	movs	r2, #0
 80018c0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	2201      	movs	r2, #1
 80018c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018c8:	7afb      	ldrb	r3, [r7, #11]
 80018ca:	f003 030f 	and.w	r3, r3, #15
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	691b      	ldr	r3, [r3, #16]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d102      	bne.n	80018e2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80018e2:	7afb      	ldrb	r3, [r7, #11]
 80018e4:	f003 030f 	and.w	r3, r3, #15
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d109      	bne.n	8001900 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	6818      	ldr	r0, [r3, #0]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	461a      	mov	r2, r3
 80018f8:	6979      	ldr	r1, [r7, #20]
 80018fa:	f004 f851 	bl	80059a0 <USB_EP0StartXfer>
 80018fe:	e008      	b.n	8001912 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6818      	ldr	r0, [r3, #0]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	691b      	ldr	r3, [r3, #16]
 8001908:	b2db      	uxtb	r3, r3
 800190a:	461a      	mov	r2, r3
 800190c:	6979      	ldr	r1, [r7, #20]
 800190e:	f003 fe03 	bl	8005518 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3718      	adds	r7, #24
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	460b      	mov	r3, r1
 8001926:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001928:	78fb      	ldrb	r3, [r7, #3]
 800192a:	f003 020f 	and.w	r2, r3, #15
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	429a      	cmp	r2, r3
 8001934:	d901      	bls.n	800193a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e050      	b.n	80019dc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800193a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800193e:	2b00      	cmp	r3, #0
 8001940:	da0f      	bge.n	8001962 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001942:	78fb      	ldrb	r3, [r7, #3]
 8001944:	f003 020f 	and.w	r2, r3, #15
 8001948:	4613      	mov	r3, r2
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	1a9b      	subs	r3, r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	3338      	adds	r3, #56	; 0x38
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	4413      	add	r3, r2
 8001956:	3304      	adds	r3, #4
 8001958:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2201      	movs	r2, #1
 800195e:	705a      	strb	r2, [r3, #1]
 8001960:	e00d      	b.n	800197e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001962:	78fa      	ldrb	r2, [r7, #3]
 8001964:	4613      	mov	r3, r2
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	1a9b      	subs	r3, r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	4413      	add	r3, r2
 8001974:	3304      	adds	r3, #4
 8001976:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2200      	movs	r2, #0
 800197c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2201      	movs	r2, #1
 8001982:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001984:	78fb      	ldrb	r3, [r7, #3]
 8001986:	f003 030f 	and.w	r3, r3, #15
 800198a:	b2da      	uxtb	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001996:	2b01      	cmp	r3, #1
 8001998:	d101      	bne.n	800199e <HAL_PCD_EP_SetStall+0x82>
 800199a:	2302      	movs	r3, #2
 800199c:	e01e      	b.n	80019dc <HAL_PCD_EP_SetStall+0xc0>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2201      	movs	r2, #1
 80019a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68f9      	ldr	r1, [r7, #12]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f004 f97f 	bl	8005cb0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019b2:	78fb      	ldrb	r3, [r7, #3]
 80019b4:	f003 030f 	and.w	r3, r3, #15
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d10a      	bne.n	80019d2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6818      	ldr	r0, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	691b      	ldr	r3, [r3, #16]
 80019c4:	b2d9      	uxtb	r1, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80019cc:	461a      	mov	r2, r3
 80019ce:	f004 fa0d 	bl	8005dec <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	70fb      	strb	r3, [r7, #3]
 80019f0:	4613      	mov	r3, r2
 80019f2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80019fc:	78fb      	ldrb	r3, [r7, #3]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d107      	bne.n	8001a12 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001a02:	883b      	ldrh	r3, [r7, #0]
 8001a04:	0419      	lsls	r1, r3, #16
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	629a      	str	r2, [r3, #40]	; 0x28
 8001a10:	e028      	b.n	8001a64 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a18:	0c1b      	lsrs	r3, r3, #16
 8001a1a:	68ba      	ldr	r2, [r7, #8]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001a20:	2300      	movs	r3, #0
 8001a22:	73fb      	strb	r3, [r7, #15]
 8001a24:	e00d      	b.n	8001a42 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
 8001a2c:	3340      	adds	r3, #64	; 0x40
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	0c1b      	lsrs	r3, r3, #16
 8001a36:	68ba      	ldr	r2, [r7, #8]
 8001a38:	4413      	add	r3, r2
 8001a3a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	73fb      	strb	r3, [r7, #15]
 8001a42:	7bfa      	ldrb	r2, [r7, #15]
 8001a44:	78fb      	ldrb	r3, [r7, #3]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d3ec      	bcc.n	8001a26 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001a4c:	883b      	ldrh	r3, [r7, #0]
 8001a4e:	0418      	lsls	r0, r3, #16
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6819      	ldr	r1, [r3, #0]
 8001a54:	78fb      	ldrb	r3, [r7, #3]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	68ba      	ldr	r2, [r7, #8]
 8001a5a:	4302      	orrs	r2, r0
 8001a5c:	3340      	adds	r3, #64	; 0x40
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	887a      	ldrh	r2, [r7, #2]
 8001a84:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac6:	f043 0303 	orr.w	r3, r3, #3
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d101      	bne.n	8001af0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e0ca      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001af0:	4b67      	ldr	r3, [pc, #412]	; (8001c90 <HAL_RCC_ClockConfig+0x1b4>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 030f 	and.w	r3, r3, #15
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d90c      	bls.n	8001b18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001afe:	4b64      	ldr	r3, [pc, #400]	; (8001c90 <HAL_RCC_ClockConfig+0x1b4>)
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b06:	4b62      	ldr	r3, [pc, #392]	; (8001c90 <HAL_RCC_ClockConfig+0x1b4>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 030f 	and.w	r3, r3, #15
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d001      	beq.n	8001b18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e0b6      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d020      	beq.n	8001b66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d005      	beq.n	8001b3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b30:	4b58      	ldr	r3, [pc, #352]	; (8001c94 <HAL_RCC_ClockConfig+0x1b8>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	4a57      	ldr	r2, [pc, #348]	; (8001c94 <HAL_RCC_ClockConfig+0x1b8>)
 8001b36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0308 	and.w	r3, r3, #8
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d005      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b48:	4b52      	ldr	r3, [pc, #328]	; (8001c94 <HAL_RCC_ClockConfig+0x1b8>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	4a51      	ldr	r2, [pc, #324]	; (8001c94 <HAL_RCC_ClockConfig+0x1b8>)
 8001b4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b54:	4b4f      	ldr	r3, [pc, #316]	; (8001c94 <HAL_RCC_ClockConfig+0x1b8>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	494c      	ldr	r1, [pc, #304]	; (8001c94 <HAL_RCC_ClockConfig+0x1b8>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d044      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d107      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7a:	4b46      	ldr	r3, [pc, #280]	; (8001c94 <HAL_RCC_ClockConfig+0x1b8>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d119      	bne.n	8001bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e07d      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d003      	beq.n	8001b9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b96:	2b03      	cmp	r3, #3
 8001b98:	d107      	bne.n	8001baa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b9a:	4b3e      	ldr	r3, [pc, #248]	; (8001c94 <HAL_RCC_ClockConfig+0x1b8>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d109      	bne.n	8001bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e06d      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001baa:	4b3a      	ldr	r3, [pc, #232]	; (8001c94 <HAL_RCC_ClockConfig+0x1b8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e065      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bba:	4b36      	ldr	r3, [pc, #216]	; (8001c94 <HAL_RCC_ClockConfig+0x1b8>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f023 0203 	bic.w	r2, r3, #3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	4933      	ldr	r1, [pc, #204]	; (8001c94 <HAL_RCC_ClockConfig+0x1b8>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bcc:	f7fe fd0a 	bl	80005e4 <HAL_GetTick>
 8001bd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd2:	e00a      	b.n	8001bea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd4:	f7fe fd06 	bl	80005e4 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e04d      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bea:	4b2a      	ldr	r3, [pc, #168]	; (8001c94 <HAL_RCC_ClockConfig+0x1b8>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f003 020c 	and.w	r2, r3, #12
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d1eb      	bne.n	8001bd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bfc:	4b24      	ldr	r3, [pc, #144]	; (8001c90 <HAL_RCC_ClockConfig+0x1b4>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 030f 	and.w	r3, r3, #15
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d20c      	bcs.n	8001c24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0a:	4b21      	ldr	r3, [pc, #132]	; (8001c90 <HAL_RCC_ClockConfig+0x1b4>)
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	b2d2      	uxtb	r2, r2
 8001c10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c12:	4b1f      	ldr	r3, [pc, #124]	; (8001c90 <HAL_RCC_ClockConfig+0x1b4>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 030f 	and.w	r3, r3, #15
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d001      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e030      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d008      	beq.n	8001c42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c30:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <HAL_RCC_ClockConfig+0x1b8>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	4915      	ldr	r1, [pc, #84]	; (8001c94 <HAL_RCC_ClockConfig+0x1b8>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0308 	and.w	r3, r3, #8
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d009      	beq.n	8001c62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c4e:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <HAL_RCC_ClockConfig+0x1b8>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	490d      	ldr	r1, [pc, #52]	; (8001c94 <HAL_RCC_ClockConfig+0x1b8>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c62:	f000 f81d 	bl	8001ca0 <HAL_RCC_GetSysClockFreq>
 8001c66:	4601      	mov	r1, r0
 8001c68:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <HAL_RCC_ClockConfig+0x1b8>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	091b      	lsrs	r3, r3, #4
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	4a09      	ldr	r2, [pc, #36]	; (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001c74:	5cd3      	ldrb	r3, [r2, r3]
 8001c76:	fa21 f303 	lsr.w	r3, r1, r3
 8001c7a:	4a08      	ldr	r2, [pc, #32]	; (8001c9c <HAL_RCC_ClockConfig+0x1c0>)
 8001c7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c7e:	2000      	movs	r0, #0
 8001c80:	f7fe fc6c 	bl	800055c <HAL_InitTick>

  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40023c00 	.word	0x40023c00
 8001c94:	40023800 	.word	0x40023800
 8001c98:	080084ac 	.word	0x080084ac
 8001c9c:	20000118 	.word	0x20000118

08001ca0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	607b      	str	r3, [r7, #4]
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	2300      	movs	r3, #0
 8001cb0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cb6:	4b63      	ldr	r3, [pc, #396]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 030c 	and.w	r3, r3, #12
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	d007      	beq.n	8001cd2 <HAL_RCC_GetSysClockFreq+0x32>
 8001cc2:	2b08      	cmp	r3, #8
 8001cc4:	d008      	beq.n	8001cd8 <HAL_RCC_GetSysClockFreq+0x38>
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f040 80b4 	bne.w	8001e34 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ccc:	4b5e      	ldr	r3, [pc, #376]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001cce:	60bb      	str	r3, [r7, #8]
       break;
 8001cd0:	e0b3      	b.n	8001e3a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cd2:	4b5e      	ldr	r3, [pc, #376]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001cd4:	60bb      	str	r3, [r7, #8]
      break;
 8001cd6:	e0b0      	b.n	8001e3a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cd8:	4b5a      	ldr	r3, [pc, #360]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ce0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ce2:	4b58      	ldr	r3, [pc, #352]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d04a      	beq.n	8001d84 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cee:	4b55      	ldr	r3, [pc, #340]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	099b      	lsrs	r3, r3, #6
 8001cf4:	f04f 0400 	mov.w	r4, #0
 8001cf8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001cfc:	f04f 0200 	mov.w	r2, #0
 8001d00:	ea03 0501 	and.w	r5, r3, r1
 8001d04:	ea04 0602 	and.w	r6, r4, r2
 8001d08:	4629      	mov	r1, r5
 8001d0a:	4632      	mov	r2, r6
 8001d0c:	f04f 0300 	mov.w	r3, #0
 8001d10:	f04f 0400 	mov.w	r4, #0
 8001d14:	0154      	lsls	r4, r2, #5
 8001d16:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d1a:	014b      	lsls	r3, r1, #5
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4622      	mov	r2, r4
 8001d20:	1b49      	subs	r1, r1, r5
 8001d22:	eb62 0206 	sbc.w	r2, r2, r6
 8001d26:	f04f 0300 	mov.w	r3, #0
 8001d2a:	f04f 0400 	mov.w	r4, #0
 8001d2e:	0194      	lsls	r4, r2, #6
 8001d30:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001d34:	018b      	lsls	r3, r1, #6
 8001d36:	1a5b      	subs	r3, r3, r1
 8001d38:	eb64 0402 	sbc.w	r4, r4, r2
 8001d3c:	f04f 0100 	mov.w	r1, #0
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	00e2      	lsls	r2, r4, #3
 8001d46:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001d4a:	00d9      	lsls	r1, r3, #3
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	4614      	mov	r4, r2
 8001d50:	195b      	adds	r3, r3, r5
 8001d52:	eb44 0406 	adc.w	r4, r4, r6
 8001d56:	f04f 0100 	mov.w	r1, #0
 8001d5a:	f04f 0200 	mov.w	r2, #0
 8001d5e:	0262      	lsls	r2, r4, #9
 8001d60:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001d64:	0259      	lsls	r1, r3, #9
 8001d66:	460b      	mov	r3, r1
 8001d68:	4614      	mov	r4, r2
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	4621      	mov	r1, r4
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f04f 0400 	mov.w	r4, #0
 8001d74:	461a      	mov	r2, r3
 8001d76:	4623      	mov	r3, r4
 8001d78:	f7fe fa4e 	bl	8000218 <__aeabi_uldivmod>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	460c      	mov	r4, r1
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	e049      	b.n	8001e18 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d84:	4b2f      	ldr	r3, [pc, #188]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	099b      	lsrs	r3, r3, #6
 8001d8a:	f04f 0400 	mov.w	r4, #0
 8001d8e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d92:	f04f 0200 	mov.w	r2, #0
 8001d96:	ea03 0501 	and.w	r5, r3, r1
 8001d9a:	ea04 0602 	and.w	r6, r4, r2
 8001d9e:	4629      	mov	r1, r5
 8001da0:	4632      	mov	r2, r6
 8001da2:	f04f 0300 	mov.w	r3, #0
 8001da6:	f04f 0400 	mov.w	r4, #0
 8001daa:	0154      	lsls	r4, r2, #5
 8001dac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001db0:	014b      	lsls	r3, r1, #5
 8001db2:	4619      	mov	r1, r3
 8001db4:	4622      	mov	r2, r4
 8001db6:	1b49      	subs	r1, r1, r5
 8001db8:	eb62 0206 	sbc.w	r2, r2, r6
 8001dbc:	f04f 0300 	mov.w	r3, #0
 8001dc0:	f04f 0400 	mov.w	r4, #0
 8001dc4:	0194      	lsls	r4, r2, #6
 8001dc6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001dca:	018b      	lsls	r3, r1, #6
 8001dcc:	1a5b      	subs	r3, r3, r1
 8001dce:	eb64 0402 	sbc.w	r4, r4, r2
 8001dd2:	f04f 0100 	mov.w	r1, #0
 8001dd6:	f04f 0200 	mov.w	r2, #0
 8001dda:	00e2      	lsls	r2, r4, #3
 8001ddc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001de0:	00d9      	lsls	r1, r3, #3
 8001de2:	460b      	mov	r3, r1
 8001de4:	4614      	mov	r4, r2
 8001de6:	195b      	adds	r3, r3, r5
 8001de8:	eb44 0406 	adc.w	r4, r4, r6
 8001dec:	f04f 0100 	mov.w	r1, #0
 8001df0:	f04f 0200 	mov.w	r2, #0
 8001df4:	02a2      	lsls	r2, r4, #10
 8001df6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001dfa:	0299      	lsls	r1, r3, #10
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	4614      	mov	r4, r2
 8001e00:	4618      	mov	r0, r3
 8001e02:	4621      	mov	r1, r4
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f04f 0400 	mov.w	r4, #0
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	4623      	mov	r3, r4
 8001e0e:	f7fe fa03 	bl	8000218 <__aeabi_uldivmod>
 8001e12:	4603      	mov	r3, r0
 8001e14:	460c      	mov	r4, r1
 8001e16:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e18:	4b0a      	ldr	r3, [pc, #40]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	0c1b      	lsrs	r3, r3, #16
 8001e1e:	f003 0303 	and.w	r3, r3, #3
 8001e22:	3301      	adds	r3, #1
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e30:	60bb      	str	r3, [r7, #8]
      break;
 8001e32:	e002      	b.n	8001e3a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e34:	4b04      	ldr	r3, [pc, #16]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001e36:	60bb      	str	r3, [r7, #8]
      break;
 8001e38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e3a:	68bb      	ldr	r3, [r7, #8]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e44:	40023800 	.word	0x40023800
 8001e48:	00f42400 	.word	0x00f42400
 8001e4c:	007a1200 	.word	0x007a1200

08001e50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e54:	4b03      	ldr	r3, [pc, #12]	; (8001e64 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e56:	681b      	ldr	r3, [r3, #0]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	20000118 	.word	0x20000118

08001e68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e6c:	f7ff fff0 	bl	8001e50 <HAL_RCC_GetHCLKFreq>
 8001e70:	4601      	mov	r1, r0
 8001e72:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	0a9b      	lsrs	r3, r3, #10
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	4a03      	ldr	r2, [pc, #12]	; (8001e8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e7e:	5cd3      	ldrb	r3, [r2, r3]
 8001e80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	080084bc 	.word	0x080084bc

08001e90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e94:	f7ff ffdc 	bl	8001e50 <HAL_RCC_GetHCLKFreq>
 8001e98:	4601      	mov	r1, r0
 8001e9a:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	0b5b      	lsrs	r3, r3, #13
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	4a03      	ldr	r2, [pc, #12]	; (8001eb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ea6:	5cd3      	ldrb	r3, [r2, r3]
 8001ea8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	080084bc 	.word	0x080084bc

08001eb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b088      	sub	sp, #32
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d010      	beq.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001edc:	4b7a      	ldr	r3, [pc, #488]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001ede:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ee2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	4977      	ldr	r1, [pc, #476]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8001efa:	2301      	movs	r3, #1
 8001efc:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d010      	beq.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001f0a:	4b6f      	ldr	r3, [pc, #444]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001f0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f10:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	496b      	ldr	r1, [pc, #428]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d022      	beq.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8001f38:	4b63      	ldr	r3, [pc, #396]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001f3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f46:	4960      	ldr	r1, [pc, #384]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8001f56:	2301      	movs	r3, #1
 8001f58:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f62:	d10c      	bne.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8001f64:	4b58      	ldr	r3, [pc, #352]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001f66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f6a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	3b01      	subs	r3, #1
 8001f74:	021b      	lsls	r3, r3, #8
 8001f76:	4954      	ldr	r1, [pc, #336]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d022      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8001f8a:	4b4f      	ldr	r3, [pc, #316]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001f8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f98:	494b      	ldr	r1, [pc, #300]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001fb4:	d10c      	bne.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8001fb6:	4b44      	ldr	r3, [pc, #272]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001fb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fbc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	021b      	lsls	r3, r3, #8
 8001fc8:	493f      	ldr	r1, [pc, #252]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0308 	and.w	r3, r3, #8
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 808a 	beq.w	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	4b39      	ldr	r3, [pc, #228]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	4a38      	ldr	r2, [pc, #224]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fec:	6413      	str	r3, [r2, #64]	; 0x40
 8001fee:	4b36      	ldr	r3, [pc, #216]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001ffa:	4b34      	ldr	r3, [pc, #208]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a33      	ldr	r2, [pc, #204]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8002000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002004:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002006:	f7fe faed 	bl	80005e4 <HAL_GetTick>
 800200a:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800200c:	e008      	b.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800200e:	f7fe fae9 	bl	80005e4 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e1d1      	b.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002020:	4b2a      	ldr	r3, [pc, #168]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0f0      	beq.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800202c:	4b26      	ldr	r3, [pc, #152]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800202e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002030:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002034:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d02f      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002040:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002044:	697a      	ldr	r2, [r7, #20]
 8002046:	429a      	cmp	r2, r3
 8002048:	d028      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800204a:	4b1f      	ldr	r3, [pc, #124]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800204c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800204e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002052:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002054:	4b1e      	ldr	r3, [pc, #120]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002056:	2201      	movs	r2, #1
 8002058:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800205a:	4b1d      	ldr	r3, [pc, #116]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002060:	4a19      	ldr	r2, [pc, #100]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002066:	4b18      	ldr	r3, [pc, #96]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b01      	cmp	r3, #1
 8002070:	d114      	bne.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002072:	f7fe fab7 	bl	80005e4 <HAL_GetTick>
 8002076:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002078:	e00a      	b.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800207a:	f7fe fab3 	bl	80005e4 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	f241 3288 	movw	r2, #5000	; 0x1388
 8002088:	4293      	cmp	r3, r2
 800208a:	d901      	bls.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e199      	b.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002090:	4b0d      	ldr	r3, [pc, #52]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0ee      	beq.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80020a8:	d114      	bne.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80020aa:	4b07      	ldr	r3, [pc, #28]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80020ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020be:	4902      	ldr	r1, [pc, #8]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	608b      	str	r3, [r1, #8]
 80020c4:	e00c      	b.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x228>
 80020c6:	bf00      	nop
 80020c8:	40023800 	.word	0x40023800
 80020cc:	40007000 	.word	0x40007000
 80020d0:	42470e40 	.word	0x42470e40
 80020d4:	4b89      	ldr	r3, [pc, #548]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	4a88      	ldr	r2, [pc, #544]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80020da:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80020de:	6093      	str	r3, [r2, #8]
 80020e0:	4b86      	ldr	r3, [pc, #536]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80020e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ec:	4983      	ldr	r1, [pc, #524]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0304 	and.w	r3, r3, #4
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d004      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8002104:	4b7e      	ldr	r3, [pc, #504]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8002106:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0310 	and.w	r3, r3, #16
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00a      	beq.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002114:	4b79      	ldr	r3, [pc, #484]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002116:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800211a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002122:	4976      	ldr	r1, [pc, #472]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002124:	4313      	orrs	r3, r2
 8002126:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0320 	and.w	r3, r3, #32
 8002132:	2b00      	cmp	r3, #0
 8002134:	d011      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002136:	4b71      	ldr	r3, [pc, #452]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002138:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800213c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002144:	496d      	ldr	r1, [pc, #436]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002146:	4313      	orrs	r3, r2
 8002148:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002150:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002154:	d101      	bne.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8002156:	2301      	movs	r3, #1
 8002158:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00a      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002166:	4b65      	ldr	r3, [pc, #404]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002168:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800216c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002174:	4961      	ldr	r1, [pc, #388]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002176:	4313      	orrs	r3, r2
 8002178:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d004      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2b80      	cmp	r3, #128	; 0x80
 8002188:	f040 80c6 	bne.w	8002318 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800218c:	4b5d      	ldr	r3, [pc, #372]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002192:	f7fe fa27 	bl	80005e4 <HAL_GetTick>
 8002196:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002198:	e008      	b.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800219a:	f7fe fa23 	bl	80005e4 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d901      	bls.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e10b      	b.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80021ac:	4b53      	ldr	r3, [pc, #332]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1f0      	bne.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 80021b8:	4a53      	ldr	r2, [pc, #332]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021be:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d003      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	69db      	ldr	r3, [r3, #28]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d023      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d003      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d019      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d004      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021fc:	d00e      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002206:	2b00      	cmp	r3, #0
 8002208:	d019      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220e:	2b00      	cmp	r3, #0
 8002210:	d115      	bne.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x386>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800221a:	d110      	bne.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	019b      	lsls	r3, r3, #6
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	061b      	lsls	r3, r3, #24
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	071b      	lsls	r3, r3, #28
 8002236:	4931      	ldr	r1, [pc, #196]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002238:	4313      	orrs	r3, r2
 800223a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800224e:	2b00      	cmp	r3, #0
 8002250:	d009      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 800225a:	2b00      	cmp	r3, #0
 800225c:	d026      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002262:	2b00      	cmp	r3, #0
 8002264:	d122      	bne.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002266:	4b25      	ldr	r3, [pc, #148]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002268:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800226c:	0e1b      	lsrs	r3, r3, #24
 800226e:	f003 030f 	and.w	r3, r3, #15
 8002272:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685a      	ldr	r2, [r3, #4]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	019b      	lsls	r3, r3, #6
 800227e:	431a      	orrs	r2, r3
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	061b      	lsls	r3, r3, #24
 8002284:	431a      	orrs	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	071b      	lsls	r3, r3, #28
 800228c:	491b      	ldr	r1, [pc, #108]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800228e:	4313      	orrs	r3, r2
 8002290:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8002294:	4b19      	ldr	r3, [pc, #100]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002296:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800229a:	f023 021f 	bic.w	r2, r3, #31
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	4915      	ldr	r1, [pc, #84]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d010      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	019b      	lsls	r3, r3, #6
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	061b      	lsls	r3, r3, #24
 80022ca:	431a      	orrs	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	071b      	lsls	r3, r3, #28
 80022d2:	490a      	ldr	r1, [pc, #40]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80022da:	4b0a      	ldr	r3, [pc, #40]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80022dc:	2201      	movs	r2, #1
 80022de:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80022e0:	f7fe f980 	bl	80005e4 <HAL_GetTick>
 80022e4:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80022e6:	e011      	b.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80022e8:	f7fe f97c 	bl	80005e4 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d90a      	bls.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e064      	b.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80022fa:	bf00      	nop
 80022fc:	40023800 	.word	0x40023800
 8002300:	424711e0 	.word	0x424711e0
 8002304:	42470068 	.word	0x42470068
 8002308:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800230c:	4b2f      	ldr	r3, [pc, #188]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0e7      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00a      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002324:	4b29      	ldr	r3, [pc, #164]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002326:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800232a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002332:	4926      	ldr	r1, [pc, #152]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002334:	4313      	orrs	r3, r2
 8002336:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00a      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002346:	4b21      	ldr	r3, [pc, #132]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002348:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800234c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002354:	491d      	ldr	r1, [pc, #116]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002356:	4313      	orrs	r3, r2
 8002358:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00a      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8002368:	4b18      	ldr	r3, [pc, #96]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800236a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800236e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002376:	4915      	ldr	r1, [pc, #84]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002378:	4313      	orrs	r3, r2
 800237a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00a      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 800238a:	4b10      	ldr	r3, [pc, #64]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800238c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002390:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002398:	490c      	ldr	r1, [pc, #48]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800239a:	4313      	orrs	r3, r2
 800239c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00a      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023ac:	4b07      	ldr	r3, [pc, #28]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80023ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023b2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ba:	4904      	ldr	r1, [pc, #16]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3720      	adds	r7, #32
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40023800 	.word	0x40023800

080023d0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023d8:	2300      	movs	r3, #0
 80023da:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d075      	beq.n	80024d4 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80023e8:	4ba2      	ldr	r3, [pc, #648]	; (8002674 <HAL_RCC_OscConfig+0x2a4>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f003 030c 	and.w	r3, r3, #12
 80023f0:	2b04      	cmp	r3, #4
 80023f2:	d00c      	beq.n	800240e <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023f4:	4b9f      	ldr	r3, [pc, #636]	; (8002674 <HAL_RCC_OscConfig+0x2a4>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80023fc:	2b08      	cmp	r3, #8
 80023fe:	d112      	bne.n	8002426 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002400:	4b9c      	ldr	r3, [pc, #624]	; (8002674 <HAL_RCC_OscConfig+0x2a4>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002408:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800240c:	d10b      	bne.n	8002426 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800240e:	4b99      	ldr	r3, [pc, #612]	; (8002674 <HAL_RCC_OscConfig+0x2a4>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d05b      	beq.n	80024d2 <HAL_RCC_OscConfig+0x102>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d157      	bne.n	80024d2 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e20b      	b.n	800283e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800242e:	d106      	bne.n	800243e <HAL_RCC_OscConfig+0x6e>
 8002430:	4b90      	ldr	r3, [pc, #576]	; (8002674 <HAL_RCC_OscConfig+0x2a4>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a8f      	ldr	r2, [pc, #572]	; (8002674 <HAL_RCC_OscConfig+0x2a4>)
 8002436:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800243a:	6013      	str	r3, [r2, #0]
 800243c:	e01d      	b.n	800247a <HAL_RCC_OscConfig+0xaa>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002446:	d10c      	bne.n	8002462 <HAL_RCC_OscConfig+0x92>
 8002448:	4b8a      	ldr	r3, [pc, #552]	; (8002674 <HAL_RCC_OscConfig+0x2a4>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a89      	ldr	r2, [pc, #548]	; (8002674 <HAL_RCC_OscConfig+0x2a4>)
 800244e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002452:	6013      	str	r3, [r2, #0]
 8002454:	4b87      	ldr	r3, [pc, #540]	; (8002674 <HAL_RCC_OscConfig+0x2a4>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a86      	ldr	r2, [pc, #536]	; (8002674 <HAL_RCC_OscConfig+0x2a4>)
 800245a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800245e:	6013      	str	r3, [r2, #0]
 8002460:	e00b      	b.n	800247a <HAL_RCC_OscConfig+0xaa>
 8002462:	4b84      	ldr	r3, [pc, #528]	; (8002674 <HAL_RCC_OscConfig+0x2a4>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a83      	ldr	r2, [pc, #524]	; (8002674 <HAL_RCC_OscConfig+0x2a4>)
 8002468:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	4b81      	ldr	r3, [pc, #516]	; (8002674 <HAL_RCC_OscConfig+0x2a4>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a80      	ldr	r2, [pc, #512]	; (8002674 <HAL_RCC_OscConfig+0x2a4>)
 8002474:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002478:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d013      	beq.n	80024aa <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002482:	f7fe f8af 	bl	80005e4 <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800248a:	f7fe f8ab 	bl	80005e4 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b64      	cmp	r3, #100	; 0x64
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e1d0      	b.n	800283e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249c:	4b75      	ldr	r3, [pc, #468]	; (8002674 <HAL_RCC_OscConfig+0x2a4>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d0f0      	beq.n	800248a <HAL_RCC_OscConfig+0xba>
 80024a8:	e014      	b.n	80024d4 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024aa:	f7fe f89b 	bl	80005e4 <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024b0:	e008      	b.n	80024c4 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024b2:	f7fe f897 	bl	80005e4 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b64      	cmp	r3, #100	; 0x64
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e1bc      	b.n	800283e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024c4:	4b6b      	ldr	r3, [pc, #428]	; (8002674 <HAL_RCC_OscConfig+0x2a4>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1f0      	bne.n	80024b2 <HAL_RCC_OscConfig+0xe2>
 80024d0:	e000      	b.n	80024d4 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d063      	beq.n	80025a8 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80024e0:	4b64      	ldr	r3, [pc, #400]	; (8002674 <HAL_RCC_OscConfig+0x2a4>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 030c 	and.w	r3, r3, #12
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00b      	beq.n	8002504 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ec:	4b61      	ldr	r3, [pc, #388]	; (8002674 <HAL_RCC_OscConfig+0x2a4>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80024f4:	2b08      	cmp	r3, #8
 80024f6:	d11c      	bne.n	8002532 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024f8:	4b5e      	ldr	r3, [pc, #376]	; (8002674 <HAL_RCC_OscConfig+0x2a4>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d116      	bne.n	8002532 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002504:	4b5b      	ldr	r3, [pc, #364]	; (8002674 <HAL_RCC_OscConfig+0x2a4>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d005      	beq.n	800251c <HAL_RCC_OscConfig+0x14c>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d001      	beq.n	800251c <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e190      	b.n	800283e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800251c:	4b55      	ldr	r3, [pc, #340]	; (8002674 <HAL_RCC_OscConfig+0x2a4>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	4952      	ldr	r1, [pc, #328]	; (8002674 <HAL_RCC_OscConfig+0x2a4>)
 800252c:	4313      	orrs	r3, r2
 800252e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002530:	e03a      	b.n	80025a8 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d020      	beq.n	800257c <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800253a:	4b4f      	ldr	r3, [pc, #316]	; (8002678 <HAL_RCC_OscConfig+0x2a8>)
 800253c:	2201      	movs	r2, #1
 800253e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002540:	f7fe f850 	bl	80005e4 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002548:	f7fe f84c 	bl	80005e4 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e171      	b.n	800283e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800255a:	4b46      	ldr	r3, [pc, #280]	; (8002674 <HAL_RCC_OscConfig+0x2a4>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d0f0      	beq.n	8002548 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002566:	4b43      	ldr	r3, [pc, #268]	; (8002674 <HAL_RCC_OscConfig+0x2a4>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	493f      	ldr	r1, [pc, #252]	; (8002674 <HAL_RCC_OscConfig+0x2a4>)
 8002576:	4313      	orrs	r3, r2
 8002578:	600b      	str	r3, [r1, #0]
 800257a:	e015      	b.n	80025a8 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800257c:	4b3e      	ldr	r3, [pc, #248]	; (8002678 <HAL_RCC_OscConfig+0x2a8>)
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002582:	f7fe f82f 	bl	80005e4 <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800258a:	f7fe f82b 	bl	80005e4 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e150      	b.n	800283e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800259c:	4b35      	ldr	r3, [pc, #212]	; (8002674 <HAL_RCC_OscConfig+0x2a4>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1f0      	bne.n	800258a <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0308 	and.w	r3, r3, #8
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d030      	beq.n	8002616 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d016      	beq.n	80025ea <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025bc:	4b2f      	ldr	r3, [pc, #188]	; (800267c <HAL_RCC_OscConfig+0x2ac>)
 80025be:	2201      	movs	r2, #1
 80025c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c2:	f7fe f80f 	bl	80005e4 <HAL_GetTick>
 80025c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025c8:	e008      	b.n	80025dc <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ca:	f7fe f80b 	bl	80005e4 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e130      	b.n	800283e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025dc:	4b25      	ldr	r3, [pc, #148]	; (8002674 <HAL_RCC_OscConfig+0x2a4>)
 80025de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d0f0      	beq.n	80025ca <HAL_RCC_OscConfig+0x1fa>
 80025e8:	e015      	b.n	8002616 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025ea:	4b24      	ldr	r3, [pc, #144]	; (800267c <HAL_RCC_OscConfig+0x2ac>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f0:	f7fd fff8 	bl	80005e4 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025f8:	f7fd fff4 	bl	80005e4 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e119      	b.n	800283e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800260a:	4b1a      	ldr	r3, [pc, #104]	; (8002674 <HAL_RCC_OscConfig+0x2a4>)
 800260c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1f0      	bne.n	80025f8 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0304 	and.w	r3, r3, #4
 800261e:	2b00      	cmp	r3, #0
 8002620:	f000 809f 	beq.w	8002762 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002624:	2300      	movs	r3, #0
 8002626:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002628:	4b12      	ldr	r3, [pc, #72]	; (8002674 <HAL_RCC_OscConfig+0x2a4>)
 800262a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d10f      	bne.n	8002654 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002634:	2300      	movs	r3, #0
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	4b0e      	ldr	r3, [pc, #56]	; (8002674 <HAL_RCC_OscConfig+0x2a4>)
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	4a0d      	ldr	r2, [pc, #52]	; (8002674 <HAL_RCC_OscConfig+0x2a4>)
 800263e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002642:	6413      	str	r3, [r2, #64]	; 0x40
 8002644:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <HAL_RCC_OscConfig+0x2a4>)
 8002646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002650:	2301      	movs	r3, #1
 8002652:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002654:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <HAL_RCC_OscConfig+0x2b0>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265c:	2b00      	cmp	r3, #0
 800265e:	d120      	bne.n	80026a2 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002660:	4b07      	ldr	r3, [pc, #28]	; (8002680 <HAL_RCC_OscConfig+0x2b0>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a06      	ldr	r2, [pc, #24]	; (8002680 <HAL_RCC_OscConfig+0x2b0>)
 8002666:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800266a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800266c:	f7fd ffba 	bl	80005e4 <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002672:	e010      	b.n	8002696 <HAL_RCC_OscConfig+0x2c6>
 8002674:	40023800 	.word	0x40023800
 8002678:	42470000 	.word	0x42470000
 800267c:	42470e80 	.word	0x42470e80
 8002680:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002684:	f7fd ffae 	bl	80005e4 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e0d3      	b.n	800283e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002696:	4b6c      	ldr	r3, [pc, #432]	; (8002848 <HAL_RCC_OscConfig+0x478>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f0      	beq.n	8002684 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d106      	bne.n	80026b8 <HAL_RCC_OscConfig+0x2e8>
 80026aa:	4b68      	ldr	r3, [pc, #416]	; (800284c <HAL_RCC_OscConfig+0x47c>)
 80026ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ae:	4a67      	ldr	r2, [pc, #412]	; (800284c <HAL_RCC_OscConfig+0x47c>)
 80026b0:	f043 0301 	orr.w	r3, r3, #1
 80026b4:	6713      	str	r3, [r2, #112]	; 0x70
 80026b6:	e01c      	b.n	80026f2 <HAL_RCC_OscConfig+0x322>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	2b05      	cmp	r3, #5
 80026be:	d10c      	bne.n	80026da <HAL_RCC_OscConfig+0x30a>
 80026c0:	4b62      	ldr	r3, [pc, #392]	; (800284c <HAL_RCC_OscConfig+0x47c>)
 80026c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c4:	4a61      	ldr	r2, [pc, #388]	; (800284c <HAL_RCC_OscConfig+0x47c>)
 80026c6:	f043 0304 	orr.w	r3, r3, #4
 80026ca:	6713      	str	r3, [r2, #112]	; 0x70
 80026cc:	4b5f      	ldr	r3, [pc, #380]	; (800284c <HAL_RCC_OscConfig+0x47c>)
 80026ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d0:	4a5e      	ldr	r2, [pc, #376]	; (800284c <HAL_RCC_OscConfig+0x47c>)
 80026d2:	f043 0301 	orr.w	r3, r3, #1
 80026d6:	6713      	str	r3, [r2, #112]	; 0x70
 80026d8:	e00b      	b.n	80026f2 <HAL_RCC_OscConfig+0x322>
 80026da:	4b5c      	ldr	r3, [pc, #368]	; (800284c <HAL_RCC_OscConfig+0x47c>)
 80026dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026de:	4a5b      	ldr	r2, [pc, #364]	; (800284c <HAL_RCC_OscConfig+0x47c>)
 80026e0:	f023 0301 	bic.w	r3, r3, #1
 80026e4:	6713      	str	r3, [r2, #112]	; 0x70
 80026e6:	4b59      	ldr	r3, [pc, #356]	; (800284c <HAL_RCC_OscConfig+0x47c>)
 80026e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ea:	4a58      	ldr	r2, [pc, #352]	; (800284c <HAL_RCC_OscConfig+0x47c>)
 80026ec:	f023 0304 	bic.w	r3, r3, #4
 80026f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d015      	beq.n	8002726 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026fa:	f7fd ff73 	bl	80005e4 <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002700:	e00a      	b.n	8002718 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002702:	f7fd ff6f 	bl	80005e4 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002710:	4293      	cmp	r3, r2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e092      	b.n	800283e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002718:	4b4c      	ldr	r3, [pc, #304]	; (800284c <HAL_RCC_OscConfig+0x47c>)
 800271a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0ee      	beq.n	8002702 <HAL_RCC_OscConfig+0x332>
 8002724:	e014      	b.n	8002750 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002726:	f7fd ff5d 	bl	80005e4 <HAL_GetTick>
 800272a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800272c:	e00a      	b.n	8002744 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800272e:	f7fd ff59 	bl	80005e4 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	f241 3288 	movw	r2, #5000	; 0x1388
 800273c:	4293      	cmp	r3, r2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e07c      	b.n	800283e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002744:	4b41      	ldr	r3, [pc, #260]	; (800284c <HAL_RCC_OscConfig+0x47c>)
 8002746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1ee      	bne.n	800272e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002750:	7dfb      	ldrb	r3, [r7, #23]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d105      	bne.n	8002762 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002756:	4b3d      	ldr	r3, [pc, #244]	; (800284c <HAL_RCC_OscConfig+0x47c>)
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	4a3c      	ldr	r2, [pc, #240]	; (800284c <HAL_RCC_OscConfig+0x47c>)
 800275c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002760:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d068      	beq.n	800283c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800276a:	4b38      	ldr	r3, [pc, #224]	; (800284c <HAL_RCC_OscConfig+0x47c>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 030c 	and.w	r3, r3, #12
 8002772:	2b08      	cmp	r3, #8
 8002774:	d060      	beq.n	8002838 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	2b02      	cmp	r3, #2
 800277c:	d145      	bne.n	800280a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800277e:	4b34      	ldr	r3, [pc, #208]	; (8002850 <HAL_RCC_OscConfig+0x480>)
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002784:	f7fd ff2e 	bl	80005e4 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800278c:	f7fd ff2a 	bl	80005e4 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e04f      	b.n	800283e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800279e:	4b2b      	ldr	r3, [pc, #172]	; (800284c <HAL_RCC_OscConfig+0x47c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1f0      	bne.n	800278c <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69da      	ldr	r2, [r3, #28]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	431a      	orrs	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b8:	019b      	lsls	r3, r3, #6
 80027ba:	431a      	orrs	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c0:	085b      	lsrs	r3, r3, #1
 80027c2:	3b01      	subs	r3, #1
 80027c4:	041b      	lsls	r3, r3, #16
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027cc:	061b      	lsls	r3, r3, #24
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d4:	071b      	lsls	r3, r3, #28
 80027d6:	491d      	ldr	r1, [pc, #116]	; (800284c <HAL_RCC_OscConfig+0x47c>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027dc:	4b1c      	ldr	r3, [pc, #112]	; (8002850 <HAL_RCC_OscConfig+0x480>)
 80027de:	2201      	movs	r2, #1
 80027e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e2:	f7fd feff 	bl	80005e4 <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ea:	f7fd fefb 	bl	80005e4 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e020      	b.n	800283e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027fc:	4b13      	ldr	r3, [pc, #76]	; (800284c <HAL_RCC_OscConfig+0x47c>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0f0      	beq.n	80027ea <HAL_RCC_OscConfig+0x41a>
 8002808:	e018      	b.n	800283c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800280a:	4b11      	ldr	r3, [pc, #68]	; (8002850 <HAL_RCC_OscConfig+0x480>)
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002810:	f7fd fee8 	bl	80005e4 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002818:	f7fd fee4 	bl	80005e4 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e009      	b.n	800283e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800282a:	4b08      	ldr	r3, [pc, #32]	; (800284c <HAL_RCC_OscConfig+0x47c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1f0      	bne.n	8002818 <HAL_RCC_OscConfig+0x448>
 8002836:	e001      	b.n	800283c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e000      	b.n	800283e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40007000 	.word	0x40007000
 800284c:	40023800 	.word	0x40023800
 8002850:	42470060 	.word	0x42470060

08002854 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e01d      	b.n	80028a2 <HAL_SD_Init+0x4e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d105      	bne.n	800287e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f004 ff3b 	bl	80076f4 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2203      	movs	r2, #3
 8002882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f810 	bl	80028ac <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
	...

080028ac <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80028ac:	b5b0      	push	{r4, r5, r7, lr}
 80028ae:	b08e      	sub	sp, #56	; 0x38
 80028b0:	af04      	add	r7, sp, #16
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80028b4:	2300      	movs	r3, #0
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80028b8:	2300      	movs	r3, #0
 80028ba:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80028bc:	2300      	movs	r3, #0
 80028be:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80028c0:	2300      	movs	r3, #0
 80028c2:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80028c4:	2300      	movs	r3, #0
 80028c6:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80028c8:	2300      	movs	r3, #0
 80028ca:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80028cc:	2376      	movs	r3, #118	; 0x76
 80028ce:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681d      	ldr	r5, [r3, #0]
 80028d4:	466c      	mov	r4, sp
 80028d6:	f107 0318 	add.w	r3, r7, #24
 80028da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80028de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80028e2:	f107 030c 	add.w	r3, r7, #12
 80028e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028e8:	4628      	mov	r0, r5
 80028ea:	f001 fd2f 	bl	800434c <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd); 
 80028ee:	4b1c      	ldr	r3, [pc, #112]	; (8002960 <HAL_SD_InitCard+0xb4>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f001 fd70 	bl	80043de <SDIO_PowerState_ON>
  
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80028fe:	4b18      	ldr	r3, [pc, #96]	; (8002960 <HAL_SD_InitCard+0xb4>)
 8002900:	2201      	movs	r2, #1
 8002902:	601a      	str	r2, [r3, #0]
  
  /* Required power up waiting time before starting the SD initialization 
  sequence */
  HAL_Delay(2U);
 8002904:	2002      	movs	r0, #2
 8002906:	f7fd fe79 	bl	80005fc <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 fee6 	bl	80036dc <SD_PowerON>
 8002910:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00b      	beq.n	8002930 <HAL_SD_InitCard+0x84>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	431a      	orrs	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e013      	b.n	8002958 <HAL_SD_InitCard+0xac>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 fe0a 	bl	800354a <SD_InitCard>
 8002936:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00b      	beq.n	8002956 <HAL_SD_InitCard+0xaa>
  {
    hsd->State = HAL_SD_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	431a      	orrs	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e000      	b.n	8002958 <HAL_SD_InitCard+0xac>
  }

  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3728      	adds	r7, #40	; 0x28
 800295c:	46bd      	mov	sp, r7
 800295e:	bdb0      	pop	{r4, r5, r7, pc}
 8002960:	422580a0 	.word	0x422580a0

08002964 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002964:	b590      	push	{r4, r7, lr}
 8002966:	b08f      	sub	sp, #60	; 0x3c
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
 8002970:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002972:	2300      	movs	r3, #0
 8002974:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 8002976:	f7fd fe35 	bl	80005e4 <HAL_GetTick>
 800297a:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0U, *tempbuff = (uint32_t *)pData;
 800297c:	2300      	movs	r3, #0
 800297e:	633b      	str	r3, [r7, #48]	; 0x30
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d107      	bne.n	800299a <HAL_SD_ReadBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e176      	b.n	8002c88 <HAL_SD_ReadBlocks+0x324>
  }
 
  if(hsd->State == HAL_SD_STATE_READY)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	f040 8169 	bne.w	8002c7a <HAL_SD_ReadBlocks+0x316>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	441a      	add	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d907      	bls.n	80029cc <HAL_SD_ReadBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e15d      	b.n	8002c88 <HAL_SD_ReadBlocks+0x324>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2203      	movs	r2, #3
 80029d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2200      	movs	r2, #0
 80029da:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d002      	beq.n	80029ea <HAL_SD_ReadBlocks+0x86>
    {
      BlockAdd *= 512U;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	025b      	lsls	r3, r3, #9
 80029e8:	607b      	str	r3, [r7, #4]
    }
      
    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029f2:	4618      	mov	r0, r3
 80029f4:	f001 fd87 	bl	8004506 <SDMMC_CmdBlockLength>
 80029f8:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 80029fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d010      	beq.n	8002a22 <HAL_SD_ReadBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);      
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002a08:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a10:	431a      	orrs	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e132      	b.n	8002c88 <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002a22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a26:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	025b      	lsls	r3, r3, #9
 8002a2c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002a2e:	2390      	movs	r3, #144	; 0x90
 8002a30:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002a32:	2302      	movs	r3, #2
 8002a34:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002a36:	2300      	movs	r3, #0
 8002a38:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	627b      	str	r3, [r7, #36]	; 0x24
    SDIO_ConfigData(hsd->Instance, &config);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f107 0210 	add.w	r2, r7, #16
 8002a46:	4611      	mov	r1, r2
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f001 fd30 	bl	80044ae <SDIO_ConfigData>
    
    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d90a      	bls.n	8002a6a <HAL_SD_ReadBlocks+0x106>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2202      	movs	r2, #2
 8002a58:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f001 fd98 	bl	8004596 <SDMMC_CmdReadMultiBlock>
 8002a66:	6378      	str	r0, [r7, #52]	; 0x34
 8002a68:	e009      	b.n	8002a7e <HAL_SD_ReadBlocks+0x11a>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6879      	ldr	r1, [r7, #4]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f001 fd69 	bl	800454e <SDMMC_CmdReadSingleBlock>
 8002a7c:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d04a      	beq.n	8002b1a <HAL_SD_ReadBlocks+0x1b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002a8c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a94:	431a      	orrs	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e0f0      	b.n	8002c88 <HAL_SD_ReadBlocks+0x324>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d016      	beq.n	8002ae2 <HAL_SD_ReadBlocks+0x17e>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	633b      	str	r3, [r7, #48]	; 0x30
 8002ab8:	e00d      	b.n	8002ad6 <HAL_SD_ReadBlocks+0x172>
        {
          *(tempbuff + count) = SDIO_ReadFIFO(hsd->Instance);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6819      	ldr	r1, [r3, #0]
 8002abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ac4:	18d4      	adds	r4, r2, r3
 8002ac6:	4608      	mov	r0, r1
 8002ac8:	f001 fc6b 	bl	80043a2 <SDIO_ReadFIFO>
 8002acc:	4603      	mov	r3, r0
 8002ace:	6023      	str	r3, [r4, #0]
        for(count = 0U; count < 8U; count++)
 8002ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	633b      	str	r3, [r7, #48]	; 0x30
 8002ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad8:	2b07      	cmp	r3, #7
 8002ada:	d9ee      	bls.n	8002aba <HAL_SD_ReadBlocks+0x156>
        }
        tempbuff += 8U;
 8002adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ade:	3320      	adds	r3, #32
 8002ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8002ae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d007      	beq.n	8002af8 <HAL_SD_ReadBlocks+0x194>
 8002ae8:	f7fd fd7c 	bl	80005e4 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d810      	bhi.n	8002b1a <HAL_SD_ReadBlocks+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002b00:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b06:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e0b6      	b.n	8002c88 <HAL_SD_ReadBlocks+0x324>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b20:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0be      	beq.n	8002aa6 <HAL_SD_ReadBlocks+0x142>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d020      	beq.n	8002b78 <HAL_SD_ReadBlocks+0x214>
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d91d      	bls.n	8002b78 <HAL_SD_ReadBlocks+0x214>
    {    
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b40:	2b03      	cmp	r3, #3
 8002b42:	d019      	beq.n	8002b78 <HAL_SD_ReadBlocks+0x214>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f001 fd91 	bl	8004670 <SDMMC_CmdStopTransfer>
 8002b4e:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8002b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d010      	beq.n	8002b78 <HAL_SD_ReadBlocks+0x214>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002b5e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b66:	431a      	orrs	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e087      	b.n	8002c88 <HAL_SD_ReadBlocks+0x324>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7e:	f003 0308 	and.w	r3, r3, #8
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d010      	beq.n	8002ba8 <HAL_SD_ReadBlocks+0x244>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002b8e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b94:	f043 0208 	orr.w	r2, r3, #8
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e06f      	b.n	8002c88 <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d010      	beq.n	8002bd8 <HAL_SD_ReadBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002bbe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc4:	f043 0202 	orr.w	r2, r3, #2
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e057      	b.n	8002c88 <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bde:	f003 0320 	and.w	r3, r3, #32
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d037      	beq.n	8002c56 <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002bee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf4:	f043 0220 	orr.w	r2, r3, #32
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e03f      	b.n	8002c88 <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
    {
      *tempbuff = SDIO_ReadFIFO(hsd->Instance);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f001 fbc8 	bl	80043a2 <SDIO_ReadFIFO>
 8002c12:	4602      	mov	r2, r0
 8002c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c16:	601a      	str	r2, [r3, #0]
      tempbuff++;
 8002c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c1a:	3304      	adds	r3, #4
 8002c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8002c1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d007      	beq.n	8002c34 <HAL_SD_ReadBlocks+0x2d0>
 8002c24:	f7fd fcde 	bl	80005e4 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d810      	bhi.n	8002c56 <HAL_SD_ReadBlocks+0x2f2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);        
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002c3c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c42:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e018      	b.n	8002c88 <HAL_SD_ReadBlocks+0x324>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1d1      	bne.n	8002c08 <HAL_SD_ReadBlocks+0x2a4>
      }
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002c6c:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8002c76:	2300      	movs	r3, #0
 8002c78:	e006      	b.n	8002c88 <HAL_SD_ReadBlocks+0x324>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
  }
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	373c      	adds	r7, #60	; 0x3c
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd90      	pop	{r4, r7, pc}

08002c90 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b08e      	sub	sp, #56	; 0x38
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
 8002c9c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 8002ca2:	f7fd fc9f 	bl	80005e4 <HAL_GetTick>
 8002ca6:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t *tempbuff = (uint32_t *)pData;
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d107      	bne.n	8002cc6 <HAL_SD_WriteBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e147      	b.n	8002f56 <HAL_SD_WriteBlocks+0x2c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	f040 813a 	bne.w	8002f48 <HAL_SD_WriteBlocks+0x2b8>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	441a      	add	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d907      	bls.n	8002cf8 <HAL_SD_WriteBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cec:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e12e      	b.n	8002f56 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2203      	movs	r2, #3
 8002cfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2200      	movs	r2, #0
 8002d06:	62da      	str	r2, [r3, #44]	; 0x2c
     
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d002      	beq.n	8002d16 <HAL_SD_WriteBlocks+0x86>
    {
      BlockAdd *= 512U;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	025b      	lsls	r3, r3, #9
 8002d14:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f001 fbf1 	bl	8004506 <SDMMC_CmdBlockLength>
 8002d24:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8002d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d010      	beq.n	8002d4e <HAL_SD_WriteBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002d34:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e103      	b.n	8002f56 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d90a      	bls.n	8002d6a <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2220      	movs	r2, #32
 8002d58:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f001 fc60 	bl	8004626 <SDMMC_CmdWriteMultiBlock>
 8002d66:	6378      	str	r0, [r7, #52]	; 0x34
 8002d68:	e009      	b.n	8002d7e <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2210      	movs	r2, #16
 8002d6e:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f001 fc31 	bl	80045de <SDMMC_CmdWriteSingleBlock>
 8002d7c:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d010      	beq.n	8002da6 <HAL_SD_WriteBlocks+0x116>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002d8c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d94:	431a      	orrs	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e0d7      	b.n	8002f56 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002da6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002daa:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	025b      	lsls	r3, r3, #9
 8002db0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002db2:	2390      	movs	r3, #144	; 0x90
 8002db4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002db6:	2300      	movs	r3, #0
 8002db8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	627b      	str	r3, [r7, #36]	; 0x24
    SDIO_ConfigData(hsd->Instance, &config);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f107 0210 	add.w	r2, r7, #16
 8002dca:	4611      	mov	r1, r2
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f001 fb6e 	bl	80044ae <SDIO_ConfigData>
    
    /* Write block(s) in polling mode */
#ifdef SDIO_STA_STBITERR
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8002dd2:	e037      	b.n	8002e44 <HAL_SD_WriteBlocks+0x1b4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d014      	beq.n	8002e0c <HAL_SD_WriteBlocks+0x17c>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8002de2:	2300      	movs	r3, #0
 8002de4:	633b      	str	r3, [r7, #48]	; 0x30
 8002de6:	e00b      	b.n	8002e00 <HAL_SD_WriteBlocks+0x170>
        {
          SDIO_WriteFIFO(hsd->Instance, (tempbuff + count));
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6818      	ldr	r0, [r3, #0]
 8002dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002df2:	4413      	add	r3, r2
 8002df4:	4619      	mov	r1, r3
 8002df6:	f001 fae1 	bl	80043bc <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8002dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	633b      	str	r3, [r7, #48]	; 0x30
 8002e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e02:	2b07      	cmp	r3, #7
 8002e04:	d9f0      	bls.n	8002de8 <HAL_SD_WriteBlocks+0x158>
        }
        tempbuff += 8U;
 8002e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e08:	3320      	adds	r3, #32
 8002e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8002e0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d007      	beq.n	8002e22 <HAL_SD_WriteBlocks+0x192>
 8002e12:	f7fd fbe7 	bl	80005e4 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d810      	bhi.n	8002e44 <HAL_SD_WriteBlocks+0x1b4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002e2a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e32:	431a      	orrs	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e088      	b.n	8002f56 <HAL_SD_WriteBlocks+0x2c6>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e4a:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d0c0      	beq.n	8002dd4 <HAL_SD_WriteBlocks+0x144>
      }
    }
    
    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d020      	beq.n	8002ea2 <HAL_SD_WriteBlocks+0x212>
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d91d      	bls.n	8002ea2 <HAL_SD_WriteBlocks+0x212>
    { 
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6a:	2b03      	cmp	r3, #3
 8002e6c:	d019      	beq.n	8002ea2 <HAL_SD_WriteBlocks+0x212>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f001 fbfc 	bl	8004670 <SDMMC_CmdStopTransfer>
 8002e78:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8002e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d010      	beq.n	8002ea2 <HAL_SD_WriteBlocks+0x212>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002e88:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e90:	431a      	orrs	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e059      	b.n	8002f56 <HAL_SD_WriteBlocks+0x2c6>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea8:	f003 0308 	and.w	r3, r3, #8
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d010      	beq.n	8002ed2 <HAL_SD_WriteBlocks+0x242>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002eb8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebe:	f043 0208 	orr.w	r2, r3, #8
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e041      	b.n	8002f56 <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d010      	beq.n	8002f02 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002ee8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eee:	f043 0202 	orr.w	r2, r3, #2
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e029      	b.n	8002f56 <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f08:	f003 0310 	and.w	r3, r3, #16
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d010      	beq.n	8002f32 <HAL_SD_WriteBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002f18:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1e:	f043 0210 	orr.w	r2, r3, #16
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e011      	b.n	8002f56 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002f3a:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8002f44:	2300      	movs	r3, #0
 8002f46:	e006      	b.n	8002f56 <HAL_SD_WriteBlocks+0x2c6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
  }
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3738      	adds	r7, #56	; 0x38
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b085      	sub	sp, #20
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
 8002f66:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f70:	0e1b      	lsrs	r3, r3, #24
 8002f72:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	099b      	lsrs	r3, r3, #6
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	089b      	lsrs	r3, r3, #2
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	b2da      	uxtb	r2, r3
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	f003 0303 	and.w	r3, r3, #3
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fa6:	0c1b      	lsrs	r3, r3, #16
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	b2da      	uxtb	r2, r3
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fb8:	0a1b      	lsrs	r3, r3, #8
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fda:	0e1b      	lsrs	r3, r3, #24
 8002fdc:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	011b      	lsls	r3, r3, #4
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fee:	0c1b      	lsrs	r3, r3, #16
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	88db      	ldrh	r3, [r3, #6]
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	091b      	lsrs	r3, r3, #4
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	f003 030f 	and.w	r3, r3, #15
 8003004:	b29b      	uxth	r3, r3
 8003006:	4313      	orrs	r3, r2
 8003008:	b29a      	uxth	r2, r3
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	b2db      	uxtb	r3, r3
 8003012:	f003 030f 	and.w	r3, r3, #15
 8003016:	b2da      	uxtb	r2, r3
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003020:	0a1b      	lsrs	r3, r3, #8
 8003022:	b2db      	uxtb	r3, r3
 8003024:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	09db      	lsrs	r3, r3, #7
 800302a:	b2db      	uxtb	r3, r3
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	b2da      	uxtb	r2, r3
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	099b      	lsrs	r3, r3, #6
 800303a:	b2db      	uxtb	r3, r3
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	b2da      	uxtb	r2, r3
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	095b      	lsrs	r3, r3, #5
 800304a:	b2db      	uxtb	r3, r3
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	b2da      	uxtb	r2, r3
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	091b      	lsrs	r3, r3, #4
 800305a:	b2db      	uxtb	r3, r3
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	b2da      	uxtb	r2, r3
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	2200      	movs	r2, #0
 800306a:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003070:	2b00      	cmp	r3, #0
 8003072:	f040 8087 	bne.w	8003184 <HAL_SD_GetCardCSD+0x226>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	029b      	lsls	r3, r3, #10
 800307a:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003086:	b2db      	uxtb	r3, r3
 8003088:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2U;
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	691a      	ldr	r2, [r3, #16]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	431a      	orrs	r2, r3
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800309c:	0e1b      	lsrs	r3, r3, #24
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	691a      	ldr	r2, [r3, #16]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	099b      	lsrs	r3, r3, #6
 80030aa:	f003 0303 	and.w	r3, r3, #3
 80030ae:	431a      	orrs	r2, r3
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	08db      	lsrs	r3, r3, #3
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	f003 0307 	and.w	r3, r3, #7
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	f003 0307 	and.w	r3, r3, #7
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030d6:	0c1b      	lsrs	r3, r3, #16
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	095b      	lsrs	r3, r3, #5
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	b2da      	uxtb	r2, r3
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	089b      	lsrs	r3, r3, #2
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	b2da      	uxtb	r2, r3
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	b2db      	uxtb	r3, r3
 8003104:	f003 0306 	and.w	r3, r3, #6
 8003108:	b2da      	uxtb	r2, r3
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003112:	0a1b      	lsrs	r3, r3, #8
 8003114:	b2db      	uxtb	r3, r3
 8003116:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	7e1b      	ldrb	r3, [r3, #24]
 800311c:	b2da      	uxtb	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	09db      	lsrs	r3, r3, #7
 8003122:	b2db      	uxtb	r3, r3
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	b2db      	uxtb	r3, r3
 800312a:	4313      	orrs	r3, r2
 800312c:	b2da      	uxtb	r2, r3
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	1c5a      	adds	r2, r3, #1
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	7e1b      	ldrb	r3, [r3, #24]
 8003140:	b2db      	uxtb	r3, r3
 8003142:	3302      	adds	r3, #2
 8003144:	2201      	movs	r2, #1
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800314e:	fb02 f203 	mul.w	r2, r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	7a1b      	ldrb	r3, [r3, #8]
 800315a:	b2db      	uxtb	r3, r3
 800315c:	461a      	mov	r2, r3
 800315e:	2301      	movs	r3, #1
 8003160:	fa03 f202 	lsl.w	r2, r3, r2
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003170:	0a52      	lsrs	r2, r2, #9
 8003172:	fb02 f203 	mul.w	r2, r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003180:	661a      	str	r2, [r3, #96]	; 0x60
 8003182:	e04d      	b.n	8003220 <HAL_SD_GetCardCSD+0x2c2>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003188:	2b01      	cmp	r3, #1
 800318a:	d138      	bne.n	80031fe <HAL_SD_GetCardCSD+0x2a0>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003190:	b2db      	uxtb	r3, r3
 8003192:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	041b      	lsls	r3, r3, #16
 8003198:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031a4:	0e1b      	lsrs	r3, r3, #24
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8U);
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	691a      	ldr	r2, [r3, #16]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	021b      	lsls	r3, r3, #8
 80031b2:	431a      	orrs	r2, r3
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031bc:	0c1b      	lsrs	r3, r3, #16
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	691a      	ldr	r2, [r3, #16]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	431a      	orrs	r2, r3
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031d2:	0a1b      	lsrs	r3, r3, #8
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	3301      	adds	r3, #1
 80031de:	029a      	lsls	r2, r3, #10
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	655a      	str	r2, [r3, #84]	; 0x54
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031f2:	659a      	str	r2, [r3, #88]	; 0x58
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	661a      	str	r2, [r3, #96]	; 0x60
 80031fc:	e010      	b.n	8003220 <HAL_SD_GetCardCSD+0x2c2>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003206:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e0c1      	b.n	80033a4 <HAL_SD_GetCardCSD+0x446>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	099b      	lsrs	r3, r3, #6
 8003224:	b2db      	uxtb	r3, r3
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	b2da      	uxtb	r2, r3
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	b2db      	uxtb	r3, r3
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	b2db      	uxtb	r3, r3
 8003238:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800323c:	b2da      	uxtb	r2, r3
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003246:	b2db      	uxtb	r3, r3
 8003248:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	7e9b      	ldrb	r3, [r3, #26]
 800324e:	b2da      	uxtb	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	09db      	lsrs	r3, r3, #7
 8003254:	b2db      	uxtb	r3, r3
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	b2db      	uxtb	r3, r3
 800325c:	4313      	orrs	r3, r2
 800325e:	b2da      	uxtb	r2, r3
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	b2db      	uxtb	r3, r3
 8003268:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800326c:	b2da      	uxtb	r2, r3
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003276:	0e1b      	lsrs	r3, r3, #24
 8003278:	b2db      	uxtb	r3, r3
 800327a:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	09db      	lsrs	r3, r3, #7
 8003280:	b2db      	uxtb	r3, r3
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	b2da      	uxtb	r2, r3
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	095b      	lsrs	r3, r3, #5
 8003290:	b2db      	uxtb	r3, r3
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	b2da      	uxtb	r2, r3
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	089b      	lsrs	r3, r3, #2
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	f003 0307 	and.w	r3, r3, #7
 80032a6:	b2da      	uxtb	r2, r3
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	f003 030c 	and.w	r3, r3, #12
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c2:	0c1b      	lsrs	r3, r3, #16
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	7fdb      	ldrb	r3, [r3, #31]
 80032cc:	b2da      	uxtb	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	099b      	lsrs	r3, r3, #6
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	f003 0303 	and.w	r3, r3, #3
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	4313      	orrs	r3, r2
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	095b      	lsrs	r3, r3, #5
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0U;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	b2da      	uxtb	r2, r3
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003310:	0a1b      	lsrs	r3, r3, #8
 8003312:	b2db      	uxtb	r3, r3
 8003314:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	09db      	lsrs	r3, r3, #7
 800331a:	b2db      	uxtb	r3, r3
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	b2da      	uxtb	r2, r3
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	099b      	lsrs	r3, r3, #6
 800332c:	b2db      	uxtb	r3, r3
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	b2da      	uxtb	r2, r3
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	095b      	lsrs	r3, r3, #5
 800333e:	b2db      	uxtb	r3, r3
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	b2da      	uxtb	r2, r3
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	091b      	lsrs	r3, r3, #4
 8003350:	b2db      	uxtb	r3, r3
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	b2da      	uxtb	r2, r3
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	089b      	lsrs	r3, r3, #2
 8003362:	b2db      	uxtb	r3, r3
 8003364:	f003 0303 	and.w	r3, r3, #3
 8003368:	b2da      	uxtb	r2, r3
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	b2db      	uxtb	r3, r3
 8003374:	f003 0303 	and.w	r3, r3, #3
 8003378:	b2da      	uxtb	r2, r3
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003384:	b2db      	uxtb	r3, r3
 8003386:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	085b      	lsrs	r3, r3, #1
 800338c:	b2db      	uxtb	r3, r3
 800338e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003392:	b2da      	uxtb	r2, r3
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3714      	adds	r7, #20
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003408:	b5b0      	push	{r4, r5, r7, lr}
 800340a:	b08e      	sub	sp, #56	; 0x38
 800340c:	af04      	add	r7, sp, #16
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003412:	2300      	movs	r3, #0
 8003414:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2203      	movs	r2, #3
 800341a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003422:	2b03      	cmp	r3, #3
 8003424:	d02e      	beq.n	8003484 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800342c:	d106      	bne.n	800343c <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003432:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	639a      	str	r2, [r3, #56]	; 0x38
 800343a:	e029      	b.n	8003490 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003442:	d10a      	bne.n	800345a <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 fa1b 	bl	8003880 <SD_WideBus_Enable>
 800344a:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	431a      	orrs	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	639a      	str	r2, [r3, #56]	; 0x38
 8003458:	e01a      	b.n	8003490 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10a      	bne.n	8003476 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 fa5a 	bl	800391a <SD_WideBus_Disable>
 8003466:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	431a      	orrs	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	639a      	str	r2, [r3, #56]	; 0x38
 8003474:	e00c      	b.n	8003490 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	639a      	str	r2, [r3, #56]	; 0x38
 8003482:	e005      	b.n	8003490 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003488:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00a      	beq.n	80034ae <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80034a0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e024      	b.n	80034f8 <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	623b      	str	r3, [r7, #32]
    SDIO_Init(hsd->Instance, Init);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681d      	ldr	r5, [r3, #0]
 80034d4:	466c      	mov	r4, sp
 80034d6:	f107 0318 	add.w	r3, r7, #24
 80034da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80034de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80034e2:	f107 030c 	add.w	r3, r7, #12
 80034e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034e8:	4628      	mov	r0, r5
 80034ea:	f000 ff2f 	bl	800434c <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3728      	adds	r7, #40	; 0x28
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bdb0      	pop	{r4, r5, r7, pc}

08003500 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 8003508:	2304      	movs	r3, #4
 800350a:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800350c:	2300      	movs	r3, #0
 800350e:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 8003510:	2300      	movs	r3, #0
 8003512:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 8003514:	f107 030c 	add.w	r3, r7, #12
 8003518:	4619      	mov	r1, r3
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f986 	bl	800382c <SD_SendStatus>
 8003520:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d005      	beq.n	8003534 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	431a      	orrs	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9U) & 0x0FU);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	0a5b      	lsrs	r3, r3, #9
 8003538:	b2db      	uxtb	r3, r3
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 8003540:	7dfb      	ldrb	r3, [r7, #23]
}
 8003542:	4618      	mov	r0, r3
 8003544:	3718      	adds	r7, #24
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800354a:	b5b0      	push	{r4, r5, r7, lr}
 800354c:	b094      	sub	sp, #80	; 0x50
 800354e:	af04      	add	r7, sp, #16
 8003550:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003552:	2300      	movs	r3, #0
 8003554:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1U;
 8003556:	2301      	movs	r3, #1
 8003558:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4618      	mov	r0, r3
 8003560:	f000 ff4b 	bl	80043fa <SDIO_GetPowerState>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d102      	bne.n	8003570 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800356a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800356e:	e0b1      	b.n	80036d4 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003574:	2b03      	cmp	r3, #3
 8003576:	d02f      	beq.n	80035d8 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f001 f991 	bl	80048a4 <SDMMC_CmdSendCID>
 8003582:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <SD_InitCard+0x44>
    {
      return errorstate;
 800358a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800358c:	e0a2      	b.n	80036d4 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2100      	movs	r1, #0
 8003594:	4618      	mov	r0, r3
 8003596:	f000 ff75 	bl	8004484 <SDIO_GetResponse>
 800359a:	4602      	mov	r2, r0
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2104      	movs	r1, #4
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 ff6c 	bl	8004484 <SDIO_GetResponse>
 80035ac:	4602      	mov	r2, r0
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2108      	movs	r1, #8
 80035b8:	4618      	mov	r0, r3
 80035ba:	f000 ff63 	bl	8004484 <SDIO_GetResponse>
 80035be:	4602      	mov	r2, r0
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	210c      	movs	r1, #12
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 ff5a 	bl	8004484 <SDIO_GetResponse>
 80035d0:	4602      	mov	r2, r0
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035dc:	2b03      	cmp	r3, #3
 80035de:	d00d      	beq.n	80035fc <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f107 020e 	add.w	r2, r7, #14
 80035e8:	4611      	mov	r1, r2
 80035ea:	4618      	mov	r0, r3
 80035ec:	f001 f99b 	bl	8004926 <SDMMC_CmdSetRelAdd>
 80035f0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80035f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <SD_InitCard+0xb2>
    {
      return errorstate;
 80035f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035fa:	e06b      	b.n	80036d4 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003600:	2b03      	cmp	r3, #3
 8003602:	d036      	beq.n	8003672 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003604:	89fb      	ldrh	r3, [r7, #14]
 8003606:	461a      	mov	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003614:	041b      	lsls	r3, r3, #16
 8003616:	4619      	mov	r1, r3
 8003618:	4610      	mov	r0, r2
 800361a:	f001 f963 	bl	80048e4 <SDMMC_CmdSendCSD>
 800361e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <SD_InitCard+0xe0>
    {
      return errorstate;
 8003626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003628:	e054      	b.n	80036d4 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2100      	movs	r1, #0
 8003630:	4618      	mov	r0, r3
 8003632:	f000 ff27 	bl	8004484 <SDIO_GetResponse>
 8003636:	4602      	mov	r2, r0
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2104      	movs	r1, #4
 8003642:	4618      	mov	r0, r3
 8003644:	f000 ff1e 	bl	8004484 <SDIO_GetResponse>
 8003648:	4602      	mov	r2, r0
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2108      	movs	r1, #8
 8003654:	4618      	mov	r0, r3
 8003656:	f000 ff15 	bl	8004484 <SDIO_GetResponse>
 800365a:	4602      	mov	r2, r0
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	210c      	movs	r1, #12
 8003666:	4618      	mov	r0, r3
 8003668:	f000 ff0c 	bl	8004484 <SDIO_GetResponse>
 800366c:	4602      	mov	r2, r0
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2104      	movs	r1, #4
 8003678:	4618      	mov	r0, r3
 800367a:	f000 ff03 	bl	8004484 <SDIO_GetResponse>
 800367e:	4603      	mov	r3, r0
 8003680:	0d1a      	lsrs	r2, r3, #20
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 8003686:	f107 0310 	add.w	r3, r7, #16
 800368a:	4619      	mov	r1, r3
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f7ff fc66 	bl	8002f5e <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6819      	ldr	r1, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800369a:	041b      	lsls	r3, r3, #16
 800369c:	f04f 0400 	mov.w	r4, #0
 80036a0:	461a      	mov	r2, r3
 80036a2:	4623      	mov	r3, r4
 80036a4:	4608      	mov	r0, r1
 80036a6:	f001 f807 	bl	80046b8 <SDMMC_CmdSelDesel>
 80036aa:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80036ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <SD_InitCard+0x16c>
  {
    return errorstate;
 80036b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036b4:	e00e      	b.n	80036d4 <SD_InitCard+0x18a>
  }

  /* Configure SDIO peripheral interface */     
  SDIO_Init(hsd->Instance, hsd->Init);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681d      	ldr	r5, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	466c      	mov	r4, sp
 80036be:	f103 0210 	add.w	r2, r3, #16
 80036c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80036c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80036c8:	3304      	adds	r3, #4
 80036ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036cc:	4628      	mov	r0, r5
 80036ce:	f000 fe3d 	bl	800434c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3740      	adds	r7, #64	; 0x40
 80036d8:	46bd      	mov	sp, r7
 80036da:	bdb0      	pop	{r4, r5, r7, pc}

080036dc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	617b      	str	r3, [r7, #20]
 80036ec:	2300      	movs	r3, #0
 80036ee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80036f0:	2300      	movs	r3, #0
 80036f2:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f001 f802 	bl	8004702 <SDMMC_CmdGoIdleState>
 80036fe:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <SD_PowerON+0x2e>
  {
    return errorstate;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	e08c      	b.n	8003824 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f001 f817 	bl	8004742 <SDMMC_CmdOperCond>
 8003714:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d03d      	beq.n	8003798 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 8003722:	e032      	b.n	800378a <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	1c5a      	adds	r2, r3, #1
 8003728:	60ba      	str	r2, [r7, #8]
 800372a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800372e:	4293      	cmp	r3, r2
 8003730:	d102      	bne.n	8003738 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003732:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003736:	e075      	b.n	8003824 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2100      	movs	r1, #0
 800373e:	4618      	mov	r0, r3
 8003740:	f001 f820 	bl	8004784 <SDMMC_CmdAppCommand>
 8003744:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d002      	beq.n	8003752 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800374c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003750:	e068      	b.n	8003824 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2100      	movs	r1, #0
 8003758:	4618      	mov	r0, r3
 800375a:	f001 f837 	bl	80047cc <SDMMC_CmdAppOperCommand>
 800375e:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d002      	beq.n	800376c <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003766:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800376a:	e05b      	b.n	8003824 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2100      	movs	r1, #0
 8003772:	4618      	mov	r0, r3
 8003774:	f000 fe86 	bl	8004484 <SDIO_GetResponse>
 8003778:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	0fdb      	lsrs	r3, r3, #31
 800377e:	2b01      	cmp	r3, #1
 8003780:	d101      	bne.n	8003786 <SD_PowerON+0xaa>
 8003782:	2301      	movs	r3, #1
 8003784:	e000      	b.n	8003788 <SD_PowerON+0xac>
 8003786:	2300      	movs	r3, #0
 8003788:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d0c9      	beq.n	8003724 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	645a      	str	r2, [r3, #68]	; 0x44
 8003796:	e044      	b.n	8003822 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 800379e:	e031      	b.n	8003804 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	1c5a      	adds	r2, r3, #1
 80037a4:	60ba      	str	r2, [r7, #8]
 80037a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d102      	bne.n	80037b4 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80037ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037b2:	e037      	b.n	8003824 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2100      	movs	r1, #0
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 ffe2 	bl	8004784 <SDMMC_CmdAppCommand>
 80037c0:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <SD_PowerON+0xf0>
      {
        return errorstate;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	e02b      	b.n	8003824 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80037d4:	4618      	mov	r0, r3
 80037d6:	f000 fff9 	bl	80047cc <SDMMC_CmdAppOperCommand>
 80037da:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <SD_PowerON+0x10a>
      {
        return errorstate;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	e01e      	b.n	8003824 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2100      	movs	r1, #0
 80037ec:	4618      	mov	r0, r3
 80037ee:	f000 fe49 	bl	8004484 <SDIO_GetResponse>
 80037f2:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	0fdb      	lsrs	r3, r3, #31
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d101      	bne.n	8003800 <SD_PowerON+0x124>
 80037fc:	2301      	movs	r3, #1
 80037fe:	e000      	b.n	8003802 <SD_PowerON+0x126>
 8003800:	2300      	movs	r3, #0
 8003802:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0ca      	beq.n	80037a0 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	645a      	str	r2, [r3, #68]	; 0x44
 800381a:	e002      	b.n	8003822 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3718      	adds	r7, #24
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003836:	2300      	movs	r3, #0
 8003838:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d102      	bne.n	8003846 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 8003840:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003844:	e018      	b.n	8003878 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800384e:	041b      	lsls	r3, r3, #16
 8003850:	4619      	mov	r1, r3
 8003852:	4610      	mov	r0, r2
 8003854:	f001 f88a 	bl	800496c <SDMMC_CmdSendStatus>
 8003858:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <SD_SendStatus+0x38>
  {
    return errorstate;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	e009      	b.n	8003878 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2100      	movs	r1, #0
 800386a:	4618      	mov	r0, r3
 800386c:	f000 fe0a 	bl	8004484 <SDIO_GetResponse>
 8003870:	4602      	mov	r2, r0
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003888:	2300      	movs	r3, #0
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	2300      	movs	r3, #0
 800388e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003890:	2300      	movs	r3, #0
 8003892:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2100      	movs	r1, #0
 800389a:	4618      	mov	r0, r3
 800389c:	f000 fdf2 	bl	8004484 <SDIO_GetResponse>
 80038a0:	4603      	mov	r3, r0
 80038a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038aa:	d102      	bne.n	80038b2 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80038ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80038b0:	e02f      	b.n	8003912 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80038b2:	f107 030c 	add.w	r3, r7, #12
 80038b6:	4619      	mov	r1, r3
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 f87b 	bl	80039b4 <SD_FindSCR>
 80038be:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	e023      	b.n	8003912 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d01c      	beq.n	800390e <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038dc:	041b      	lsls	r3, r3, #16
 80038de:	4619      	mov	r1, r3
 80038e0:	4610      	mov	r0, r2
 80038e2:	f000 ff4f 	bl	8004784 <SDMMC_CmdAppCommand>
 80038e6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	e00f      	b.n	8003912 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2102      	movs	r1, #2
 80038f8:	4618      	mov	r0, r3
 80038fa:	f000 ff8c 	bl	8004816 <SDMMC_CmdBusWidth>
 80038fe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	e003      	b.n	8003912 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 800390a:	2300      	movs	r3, #0
 800390c:	e001      	b.n	8003912 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800390e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003912:	4618      	mov	r0, r3
 8003914:	3718      	adds	r7, #24
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b086      	sub	sp, #24
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003922:	2300      	movs	r3, #0
 8003924:	60fb      	str	r3, [r7, #12]
 8003926:	2300      	movs	r3, #0
 8003928:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800392a:	2300      	movs	r3, #0
 800392c:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2100      	movs	r1, #0
 8003934:	4618      	mov	r0, r3
 8003936:	f000 fda5 	bl	8004484 <SDIO_GetResponse>
 800393a:	4603      	mov	r3, r0
 800393c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003940:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003944:	d102      	bne.n	800394c <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003946:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800394a:	e02f      	b.n	80039ac <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800394c:	f107 030c 	add.w	r3, r7, #12
 8003950:	4619      	mov	r1, r3
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f82e 	bl	80039b4 <SD_FindSCR>
 8003958:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	e023      	b.n	80039ac <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d01c      	beq.n	80039a8 <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003976:	041b      	lsls	r3, r3, #16
 8003978:	4619      	mov	r1, r3
 800397a:	4610      	mov	r0, r2
 800397c:	f000 ff02 	bl	8004784 <SDMMC_CmdAppCommand>
 8003980:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	e00f      	b.n	80039ac <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2100      	movs	r1, #0
 8003992:	4618      	mov	r0, r3
 8003994:	f000 ff3f 	bl	8004816 <SDMMC_CmdBusWidth>
 8003998:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	e003      	b.n	80039ac <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 80039a4:	2300      	movs	r3, #0
 80039a6:	e001      	b.n	80039ac <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80039a8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3718      	adds	r7, #24
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80039b4:	b590      	push	{r4, r7, lr}
 80039b6:	b08f      	sub	sp, #60	; 0x3c
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80039be:	2300      	movs	r3, #0
 80039c0:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80039c2:	f7fc fe0f 	bl	80005e4 <HAL_GetTick>
 80039c6:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80039cc:	2300      	movs	r3, #0
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	2300      	movs	r3, #0
 80039d2:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2108      	movs	r1, #8
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 fd93 	bl	8004506 <SDMMC_CmdBlockLength>
 80039e0:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 80039e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <SD_FindSCR+0x38>
  {
    return errorstate;
 80039e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ea:	e0a8      	b.n	8003b3e <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f4:	041b      	lsls	r3, r3, #16
 80039f6:	4619      	mov	r1, r3
 80039f8:	4610      	mov	r0, r2
 80039fa:	f000 fec3 	bl	8004784 <SDMMC_CmdAppCommand>
 80039fe:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8003a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <SD_FindSCR+0x56>
  {
    return errorstate;
 8003a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a08:	e099      	b.n	8003b3e <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003a0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a0e:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8U;
 8003a10:	2308      	movs	r3, #8
 8003a12:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003a14:	2330      	movs	r3, #48	; 0x30
 8003a16:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003a18:	2302      	movs	r3, #2
 8003a1a:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003a20:	2301      	movs	r3, #1
 8003a22:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_ConfigData(hsd->Instance, &config);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f107 0214 	add.w	r2, r7, #20
 8003a2c:	4611      	mov	r1, r2
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 fd3d 	bl	80044ae <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f000 ff10 	bl	800485e <SDMMC_CmdSendSCR>
 8003a3e:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8003a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d022      	beq.n	8003a8c <SD_FindSCR+0xd8>
  {
    return errorstate;
 8003a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a48:	e079      	b.n	8003b3e <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00e      	beq.n	8003a76 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6819      	ldr	r1, [r3, #0]
 8003a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	f107 020c 	add.w	r2, r7, #12
 8003a64:	18d4      	adds	r4, r2, r3
 8003a66:	4608      	mov	r0, r1
 8003a68:	f000 fc9b 	bl	80043a2 <SDIO_ReadFIFO>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	6023      	str	r3, [r4, #0]
      index++;
 8003a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a72:	3301      	adds	r3, #1
 8003a74:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003a76:	f7fc fdb5 	bl	80005e4 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a84:	d102      	bne.n	8003a8c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8003a86:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003a8a:	e058      	b.n	8003b3e <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a92:	f240 432a 	movw	r3, #1066	; 0x42a
 8003a96:	4013      	ands	r3, r2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d0d6      	beq.n	8003a4a <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa2:	f003 0308 	and.w	r3, r3, #8
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d005      	beq.n	8003ab6 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2208      	movs	r2, #8
 8003ab0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003ab2:	2308      	movs	r3, #8
 8003ab4:	e043      	b.n	8003b3e <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d005      	beq.n	8003ad0 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2202      	movs	r2, #2
 8003aca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8003acc:	2302      	movs	r3, #2
 8003ace:	e036      	b.n	8003b3e <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ad6:	f003 0320 	and.w	r3, r3, #32
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d005      	beq.n	8003aea <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 8003ae6:	2320      	movs	r3, #32
 8003ae8:	e029      	b.n	8003b3e <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003af2:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	061a      	lsls	r2, r3, #24
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	021b      	lsls	r3, r3, #8
 8003afc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003b00:	431a      	orrs	r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	0a1b      	lsrs	r3, r3, #8
 8003b06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8003b0a:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	3304      	adds	r3, #4
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8003b16:	430a      	orrs	r2, r1
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8003b18:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	061a      	lsls	r2, r3, #24
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	021b      	lsls	r3, r3, #8
 8003b22:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003b26:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	0a1b      	lsrs	r3, r3, #8
 8003b2c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8003b30:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	0e1b      	lsrs	r3, r3, #24
 8003b36:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	373c      	adds	r7, #60	; 0x3c
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd90      	pop	{r4, r7, pc}

08003b46 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b082      	sub	sp, #8
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e056      	b.n	8003c06 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d106      	bne.n	8003b78 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f003 fe5c 	bl	8007830 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b8e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685a      	ldr	r2, [r3, #4]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	431a      	orrs	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	431a      	orrs	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	ea42 0103 	orr.w	r1, r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	0c1b      	lsrs	r3, r3, #16
 8003bd6:	f003 0104 	and.w	r1, r3, #4
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	69da      	ldr	r2, [r3, #28]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bf4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b084      	sub	sp, #16
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	60f8      	str	r0, [r7, #12]
 8003c16:	60b9      	str	r1, [r7, #8]
 8003c18:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d101      	bne.n	8003c24 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e034      	b.n	8003c8e <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d106      	bne.n	8003c3e <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f003 f9a1 	bl	8006f80 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	3308      	adds	r3, #8
 8003c46:	4619      	mov	r1, r3
 8003c48:	4610      	mov	r0, r2
 8003c4a:	f000 fa7b 	bl	8004144 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6818      	ldr	r0, [r3, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	461a      	mov	r2, r3
 8003c58:	68b9      	ldr	r1, [r7, #8]
 8003c5a:	f000 fae3 	bl	8004224 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6858      	ldr	r0, [r3, #4]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	689a      	ldr	r2, [r3, #8]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6a:	6879      	ldr	r1, [r7, #4]
 8003c6c:	f000 fb2e 	bl	80042cc <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	6892      	ldr	r2, [r2, #8]
 8003c78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	6892      	ldr	r2, [r2, #8]
 8003c84:	f041 0101 	orr.w	r1, r1, #1
 8003c88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b082      	sub	sp, #8
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e03f      	b.n	8003d28 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d106      	bne.n	8003cc2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f003 fee1 	bl	8007a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2224      	movs	r2, #36	; 0x24
 8003cc6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68da      	ldr	r2, [r3, #12]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cd8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f828 	bl	8003d30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	691a      	ldr	r2, [r3, #16]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cee:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	695a      	ldr	r2, [r3, #20]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cfe:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68da      	ldr	r2, [r3, #12]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d0e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2220      	movs	r2, #32
 8003d1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2220      	movs	r2, #32
 8003d22:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3708      	adds	r7, #8
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d30:	b5b0      	push	{r4, r5, r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68da      	ldr	r2, [r3, #12]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689a      	ldr	r2, [r3, #8]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	431a      	orrs	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003d70:	f023 030c 	bic.w	r3, r3, #12
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	6812      	ldr	r2, [r2, #0]
 8003d78:	68f9      	ldr	r1, [r7, #12]
 8003d7a:	430b      	orrs	r3, r1
 8003d7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	699a      	ldr	r2, [r3, #24]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	69db      	ldr	r3, [r3, #28]
 8003d98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d9c:	f040 80e4 	bne.w	8003f68 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4aab      	ldr	r2, [pc, #684]	; (8004054 <UART_SetConfig+0x324>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d004      	beq.n	8003db4 <UART_SetConfig+0x84>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4aaa      	ldr	r2, [pc, #680]	; (8004058 <UART_SetConfig+0x328>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d16c      	bne.n	8003e8e <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003db4:	f7fe f86c 	bl	8001e90 <HAL_RCC_GetPCLK2Freq>
 8003db8:	4602      	mov	r2, r0
 8003dba:	4613      	mov	r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	4413      	add	r3, r2
 8003dc0:	009a      	lsls	r2, r3, #2
 8003dc2:	441a      	add	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dce:	4aa3      	ldr	r2, [pc, #652]	; (800405c <UART_SetConfig+0x32c>)
 8003dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd4:	095b      	lsrs	r3, r3, #5
 8003dd6:	011c      	lsls	r4, r3, #4
 8003dd8:	f7fe f85a 	bl	8001e90 <HAL_RCC_GetPCLK2Freq>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	4613      	mov	r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	4413      	add	r3, r2
 8003de4:	009a      	lsls	r2, r3, #2
 8003de6:	441a      	add	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	fbb2 f5f3 	udiv	r5, r2, r3
 8003df2:	f7fe f84d 	bl	8001e90 <HAL_RCC_GetPCLK2Freq>
 8003df6:	4602      	mov	r2, r0
 8003df8:	4613      	mov	r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	4413      	add	r3, r2
 8003dfe:	009a      	lsls	r2, r3, #2
 8003e00:	441a      	add	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e0c:	4a93      	ldr	r2, [pc, #588]	; (800405c <UART_SetConfig+0x32c>)
 8003e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e12:	095b      	lsrs	r3, r3, #5
 8003e14:	2264      	movs	r2, #100	; 0x64
 8003e16:	fb02 f303 	mul.w	r3, r2, r3
 8003e1a:	1aeb      	subs	r3, r5, r3
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	3332      	adds	r3, #50	; 0x32
 8003e20:	4a8e      	ldr	r2, [pc, #568]	; (800405c <UART_SetConfig+0x32c>)
 8003e22:	fba2 2303 	umull	r2, r3, r2, r3
 8003e26:	095b      	lsrs	r3, r3, #5
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e2e:	441c      	add	r4, r3
 8003e30:	f7fe f82e 	bl	8001e90 <HAL_RCC_GetPCLK2Freq>
 8003e34:	4602      	mov	r2, r0
 8003e36:	4613      	mov	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	4413      	add	r3, r2
 8003e3c:	009a      	lsls	r2, r3, #2
 8003e3e:	441a      	add	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	fbb2 f5f3 	udiv	r5, r2, r3
 8003e4a:	f7fe f821 	bl	8001e90 <HAL_RCC_GetPCLK2Freq>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	4613      	mov	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4413      	add	r3, r2
 8003e56:	009a      	lsls	r2, r3, #2
 8003e58:	441a      	add	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e64:	4a7d      	ldr	r2, [pc, #500]	; (800405c <UART_SetConfig+0x32c>)
 8003e66:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6a:	095b      	lsrs	r3, r3, #5
 8003e6c:	2264      	movs	r2, #100	; 0x64
 8003e6e:	fb02 f303 	mul.w	r3, r2, r3
 8003e72:	1aeb      	subs	r3, r5, r3
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	3332      	adds	r3, #50	; 0x32
 8003e78:	4a78      	ldr	r2, [pc, #480]	; (800405c <UART_SetConfig+0x32c>)
 8003e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7e:	095b      	lsrs	r3, r3, #5
 8003e80:	f003 0207 	and.w	r2, r3, #7
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4422      	add	r2, r4
 8003e8a:	609a      	str	r2, [r3, #8]
 8003e8c:	e154      	b.n	8004138 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003e8e:	f7fd ffeb 	bl	8001e68 <HAL_RCC_GetPCLK1Freq>
 8003e92:	4602      	mov	r2, r0
 8003e94:	4613      	mov	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	4413      	add	r3, r2
 8003e9a:	009a      	lsls	r2, r3, #2
 8003e9c:	441a      	add	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea8:	4a6c      	ldr	r2, [pc, #432]	; (800405c <UART_SetConfig+0x32c>)
 8003eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003eae:	095b      	lsrs	r3, r3, #5
 8003eb0:	011c      	lsls	r4, r3, #4
 8003eb2:	f7fd ffd9 	bl	8001e68 <HAL_RCC_GetPCLK1Freq>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	4613      	mov	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	009a      	lsls	r2, r3, #2
 8003ec0:	441a      	add	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	005b      	lsls	r3, r3, #1
 8003ec8:	fbb2 f5f3 	udiv	r5, r2, r3
 8003ecc:	f7fd ffcc 	bl	8001e68 <HAL_RCC_GetPCLK1Freq>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4413      	add	r3, r2
 8003ed8:	009a      	lsls	r2, r3, #2
 8003eda:	441a      	add	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee6:	4a5d      	ldr	r2, [pc, #372]	; (800405c <UART_SetConfig+0x32c>)
 8003ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8003eec:	095b      	lsrs	r3, r3, #5
 8003eee:	2264      	movs	r2, #100	; 0x64
 8003ef0:	fb02 f303 	mul.w	r3, r2, r3
 8003ef4:	1aeb      	subs	r3, r5, r3
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	3332      	adds	r3, #50	; 0x32
 8003efa:	4a58      	ldr	r2, [pc, #352]	; (800405c <UART_SetConfig+0x32c>)
 8003efc:	fba2 2303 	umull	r2, r3, r2, r3
 8003f00:	095b      	lsrs	r3, r3, #5
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f08:	441c      	add	r4, r3
 8003f0a:	f7fd ffad 	bl	8001e68 <HAL_RCC_GetPCLK1Freq>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	4613      	mov	r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	4413      	add	r3, r2
 8003f16:	009a      	lsls	r2, r3, #2
 8003f18:	441a      	add	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	fbb2 f5f3 	udiv	r5, r2, r3
 8003f24:	f7fd ffa0 	bl	8001e68 <HAL_RCC_GetPCLK1Freq>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4413      	add	r3, r2
 8003f30:	009a      	lsls	r2, r3, #2
 8003f32:	441a      	add	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f3e:	4a47      	ldr	r2, [pc, #284]	; (800405c <UART_SetConfig+0x32c>)
 8003f40:	fba2 2303 	umull	r2, r3, r2, r3
 8003f44:	095b      	lsrs	r3, r3, #5
 8003f46:	2264      	movs	r2, #100	; 0x64
 8003f48:	fb02 f303 	mul.w	r3, r2, r3
 8003f4c:	1aeb      	subs	r3, r5, r3
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	3332      	adds	r3, #50	; 0x32
 8003f52:	4a42      	ldr	r2, [pc, #264]	; (800405c <UART_SetConfig+0x32c>)
 8003f54:	fba2 2303 	umull	r2, r3, r2, r3
 8003f58:	095b      	lsrs	r3, r3, #5
 8003f5a:	f003 0207 	and.w	r2, r3, #7
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4422      	add	r2, r4
 8003f64:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8003f66:	e0e7      	b.n	8004138 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a39      	ldr	r2, [pc, #228]	; (8004054 <UART_SetConfig+0x324>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d004      	beq.n	8003f7c <UART_SetConfig+0x24c>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a38      	ldr	r2, [pc, #224]	; (8004058 <UART_SetConfig+0x328>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d171      	bne.n	8004060 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003f7c:	f7fd ff88 	bl	8001e90 <HAL_RCC_GetPCLK2Freq>
 8003f80:	4602      	mov	r2, r0
 8003f82:	4613      	mov	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4413      	add	r3, r2
 8003f88:	009a      	lsls	r2, r3, #2
 8003f8a:	441a      	add	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f96:	4a31      	ldr	r2, [pc, #196]	; (800405c <UART_SetConfig+0x32c>)
 8003f98:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9c:	095b      	lsrs	r3, r3, #5
 8003f9e:	011c      	lsls	r4, r3, #4
 8003fa0:	f7fd ff76 	bl	8001e90 <HAL_RCC_GetPCLK2Freq>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4413      	add	r3, r2
 8003fac:	009a      	lsls	r2, r3, #2
 8003fae:	441a      	add	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	fbb2 f5f3 	udiv	r5, r2, r3
 8003fba:	f7fd ff69 	bl	8001e90 <HAL_RCC_GetPCLK2Freq>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	4413      	add	r3, r2
 8003fc6:	009a      	lsls	r2, r3, #2
 8003fc8:	441a      	add	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd4:	4a21      	ldr	r2, [pc, #132]	; (800405c <UART_SetConfig+0x32c>)
 8003fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fda:	095b      	lsrs	r3, r3, #5
 8003fdc:	2264      	movs	r2, #100	; 0x64
 8003fde:	fb02 f303 	mul.w	r3, r2, r3
 8003fe2:	1aeb      	subs	r3, r5, r3
 8003fe4:	011b      	lsls	r3, r3, #4
 8003fe6:	3332      	adds	r3, #50	; 0x32
 8003fe8:	4a1c      	ldr	r2, [pc, #112]	; (800405c <UART_SetConfig+0x32c>)
 8003fea:	fba2 2303 	umull	r2, r3, r2, r3
 8003fee:	095b      	lsrs	r3, r3, #5
 8003ff0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ff4:	441c      	add	r4, r3
 8003ff6:	f7fd ff4b 	bl	8001e90 <HAL_RCC_GetPCLK2Freq>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4413      	add	r3, r2
 8004002:	009a      	lsls	r2, r3, #2
 8004004:	441a      	add	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	fbb2 f5f3 	udiv	r5, r2, r3
 8004010:	f7fd ff3e 	bl	8001e90 <HAL_RCC_GetPCLK2Freq>
 8004014:	4602      	mov	r2, r0
 8004016:	4613      	mov	r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	4413      	add	r3, r2
 800401c:	009a      	lsls	r2, r3, #2
 800401e:	441a      	add	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	fbb2 f3f3 	udiv	r3, r2, r3
 800402a:	4a0c      	ldr	r2, [pc, #48]	; (800405c <UART_SetConfig+0x32c>)
 800402c:	fba2 2303 	umull	r2, r3, r2, r3
 8004030:	095b      	lsrs	r3, r3, #5
 8004032:	2264      	movs	r2, #100	; 0x64
 8004034:	fb02 f303 	mul.w	r3, r2, r3
 8004038:	1aeb      	subs	r3, r5, r3
 800403a:	011b      	lsls	r3, r3, #4
 800403c:	3332      	adds	r3, #50	; 0x32
 800403e:	4a07      	ldr	r2, [pc, #28]	; (800405c <UART_SetConfig+0x32c>)
 8004040:	fba2 2303 	umull	r2, r3, r2, r3
 8004044:	095b      	lsrs	r3, r3, #5
 8004046:	f003 020f 	and.w	r2, r3, #15
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4422      	add	r2, r4
 8004050:	609a      	str	r2, [r3, #8]
 8004052:	e071      	b.n	8004138 <UART_SetConfig+0x408>
 8004054:	40011000 	.word	0x40011000
 8004058:	40011400 	.word	0x40011400
 800405c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004060:	f7fd ff02 	bl	8001e68 <HAL_RCC_GetPCLK1Freq>
 8004064:	4602      	mov	r2, r0
 8004066:	4613      	mov	r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	4413      	add	r3, r2
 800406c:	009a      	lsls	r2, r3, #2
 800406e:	441a      	add	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	fbb2 f3f3 	udiv	r3, r2, r3
 800407a:	4a31      	ldr	r2, [pc, #196]	; (8004140 <UART_SetConfig+0x410>)
 800407c:	fba2 2303 	umull	r2, r3, r2, r3
 8004080:	095b      	lsrs	r3, r3, #5
 8004082:	011c      	lsls	r4, r3, #4
 8004084:	f7fd fef0 	bl	8001e68 <HAL_RCC_GetPCLK1Freq>
 8004088:	4602      	mov	r2, r0
 800408a:	4613      	mov	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	4413      	add	r3, r2
 8004090:	009a      	lsls	r2, r3, #2
 8004092:	441a      	add	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	fbb2 f5f3 	udiv	r5, r2, r3
 800409e:	f7fd fee3 	bl	8001e68 <HAL_RCC_GetPCLK1Freq>
 80040a2:	4602      	mov	r2, r0
 80040a4:	4613      	mov	r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	4413      	add	r3, r2
 80040aa:	009a      	lsls	r2, r3, #2
 80040ac:	441a      	add	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b8:	4a21      	ldr	r2, [pc, #132]	; (8004140 <UART_SetConfig+0x410>)
 80040ba:	fba2 2303 	umull	r2, r3, r2, r3
 80040be:	095b      	lsrs	r3, r3, #5
 80040c0:	2264      	movs	r2, #100	; 0x64
 80040c2:	fb02 f303 	mul.w	r3, r2, r3
 80040c6:	1aeb      	subs	r3, r5, r3
 80040c8:	011b      	lsls	r3, r3, #4
 80040ca:	3332      	adds	r3, #50	; 0x32
 80040cc:	4a1c      	ldr	r2, [pc, #112]	; (8004140 <UART_SetConfig+0x410>)
 80040ce:	fba2 2303 	umull	r2, r3, r2, r3
 80040d2:	095b      	lsrs	r3, r3, #5
 80040d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040d8:	441c      	add	r4, r3
 80040da:	f7fd fec5 	bl	8001e68 <HAL_RCC_GetPCLK1Freq>
 80040de:	4602      	mov	r2, r0
 80040e0:	4613      	mov	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	009a      	lsls	r2, r3, #2
 80040e8:	441a      	add	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	fbb2 f5f3 	udiv	r5, r2, r3
 80040f4:	f7fd feb8 	bl	8001e68 <HAL_RCC_GetPCLK1Freq>
 80040f8:	4602      	mov	r2, r0
 80040fa:	4613      	mov	r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4413      	add	r3, r2
 8004100:	009a      	lsls	r2, r3, #2
 8004102:	441a      	add	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	fbb2 f3f3 	udiv	r3, r2, r3
 800410e:	4a0c      	ldr	r2, [pc, #48]	; (8004140 <UART_SetConfig+0x410>)
 8004110:	fba2 2303 	umull	r2, r3, r2, r3
 8004114:	095b      	lsrs	r3, r3, #5
 8004116:	2264      	movs	r2, #100	; 0x64
 8004118:	fb02 f303 	mul.w	r3, r2, r3
 800411c:	1aeb      	subs	r3, r5, r3
 800411e:	011b      	lsls	r3, r3, #4
 8004120:	3332      	adds	r3, #50	; 0x32
 8004122:	4a07      	ldr	r2, [pc, #28]	; (8004140 <UART_SetConfig+0x410>)
 8004124:	fba2 2303 	umull	r2, r3, r2, r3
 8004128:	095b      	lsrs	r3, r3, #5
 800412a:	f003 020f 	and.w	r2, r3, #15
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4422      	add	r2, r4
 8004134:	609a      	str	r2, [r3, #8]
}
 8004136:	e7ff      	b.n	8004138 <UART_SetConfig+0x408>
 8004138:	bf00      	nop
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bdb0      	pop	{r4, r5, r7, pc}
 8004140:	51eb851f 	.word	0x51eb851f

08004144 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800414e:	2300      	movs	r3, #0
 8004150:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800415c:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	4b2f      	ldr	r3, [pc, #188]	; (8004220 <FSMC_NORSRAM_Init+0xdc>)
 8004162:	4013      	ands	r3, r2
 8004164:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800416e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8004174:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800417a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8004180:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 8004186:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800418c:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8004192:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8004198:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800419e:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 80041a4:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 80041aa:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 80041b0:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 80041b6:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	2b08      	cmp	r3, #8
 80041c4:	d103      	bne.n	80041ce <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041cc:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68f9      	ldr	r1, [r7, #12]
 80041d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041e2:	d10a      	bne.n	80041fa <FSMC_NORSRAM_Init+0xb6>
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d006      	beq.n	80041fa <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f4:	431a      	orrs	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d006      	beq.n	8004210 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420a:	431a      	orrs	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3714      	adds	r7, #20
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	ffc00480 	.word	0xffc00480

08004224 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8004230:	2300      	movs	r3, #0
 8004232:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	1c5a      	adds	r2, r3, #1
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800423e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004246:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004252:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800425a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8004262:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	3b01      	subs	r3, #1
 800426a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800426c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	3b02      	subs	r3, #2
 8004274:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004276:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800427c:	4313      	orrs	r3, r2
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	4313      	orrs	r3, r2
 8004282:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	1c5a      	adds	r2, r3, #1
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6979      	ldr	r1, [r7, #20]
 800428c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004298:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800429c:	d10e      	bne.n	80042bc <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80042a6:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	3b01      	subs	r3, #1
 80042ae:	051b      	lsls	r3, r3, #20
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	371c      	adds	r7, #28
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
	...

080042cc <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b087      	sub	sp, #28
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
 80042d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80042da:	2300      	movs	r3, #0
 80042dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042e4:	d122      	bne.n	800432c <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042ee:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	4b15      	ldr	r3, [pc, #84]	; (8004348 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80042f4:	4013      	ands	r3, r2
 80042f6:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004302:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800430a:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8004312:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004318:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	4313      	orrs	r3, r2
 800431e:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	6979      	ldr	r1, [r7, #20]
 8004326:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800432a:	e005      	b.n	8004338 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8004334:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	371c      	adds	r7, #28
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	cff00000 	.word	0xcff00000

0800434c <SDIO_Init>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800434c:	b084      	sub	sp, #16
 800434e:	b480      	push	{r7}
 8004350:	b085      	sub	sp, #20
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
 8004356:	f107 001c 	add.w	r0, r7, #28
 800435a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U;
 800435e:	2300      	movs	r3, #0
 8004360:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004362:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004364:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004366:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800436a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800436c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800436e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004372:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004376:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	4313      	orrs	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004386:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	431a      	orrs	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3714      	adds	r7, #20
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	b004      	add	sp, #16
 80043a0:	4770      	bx	lr

080043a2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80043a2:	b480      	push	{r7}
 80043a4:	b083      	sub	sp, #12
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <SDIO_WriteFIFO>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80043de:	b480      	push	{r7}
 80043e0:	b083      	sub	sp, #12
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2203      	movs	r2, #3
 80043ea:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80043fa:	b480      	push	{r7}
 80043fc:	b083      	sub	sp, #12
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0303 	and.w	r3, r3, #3
}
 800440a:	4618      	mov	r0, r3
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <SDIO_SendCommand>:
  * @param  Command pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004416:	b480      	push	{r7}
 8004418:	b085      	sub	sp, #20
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
 800441e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004420:	2300      	movs	r3, #0
 8004422:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004434:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800443a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004440:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	4313      	orrs	r3, r2
 8004446:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004450:	f023 030f 	bic.w	r3, r3, #15
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	431a      	orrs	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3714      	adds	r7, #20
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr

0800446a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800446a:	b480      	push	{r7}
 800446c:	b083      	sub	sp, #12
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	b2db      	uxtb	r3, r3
}
 8004478:	4618      	mov	r0, r3
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <SDIO_GetResponse>:
  *            @arg SDIO_RESP1: Response Register 3
  *            @arg SDIO_RESP1: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 800448e:	2300      	movs	r3, #0
 8004490:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	3314      	adds	r3, #20
 8004496:	461a      	mov	r2, r3
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	4413      	add	r3, r2
 800449c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
}  
 80044a2:	4618      	mov	r0, r3
 80044a4:	3714      	adds	r7, #20
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr

080044ae <SDIO_ConfigData>:
  * @param  Data  pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80044ae:	b480      	push	{r7}
 80044b0:	b085      	sub	sp, #20
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
 80044b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80044b8:	2300      	movs	r3, #0
 80044ba:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80044d4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80044da:	431a      	orrs	r2, r3
                       Data->DPSM);
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80044e0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ec:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	431a      	orrs	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0

}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3714      	adds	r7, #20
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b088      	sub	sp, #32
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
 800450e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004510:	2300      	movs	r3, #0
 8004512:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004518:	2310      	movs	r3, #16
 800451a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800451c:	2340      	movs	r3, #64	; 0x40
 800451e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004520:	2300      	movs	r3, #0
 8004522:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004524:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004528:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800452a:	f107 0308 	add.w	r3, r7, #8
 800452e:	4619      	mov	r1, r3
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f7ff ff70 	bl	8004416 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004536:	f241 3288 	movw	r2, #5000	; 0x1388
 800453a:	2110      	movs	r1, #16
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 fa63 	bl	8004a08 <SDMMC_GetCmdResp1>
 8004542:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004544:	69fb      	ldr	r3, [r7, #28]
}
 8004546:	4618      	mov	r0, r3
 8004548:	3720      	adds	r7, #32
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b088      	sub	sp, #32
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
 8004556:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004558:	2300      	movs	r3, #0
 800455a:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004560:	2311      	movs	r3, #17
 8004562:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004564:	2340      	movs	r3, #64	; 0x40
 8004566:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004568:	2300      	movs	r3, #0
 800456a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800456c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004570:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004572:	f107 0308 	add.w	r3, r7, #8
 8004576:	4619      	mov	r1, r3
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f7ff ff4c 	bl	8004416 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800457e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004582:	2111      	movs	r1, #17
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 fa3f 	bl	8004a08 <SDMMC_GetCmdResp1>
 800458a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800458c:	69fb      	ldr	r3, [r7, #28]
}
 800458e:	4618      	mov	r0, r3
 8004590:	3720      	adds	r7, #32
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004596:	b580      	push	{r7, lr}
 8004598:	b088      	sub	sp, #32
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
 800459e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80045a0:	2300      	movs	r3, #0
 80045a2:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80045a8:	2312      	movs	r3, #18
 80045aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80045ac:	2340      	movs	r3, #64	; 0x40
 80045ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80045b0:	2300      	movs	r3, #0
 80045b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80045b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045b8:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80045ba:	f107 0308 	add.w	r3, r7, #8
 80045be:	4619      	mov	r1, r3
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f7ff ff28 	bl	8004416 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80045c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ca:	2112      	movs	r1, #18
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 fa1b 	bl	8004a08 <SDMMC_GetCmdResp1>
 80045d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80045d4:	69fb      	ldr	r3, [r7, #28]
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3720      	adds	r7, #32
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	b088      	sub	sp, #32
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
 80045e6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80045e8:	2300      	movs	r3, #0
 80045ea:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80045f0:	2318      	movs	r3, #24
 80045f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80045f4:	2340      	movs	r3, #64	; 0x40
 80045f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80045f8:	2300      	movs	r3, #0
 80045fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80045fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004600:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004602:	f107 0308 	add.w	r3, r7, #8
 8004606:	4619      	mov	r1, r3
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f7ff ff04 	bl	8004416 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800460e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004612:	2118      	movs	r1, #24
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 f9f7 	bl	8004a08 <SDMMC_GetCmdResp1>
 800461a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800461c:	69fb      	ldr	r3, [r7, #28]
}
 800461e:	4618      	mov	r0, r3
 8004620:	3720      	adds	r7, #32
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004626:	b580      	push	{r7, lr}
 8004628:	b088      	sub	sp, #32
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
 800462e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004630:	2300      	movs	r3, #0
 8004632:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004638:	2319      	movs	r3, #25
 800463a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800463c:	2340      	movs	r3, #64	; 0x40
 800463e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004640:	2300      	movs	r3, #0
 8004642:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004644:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004648:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800464a:	f107 0308 	add.w	r3, r7, #8
 800464e:	4619      	mov	r1, r3
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f7ff fee0 	bl	8004416 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004656:	f241 3288 	movw	r2, #5000	; 0x1388
 800465a:	2119      	movs	r1, #25
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 f9d3 	bl	8004a08 <SDMMC_GetCmdResp1>
 8004662:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004664:	69fb      	ldr	r3, [r7, #28]
}
 8004666:	4618      	mov	r0, r3
 8004668:	3720      	adds	r7, #32
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
	...

08004670 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b088      	sub	sp, #32
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004678:	2300      	movs	r3, #0
 800467a:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800467c:	2300      	movs	r3, #0
 800467e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004680:	230c      	movs	r3, #12
 8004682:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004684:	2340      	movs	r3, #64	; 0x40
 8004686:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004688:	2300      	movs	r3, #0
 800468a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800468c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004690:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004692:	f107 0308 	add.w	r3, r7, #8
 8004696:	4619      	mov	r1, r3
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f7ff febc 	bl	8004416 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 800469e:	4a05      	ldr	r2, [pc, #20]	; (80046b4 <SDMMC_CmdStopTransfer+0x44>)
 80046a0:	210c      	movs	r1, #12
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f9b0 	bl	8004a08 <SDMMC_GetCmdResp1>
 80046a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80046aa:	69fb      	ldr	r3, [r7, #28]
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3720      	adds	r7, #32
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	05f5e100 	.word	0x05f5e100

080046b8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx Pointer to SDIO register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b08a      	sub	sp, #40	; 0x28
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80046c4:	2300      	movs	r3, #0
 80046c6:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80046cc:	2307      	movs	r3, #7
 80046ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80046d0:	2340      	movs	r3, #64	; 0x40
 80046d2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80046d4:	2300      	movs	r3, #0
 80046d6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80046d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046dc:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80046de:	f107 0310 	add.w	r3, r7, #16
 80046e2:	4619      	mov	r1, r3
 80046e4:	68f8      	ldr	r0, [r7, #12]
 80046e6:	f7ff fe96 	bl	8004416 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80046ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ee:	2107      	movs	r1, #7
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f000 f989 	bl	8004a08 <SDMMC_GetCmdResp1>
 80046f6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80046f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3728      	adds	r7, #40	; 0x28
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b088      	sub	sp, #32
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800470a:	2300      	movs	r3, #0
 800470c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0U;
 800470e:	2300      	movs	r3, #0
 8004710:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004712:	2300      	movs	r3, #0
 8004714:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004716:	2300      	movs	r3, #0
 8004718:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800471a:	2300      	movs	r3, #0
 800471c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800471e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004722:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004724:	f107 0308 	add.w	r3, r7, #8
 8004728:	4619      	mov	r1, r3
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f7ff fe73 	bl	8004416 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 f93f 	bl	80049b4 <SDMMC_GetCmdError>
 8004736:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004738:	69fb      	ldr	r3, [r7, #28]
}
 800473a:	4618      	mov	r0, r3
 800473c:	3720      	adds	r7, #32
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b088      	sub	sp, #32
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800474a:	2300      	movs	r3, #0
 800474c:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800474e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004752:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004754:	2308      	movs	r3, #8
 8004756:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004758:	2340      	movs	r3, #64	; 0x40
 800475a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800475c:	2300      	movs	r3, #0
 800475e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004760:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004764:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004766:	f107 0308 	add.w	r3, r7, #8
 800476a:	4619      	mov	r1, r3
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f7ff fe52 	bl	8004416 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 fb10 	bl	8004d98 <SDMMC_GetCmdResp7>
 8004778:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800477a:	69fb      	ldr	r3, [r7, #28]
}
 800477c:	4618      	mov	r0, r3
 800477e:	3720      	adds	r7, #32
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b088      	sub	sp, #32
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800478e:	2300      	movs	r3, #0
 8004790:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004796:	2337      	movs	r3, #55	; 0x37
 8004798:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800479a:	2340      	movs	r3, #64	; 0x40
 800479c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800479e:	2300      	movs	r3, #0
 80047a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80047a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047a6:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80047a8:	f107 0308 	add.w	r3, r7, #8
 80047ac:	4619      	mov	r1, r3
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7ff fe31 	bl	8004416 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80047b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b8:	2137      	movs	r1, #55	; 0x37
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f924 	bl	8004a08 <SDMMC_GetCmdResp1>
 80047c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80047c2:	69fb      	ldr	r3, [r7, #28]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3720      	adds	r7, #32
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b088      	sub	sp, #32
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80047d6:	2300      	movs	r3, #0
 80047d8:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80047e6:	2329      	movs	r3, #41	; 0x29
 80047e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80047ea:	2340      	movs	r3, #64	; 0x40
 80047ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80047ee:	2300      	movs	r3, #0
 80047f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80047f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047f6:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80047f8:	f107 0308 	add.w	r3, r7, #8
 80047fc:	4619      	mov	r1, r3
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7ff fe09 	bl	8004416 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 fa25 	bl	8004c54 <SDMMC_GetCmdResp3>
 800480a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800480c:	69fb      	ldr	r3, [r7, #28]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3720      	adds	r7, #32
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b088      	sub	sp, #32
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
 800481e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004820:	2300      	movs	r3, #0
 8004822:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004828:	2306      	movs	r3, #6
 800482a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800482c:	2340      	movs	r3, #64	; 0x40
 800482e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004830:	2300      	movs	r3, #0
 8004832:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004834:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004838:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800483a:	f107 0308 	add.w	r3, r7, #8
 800483e:	4619      	mov	r1, r3
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f7ff fde8 	bl	8004416 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8004846:	f241 3288 	movw	r2, #5000	; 0x1388
 800484a:	2106      	movs	r1, #6
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 f8db 	bl	8004a08 <SDMMC_GetCmdResp1>
 8004852:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004854:	69fb      	ldr	r3, [r7, #28]
}
 8004856:	4618      	mov	r0, r3
 8004858:	3720      	adds	r7, #32
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b088      	sub	sp, #32
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004866:	2300      	movs	r3, #0
 8004868:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800486a:	2300      	movs	r3, #0
 800486c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800486e:	2333      	movs	r3, #51	; 0x33
 8004870:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004872:	2340      	movs	r3, #64	; 0x40
 8004874:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004876:	2300      	movs	r3, #0
 8004878:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800487a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800487e:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004880:	f107 0308 	add.w	r3, r7, #8
 8004884:	4619      	mov	r1, r3
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f7ff fdc5 	bl	8004416 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800488c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004890:	2133      	movs	r1, #51	; 0x33
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f8b8 	bl	8004a08 <SDMMC_GetCmdResp1>
 8004898:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800489a:	69fb      	ldr	r3, [r7, #28]
}
 800489c:	4618      	mov	r0, r3
 800489e:	3720      	adds	r7, #32
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b088      	sub	sp, #32
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80048ac:	2300      	movs	r3, #0
 80048ae:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80048b0:	2300      	movs	r3, #0
 80048b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80048b4:	2302      	movs	r3, #2
 80048b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80048b8:	23c0      	movs	r3, #192	; 0xc0
 80048ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80048bc:	2300      	movs	r3, #0
 80048be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80048c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048c4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80048c6:	f107 0308 	add.w	r3, r7, #8
 80048ca:	4619      	mov	r1, r3
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f7ff fda2 	bl	8004416 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f97e 	bl	8004bd4 <SDMMC_GetCmdResp2>
 80048d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80048da:	69fb      	ldr	r3, [r7, #28]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3720      	adds	r7, #32
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b088      	sub	sp, #32
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80048ee:	2300      	movs	r3, #0
 80048f0:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80048f6:	2309      	movs	r3, #9
 80048f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80048fa:	23c0      	movs	r3, #192	; 0xc0
 80048fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80048fe:	2300      	movs	r3, #0
 8004900:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004902:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004906:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004908:	f107 0308 	add.w	r3, r7, #8
 800490c:	4619      	mov	r1, r3
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7ff fd81 	bl	8004416 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 f95d 	bl	8004bd4 <SDMMC_GetCmdResp2>
 800491a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800491c:	69fb      	ldr	r3, [r7, #28]
}
 800491e:	4618      	mov	r0, r3
 8004920:	3720      	adds	r7, #32
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b088      	sub	sp, #32
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
 800492e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004930:	2300      	movs	r3, #0
 8004932:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004934:	2300      	movs	r3, #0
 8004936:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004938:	2303      	movs	r3, #3
 800493a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800493c:	2340      	movs	r3, #64	; 0x40
 800493e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004940:	2300      	movs	r3, #0
 8004942:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004944:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004948:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800494a:	f107 0308 	add.w	r3, r7, #8
 800494e:	4619      	mov	r1, r3
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f7ff fd60 	bl	8004416 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	2103      	movs	r1, #3
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f9ae 	bl	8004cbc <SDMMC_GetCmdResp6>
 8004960:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004962:	69fb      	ldr	r3, [r7, #28]
}
 8004964:	4618      	mov	r0, r3
 8004966:	3720      	adds	r7, #32
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b088      	sub	sp, #32
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004976:	2300      	movs	r3, #0
 8004978:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800497e:	230d      	movs	r3, #13
 8004980:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004982:	2340      	movs	r3, #64	; 0x40
 8004984:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004986:	2300      	movs	r3, #0
 8004988:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800498a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800498e:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004990:	f107 0308 	add.w	r3, r7, #8
 8004994:	4619      	mov	r1, r3
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7ff fd3d 	bl	8004416 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800499c:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a0:	210d      	movs	r1, #13
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f830 	bl	8004a08 <SDMMC_GetCmdResp1>
 80049a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049aa:	69fb      	ldr	r3, [r7, #28]
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3720      	adds	r7, #32
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80049b4:	b490      	push	{r4, r7}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80049bc:	4b10      	ldr	r3, [pc, #64]	; (8004a00 <SDMMC_GetCmdError+0x4c>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a10      	ldr	r2, [pc, #64]	; (8004a04 <SDMMC_GetCmdError+0x50>)
 80049c2:	fba2 2303 	umull	r2, r3, r2, r3
 80049c6:	0a5b      	lsrs	r3, r3, #9
 80049c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049cc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80049d0:	4623      	mov	r3, r4
 80049d2:	1e5c      	subs	r4, r3, #1
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d102      	bne.n	80049de <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80049d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80049dc:	e00a      	b.n	80049f4 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0f2      	beq.n	80049d0 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80049f0:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3708      	adds	r7, #8
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bc90      	pop	{r4, r7}
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	20000118 	.word	0x20000118
 8004a04:	10624dd3 	.word	0x10624dd3

08004a08 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004a08:	b590      	push	{r4, r7, lr}
 8004a0a:	b087      	sub	sp, #28
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	460b      	mov	r3, r1
 8004a12:	607a      	str	r2, [r7, #4]
 8004a14:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004a16:	4b6c      	ldr	r3, [pc, #432]	; (8004bc8 <SDMMC_GetCmdResp1+0x1c0>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a6c      	ldr	r2, [pc, #432]	; (8004bcc <SDMMC_GetCmdResp1+0x1c4>)
 8004a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a20:	0a5b      	lsrs	r3, r3, #9
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004a28:	4623      	mov	r3, r4
 8004a2a:	1e5c      	subs	r4, r3, #1
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d102      	bne.n	8004a36 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004a30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004a34:	e0c3      	b.n	8004bbe <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a3a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0f2      	beq.n	8004a28 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a46:	f003 0304 	and.w	r3, r3, #4
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d004      	beq.n	8004a58 <SDMMC_GetCmdResp1+0x50>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2204      	movs	r2, #4
 8004a52:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004a54:	2304      	movs	r3, #4
 8004a56:	e0b2      	b.n	8004bbe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a5c:	f003 0301 	and.w	r3, r3, #1
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d004      	beq.n	8004a6e <SDMMC_GetCmdResp1+0x66>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2201      	movs	r2, #1
 8004a68:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e0a7      	b.n	8004bbe <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f7ff fcfb 	bl	800446a <SDIO_GetCommandResponse>
 8004a74:	4603      	mov	r3, r0
 8004a76:	461a      	mov	r2, r3
 8004a78:	7afb      	ldrb	r3, [r7, #11]
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d001      	beq.n	8004a82 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e09d      	b.n	8004bbe <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004a88:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f7ff fcf9 	bl	8004484 <SDIO_GetResponse>
 8004a92:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	4b4e      	ldr	r3, [pc, #312]	; (8004bd0 <SDMMC_GetCmdResp1+0x1c8>)
 8004a98:	4013      	ands	r3, r2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	e08d      	b.n	8004bbe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	da02      	bge.n	8004aae <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004aa8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004aac:	e087      	b.n	8004bbe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d001      	beq.n	8004abc <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004ab8:	2340      	movs	r3, #64	; 0x40
 8004aba:	e080      	b.n	8004bbe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004ac6:	2380      	movs	r3, #128	; 0x80
 8004ac8:	e079      	b.n	8004bbe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d002      	beq.n	8004ada <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004ad4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ad8:	e071      	b.n	8004bbe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d002      	beq.n	8004aea <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004ae4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ae8:	e069      	b.n	8004bbe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d002      	beq.n	8004afa <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004af4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004af8:	e061      	b.n	8004bbe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d002      	beq.n	8004b0a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004b04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b08:	e059      	b.n	8004bbe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d002      	beq.n	8004b1a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004b14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b18:	e051      	b.n	8004bbe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d002      	beq.n	8004b2a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004b24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b28:	e049      	b.n	8004bbe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d002      	beq.n	8004b3a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004b34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004b38:	e041      	b.n	8004bbe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d002      	beq.n	8004b4a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 8004b44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b48:	e039      	b.n	8004bbe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d002      	beq.n	8004b5a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004b54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b58:	e031      	b.n	8004bbe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d002      	beq.n	8004b6a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004b64:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004b68:	e029      	b.n	8004bbe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d002      	beq.n	8004b7a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004b74:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004b78:	e021      	b.n	8004bbe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d002      	beq.n	8004b8a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004b84:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004b88:	e019      	b.n	8004bbe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d002      	beq.n	8004b9a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004b94:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004b98:	e011      	b.n	8004bbe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d002      	beq.n	8004baa <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004ba4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004ba8:	e009      	b.n	8004bbe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	f003 0308 	and.w	r3, r3, #8
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d002      	beq.n	8004bba <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004bb4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004bb8:	e001      	b.n	8004bbe <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004bba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	371c      	adds	r7, #28
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd90      	pop	{r4, r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	20000118 	.word	0x20000118
 8004bcc:	10624dd3 	.word	0x10624dd3
 8004bd0:	fdffe008 	.word	0xfdffe008

08004bd4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004bd4:	b490      	push	{r4, r7}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004bdc:	4b1b      	ldr	r3, [pc, #108]	; (8004c4c <SDMMC_GetCmdResp2+0x78>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a1b      	ldr	r2, [pc, #108]	; (8004c50 <SDMMC_GetCmdResp2+0x7c>)
 8004be2:	fba2 2303 	umull	r2, r3, r2, r3
 8004be6:	0a5b      	lsrs	r3, r3, #9
 8004be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bec:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004bf0:	4623      	mov	r3, r4
 8004bf2:	1e5c      	subs	r4, r3, #1
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d102      	bne.n	8004bfe <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004bf8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004bfc:	e020      	b.n	8004c40 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c02:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d0f2      	beq.n	8004bf0 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c0e:	f003 0304 	and.w	r3, r3, #4
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d004      	beq.n	8004c20 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2204      	movs	r2, #4
 8004c1a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004c1c:	2304      	movs	r3, #4
 8004c1e:	e00f      	b.n	8004c40 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c24:	f003 0301 	and.w	r3, r3, #1
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d004      	beq.n	8004c36 <SDMMC_GetCmdResp2+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e004      	b.n	8004c40 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004c3c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3708      	adds	r7, #8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bc90      	pop	{r4, r7}
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	20000118 	.word	0x20000118
 8004c50:	10624dd3 	.word	0x10624dd3

08004c54 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8004c54:	b490      	push	{r4, r7}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004c5c:	4b15      	ldr	r3, [pc, #84]	; (8004cb4 <SDMMC_GetCmdResp3+0x60>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a15      	ldr	r2, [pc, #84]	; (8004cb8 <SDMMC_GetCmdResp3+0x64>)
 8004c62:	fba2 2303 	umull	r2, r3, r2, r3
 8004c66:	0a5b      	lsrs	r3, r3, #9
 8004c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c6c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004c70:	4623      	mov	r3, r4
 8004c72:	1e5c      	subs	r4, r3, #1
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d102      	bne.n	8004c7e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004c78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004c7c:	e015      	b.n	8004caa <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c82:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d0f2      	beq.n	8004c70 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c8e:	f003 0304 	and.w	r3, r3, #4
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d004      	beq.n	8004ca0 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2204      	movs	r2, #4
 8004c9a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004c9c:	2304      	movs	r3, #4
 8004c9e:	e004      	b.n	8004caa <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004ca6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3708      	adds	r7, #8
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bc90      	pop	{r4, r7}
 8004cb2:	4770      	bx	lr
 8004cb4:	20000118 	.word	0x20000118
 8004cb8:	10624dd3 	.word	0x10624dd3

08004cbc <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004cbc:	b590      	push	{r4, r7, lr}
 8004cbe:	b087      	sub	sp, #28
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	607a      	str	r2, [r7, #4]
 8004cc8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004cca:	4b31      	ldr	r3, [pc, #196]	; (8004d90 <SDMMC_GetCmdResp6+0xd4>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a31      	ldr	r2, [pc, #196]	; (8004d94 <SDMMC_GetCmdResp6+0xd8>)
 8004cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd4:	0a5b      	lsrs	r3, r3, #9
 8004cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cda:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004cde:	4623      	mov	r3, r4
 8004ce0:	1e5c      	subs	r4, r3, #1
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d102      	bne.n	8004cec <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004ce6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004cea:	e04c      	b.n	8004d86 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf0:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d0f2      	beq.n	8004cde <SDMMC_GetCmdResp6+0x22>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cfc:	f003 0304 	and.w	r3, r3, #4
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d004      	beq.n	8004d0e <SDMMC_GetCmdResp6+0x52>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2204      	movs	r2, #4
 8004d08:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004d0a:	2304      	movs	r3, #4
 8004d0c:	e03b      	b.n	8004d86 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d004      	beq.n	8004d24 <SDMMC_GetCmdResp6+0x68>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e030      	b.n	8004d86 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f7ff fba0 	bl	800446a <SDIO_GetCommandResponse>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	7afb      	ldrb	r3, [r7, #11]
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d001      	beq.n	8004d38 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e026      	b.n	8004d86 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004d3e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004d40:	2100      	movs	r1, #0
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f7ff fb9e 	bl	8004484 <SDIO_GetResponse>
 8004d48:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d106      	bne.n	8004d62 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	0c1b      	lsrs	r3, r3, #16
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	e011      	b.n	8004d86 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d002      	beq.n	8004d72 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004d6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d70:	e009      	b.n	8004d86 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d002      	beq.n	8004d82 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004d7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d80:	e001      	b.n	8004d86 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004d82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	371c      	adds	r7, #28
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd90      	pop	{r4, r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	20000118 	.word	0x20000118
 8004d94:	10624dd3 	.word	0x10624dd3

08004d98 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004d98:	b490      	push	{r4, r7}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004da0:	4b18      	ldr	r3, [pc, #96]	; (8004e04 <SDMMC_GetCmdResp7+0x6c>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a18      	ldr	r2, [pc, #96]	; (8004e08 <SDMMC_GetCmdResp7+0x70>)
 8004da6:	fba2 2303 	umull	r2, r3, r2, r3
 8004daa:	0a5b      	lsrs	r3, r3, #9
 8004dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004db0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004db4:	4623      	mov	r3, r4
 8004db6:	1e5c      	subs	r4, r3, #1
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d102      	bne.n	8004dc2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004dbc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004dc0:	e01a      	b.n	8004df8 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d0f2      	beq.n	8004db4 <SDMMC_GetCmdResp7+0x1c>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dd2:	f003 0304 	and.w	r3, r3, #4
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d004      	beq.n	8004de4 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2240      	movs	r2, #64	; 0x40
 8004dde:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004de0:	2304      	movs	r3, #4
 8004de2:	e009      	b.n	8004df8 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d002      	beq.n	8004df6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2240      	movs	r2, #64	; 0x40
 8004df4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004df6:	2300      	movs	r3, #0
  
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3708      	adds	r7, #8
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bc90      	pop	{r4, r7}
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	20000118 	.word	0x20000118
 8004e08:	10624dd3 	.word	0x10624dd3

08004e0c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e0c:	b084      	sub	sp, #16
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b084      	sub	sp, #16
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
 8004e16:	f107 001c 	add.w	r0, r7, #28
 8004e1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d122      	bne.n	8004e6a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004e38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d105      	bne.n	8004e5e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f001 f822 	bl	8005ea8 <USB_CoreReset>
 8004e64:	4603      	mov	r3, r0
 8004e66:	73fb      	strb	r3, [r7, #15]
 8004e68:	e01a      	b.n	8004ea0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f001 f816 	bl	8005ea8 <USB_CoreReset>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d106      	bne.n	8004e94 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	639a      	str	r2, [r3, #56]	; 0x38
 8004e92:	e005      	b.n	8004ea0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d10b      	bne.n	8004ebe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f043 0206 	orr.w	r2, r3, #6
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f043 0220 	orr.w	r2, r3, #32
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004eca:	b004      	add	sp, #16
 8004ecc:	4770      	bx	lr

08004ece <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ece:	b480      	push	{r7}
 8004ed0:	b083      	sub	sp, #12
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f043 0201 	orr.w	r2, r3, #1
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f023 0201 	bic.w	r2, r3, #1
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	370c      	adds	r7, #12
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr

08004f12 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b082      	sub	sp, #8
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f2a:	78fb      	ldrb	r3, [r7, #3]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d106      	bne.n	8004f3e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	60da      	str	r2, [r3, #12]
 8004f3c:	e00b      	b.n	8004f56 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f3e:	78fb      	ldrb	r3, [r7, #3]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d106      	bne.n	8004f52 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	60da      	str	r2, [r3, #12]
 8004f50:	e001      	b.n	8004f56 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e003      	b.n	8004f5e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004f56:	2032      	movs	r0, #50	; 0x32
 8004f58:	f7fb fb50 	bl	80005fc <HAL_Delay>

  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3708      	adds	r7, #8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
	...

08004f68 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f68:	b084      	sub	sp, #16
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b086      	sub	sp, #24
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
 8004f72:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004f76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004f82:	2300      	movs	r3, #0
 8004f84:	613b      	str	r3, [r7, #16]
 8004f86:	e009      	b.n	8004f9c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	3340      	adds	r3, #64	; 0x40
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	4413      	add	r3, r2
 8004f92:	2200      	movs	r2, #0
 8004f94:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	613b      	str	r3, [r7, #16]
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	2b0e      	cmp	r3, #14
 8004fa0:	d9f2      	bls.n	8004f88 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d112      	bne.n	8004fce <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fac:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	601a      	str	r2, [r3, #0]
 8004fcc:	e005      	b.n	8004fda <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fec:	4619      	mov	r1, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	680b      	ldr	r3, [r1, #0]
 8004ff8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d10c      	bne.n	800501a <USB_DevInit+0xb2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005002:	2b00      	cmp	r3, #0
 8005004:	d104      	bne.n	8005010 <USB_DevInit+0xa8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005006:	2100      	movs	r1, #0
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 f961 	bl	80052d0 <USB_SetDevSpeed>
 800500e:	e008      	b.n	8005022 <USB_DevInit+0xba>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005010:	2101      	movs	r1, #1
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f95c 	bl	80052d0 <USB_SetDevSpeed>
 8005018:	e003      	b.n	8005022 <USB_DevInit+0xba>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800501a:	2103      	movs	r1, #3
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 f957 	bl	80052d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005022:	2110      	movs	r1, #16
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 f90b 	bl	8005240 <USB_FlushTxFifo>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d001      	beq.n	8005034 <USB_DevInit+0xcc>
  {
    ret = HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 f929 	bl	800528c <USB_FlushRxFifo>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d001      	beq.n	8005044 <USB_DevInit+0xdc>
  {
    ret = HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800504a:	461a      	mov	r2, r3
 800504c:	2300      	movs	r3, #0
 800504e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005056:	461a      	mov	r2, r3
 8005058:	2300      	movs	r3, #0
 800505a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005062:	461a      	mov	r2, r3
 8005064:	2300      	movs	r3, #0
 8005066:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005068:	2300      	movs	r3, #0
 800506a:	613b      	str	r3, [r7, #16]
 800506c:	e043      	b.n	80050f6 <USB_DevInit+0x18e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	4413      	add	r3, r2
 8005076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005080:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005084:	d118      	bne.n	80050b8 <USB_DevInit+0x150>
    {
      if (i == 0U)
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d10a      	bne.n	80050a2 <USB_DevInit+0x13a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	015a      	lsls	r2, r3, #5
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	4413      	add	r3, r2
 8005094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005098:	461a      	mov	r2, r3
 800509a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800509e:	6013      	str	r3, [r2, #0]
 80050a0:	e013      	b.n	80050ca <USB_DevInit+0x162>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	015a      	lsls	r2, r3, #5
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	4413      	add	r3, r2
 80050aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ae:	461a      	mov	r2, r3
 80050b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80050b4:	6013      	str	r3, [r2, #0]
 80050b6:	e008      	b.n	80050ca <USB_DevInit+0x162>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	015a      	lsls	r2, r3, #5
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	4413      	add	r3, r2
 80050c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c4:	461a      	mov	r2, r3
 80050c6:	2300      	movs	r3, #0
 80050c8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	015a      	lsls	r2, r3, #5
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	4413      	add	r3, r2
 80050d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050d6:	461a      	mov	r2, r3
 80050d8:	2300      	movs	r3, #0
 80050da:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	015a      	lsls	r2, r3, #5
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	4413      	add	r3, r2
 80050e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e8:	461a      	mov	r2, r3
 80050ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80050ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	3301      	adds	r3, #1
 80050f4:	613b      	str	r3, [r7, #16]
 80050f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d3b7      	bcc.n	800506e <USB_DevInit+0x106>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050fe:	2300      	movs	r3, #0
 8005100:	613b      	str	r3, [r7, #16]
 8005102:	e043      	b.n	800518c <USB_DevInit+0x224>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	015a      	lsls	r2, r3, #5
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	4413      	add	r3, r2
 800510c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005116:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800511a:	d118      	bne.n	800514e <USB_DevInit+0x1e6>
    {
      if (i == 0U)
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10a      	bne.n	8005138 <USB_DevInit+0x1d0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	015a      	lsls	r2, r3, #5
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	4413      	add	r3, r2
 800512a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800512e:	461a      	mov	r2, r3
 8005130:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005134:	6013      	str	r3, [r2, #0]
 8005136:	e013      	b.n	8005160 <USB_DevInit+0x1f8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	015a      	lsls	r2, r3, #5
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4413      	add	r3, r2
 8005140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005144:	461a      	mov	r2, r3
 8005146:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800514a:	6013      	str	r3, [r2, #0]
 800514c:	e008      	b.n	8005160 <USB_DevInit+0x1f8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	015a      	lsls	r2, r3, #5
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	4413      	add	r3, r2
 8005156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800515a:	461a      	mov	r2, r3
 800515c:	2300      	movs	r3, #0
 800515e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	015a      	lsls	r2, r3, #5
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	4413      	add	r3, r2
 8005168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800516c:	461a      	mov	r2, r3
 800516e:	2300      	movs	r3, #0
 8005170:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	015a      	lsls	r2, r3, #5
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	4413      	add	r3, r2
 800517a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800517e:	461a      	mov	r2, r3
 8005180:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005184:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	3301      	adds	r3, #1
 800518a:	613b      	str	r3, [r7, #16]
 800518c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	429a      	cmp	r2, r3
 8005192:	d3b7      	bcc.n	8005104 <USB_DevInit+0x19c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051a6:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 80051a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d111      	bne.n	80051d2 <USB_DevInit+0x26a>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b4:	461a      	mov	r2, r3
 80051b6:	4b20      	ldr	r3, [pc, #128]	; (8005238 <USB_DevInit+0x2d0>)
 80051b8:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051cc:	f043 0303 	orr.w	r3, r3, #3
 80051d0:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80051de:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80051e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d105      	bne.n	80051f2 <USB_DevInit+0x28a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	f043 0210 	orr.w	r2, r3, #16
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	699a      	ldr	r2, [r3, #24]
 80051f6:	4b11      	ldr	r3, [pc, #68]	; (800523c <USB_DevInit+0x2d4>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80051fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005200:	2b00      	cmp	r3, #0
 8005202:	d005      	beq.n	8005210 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	f043 0208 	orr.w	r2, r3, #8
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005212:	2b01      	cmp	r3, #1
 8005214:	d107      	bne.n	8005226 <USB_DevInit+0x2be>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800521e:	f043 0304 	orr.w	r3, r3, #4
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005226:	7dfb      	ldrb	r3, [r7, #23]
}
 8005228:	4618      	mov	r0, r3
 800522a:	3718      	adds	r7, #24
 800522c:	46bd      	mov	sp, r7
 800522e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005232:	b004      	add	sp, #16
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop
 8005238:	00800100 	.word	0x00800100
 800523c:	803c3800 	.word	0x803c3800

08005240 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800524a:	2300      	movs	r3, #0
 800524c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	019b      	lsls	r3, r3, #6
 8005252:	f043 0220 	orr.w	r2, r3, #32
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	3301      	adds	r3, #1
 800525e:	60fb      	str	r3, [r7, #12]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4a09      	ldr	r2, [pc, #36]	; (8005288 <USB_FlushTxFifo+0x48>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d901      	bls.n	800526c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e006      	b.n	800527a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	f003 0320 	and.w	r3, r3, #32
 8005274:	2b20      	cmp	r3, #32
 8005276:	d0f0      	beq.n	800525a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3714      	adds	r7, #20
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	00030d40 	.word	0x00030d40

0800528c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005294:	2300      	movs	r3, #0
 8005296:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2210      	movs	r2, #16
 800529c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	3301      	adds	r3, #1
 80052a2:	60fb      	str	r3, [r7, #12]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	4a09      	ldr	r2, [pc, #36]	; (80052cc <USB_FlushRxFifo+0x40>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d901      	bls.n	80052b0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e006      	b.n	80052be <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	f003 0310 	and.w	r3, r3, #16
 80052b8:	2b10      	cmp	r3, #16
 80052ba:	d0f0      	beq.n	800529e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3714      	adds	r7, #20
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	00030d40 	.word	0x00030d40

080052d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	460b      	mov	r3, r1
 80052da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	78fb      	ldrb	r3, [r7, #3]
 80052ea:	68f9      	ldr	r1, [r7, #12]
 80052ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052f0:	4313      	orrs	r3, r2
 80052f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3714      	adds	r7, #20
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005302:	b480      	push	{r7}
 8005304:	b085      	sub	sp, #20
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
 800530a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	785b      	ldrb	r3, [r3, #1]
 800531a:	2b01      	cmp	r3, #1
 800531c:	d13a      	bne.n	8005394 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005324:	69da      	ldr	r2, [r3, #28]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	f003 030f 	and.w	r3, r3, #15
 800532e:	2101      	movs	r1, #1
 8005330:	fa01 f303 	lsl.w	r3, r1, r3
 8005334:	b29b      	uxth	r3, r3
 8005336:	68f9      	ldr	r1, [r7, #12]
 8005338:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800533c:	4313      	orrs	r3, r2
 800533e:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	015a      	lsls	r2, r3, #5
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	4413      	add	r3, r2
 8005348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d155      	bne.n	8005402 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	015a      	lsls	r2, r3, #5
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	4413      	add	r3, r2
 800535e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	78db      	ldrb	r3, [r3, #3]
 8005370:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005372:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	059b      	lsls	r3, r3, #22
 8005378:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800537a:	4313      	orrs	r3, r2
 800537c:	68ba      	ldr	r2, [r7, #8]
 800537e:	0151      	lsls	r1, r2, #5
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	440a      	add	r2, r1
 8005384:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800538c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005390:	6013      	str	r3, [r2, #0]
 8005392:	e036      	b.n	8005402 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800539a:	69da      	ldr	r2, [r3, #28]
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	f003 030f 	and.w	r3, r3, #15
 80053a4:	2101      	movs	r1, #1
 80053a6:	fa01 f303 	lsl.w	r3, r1, r3
 80053aa:	041b      	lsls	r3, r3, #16
 80053ac:	68f9      	ldr	r1, [r7, #12]
 80053ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053b2:	4313      	orrs	r3, r2
 80053b4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	015a      	lsls	r2, r3, #5
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	4413      	add	r3, r2
 80053be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d11a      	bne.n	8005402 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	015a      	lsls	r2, r3, #5
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	4413      	add	r3, r2
 80053d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	78db      	ldrb	r3, [r3, #3]
 80053e6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80053e8:	430b      	orrs	r3, r1
 80053ea:	4313      	orrs	r3, r2
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	0151      	lsls	r1, r2, #5
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	440a      	add	r2, r1
 80053f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005400:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3714      	adds	r7, #20
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	785b      	ldrb	r3, [r3, #1]
 8005428:	2b01      	cmp	r3, #1
 800542a:	d135      	bne.n	8005498 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005432:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	f003 030f 	and.w	r3, r3, #15
 800543c:	2101      	movs	r1, #1
 800543e:	fa01 f303 	lsl.w	r3, r1, r3
 8005442:	b29b      	uxth	r3, r3
 8005444:	43db      	mvns	r3, r3
 8005446:	68f9      	ldr	r1, [r7, #12]
 8005448:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800544c:	4013      	ands	r3, r2
 800544e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005456:	69da      	ldr	r2, [r3, #28]
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	f003 030f 	and.w	r3, r3, #15
 8005460:	2101      	movs	r1, #1
 8005462:	fa01 f303 	lsl.w	r3, r1, r3
 8005466:	b29b      	uxth	r3, r3
 8005468:	43db      	mvns	r3, r3
 800546a:	68f9      	ldr	r1, [r7, #12]
 800546c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005470:	4013      	ands	r3, r2
 8005472:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	4413      	add	r3, r2
 800547c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	0159      	lsls	r1, r3, #5
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	440b      	add	r3, r1
 800548a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800548e:	4619      	mov	r1, r3
 8005490:	4b1f      	ldr	r3, [pc, #124]	; (8005510 <USB_DeactivateEndpoint+0x100>)
 8005492:	4013      	ands	r3, r2
 8005494:	600b      	str	r3, [r1, #0]
 8005496:	e034      	b.n	8005502 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800549e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	f003 030f 	and.w	r3, r3, #15
 80054a8:	2101      	movs	r1, #1
 80054aa:	fa01 f303 	lsl.w	r3, r1, r3
 80054ae:	041b      	lsls	r3, r3, #16
 80054b0:	43db      	mvns	r3, r3
 80054b2:	68f9      	ldr	r1, [r7, #12]
 80054b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054b8:	4013      	ands	r3, r2
 80054ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c2:	69da      	ldr	r2, [r3, #28]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	f003 030f 	and.w	r3, r3, #15
 80054cc:	2101      	movs	r1, #1
 80054ce:	fa01 f303 	lsl.w	r3, r1, r3
 80054d2:	041b      	lsls	r3, r3, #16
 80054d4:	43db      	mvns	r3, r3
 80054d6:	68f9      	ldr	r1, [r7, #12]
 80054d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054dc:	4013      	ands	r3, r2
 80054de:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	0159      	lsls	r1, r3, #5
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	440b      	add	r3, r1
 80054f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054fa:	4619      	mov	r1, r3
 80054fc:	4b05      	ldr	r3, [pc, #20]	; (8005514 <USB_DeactivateEndpoint+0x104>)
 80054fe:	4013      	ands	r3, r2
 8005500:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3714      	adds	r7, #20
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	ec337800 	.word	0xec337800
 8005514:	eff37800 	.word	0xeff37800

08005518 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b08a      	sub	sp, #40	; 0x28
 800551c:	af02      	add	r7, sp, #8
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	4613      	mov	r3, r2
 8005524:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	785b      	ldrb	r3, [r3, #1]
 8005534:	2b01      	cmp	r3, #1
 8005536:	f040 815c 	bne.w	80057f2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d132      	bne.n	80055a8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	015a      	lsls	r2, r3, #5
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	4413      	add	r3, r2
 800554a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	69ba      	ldr	r2, [r7, #24]
 8005552:	0151      	lsls	r1, r2, #5
 8005554:	69fa      	ldr	r2, [r7, #28]
 8005556:	440a      	add	r2, r1
 8005558:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800555c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005560:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005564:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	015a      	lsls	r2, r3, #5
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	4413      	add	r3, r2
 800556e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	69ba      	ldr	r2, [r7, #24]
 8005576:	0151      	lsls	r1, r2, #5
 8005578:	69fa      	ldr	r2, [r7, #28]
 800557a:	440a      	add	r2, r1
 800557c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005580:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005584:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	015a      	lsls	r2, r3, #5
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	4413      	add	r3, r2
 800558e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	0151      	lsls	r1, r2, #5
 8005598:	69fa      	ldr	r2, [r7, #28]
 800559a:	440a      	add	r2, r1
 800559c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055a0:	0cdb      	lsrs	r3, r3, #19
 80055a2:	04db      	lsls	r3, r3, #19
 80055a4:	6113      	str	r3, [r2, #16]
 80055a6:	e074      	b.n	8005692 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	015a      	lsls	r2, r3, #5
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	4413      	add	r3, r2
 80055b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	69ba      	ldr	r2, [r7, #24]
 80055b8:	0151      	lsls	r1, r2, #5
 80055ba:	69fa      	ldr	r2, [r7, #28]
 80055bc:	440a      	add	r2, r1
 80055be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055c2:	0cdb      	lsrs	r3, r3, #19
 80055c4:	04db      	lsls	r3, r3, #19
 80055c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	015a      	lsls	r2, r3, #5
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	4413      	add	r3, r2
 80055d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	69ba      	ldr	r2, [r7, #24]
 80055d8:	0151      	lsls	r1, r2, #5
 80055da:	69fa      	ldr	r2, [r7, #28]
 80055dc:	440a      	add	r2, r1
 80055de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	015a      	lsls	r2, r3, #5
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	4413      	add	r3, r2
 80055f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f8:	691a      	ldr	r2, [r3, #16]
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	6959      	ldr	r1, [r3, #20]
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	440b      	add	r3, r1
 8005604:	1e59      	subs	r1, r3, #1
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	fbb1 f3f3 	udiv	r3, r1, r3
 800560e:	04d9      	lsls	r1, r3, #19
 8005610:	4b9d      	ldr	r3, [pc, #628]	; (8005888 <USB_EPStartXfer+0x370>)
 8005612:	400b      	ands	r3, r1
 8005614:	69b9      	ldr	r1, [r7, #24]
 8005616:	0148      	lsls	r0, r1, #5
 8005618:	69f9      	ldr	r1, [r7, #28]
 800561a:	4401      	add	r1, r0
 800561c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005620:	4313      	orrs	r3, r2
 8005622:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	015a      	lsls	r2, r3, #5
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	4413      	add	r3, r2
 800562c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005630:	691a      	ldr	r2, [r3, #16]
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800563a:	69b9      	ldr	r1, [r7, #24]
 800563c:	0148      	lsls	r0, r1, #5
 800563e:	69f9      	ldr	r1, [r7, #28]
 8005640:	4401      	add	r1, r0
 8005642:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005646:	4313      	orrs	r3, r2
 8005648:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	78db      	ldrb	r3, [r3, #3]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d11f      	bne.n	8005692 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	015a      	lsls	r2, r3, #5
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	4413      	add	r3, r2
 800565a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	69ba      	ldr	r2, [r7, #24]
 8005662:	0151      	lsls	r1, r2, #5
 8005664:	69fa      	ldr	r2, [r7, #28]
 8005666:	440a      	add	r2, r1
 8005668:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800566c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005670:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	015a      	lsls	r2, r3, #5
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	4413      	add	r3, r2
 800567a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	69ba      	ldr	r2, [r7, #24]
 8005682:	0151      	lsls	r1, r2, #5
 8005684:	69fa      	ldr	r2, [r7, #28]
 8005686:	440a      	add	r2, r1
 8005688:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800568c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005690:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005692:	79fb      	ldrb	r3, [r7, #7]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d14b      	bne.n	8005730 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d009      	beq.n	80056b4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	015a      	lsls	r2, r3, #5
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	4413      	add	r3, r2
 80056a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ac:	461a      	mov	r2, r3
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	78db      	ldrb	r3, [r3, #3]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d128      	bne.n	800570e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d110      	bne.n	80056ee <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	015a      	lsls	r2, r3, #5
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	4413      	add	r3, r2
 80056d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	69ba      	ldr	r2, [r7, #24]
 80056dc:	0151      	lsls	r1, r2, #5
 80056de:	69fa      	ldr	r2, [r7, #28]
 80056e0:	440a      	add	r2, r1
 80056e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80056ea:	6013      	str	r3, [r2, #0]
 80056ec:	e00f      	b.n	800570e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	015a      	lsls	r2, r3, #5
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	4413      	add	r3, r2
 80056f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	69ba      	ldr	r2, [r7, #24]
 80056fe:	0151      	lsls	r1, r2, #5
 8005700:	69fa      	ldr	r2, [r7, #28]
 8005702:	440a      	add	r2, r1
 8005704:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800570c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	4413      	add	r3, r2
 8005716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	69ba      	ldr	r2, [r7, #24]
 800571e:	0151      	lsls	r1, r2, #5
 8005720:	69fa      	ldr	r2, [r7, #28]
 8005722:	440a      	add	r2, r1
 8005724:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005728:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800572c:	6013      	str	r3, [r2, #0]
 800572e:	e12f      	b.n	8005990 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	015a      	lsls	r2, r3, #5
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	4413      	add	r3, r2
 8005738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	69ba      	ldr	r2, [r7, #24]
 8005740:	0151      	lsls	r1, r2, #5
 8005742:	69fa      	ldr	r2, [r7, #28]
 8005744:	440a      	add	r2, r1
 8005746:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800574a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800574e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	78db      	ldrb	r3, [r3, #3]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d015      	beq.n	8005784 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	2b00      	cmp	r3, #0
 800575e:	f000 8117 	beq.w	8005990 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005768:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	f003 030f 	and.w	r3, r3, #15
 8005772:	2101      	movs	r1, #1
 8005774:	fa01 f303 	lsl.w	r3, r1, r3
 8005778:	69f9      	ldr	r1, [r7, #28]
 800577a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800577e:	4313      	orrs	r3, r2
 8005780:	634b      	str	r3, [r1, #52]	; 0x34
 8005782:	e105      	b.n	8005990 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005790:	2b00      	cmp	r3, #0
 8005792:	d110      	bne.n	80057b6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	015a      	lsls	r2, r3, #5
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	4413      	add	r3, r2
 800579c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	69ba      	ldr	r2, [r7, #24]
 80057a4:	0151      	lsls	r1, r2, #5
 80057a6:	69fa      	ldr	r2, [r7, #28]
 80057a8:	440a      	add	r2, r1
 80057aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057b2:	6013      	str	r3, [r2, #0]
 80057b4:	e00f      	b.n	80057d6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	015a      	lsls	r2, r3, #5
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	4413      	add	r3, r2
 80057be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	69ba      	ldr	r2, [r7, #24]
 80057c6:	0151      	lsls	r1, r2, #5
 80057c8:	69fa      	ldr	r2, [r7, #28]
 80057ca:	440a      	add	r2, r1
 80057cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057d4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	68d9      	ldr	r1, [r3, #12]
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	781a      	ldrb	r2, [r3, #0]
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	b298      	uxth	r0, r3
 80057e4:	79fb      	ldrb	r3, [r7, #7]
 80057e6:	9300      	str	r3, [sp, #0]
 80057e8:	4603      	mov	r3, r0
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f000 fa2b 	bl	8005c46 <USB_WritePacket>
 80057f0:	e0ce      	b.n	8005990 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	015a      	lsls	r2, r3, #5
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	4413      	add	r3, r2
 80057fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	69ba      	ldr	r2, [r7, #24]
 8005802:	0151      	lsls	r1, r2, #5
 8005804:	69fa      	ldr	r2, [r7, #28]
 8005806:	440a      	add	r2, r1
 8005808:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800580c:	0cdb      	lsrs	r3, r3, #19
 800580e:	04db      	lsls	r3, r3, #19
 8005810:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	015a      	lsls	r2, r3, #5
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	4413      	add	r3, r2
 800581a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	69ba      	ldr	r2, [r7, #24]
 8005822:	0151      	lsls	r1, r2, #5
 8005824:	69fa      	ldr	r2, [r7, #28]
 8005826:	440a      	add	r2, r1
 8005828:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800582c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005830:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005834:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d126      	bne.n	800588c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	015a      	lsls	r2, r3, #5
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	4413      	add	r3, r2
 8005846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800584a:	691a      	ldr	r2, [r3, #16]
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005854:	69b9      	ldr	r1, [r7, #24]
 8005856:	0148      	lsls	r0, r1, #5
 8005858:	69f9      	ldr	r1, [r7, #28]
 800585a:	4401      	add	r1, r0
 800585c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005860:	4313      	orrs	r3, r2
 8005862:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	4413      	add	r3, r2
 800586c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	69ba      	ldr	r2, [r7, #24]
 8005874:	0151      	lsls	r1, r2, #5
 8005876:	69fa      	ldr	r2, [r7, #28]
 8005878:	440a      	add	r2, r1
 800587a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800587e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005882:	6113      	str	r3, [r2, #16]
 8005884:	e036      	b.n	80058f4 <USB_EPStartXfer+0x3dc>
 8005886:	bf00      	nop
 8005888:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	695a      	ldr	r2, [r3, #20]
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	4413      	add	r3, r2
 8005896:	1e5a      	subs	r2, r3, #1
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	015a      	lsls	r2, r3, #5
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	4413      	add	r3, r2
 80058aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ae:	691a      	ldr	r2, [r3, #16]
 80058b0:	8afb      	ldrh	r3, [r7, #22]
 80058b2:	04d9      	lsls	r1, r3, #19
 80058b4:	4b39      	ldr	r3, [pc, #228]	; (800599c <USB_EPStartXfer+0x484>)
 80058b6:	400b      	ands	r3, r1
 80058b8:	69b9      	ldr	r1, [r7, #24]
 80058ba:	0148      	lsls	r0, r1, #5
 80058bc:	69f9      	ldr	r1, [r7, #28]
 80058be:	4401      	add	r1, r0
 80058c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80058c4:	4313      	orrs	r3, r2
 80058c6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	015a      	lsls	r2, r3, #5
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	4413      	add	r3, r2
 80058d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d4:	691a      	ldr	r2, [r3, #16]
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	8af9      	ldrh	r1, [r7, #22]
 80058dc:	fb01 f303 	mul.w	r3, r1, r3
 80058e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058e4:	69b9      	ldr	r1, [r7, #24]
 80058e6:	0148      	lsls	r0, r1, #5
 80058e8:	69f9      	ldr	r1, [r7, #28]
 80058ea:	4401      	add	r1, r0
 80058ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80058f0:	4313      	orrs	r3, r2
 80058f2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80058f4:	79fb      	ldrb	r3, [r7, #7]
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d10d      	bne.n	8005916 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d009      	beq.n	8005916 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	68d9      	ldr	r1, [r3, #12]
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	015a      	lsls	r2, r3, #5
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	4413      	add	r3, r2
 800590e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005912:	460a      	mov	r2, r1
 8005914:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	78db      	ldrb	r3, [r3, #3]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d128      	bne.n	8005970 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800592a:	2b00      	cmp	r3, #0
 800592c:	d110      	bne.n	8005950 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	015a      	lsls	r2, r3, #5
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	4413      	add	r3, r2
 8005936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	69ba      	ldr	r2, [r7, #24]
 800593e:	0151      	lsls	r1, r2, #5
 8005940:	69fa      	ldr	r2, [r7, #28]
 8005942:	440a      	add	r2, r1
 8005944:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005948:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800594c:	6013      	str	r3, [r2, #0]
 800594e:	e00f      	b.n	8005970 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	015a      	lsls	r2, r3, #5
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	4413      	add	r3, r2
 8005958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	69ba      	ldr	r2, [r7, #24]
 8005960:	0151      	lsls	r1, r2, #5
 8005962:	69fa      	ldr	r2, [r7, #28]
 8005964:	440a      	add	r2, r1
 8005966:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800596a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800596e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	015a      	lsls	r2, r3, #5
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	4413      	add	r3, r2
 8005978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	69ba      	ldr	r2, [r7, #24]
 8005980:	0151      	lsls	r1, r2, #5
 8005982:	69fa      	ldr	r2, [r7, #28]
 8005984:	440a      	add	r2, r1
 8005986:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800598a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800598e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3720      	adds	r7, #32
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	1ff80000 	.word	0x1ff80000

080059a0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b087      	sub	sp, #28
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	4613      	mov	r3, r2
 80059ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	785b      	ldrb	r3, [r3, #1]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	f040 80cd 	bne.w	8005b5c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	695b      	ldr	r3, [r3, #20]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d132      	bne.n	8005a30 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	015a      	lsls	r2, r3, #5
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	4413      	add	r3, r2
 80059d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	0151      	lsls	r1, r2, #5
 80059dc:	697a      	ldr	r2, [r7, #20]
 80059de:	440a      	add	r2, r1
 80059e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	015a      	lsls	r2, r3, #5
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	4413      	add	r3, r2
 80059f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	0151      	lsls	r1, r2, #5
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	440a      	add	r2, r1
 8005a04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	015a      	lsls	r2, r3, #5
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	4413      	add	r3, r2
 8005a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	0151      	lsls	r1, r2, #5
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	440a      	add	r2, r1
 8005a24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a28:	0cdb      	lsrs	r3, r3, #19
 8005a2a:	04db      	lsls	r3, r3, #19
 8005a2c:	6113      	str	r3, [r2, #16]
 8005a2e:	e04e      	b.n	8005ace <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	015a      	lsls	r2, r3, #5
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	4413      	add	r3, r2
 8005a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	0151      	lsls	r1, r2, #5
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	440a      	add	r2, r1
 8005a46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a4a:	0cdb      	lsrs	r3, r3, #19
 8005a4c:	04db      	lsls	r3, r3, #19
 8005a4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	693a      	ldr	r2, [r7, #16]
 8005a60:	0151      	lsls	r1, r2, #5
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	440a      	add	r2, r1
 8005a66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a6a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a6e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a72:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	695a      	ldr	r2, [r3, #20]
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d903      	bls.n	8005a88 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	689a      	ldr	r2, [r3, #8]
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	015a      	lsls	r2, r3, #5
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	4413      	add	r3, r2
 8005a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	693a      	ldr	r2, [r7, #16]
 8005a98:	0151      	lsls	r1, r2, #5
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	440a      	add	r2, r1
 8005a9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aa2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005aa6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	015a      	lsls	r2, r3, #5
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	4413      	add	r3, r2
 8005ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab4:	691a      	ldr	r2, [r3, #16]
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005abe:	6939      	ldr	r1, [r7, #16]
 8005ac0:	0148      	lsls	r0, r1, #5
 8005ac2:	6979      	ldr	r1, [r7, #20]
 8005ac4:	4401      	add	r1, r0
 8005ac6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005aca:	4313      	orrs	r3, r2
 8005acc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005ace:	79fb      	ldrb	r3, [r7, #7]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d11e      	bne.n	8005b12 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d009      	beq.n	8005af0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae8:	461a      	mov	r2, r3
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	015a      	lsls	r2, r3, #5
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	693a      	ldr	r2, [r7, #16]
 8005b00:	0151      	lsls	r1, r2, #5
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	440a      	add	r2, r1
 8005b06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b0a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b0e:	6013      	str	r3, [r2, #0]
 8005b10:	e092      	b.n	8005c38 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	015a      	lsls	r2, r3, #5
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	0151      	lsls	r1, r2, #5
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	440a      	add	r2, r1
 8005b28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b2c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b30:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d07e      	beq.n	8005c38 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	f003 030f 	and.w	r3, r3, #15
 8005b4a:	2101      	movs	r1, #1
 8005b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b50:	6979      	ldr	r1, [r7, #20]
 8005b52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b56:	4313      	orrs	r3, r2
 8005b58:	634b      	str	r3, [r1, #52]	; 0x34
 8005b5a:	e06d      	b.n	8005c38 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	015a      	lsls	r2, r3, #5
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	4413      	add	r3, r2
 8005b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	693a      	ldr	r2, [r7, #16]
 8005b6c:	0151      	lsls	r1, r2, #5
 8005b6e:	697a      	ldr	r2, [r7, #20]
 8005b70:	440a      	add	r2, r1
 8005b72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b76:	0cdb      	lsrs	r3, r3, #19
 8005b78:	04db      	lsls	r3, r3, #19
 8005b7a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	015a      	lsls	r2, r3, #5
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	4413      	add	r3, r2
 8005b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	0151      	lsls	r1, r2, #5
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	440a      	add	r2, r1
 8005b92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b96:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b9a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b9e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	695b      	ldr	r3, [r3, #20]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d003      	beq.n	8005bb0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	689a      	ldr	r2, [r3, #8]
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	015a      	lsls	r2, r3, #5
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	0151      	lsls	r1, r2, #5
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	440a      	add	r2, r1
 8005bc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	015a      	lsls	r2, r3, #5
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bdc:	691a      	ldr	r2, [r3, #16]
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005be6:	6939      	ldr	r1, [r7, #16]
 8005be8:	0148      	lsls	r0, r1, #5
 8005bea:	6979      	ldr	r1, [r7, #20]
 8005bec:	4401      	add	r1, r0
 8005bee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005bf6:	79fb      	ldrb	r3, [r7, #7]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d10d      	bne.n	8005c18 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d009      	beq.n	8005c18 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	68d9      	ldr	r1, [r3, #12]
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	015a      	lsls	r2, r3, #5
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	4413      	add	r3, r2
 8005c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c14:	460a      	mov	r2, r1
 8005c16:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	015a      	lsls	r2, r3, #5
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	4413      	add	r3, r2
 8005c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	0151      	lsls	r1, r2, #5
 8005c2a:	697a      	ldr	r2, [r7, #20]
 8005c2c:	440a      	add	r2, r1
 8005c2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c36:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	371c      	adds	r7, #28
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr

08005c46 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005c46:	b480      	push	{r7}
 8005c48:	b089      	sub	sp, #36	; 0x24
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	60f8      	str	r0, [r7, #12]
 8005c4e:	60b9      	str	r1, [r7, #8]
 8005c50:	4611      	mov	r1, r2
 8005c52:	461a      	mov	r2, r3
 8005c54:	460b      	mov	r3, r1
 8005c56:	71fb      	strb	r3, [r7, #7]
 8005c58:	4613      	mov	r3, r2
 8005c5a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005c64:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d11a      	bne.n	8005ca2 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005c6c:	88bb      	ldrh	r3, [r7, #4]
 8005c6e:	3303      	adds	r3, #3
 8005c70:	089b      	lsrs	r3, r3, #2
 8005c72:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005c74:	2300      	movs	r3, #0
 8005c76:	61bb      	str	r3, [r7, #24]
 8005c78:	e00f      	b.n	8005c9a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005c7a:	79fb      	ldrb	r3, [r7, #7]
 8005c7c:	031a      	lsls	r2, r3, #12
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	4413      	add	r3, r2
 8005c82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c86:	461a      	mov	r2, r3
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	3304      	adds	r3, #4
 8005c92:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	3301      	adds	r3, #1
 8005c98:	61bb      	str	r3, [r7, #24]
 8005c9a:	69ba      	ldr	r2, [r7, #24]
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d3eb      	bcc.n	8005c7a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3724      	adds	r7, #36	; 0x24
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	785b      	ldrb	r3, [r3, #1]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d12c      	bne.n	8005d26 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	015a      	lsls	r2, r3, #5
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	db12      	blt.n	8005d04 <USB_EPSetStall+0x54>
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00f      	beq.n	8005d04 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	015a      	lsls	r2, r3, #5
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68ba      	ldr	r2, [r7, #8]
 8005cf4:	0151      	lsls	r1, r2, #5
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	440a      	add	r2, r1
 8005cfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cfe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d02:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	015a      	lsls	r2, r3, #5
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	0151      	lsls	r1, r2, #5
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	440a      	add	r2, r1
 8005d1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d22:	6013      	str	r3, [r2, #0]
 8005d24:	e02b      	b.n	8005d7e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	015a      	lsls	r2, r3, #5
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	db12      	blt.n	8005d5e <USB_EPSetStall+0xae>
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00f      	beq.n	8005d5e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	015a      	lsls	r2, r3, #5
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	4413      	add	r3, r2
 8005d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	0151      	lsls	r1, r2, #5
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	440a      	add	r2, r1
 8005d54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d58:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d5c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	015a      	lsls	r2, r3, #5
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68ba      	ldr	r2, [r7, #8]
 8005d6e:	0151      	lsls	r1, r2, #5
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	440a      	add	r2, r1
 8005d74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d7c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3714      	adds	r7, #20
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005da6:	f023 0302 	bic.w	r3, r3, #2
 8005daa:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005dac:	2003      	movs	r0, #3
 8005dae:	f7fa fc25 	bl	80005fc <HAL_Delay>

  return HAL_OK;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dd6:	f043 0302 	orr.w	r3, r3, #2
 8005dda:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005ddc:	2003      	movs	r0, #3
 8005dde:	f7fa fc0d 	bl	80005fc <HAL_Delay>

  return HAL_OK;
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b087      	sub	sp, #28
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	460b      	mov	r3, r1
 8005df6:	607a      	str	r2, [r7, #4]
 8005df8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	333c      	adds	r3, #60	; 0x3c
 8005e02:	3304      	adds	r3, #4
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	4a26      	ldr	r2, [pc, #152]	; (8005ea4 <USB_EP0_OutStart+0xb8>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d90a      	bls.n	8005e26 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e20:	d101      	bne.n	8005e26 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005e22:	2300      	movs	r3, #0
 8005e24:	e037      	b.n	8005e96 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	2300      	movs	r3, #0
 8005e30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e54:	f043 0318 	orr.w	r3, r3, #24
 8005e58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e68:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005e6c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005e6e:	7afb      	ldrb	r3, [r7, #11]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d10f      	bne.n	8005e94 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	697a      	ldr	r2, [r7, #20]
 8005e8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e8e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005e92:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	371c      	adds	r7, #28
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	4f54300a 	.word	0x4f54300a

08005ea8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	60fb      	str	r3, [r7, #12]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	4a13      	ldr	r2, [pc, #76]	; (8005f0c <USB_CoreReset+0x64>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d901      	bls.n	8005ec6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e01b      	b.n	8005efe <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	daf2      	bge.n	8005eb4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	f043 0201 	orr.w	r2, r3, #1
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	60fb      	str	r3, [r7, #12]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	4a09      	ldr	r2, [pc, #36]	; (8005f0c <USB_CoreReset+0x64>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d901      	bls.n	8005ef0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e006      	b.n	8005efe <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	f003 0301 	and.w	r3, r3, #1
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d0f0      	beq.n	8005ede <USB_CoreReset+0x36>

  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3714      	adds	r7, #20
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	00030d40 	.word	0x00030d40

08005f10 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	460b      	mov	r3, r1
 8005f1a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	7c1b      	ldrb	r3, [r3, #16]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d115      	bne.n	8005f54 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005f28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f2c:	2202      	movs	r2, #2
 8005f2e:	2181      	movs	r1, #129	; 0x81
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f001 ff64 	bl	8007dfe <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005f3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f40:	2202      	movs	r2, #2
 8005f42:	2101      	movs	r1, #1
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f001 ff5a 	bl	8007dfe <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8005f52:	e012      	b.n	8005f7a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005f54:	2340      	movs	r3, #64	; 0x40
 8005f56:	2202      	movs	r2, #2
 8005f58:	2181      	movs	r1, #129	; 0x81
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f001 ff4f 	bl	8007dfe <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005f66:	2340      	movs	r3, #64	; 0x40
 8005f68:	2202      	movs	r2, #2
 8005f6a:	2101      	movs	r1, #1
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f001 ff46 	bl	8007dfe <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005f7a:	2308      	movs	r3, #8
 8005f7c:	2203      	movs	r2, #3
 8005f7e:	2182      	movs	r1, #130	; 0x82
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f001 ff3c 	bl	8007dfe <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8005f8c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005f90:	f002 f980 	bl	8008294 <malloc>
 8005f94:	4603      	mov	r3, r0
 8005f96:	461a      	mov	r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d102      	bne.n	8005fae <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	73fb      	strb	r3, [r7, #15]
 8005fac:	e026      	b.n	8005ffc <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005fb4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	7c1b      	ldrb	r3, [r3, #16]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d109      	bne.n	8005fec <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005fde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fe2:	2101      	movs	r1, #1
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f001 ff91 	bl	8007f0c <USBD_LL_PrepareReceive>
 8005fea:	e007      	b.n	8005ffc <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ff2:	2340      	movs	r3, #64	; 0x40
 8005ff4:	2101      	movs	r1, #1
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f001 ff88 	bl	8007f0c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3710      	adds	r7, #16
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006006:	b580      	push	{r7, lr}
 8006008:	b084      	sub	sp, #16
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
 800600e:	460b      	mov	r3, r1
 8006010:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006012:	2300      	movs	r3, #0
 8006014:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006016:	2181      	movs	r1, #129	; 0x81
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f001 ff16 	bl	8007e4a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006024:	2101      	movs	r1, #1
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f001 ff0f 	bl	8007e4a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006034:	2182      	movs	r1, #130	; 0x82
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f001 ff07 	bl	8007e4a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006048:	2b00      	cmp	r3, #0
 800604a:	d00e      	beq.n	800606a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800605c:	4618      	mov	r0, r3
 800605e:	f002 f921 	bl	80082a4 <free>
    pdev->pClassData = NULL;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800606a:	7bfb      	ldrb	r3, [r7, #15]
}
 800606c:	4618      	mov	r0, r3
 800606e:	3710      	adds	r7, #16
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b086      	sub	sp, #24
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006084:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006086:	2300      	movs	r3, #0
 8006088:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800608a:	2300      	movs	r3, #0
 800608c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800608e:	2300      	movs	r3, #0
 8006090:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800609a:	2b00      	cmp	r3, #0
 800609c:	d039      	beq.n	8006112 <USBD_CDC_Setup+0x9e>
 800609e:	2b20      	cmp	r3, #32
 80060a0:	d17c      	bne.n	800619c <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	88db      	ldrh	r3, [r3, #6]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d029      	beq.n	80060fe <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	b25b      	sxtb	r3, r3
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	da11      	bge.n	80060d8 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	683a      	ldr	r2, [r7, #0]
 80060be:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 80060c0:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80060c2:	683a      	ldr	r2, [r7, #0]
 80060c4:	88d2      	ldrh	r2, [r2, #6]
 80060c6:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80060c8:	6939      	ldr	r1, [r7, #16]
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	88db      	ldrh	r3, [r3, #6]
 80060ce:	461a      	mov	r2, r3
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 fa80 	bl	80065d6 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 80060d6:	e068      	b.n	80061aa <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	785a      	ldrb	r2, [r3, #1]
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	88db      	ldrh	r3, [r3, #6]
 80060e6:	b2da      	uxtb	r2, r3
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80060ee:	6939      	ldr	r1, [r7, #16]
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	88db      	ldrh	r3, [r3, #6]
 80060f4:	461a      	mov	r2, r3
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fa89 	bl	800660e <USBD_CtlPrepareRx>
    break;
 80060fc:	e055      	b.n	80061aa <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	683a      	ldr	r2, [r7, #0]
 8006108:	7850      	ldrb	r0, [r2, #1]
 800610a:	2200      	movs	r2, #0
 800610c:	6839      	ldr	r1, [r7, #0]
 800610e:	4798      	blx	r3
    break;
 8006110:	e04b      	b.n	80061aa <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	785b      	ldrb	r3, [r3, #1]
 8006116:	2b0a      	cmp	r3, #10
 8006118:	d017      	beq.n	800614a <USBD_CDC_Setup+0xd6>
 800611a:	2b0b      	cmp	r3, #11
 800611c:	d029      	beq.n	8006172 <USBD_CDC_Setup+0xfe>
 800611e:	2b00      	cmp	r3, #0
 8006120:	d133      	bne.n	800618a <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006128:	2b03      	cmp	r3, #3
 800612a:	d107      	bne.n	800613c <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800612c:	f107 030c 	add.w	r3, r7, #12
 8006130:	2202      	movs	r2, #2
 8006132:	4619      	mov	r1, r3
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 fa4e 	bl	80065d6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800613a:	e02e      	b.n	800619a <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800613c:	6839      	ldr	r1, [r7, #0]
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 f9de 	bl	8006500 <USBD_CtlError>
			  ret = USBD_FAIL;
 8006144:	2302      	movs	r3, #2
 8006146:	75fb      	strb	r3, [r7, #23]
      break;
 8006148:	e027      	b.n	800619a <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006150:	2b03      	cmp	r3, #3
 8006152:	d107      	bne.n	8006164 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8006154:	f107 030f 	add.w	r3, r7, #15
 8006158:	2201      	movs	r2, #1
 800615a:	4619      	mov	r1, r3
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 fa3a 	bl	80065d6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006162:	e01a      	b.n	800619a <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8006164:	6839      	ldr	r1, [r7, #0]
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 f9ca 	bl	8006500 <USBD_CtlError>
			  ret = USBD_FAIL;
 800616c:	2302      	movs	r3, #2
 800616e:	75fb      	strb	r3, [r7, #23]
      break;
 8006170:	e013      	b.n	800619a <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006178:	2b03      	cmp	r3, #3
 800617a:	d00d      	beq.n	8006198 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 800617c:	6839      	ldr	r1, [r7, #0]
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f9be 	bl	8006500 <USBD_CtlError>
			  ret = USBD_FAIL;
 8006184:	2302      	movs	r3, #2
 8006186:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006188:	e006      	b.n	8006198 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800618a:	6839      	ldr	r1, [r7, #0]
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 f9b7 	bl	8006500 <USBD_CtlError>
      ret = USBD_FAIL;
 8006192:	2302      	movs	r3, #2
 8006194:	75fb      	strb	r3, [r7, #23]
      break;
 8006196:	e000      	b.n	800619a <USBD_CDC_Setup+0x126>
      break;
 8006198:	bf00      	nop
    }
    break;
 800619a:	e006      	b.n	80061aa <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 800619c:	6839      	ldr	r1, [r7, #0]
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f9ae 	bl	8006500 <USBD_CtlError>
    ret = USBD_FAIL;
 80061a4:	2302      	movs	r3, #2
 80061a6:	75fb      	strb	r3, [r7, #23]
    break;
 80061a8:	bf00      	nop
  }

  return ret;
 80061aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3718      	adds	r7, #24
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	460b      	mov	r3, r1
 80061be:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80061c6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80061ce:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d03a      	beq.n	8006250 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80061da:	78fa      	ldrb	r2, [r7, #3]
 80061dc:	6879      	ldr	r1, [r7, #4]
 80061de:	4613      	mov	r3, r2
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	4413      	add	r3, r2
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	440b      	add	r3, r1
 80061e8:	331c      	adds	r3, #28
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d029      	beq.n	8006244 <USBD_CDC_DataIn+0x90>
 80061f0:	78fa      	ldrb	r2, [r7, #3]
 80061f2:	6879      	ldr	r1, [r7, #4]
 80061f4:	4613      	mov	r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4413      	add	r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	440b      	add	r3, r1
 80061fe:	331c      	adds	r3, #28
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	78f9      	ldrb	r1, [r7, #3]
 8006204:	68b8      	ldr	r0, [r7, #8]
 8006206:	460b      	mov	r3, r1
 8006208:	00db      	lsls	r3, r3, #3
 800620a:	1a5b      	subs	r3, r3, r1
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	4403      	add	r3, r0
 8006210:	3344      	adds	r3, #68	; 0x44
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	fbb2 f1f3 	udiv	r1, r2, r3
 8006218:	fb03 f301 	mul.w	r3, r3, r1
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	2b00      	cmp	r3, #0
 8006220:	d110      	bne.n	8006244 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006222:	78fa      	ldrb	r2, [r7, #3]
 8006224:	6879      	ldr	r1, [r7, #4]
 8006226:	4613      	mov	r3, r2
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	4413      	add	r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	440b      	add	r3, r1
 8006230:	331c      	adds	r3, #28
 8006232:	2200      	movs	r2, #0
 8006234:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8006236:	78f9      	ldrb	r1, [r7, #3]
 8006238:	2300      	movs	r3, #0
 800623a:	2200      	movs	r2, #0
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f001 fe42 	bl	8007ec6 <USBD_LL_Transmit>
 8006242:	e003      	b.n	800624c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800624c:	2300      	movs	r3, #0
 800624e:	e000      	b.n	8006252 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006250:	2302      	movs	r3, #2
  }
}
 8006252:	4618      	mov	r0, r3
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800625a:	b580      	push	{r7, lr}
 800625c:	b084      	sub	sp, #16
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
 8006262:	460b      	mov	r3, r1
 8006264:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800626c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800626e:	78fb      	ldrb	r3, [r7, #3]
 8006270:	4619      	mov	r1, r3
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f001 fe6d 	bl	8007f52 <USBD_LL_GetRxDataSize>
 8006278:	4602      	mov	r2, r0
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00d      	beq.n	80062a6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800629e:	4611      	mov	r1, r2
 80062a0:	4798      	blx	r3

    return USBD_OK;
 80062a2:	2300      	movs	r3, #0
 80062a4:	e000      	b.n	80062a8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80062a6:	2302      	movs	r3, #2
  }
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3710      	adds	r7, #16
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80062be:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d015      	beq.n	80062f6 <USBD_CDC_EP0_RxReady+0x46>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80062d0:	2bff      	cmp	r3, #255	; 0xff
 80062d2:	d010      	beq.n	80062f6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80062e2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80062ea:	b292      	uxth	r2, r2
 80062ec:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	22ff      	movs	r2, #255	; 0xff
 80062f2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3710      	adds	r7, #16
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2243      	movs	r2, #67	; 0x43
 800630c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800630e:	4b03      	ldr	r3, [pc, #12]	; (800631c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006310:	4618      	mov	r0, r3
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr
 800631c:	20000090 	.word	0x20000090

08006320 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2243      	movs	r2, #67	; 0x43
 800632c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800632e:	4b03      	ldr	r3, [pc, #12]	; (800633c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006330:	4618      	mov	r0, r3
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr
 800633c:	2000004c 	.word	0x2000004c

08006340 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2243      	movs	r2, #67	; 0x43
 800634c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800634e:	4b03      	ldr	r3, [pc, #12]	; (800635c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006350:	4618      	mov	r0, r3
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr
 800635c:	200000d4 	.word	0x200000d4

08006360 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	220a      	movs	r2, #10
 800636c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800636e:	4b03      	ldr	r3, [pc, #12]	; (800637c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006370:	4618      	mov	r0, r3
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr
 800637c:	20000008 	.word	0x20000008

08006380 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800638a:	2302      	movs	r3, #2
 800638c:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d005      	beq.n	80063a0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	683a      	ldr	r2, [r7, #0]
 8006398:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800639c:	2300      	movs	r3, #0
 800639e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80063a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3714      	adds	r7, #20
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr

080063ae <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 80063ae:	b480      	push	{r7}
 80063b0:	b087      	sub	sp, #28
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	60f8      	str	r0, [r7, #12]
 80063b6:	60b9      	str	r1, [r7, #8]
 80063b8:	4613      	mov	r3, r2
 80063ba:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80063c2:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80063cc:	88fa      	ldrh	r2, [r7, #6]
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	371c      	adds	r7, #28
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr

080063e2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b085      	sub	sp, #20
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
 80063ea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80063f2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	683a      	ldr	r2, [r7, #0]
 80063f8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3714      	adds	r7, #20
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr

0800640a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800640a:	b580      	push	{r7, lr}
 800640c:	b084      	sub	sp, #16
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006418:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006420:	2b00      	cmp	r3, #0
 8006422:	d017      	beq.n	8006454 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	7c1b      	ldrb	r3, [r3, #16]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d109      	bne.n	8006440 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006432:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006436:	2101      	movs	r1, #1
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f001 fd67 	bl	8007f0c <USBD_LL_PrepareReceive>
 800643e:	e007      	b.n	8006450 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006446:	2340      	movs	r3, #64	; 0x40
 8006448:	2101      	movs	r1, #1
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f001 fd5e 	bl	8007f0c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006450:	2300      	movs	r3, #0
 8006452:	e000      	b.n	8006456 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006454:	2302      	movs	r3, #2
  }
}
 8006456:	4618      	mov	r0, r3
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b084      	sub	sp, #16
 8006462:	af00      	add	r7, sp, #0
 8006464:	60f8      	str	r0, [r7, #12]
 8006466:	60b9      	str	r1, [r7, #8]
 8006468:	4613      	mov	r3, r2
 800646a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d101      	bne.n	8006476 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006472:	2302      	movs	r3, #2
 8006474:	e01a      	b.n	80064ac <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800647c:	2b00      	cmp	r3, #0
 800647e:	d003      	beq.n	8006488 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d003      	beq.n	8006496 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	68ba      	ldr	r2, [r7, #8]
 8006492:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2201      	movs	r2, #1
 800649a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	79fa      	ldrb	r2, [r7, #7]
 80064a2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f001 fc3f 	bl	8007d28 <USBD_LL_Init>

  return USBD_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3710      	adds	r7, #16
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80064be:	2300      	movs	r3, #0
 80064c0:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d006      	beq.n	80064d6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	683a      	ldr	r2, [r7, #0]
 80064cc:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 80064d0:	2300      	movs	r3, #0
 80064d2:	73fb      	strb	r3, [r7, #15]
 80064d4:	e001      	b.n	80064da <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80064d6:	2302      	movs	r3, #2
 80064d8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80064da:	7bfb      	ldrb	r3, [r7, #15]
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3714      	adds	r7, #20
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f001 fc69 	bl	8007dc8 <USBD_LL_Start>

  return USBD_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3708      	adds	r7, #8
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800650a:	2180      	movs	r1, #128	; 0x80
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f001 fcbb 	bl	8007e88 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8006512:	2100      	movs	r1, #0
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f001 fcb7 	bl	8007e88 <USBD_LL_StallEP>
}
 800651a:	bf00      	nop
 800651c:	3708      	adds	r7, #8
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b086      	sub	sp, #24
 8006526:	af00      	add	r7, sp, #0
 8006528:	60f8      	str	r0, [r7, #12]
 800652a:	60b9      	str	r1, [r7, #8]
 800652c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800652e:	2300      	movs	r3, #0
 8006530:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d032      	beq.n	800659e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f000 f834 	bl	80065a6 <USBD_GetLen>
 800653e:	4603      	mov	r3, r0
 8006540:	3301      	adds	r3, #1
 8006542:	b29b      	uxth	r3, r3
 8006544:	005b      	lsls	r3, r3, #1
 8006546:	b29a      	uxth	r2, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800654c:	7dfb      	ldrb	r3, [r7, #23]
 800654e:	1c5a      	adds	r2, r3, #1
 8006550:	75fa      	strb	r2, [r7, #23]
 8006552:	461a      	mov	r2, r3
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	4413      	add	r3, r2
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	7812      	ldrb	r2, [r2, #0]
 800655c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800655e:	7dfb      	ldrb	r3, [r7, #23]
 8006560:	1c5a      	adds	r2, r3, #1
 8006562:	75fa      	strb	r2, [r7, #23]
 8006564:	461a      	mov	r2, r3
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	4413      	add	r3, r2
 800656a:	2203      	movs	r2, #3
 800656c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800656e:	e012      	b.n	8006596 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	1c5a      	adds	r2, r3, #1
 8006574:	60fa      	str	r2, [r7, #12]
 8006576:	7dfa      	ldrb	r2, [r7, #23]
 8006578:	1c51      	adds	r1, r2, #1
 800657a:	75f9      	strb	r1, [r7, #23]
 800657c:	4611      	mov	r1, r2
 800657e:	68ba      	ldr	r2, [r7, #8]
 8006580:	440a      	add	r2, r1
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006586:	7dfb      	ldrb	r3, [r7, #23]
 8006588:	1c5a      	adds	r2, r3, #1
 800658a:	75fa      	strb	r2, [r7, #23]
 800658c:	461a      	mov	r2, r3
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	4413      	add	r3, r2
 8006592:	2200      	movs	r2, #0
 8006594:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1e8      	bne.n	8006570 <USBD_GetString+0x4e>
    }
  }
}
 800659e:	bf00      	nop
 80065a0:	3718      	adds	r7, #24
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80065a6:	b480      	push	{r7}
 80065a8:	b085      	sub	sp, #20
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80065ae:	2300      	movs	r3, #0
 80065b0:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 80065b2:	e005      	b.n	80065c0 <USBD_GetLen+0x1a>
    {
        len++;
 80065b4:	7bfb      	ldrb	r3, [r7, #15]
 80065b6:	3301      	adds	r3, #1
 80065b8:	73fb      	strb	r3, [r7, #15]
        buf++;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	3301      	adds	r3, #1
 80065be:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d1f5      	bne.n	80065b4 <USBD_GetLen+0xe>
    }

    return len;
 80065c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3714      	adds	r7, #20
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr

080065d6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b084      	sub	sp, #16
 80065da:	af00      	add	r7, sp, #0
 80065dc:	60f8      	str	r0, [r7, #12]
 80065de:	60b9      	str	r1, [r7, #8]
 80065e0:	4613      	mov	r3, r2
 80065e2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2202      	movs	r2, #2
 80065e8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 80065ec:	88fa      	ldrh	r2, [r7, #6]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80065f2:	88fa      	ldrh	r2, [r7, #6]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80065f8:	88fb      	ldrh	r3, [r7, #6]
 80065fa:	68ba      	ldr	r2, [r7, #8]
 80065fc:	2100      	movs	r1, #0
 80065fe:	68f8      	ldr	r0, [r7, #12]
 8006600:	f001 fc61 	bl	8007ec6 <USBD_LL_Transmit>

  return USBD_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3710      	adds	r7, #16
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}

0800660e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800660e:	b580      	push	{r7, lr}
 8006610:	b084      	sub	sp, #16
 8006612:	af00      	add	r7, sp, #0
 8006614:	60f8      	str	r0, [r7, #12]
 8006616:	60b9      	str	r1, [r7, #8]
 8006618:	4613      	mov	r3, r2
 800661a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2203      	movs	r2, #3
 8006620:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8006624:	88fa      	ldrh	r2, [r7, #6]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800662c:	88fa      	ldrh	r2, [r7, #6]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8006634:	88fb      	ldrh	r3, [r7, #6]
 8006636:	68ba      	ldr	r2, [r7, #8]
 8006638:	2100      	movs	r1, #0
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	f001 fc66 	bl	8007f0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	3710      	adds	r7, #16
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
	...

0800664c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800664c:	b480      	push	{r7}
 800664e:	b087      	sub	sp, #28
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	4613      	mov	r3, r2
 8006658:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800665a:	2301      	movs	r3, #1
 800665c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800665e:	2300      	movs	r3, #0
 8006660:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006662:	4b1f      	ldr	r3, [pc, #124]	; (80066e0 <FATFS_LinkDriverEx+0x94>)
 8006664:	7a5b      	ldrb	r3, [r3, #9]
 8006666:	b2db      	uxtb	r3, r3
 8006668:	2b00      	cmp	r3, #0
 800666a:	d131      	bne.n	80066d0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800666c:	4b1c      	ldr	r3, [pc, #112]	; (80066e0 <FATFS_LinkDriverEx+0x94>)
 800666e:	7a5b      	ldrb	r3, [r3, #9]
 8006670:	b2db      	uxtb	r3, r3
 8006672:	461a      	mov	r2, r3
 8006674:	4b1a      	ldr	r3, [pc, #104]	; (80066e0 <FATFS_LinkDriverEx+0x94>)
 8006676:	2100      	movs	r1, #0
 8006678:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800667a:	4b19      	ldr	r3, [pc, #100]	; (80066e0 <FATFS_LinkDriverEx+0x94>)
 800667c:	7a5b      	ldrb	r3, [r3, #9]
 800667e:	b2db      	uxtb	r3, r3
 8006680:	4a17      	ldr	r2, [pc, #92]	; (80066e0 <FATFS_LinkDriverEx+0x94>)
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	4413      	add	r3, r2
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800668a:	4b15      	ldr	r3, [pc, #84]	; (80066e0 <FATFS_LinkDriverEx+0x94>)
 800668c:	7a5b      	ldrb	r3, [r3, #9]
 800668e:	b2db      	uxtb	r3, r3
 8006690:	461a      	mov	r2, r3
 8006692:	4b13      	ldr	r3, [pc, #76]	; (80066e0 <FATFS_LinkDriverEx+0x94>)
 8006694:	4413      	add	r3, r2
 8006696:	79fa      	ldrb	r2, [r7, #7]
 8006698:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800669a:	4b11      	ldr	r3, [pc, #68]	; (80066e0 <FATFS_LinkDriverEx+0x94>)
 800669c:	7a5b      	ldrb	r3, [r3, #9]
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	1c5a      	adds	r2, r3, #1
 80066a2:	b2d1      	uxtb	r1, r2
 80066a4:	4a0e      	ldr	r2, [pc, #56]	; (80066e0 <FATFS_LinkDriverEx+0x94>)
 80066a6:	7251      	strb	r1, [r2, #9]
 80066a8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80066aa:	7dbb      	ldrb	r3, [r7, #22]
 80066ac:	3330      	adds	r3, #48	; 0x30
 80066ae:	b2da      	uxtb	r2, r3
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	3301      	adds	r3, #1
 80066b8:	223a      	movs	r2, #58	; 0x3a
 80066ba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	3302      	adds	r3, #2
 80066c0:	222f      	movs	r2, #47	; 0x2f
 80066c2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	3303      	adds	r3, #3
 80066c8:	2200      	movs	r2, #0
 80066ca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80066cc:	2300      	movs	r3, #0
 80066ce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80066d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	371c      	adds	r7, #28
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	20000200 	.word	0x20000200

080066e4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80066ee:	2200      	movs	r2, #0
 80066f0:	6839      	ldr	r1, [r7, #0]
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f7ff ffaa 	bl	800664c <FATFS_LinkDriverEx>
 80066f8:	4603      	mov	r3, r0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3708      	adds	r7, #8
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}

08006702 <_ZN3UMDC1Ev>:
#include "gpio.h"
#include "fsmc.h"

#include "UMD.h"

UMD::UMD(){
 8006702:	b480      	push	{r7}
 8006704:	b083      	sub	sp, #12
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]

}
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4618      	mov	r0, r3
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <_ZN3UMD3runEv>:

void UMD::run(void){
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
	while(1){
		HAL_Delay(500);
 8006720:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006724:	f7f9 ff6a 	bl	80005fc <HAL_Delay>
		shift_LEDs(0);
 8006728:	2100      	movs	r1, #0
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 f802 	bl	8006734 <_ZN3UMD10shift_LEDsEj>
		HAL_Delay(500);
 8006730:	e7f6      	b.n	8006720 <_ZN3UMD3runEv+0x8>
	...

08006734 <_ZN3UMD10shift_LEDsEj>:
	}
}

void UMD::shift_LEDs(unsigned int mode){
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
	if( HAL_GPIO_ReadPin(LED0_GPIO_Port, LED0_Pin) ){
 800673e:	2108      	movs	r1, #8
 8006740:	483c      	ldr	r0, [pc, #240]	; (8006834 <_ZN3UMD10shift_LEDsEj+0x100>)
 8006742:	f7fa fc85 	bl	8001050 <HAL_GPIO_ReadPin>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	bf14      	ite	ne
 800674c:	2301      	movne	r3, #1
 800674e:	2300      	moveq	r3, #0
 8006750:	b2db      	uxtb	r3, r3
 8006752:	2b00      	cmp	r3, #0
 8006754:	d014      	beq.n	8006780 <_ZN3UMD10shift_LEDsEj+0x4c>
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8006756:	2200      	movs	r2, #0
 8006758:	2108      	movs	r1, #8
 800675a:	4836      	ldr	r0, [pc, #216]	; (8006834 <_ZN3UMD10shift_LEDsEj+0x100>)
 800675c:	f7fa fc90 	bl	8001080 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8006760:	2201      	movs	r2, #1
 8006762:	2104      	movs	r1, #4
 8006764:	4833      	ldr	r0, [pc, #204]	; (8006834 <_ZN3UMD10shift_LEDsEj+0x100>)
 8006766:	f7fa fc8b 	bl	8001080 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800676a:	2200      	movs	r2, #0
 800676c:	2102      	movs	r1, #2
 800676e:	4831      	ldr	r0, [pc, #196]	; (8006834 <_ZN3UMD10shift_LEDsEj+0x100>)
 8006770:	f7fa fc86 	bl	8001080 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8006774:	2200      	movs	r2, #0
 8006776:	2101      	movs	r1, #1
 8006778:	482e      	ldr	r0, [pc, #184]	; (8006834 <_ZN3UMD10shift_LEDsEj+0x100>)
 800677a:	f7fa fc81 	bl	8001080 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
	}
}
 800677e:	e055      	b.n	800682c <_ZN3UMD10shift_LEDsEj+0xf8>
	}else if (HAL_GPIO_ReadPin(LED1_GPIO_Port, LED1_Pin) ){
 8006780:	2104      	movs	r1, #4
 8006782:	482c      	ldr	r0, [pc, #176]	; (8006834 <_ZN3UMD10shift_LEDsEj+0x100>)
 8006784:	f7fa fc64 	bl	8001050 <HAL_GPIO_ReadPin>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	bf14      	ite	ne
 800678e:	2301      	movne	r3, #1
 8006790:	2300      	moveq	r3, #0
 8006792:	b2db      	uxtb	r3, r3
 8006794:	2b00      	cmp	r3, #0
 8006796:	d014      	beq.n	80067c2 <_ZN3UMD10shift_LEDsEj+0x8e>
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8006798:	2200      	movs	r2, #0
 800679a:	2108      	movs	r1, #8
 800679c:	4825      	ldr	r0, [pc, #148]	; (8006834 <_ZN3UMD10shift_LEDsEj+0x100>)
 800679e:	f7fa fc6f 	bl	8001080 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80067a2:	2200      	movs	r2, #0
 80067a4:	2104      	movs	r1, #4
 80067a6:	4823      	ldr	r0, [pc, #140]	; (8006834 <_ZN3UMD10shift_LEDsEj+0x100>)
 80067a8:	f7fa fc6a 	bl	8001080 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80067ac:	2201      	movs	r2, #1
 80067ae:	2102      	movs	r1, #2
 80067b0:	4820      	ldr	r0, [pc, #128]	; (8006834 <_ZN3UMD10shift_LEDsEj+0x100>)
 80067b2:	f7fa fc65 	bl	8001080 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80067b6:	2200      	movs	r2, #0
 80067b8:	2101      	movs	r1, #1
 80067ba:	481e      	ldr	r0, [pc, #120]	; (8006834 <_ZN3UMD10shift_LEDsEj+0x100>)
 80067bc:	f7fa fc60 	bl	8001080 <HAL_GPIO_WritePin>
}
 80067c0:	e034      	b.n	800682c <_ZN3UMD10shift_LEDsEj+0xf8>
	}else if (HAL_GPIO_ReadPin(LED2_GPIO_Port, LED2_Pin) ){
 80067c2:	2102      	movs	r1, #2
 80067c4:	481b      	ldr	r0, [pc, #108]	; (8006834 <_ZN3UMD10shift_LEDsEj+0x100>)
 80067c6:	f7fa fc43 	bl	8001050 <HAL_GPIO_ReadPin>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	bf14      	ite	ne
 80067d0:	2301      	movne	r3, #1
 80067d2:	2300      	moveq	r3, #0
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d014      	beq.n	8006804 <_ZN3UMD10shift_LEDsEj+0xd0>
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 80067da:	2200      	movs	r2, #0
 80067dc:	2108      	movs	r1, #8
 80067de:	4815      	ldr	r0, [pc, #84]	; (8006834 <_ZN3UMD10shift_LEDsEj+0x100>)
 80067e0:	f7fa fc4e 	bl	8001080 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80067e4:	2200      	movs	r2, #0
 80067e6:	2104      	movs	r1, #4
 80067e8:	4812      	ldr	r0, [pc, #72]	; (8006834 <_ZN3UMD10shift_LEDsEj+0x100>)
 80067ea:	f7fa fc49 	bl	8001080 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80067ee:	2200      	movs	r2, #0
 80067f0:	2102      	movs	r1, #2
 80067f2:	4810      	ldr	r0, [pc, #64]	; (8006834 <_ZN3UMD10shift_LEDsEj+0x100>)
 80067f4:	f7fa fc44 	bl	8001080 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 80067f8:	2201      	movs	r2, #1
 80067fa:	2101      	movs	r1, #1
 80067fc:	480d      	ldr	r0, [pc, #52]	; (8006834 <_ZN3UMD10shift_LEDsEj+0x100>)
 80067fe:	f7fa fc3f 	bl	8001080 <HAL_GPIO_WritePin>
}
 8006802:	e013      	b.n	800682c <_ZN3UMD10shift_LEDsEj+0xf8>
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8006804:	2201      	movs	r2, #1
 8006806:	2108      	movs	r1, #8
 8006808:	480a      	ldr	r0, [pc, #40]	; (8006834 <_ZN3UMD10shift_LEDsEj+0x100>)
 800680a:	f7fa fc39 	bl	8001080 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800680e:	2200      	movs	r2, #0
 8006810:	2104      	movs	r1, #4
 8006812:	4808      	ldr	r0, [pc, #32]	; (8006834 <_ZN3UMD10shift_LEDsEj+0x100>)
 8006814:	f7fa fc34 	bl	8001080 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8006818:	2200      	movs	r2, #0
 800681a:	2102      	movs	r1, #2
 800681c:	4805      	ldr	r0, [pc, #20]	; (8006834 <_ZN3UMD10shift_LEDsEj+0x100>)
 800681e:	f7fa fc2f 	bl	8001080 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8006822:	2200      	movs	r2, #0
 8006824:	2101      	movs	r1, #1
 8006826:	4803      	ldr	r0, [pc, #12]	; (8006834 <_ZN3UMD10shift_LEDsEj+0x100>)
 8006828:	f7fa fc2a 	bl	8001080 <HAL_GPIO_WritePin>
}
 800682c:	bf00      	nop
 800682e:	3708      	adds	r7, #8
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	40020000 	.word	0x40020000

08006838 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800683e:	463b      	mov	r3, r7
 8006840:	2200      	movs	r2, #0
 8006842:	601a      	str	r2, [r3, #0]
 8006844:	605a      	str	r2, [r3, #4]
 8006846:	609a      	str	r2, [r3, #8]
 8006848:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800684a:	4b21      	ldr	r3, [pc, #132]	; (80068d0 <MX_ADC1_Init+0x98>)
 800684c:	4a21      	ldr	r2, [pc, #132]	; (80068d4 <MX_ADC1_Init+0x9c>)
 800684e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006850:	4b1f      	ldr	r3, [pc, #124]	; (80068d0 <MX_ADC1_Init+0x98>)
 8006852:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006856:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006858:	4b1d      	ldr	r3, [pc, #116]	; (80068d0 <MX_ADC1_Init+0x98>)
 800685a:	2200      	movs	r2, #0
 800685c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800685e:	4b1c      	ldr	r3, [pc, #112]	; (80068d0 <MX_ADC1_Init+0x98>)
 8006860:	2200      	movs	r2, #0
 8006862:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8006864:	4b1a      	ldr	r3, [pc, #104]	; (80068d0 <MX_ADC1_Init+0x98>)
 8006866:	2200      	movs	r2, #0
 8006868:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800686a:	4b19      	ldr	r3, [pc, #100]	; (80068d0 <MX_ADC1_Init+0x98>)
 800686c:	2200      	movs	r2, #0
 800686e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006872:	4b17      	ldr	r3, [pc, #92]	; (80068d0 <MX_ADC1_Init+0x98>)
 8006874:	2200      	movs	r2, #0
 8006876:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006878:	4b15      	ldr	r3, [pc, #84]	; (80068d0 <MX_ADC1_Init+0x98>)
 800687a:	4a17      	ldr	r2, [pc, #92]	; (80068d8 <MX_ADC1_Init+0xa0>)
 800687c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800687e:	4b14      	ldr	r3, [pc, #80]	; (80068d0 <MX_ADC1_Init+0x98>)
 8006880:	2200      	movs	r2, #0
 8006882:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8006884:	4b12      	ldr	r3, [pc, #72]	; (80068d0 <MX_ADC1_Init+0x98>)
 8006886:	2201      	movs	r2, #1
 8006888:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800688a:	4b11      	ldr	r3, [pc, #68]	; (80068d0 <MX_ADC1_Init+0x98>)
 800688c:	2200      	movs	r2, #0
 800688e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006892:	4b0f      	ldr	r3, [pc, #60]	; (80068d0 <MX_ADC1_Init+0x98>)
 8006894:	2201      	movs	r2, #1
 8006896:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006898:	480d      	ldr	r0, [pc, #52]	; (80068d0 <MX_ADC1_Init+0x98>)
 800689a:	f7f9 fed1 	bl	8000640 <HAL_ADC_Init>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d001      	beq.n	80068a8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80068a4:	f000 fe1a 	bl	80074dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80068a8:	2307      	movs	r3, #7
 80068aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80068ac:	2301      	movs	r3, #1
 80068ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80068b0:	2300      	movs	r3, #0
 80068b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80068b4:	463b      	mov	r3, r7
 80068b6:	4619      	mov	r1, r3
 80068b8:	4805      	ldr	r0, [pc, #20]	; (80068d0 <MX_ADC1_Init+0x98>)
 80068ba:	f7f9 ff05 	bl	80006c8 <HAL_ADC_ConfigChannel>
 80068be:	4603      	mov	r3, r0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d001      	beq.n	80068c8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80068c4:	f000 fe0a 	bl	80074dc <Error_Handler>
  }

}
 80068c8:	bf00      	nop
 80068ca:	3710      	adds	r7, #16
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	20000220 	.word	0x20000220
 80068d4:	40012000 	.word	0x40012000
 80068d8:	0f000001 	.word	0x0f000001

080068dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b08a      	sub	sp, #40	; 0x28
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068e4:	f107 0314 	add.w	r3, r7, #20
 80068e8:	2200      	movs	r2, #0
 80068ea:	601a      	str	r2, [r3, #0]
 80068ec:	605a      	str	r2, [r3, #4]
 80068ee:	609a      	str	r2, [r3, #8]
 80068f0:	60da      	str	r2, [r3, #12]
 80068f2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a17      	ldr	r2, [pc, #92]	; (8006958 <HAL_ADC_MspInit+0x7c>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d127      	bne.n	800694e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80068fe:	2300      	movs	r3, #0
 8006900:	613b      	str	r3, [r7, #16]
 8006902:	4b16      	ldr	r3, [pc, #88]	; (800695c <HAL_ADC_MspInit+0x80>)
 8006904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006906:	4a15      	ldr	r2, [pc, #84]	; (800695c <HAL_ADC_MspInit+0x80>)
 8006908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800690c:	6453      	str	r3, [r2, #68]	; 0x44
 800690e:	4b13      	ldr	r3, [pc, #76]	; (800695c <HAL_ADC_MspInit+0x80>)
 8006910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006916:	613b      	str	r3, [r7, #16]
 8006918:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800691a:	2300      	movs	r3, #0
 800691c:	60fb      	str	r3, [r7, #12]
 800691e:	4b0f      	ldr	r3, [pc, #60]	; (800695c <HAL_ADC_MspInit+0x80>)
 8006920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006922:	4a0e      	ldr	r2, [pc, #56]	; (800695c <HAL_ADC_MspInit+0x80>)
 8006924:	f043 0301 	orr.w	r3, r3, #1
 8006928:	6313      	str	r3, [r2, #48]	; 0x30
 800692a:	4b0c      	ldr	r3, [pc, #48]	; (800695c <HAL_ADC_MspInit+0x80>)
 800692c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800692e:	f003 0301 	and.w	r3, r3, #1
 8006932:	60fb      	str	r3, [r7, #12]
 8006934:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA7     ------> ADC1_IN7 
    */
    GPIO_InitStruct.Pin = ICART_Pin;
 8006936:	2380      	movs	r3, #128	; 0x80
 8006938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800693a:	2303      	movs	r3, #3
 800693c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800693e:	2300      	movs	r3, #0
 8006940:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ICART_GPIO_Port, &GPIO_InitStruct);
 8006942:	f107 0314 	add.w	r3, r7, #20
 8006946:	4619      	mov	r1, r3
 8006948:	4805      	ldr	r0, [pc, #20]	; (8006960 <HAL_ADC_MspInit+0x84>)
 800694a:	f7fa f9ef 	bl	8000d2c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800694e:	bf00      	nop
 8006950:	3728      	adds	r7, #40	; 0x28
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	40012000 	.word	0x40012000
 800695c:	40023800 	.word	0x40023800
 8006960:	40020000 	.word	0x40020000

08006964 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800696a:	2300      	movs	r3, #0
 800696c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800696e:	f000 f879 	bl	8006a64 <BSP_SD_IsDetected>
 8006972:	4603      	mov	r3, r0
 8006974:	2b01      	cmp	r3, #1
 8006976:	d001      	beq.n	800697c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e012      	b.n	80069a2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800697c:	480b      	ldr	r0, [pc, #44]	; (80069ac <BSP_SD_Init+0x48>)
 800697e:	f7fb ff69 	bl	8002854 <HAL_SD_Init>
 8006982:	4603      	mov	r3, r0
 8006984:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8006986:	79fb      	ldrb	r3, [r7, #7]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d109      	bne.n	80069a0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800698c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006990:	4806      	ldr	r0, [pc, #24]	; (80069ac <BSP_SD_Init+0x48>)
 8006992:	f7fc fd39 	bl	8003408 <HAL_SD_ConfigWideBusOperation>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d001      	beq.n	80069a0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80069a0:	79fb      	ldrb	r3, [r7, #7]
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3708      	adds	r7, #8
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	20000864 	.word	0x20000864

080069b0 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b088      	sub	sp, #32
 80069b4:	af02      	add	r7, sp, #8
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	607a      	str	r2, [r7, #4]
 80069bc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80069be:	2300      	movs	r3, #0
 80069c0:	75fb      	strb	r3, [r7, #23]
  
  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	9300      	str	r3, [sp, #0]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	68ba      	ldr	r2, [r7, #8]
 80069ca:	68f9      	ldr	r1, [r7, #12]
 80069cc:	4806      	ldr	r0, [pc, #24]	; (80069e8 <BSP_SD_ReadBlocks+0x38>)
 80069ce:	f7fb ffc9 	bl	8002964 <HAL_SD_ReadBlocks>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d001      	beq.n	80069dc <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 80069dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3718      	adds	r7, #24
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	20000864 	.word	0x20000864

080069ec <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b088      	sub	sp, #32
 80069f0:	af02      	add	r7, sp, #8
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	607a      	str	r2, [r7, #4]
 80069f8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80069fa:	2300      	movs	r3, #0
 80069fc:	75fb      	strb	r3, [r7, #23]
  
  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	9300      	str	r3, [sp, #0]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	68ba      	ldr	r2, [r7, #8]
 8006a06:	68f9      	ldr	r1, [r7, #12]
 8006a08:	4806      	ldr	r0, [pc, #24]	; (8006a24 <BSP_SD_WriteBlocks+0x38>)
 8006a0a:	f7fc f941 	bl	8002c90 <HAL_SD_WriteBlocks>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d001      	beq.n	8006a18 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8006a18:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3718      	adds	r7, #24
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	20000864 	.word	0x20000864

08006a28 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006a2c:	4805      	ldr	r0, [pc, #20]	; (8006a44 <BSP_SD_GetCardState+0x1c>)
 8006a2e:	f7fc fd67 	bl	8003500 <HAL_SD_GetCardState>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b04      	cmp	r3, #4
 8006a36:	bf14      	ite	ne
 8006a38:	2301      	movne	r3, #1
 8006a3a:	2300      	moveq	r3, #0
 8006a3c:	b2db      	uxtb	r3, r3
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	20000864 	.word	0x20000864

08006a48 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006a50:	6879      	ldr	r1, [r7, #4]
 8006a52:	4803      	ldr	r0, [pc, #12]	; (8006a60 <BSP_SD_GetCardInfo+0x18>)
 8006a54:	f7fc fcac 	bl	80033b0 <HAL_SD_GetCardInfo>
}
 8006a58:	bf00      	nop
 8006a5a:	3708      	adds	r7, #8
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	20000864 	.word	0x20000864

08006a64 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8006a6e:	f000 f853 	bl	8006b18 <BSP_PlatformIsDetected>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d101      	bne.n	8006a7c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8006a7c:	79fb      	ldrb	r3, [r7, #7]
 8006a7e:	b2db      	uxtb	r3, r3
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3708      	adds	r7, #8
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8006a8c:	4b06      	ldr	r3, [pc, #24]	; (8006aa8 <MX_CRC_Init+0x20>)
 8006a8e:	4a07      	ldr	r2, [pc, #28]	; (8006aac <MX_CRC_Init+0x24>)
 8006a90:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8006a92:	4805      	ldr	r0, [pc, #20]	; (8006aa8 <MX_CRC_Init+0x20>)
 8006a94:	f7fa f92b 	bl	8000cee <HAL_CRC_Init>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d001      	beq.n	8006aa2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8006a9e:	f000 fd1d 	bl	80074dc <Error_Handler>
  }

}
 8006aa2:	bf00      	nop
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	20000268 	.word	0x20000268
 8006aac:	40023000 	.word	0x40023000

08006ab0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b085      	sub	sp, #20
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a0b      	ldr	r2, [pc, #44]	; (8006aec <HAL_CRC_MspInit+0x3c>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d10d      	bne.n	8006ade <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	60fb      	str	r3, [r7, #12]
 8006ac6:	4b0a      	ldr	r3, [pc, #40]	; (8006af0 <HAL_CRC_MspInit+0x40>)
 8006ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aca:	4a09      	ldr	r2, [pc, #36]	; (8006af0 <HAL_CRC_MspInit+0x40>)
 8006acc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8006ad2:	4b07      	ldr	r3, [pc, #28]	; (8006af0 <HAL_CRC_MspInit+0x40>)
 8006ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ada:	60fb      	str	r3, [r7, #12]
 8006adc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8006ade:	bf00      	nop
 8006ae0:	3714      	adds	r7, #20
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	40023000 	.word	0x40023000
 8006af0:	40023800 	.word	0x40023800

08006af4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006af8:	4904      	ldr	r1, [pc, #16]	; (8006b0c <MX_FATFS_Init+0x18>)
 8006afa:	4805      	ldr	r0, [pc, #20]	; (8006b10 <MX_FATFS_Init+0x1c>)
 8006afc:	f7ff fdf2 	bl	80066e4 <FATFS_LinkDriver>
 8006b00:	4603      	mov	r3, r0
 8006b02:	461a      	mov	r2, r3
 8006b04:	4b03      	ldr	r3, [pc, #12]	; (8006b14 <MX_FATFS_Init+0x20>)
 8006b06:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8006b08:	bf00      	nop
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	20000274 	.word	0x20000274
 8006b10:	08008498 	.word	0x08008498
 8006b14:	20000270 	.word	0x20000270

08006b18 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8006b22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b26:	4806      	ldr	r0, [pc, #24]	; (8006b40 <BSP_PlatformIsDetected+0x28>)
 8006b28:	f7fa fa92 	bl	8001050 <HAL_GPIO_ReadPin>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d001      	beq.n	8006b36 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8006b32:	2300      	movs	r3, #0
 8006b34:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8006b36:	79fb      	ldrb	r3, [r7, #7]
}  
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3708      	adds	r7, #8
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	40021800 	.word	0x40021800

08006b44 <MX_FSMC_Init>:
NOR_HandleTypeDef hnor3;
SRAM_HandleTypeDef hsram4;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b08e      	sub	sp, #56	; 0x38
 8006b48:	af00      	add	r7, sp, #0
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8006b4a:	f107 031c 	add.w	r3, r7, #28
 8006b4e:	2200      	movs	r2, #0
 8006b50:	601a      	str	r2, [r3, #0]
 8006b52:	605a      	str	r2, [r3, #4]
 8006b54:	609a      	str	r2, [r3, #8]
 8006b56:	60da      	str	r2, [r3, #12]
 8006b58:	611a      	str	r2, [r3, #16]
 8006b5a:	615a      	str	r2, [r3, #20]
 8006b5c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8006b5e:	463b      	mov	r3, r7
 8006b60:	2200      	movs	r2, #0
 8006b62:	601a      	str	r2, [r3, #0]
 8006b64:	605a      	str	r2, [r3, #4]
 8006b66:	609a      	str	r2, [r3, #8]
 8006b68:	60da      	str	r2, [r3, #12]
 8006b6a:	611a      	str	r2, [r3, #16]
 8006b6c:	615a      	str	r2, [r3, #20]
 8006b6e:	619a      	str	r2, [r3, #24]

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FSMC_NORSRAM_DEVICE;
 8006b70:	4ba4      	ldr	r3, [pc, #656]	; (8006e04 <MX_FSMC_Init+0x2c0>)
 8006b72:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8006b76:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8006b78:	4ba2      	ldr	r3, [pc, #648]	; (8006e04 <MX_FSMC_Init+0x2c0>)
 8006b7a:	4aa3      	ldr	r2, [pc, #652]	; (8006e08 <MX_FSMC_Init+0x2c4>)
 8006b7c:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8006b7e:	4ba1      	ldr	r3, [pc, #644]	; (8006e04 <MX_FSMC_Init+0x2c0>)
 8006b80:	2200      	movs	r2, #0
 8006b82:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8006b84:	4b9f      	ldr	r3, [pc, #636]	; (8006e04 <MX_FSMC_Init+0x2c0>)
 8006b86:	2200      	movs	r2, #0
 8006b88:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FSMC_MEMORY_TYPE_NOR;
 8006b8a:	4b9e      	ldr	r3, [pc, #632]	; (8006e04 <MX_FSMC_Init+0x2c0>)
 8006b8c:	2208      	movs	r2, #8
 8006b8e:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_8;
 8006b90:	4b9c      	ldr	r3, [pc, #624]	; (8006e04 <MX_FSMC_Init+0x2c0>)
 8006b92:	2200      	movs	r2, #0
 8006b94:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8006b96:	4b9b      	ldr	r3, [pc, #620]	; (8006e04 <MX_FSMC_Init+0x2c0>)
 8006b98:	2200      	movs	r2, #0
 8006b9a:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8006b9c:	4b99      	ldr	r3, [pc, #612]	; (8006e04 <MX_FSMC_Init+0x2c0>)
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	61da      	str	r2, [r3, #28]
  hnor1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8006ba2:	4b98      	ldr	r3, [pc, #608]	; (8006e04 <MX_FSMC_Init+0x2c0>)
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8006ba8:	4b96      	ldr	r3, [pc, #600]	; (8006e04 <MX_FSMC_Init+0x2c0>)
 8006baa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006bae:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8006bb0:	4b94      	ldr	r3, [pc, #592]	; (8006e04 <MX_FSMC_Init+0x2c0>)
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8006bb6:	4b93      	ldr	r3, [pc, #588]	; (8006e04 <MX_FSMC_Init+0x2c0>)
 8006bb8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006bbc:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8006bbe:	4b91      	ldr	r3, [pc, #580]	; (8006e04 <MX_FSMC_Init+0x2c0>)
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8006bc4:	4b8f      	ldr	r3, [pc, #572]	; (8006e04 <MX_FSMC_Init+0x2c0>)
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8006bca:	4b8e      	ldr	r3, [pc, #568]	; (8006e04 <MX_FSMC_Init+0x2c0>)
 8006bcc:	2200      	movs	r2, #0
 8006bce:	63da      	str	r2, [r3, #60]	; 0x3c
  hnor1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8006bd0:	4b8c      	ldr	r3, [pc, #560]	; (8006e04 <MX_FSMC_Init+0x2c0>)
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	641a      	str	r2, [r3, #64]	; 0x40
  hnor1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8006bd6:	4b8b      	ldr	r3, [pc, #556]	; (8006e04 <MX_FSMC_Init+0x2c0>)
 8006bd8:	2200      	movs	r2, #0
 8006bda:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8006bdc:	230f      	movs	r3, #15
 8006bde:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8006be0:	230f      	movs	r3, #15
 8006be2:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 255;
 8006be4:	23ff      	movs	r3, #255	; 0xff
 8006be6:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 8006be8:	230f      	movs	r3, #15
 8006bea:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8006bec:	2310      	movs	r3, #16
 8006bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8006bf0:	2311      	movs	r3, #17
 8006bf2:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_B;
 8006bf4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006bf8:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 15;
 8006bfa:	230f      	movs	r3, #15
 8006bfc:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8006bfe:	230f      	movs	r3, #15
 8006c00:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 255;
 8006c02:	23ff      	movs	r3, #255	; 0xff
 8006c04:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 15;
 8006c06:	230f      	movs	r3, #15
 8006c08:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8006c0a:	2310      	movs	r3, #16
 8006c0c:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8006c0e:	2311      	movs	r3, #17
 8006c10:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_B;
 8006c12:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006c16:	61bb      	str	r3, [r7, #24]

  if (HAL_NOR_Init(&hnor1, &Timing, &ExtTiming) != HAL_OK)
 8006c18:	463a      	mov	r2, r7
 8006c1a:	f107 031c 	add.w	r3, r7, #28
 8006c1e:	4619      	mov	r1, r3
 8006c20:	4878      	ldr	r0, [pc, #480]	; (8006e04 <MX_FSMC_Init+0x2c0>)
 8006c22:	f7fa fb6f 	bl	8001304 <HAL_NOR_Init>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d001      	beq.n	8006c30 <MX_FSMC_Init+0xec>
  {
    Error_Handler( );
 8006c2c:	f000 fc56 	bl	80074dc <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 8006c30:	4b76      	ldr	r3, [pc, #472]	; (8006e0c <MX_FSMC_Init+0x2c8>)
 8006c32:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8006c36:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8006c38:	4b74      	ldr	r3, [pc, #464]	; (8006e0c <MX_FSMC_Init+0x2c8>)
 8006c3a:	4a73      	ldr	r2, [pc, #460]	; (8006e08 <MX_FSMC_Init+0x2c4>)
 8006c3c:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK2;
 8006c3e:	4b73      	ldr	r3, [pc, #460]	; (8006e0c <MX_FSMC_Init+0x2c8>)
 8006c40:	2202      	movs	r2, #2
 8006c42:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8006c44:	4b71      	ldr	r3, [pc, #452]	; (8006e0c <MX_FSMC_Init+0x2c8>)
 8006c46:	2200      	movs	r2, #0
 8006c48:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8006c4a:	4b70      	ldr	r3, [pc, #448]	; (8006e0c <MX_FSMC_Init+0x2c8>)
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_8;
 8006c50:	4b6e      	ldr	r3, [pc, #440]	; (8006e0c <MX_FSMC_Init+0x2c8>)
 8006c52:	2200      	movs	r2, #0
 8006c54:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8006c56:	4b6d      	ldr	r3, [pc, #436]	; (8006e0c <MX_FSMC_Init+0x2c8>)
 8006c58:	2200      	movs	r2, #0
 8006c5a:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8006c5c:	4b6b      	ldr	r3, [pc, #428]	; (8006e0c <MX_FSMC_Init+0x2c8>)
 8006c5e:	2200      	movs	r2, #0
 8006c60:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8006c62:	4b6a      	ldr	r3, [pc, #424]	; (8006e0c <MX_FSMC_Init+0x2c8>)
 8006c64:	2200      	movs	r2, #0
 8006c66:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8006c68:	4b68      	ldr	r3, [pc, #416]	; (8006e0c <MX_FSMC_Init+0x2c8>)
 8006c6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006c6e:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8006c70:	4b66      	ldr	r3, [pc, #408]	; (8006e0c <MX_FSMC_Init+0x2c8>)
 8006c72:	2200      	movs	r2, #0
 8006c74:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8006c76:	4b65      	ldr	r3, [pc, #404]	; (8006e0c <MX_FSMC_Init+0x2c8>)
 8006c78:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006c7c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8006c7e:	4b63      	ldr	r3, [pc, #396]	; (8006e0c <MX_FSMC_Init+0x2c8>)
 8006c80:	2200      	movs	r2, #0
 8006c82:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8006c84:	4b61      	ldr	r3, [pc, #388]	; (8006e0c <MX_FSMC_Init+0x2c8>)
 8006c86:	2200      	movs	r2, #0
 8006c88:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8006c8a:	4b60      	ldr	r3, [pc, #384]	; (8006e0c <MX_FSMC_Init+0x2c8>)
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8006c90:	4b5e      	ldr	r3, [pc, #376]	; (8006e0c <MX_FSMC_Init+0x2c8>)
 8006c92:	2200      	movs	r2, #0
 8006c94:	641a      	str	r2, [r3, #64]	; 0x40
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8006c96:	4b5d      	ldr	r3, [pc, #372]	; (8006e0c <MX_FSMC_Init+0x2c8>)
 8006c98:	2200      	movs	r2, #0
 8006c9a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8006c9c:	230f      	movs	r3, #15
 8006c9e:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8006ca0:	230f      	movs	r3, #15
 8006ca2:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 255;
 8006ca4:	23ff      	movs	r3, #255	; 0xff
 8006ca6:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 8006ca8:	230f      	movs	r3, #15
 8006caa:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8006cac:	2310      	movs	r3, #16
 8006cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8006cb0:	2311      	movs	r3, #17
 8006cb2:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 15;
 8006cb8:	230f      	movs	r3, #15
 8006cba:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8006cbc:	230f      	movs	r3, #15
 8006cbe:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 255;
 8006cc0:	23ff      	movs	r3, #255	; 0xff
 8006cc2:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 15;
 8006cc4:	230f      	movs	r3, #15
 8006cc6:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8006cc8:	2310      	movs	r3, #16
 8006cca:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8006ccc:	2311      	movs	r3, #17
 8006cce:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram2, &Timing, &ExtTiming) != HAL_OK)
 8006cd4:	463a      	mov	r2, r7
 8006cd6:	f107 031c 	add.w	r3, r7, #28
 8006cda:	4619      	mov	r1, r3
 8006cdc:	484b      	ldr	r0, [pc, #300]	; (8006e0c <MX_FSMC_Init+0x2c8>)
 8006cde:	f7fc ff96 	bl	8003c0e <HAL_SRAM_Init>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d001      	beq.n	8006cec <MX_FSMC_Init+0x1a8>
  {
    Error_Handler( );
 8006ce8:	f000 fbf8 	bl	80074dc <Error_Handler>
  }

  /** Perform the NOR3 memory initialization sequence
  */
  hnor3.Instance = FSMC_NORSRAM_DEVICE;
 8006cec:	4b48      	ldr	r3, [pc, #288]	; (8006e10 <MX_FSMC_Init+0x2cc>)
 8006cee:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8006cf2:	601a      	str	r2, [r3, #0]
  hnor3.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8006cf4:	4b46      	ldr	r3, [pc, #280]	; (8006e10 <MX_FSMC_Init+0x2cc>)
 8006cf6:	4a44      	ldr	r2, [pc, #272]	; (8006e08 <MX_FSMC_Init+0x2c4>)
 8006cf8:	605a      	str	r2, [r3, #4]
  /* hnor3.Init */
  hnor3.Init.NSBank = FSMC_NORSRAM_BANK3;
 8006cfa:	4b45      	ldr	r3, [pc, #276]	; (8006e10 <MX_FSMC_Init+0x2cc>)
 8006cfc:	2204      	movs	r2, #4
 8006cfe:	609a      	str	r2, [r3, #8]
  hnor3.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8006d00:	4b43      	ldr	r3, [pc, #268]	; (8006e10 <MX_FSMC_Init+0x2cc>)
 8006d02:	2200      	movs	r2, #0
 8006d04:	60da      	str	r2, [r3, #12]
  hnor3.Init.MemoryType = FSMC_MEMORY_TYPE_NOR;
 8006d06:	4b42      	ldr	r3, [pc, #264]	; (8006e10 <MX_FSMC_Init+0x2cc>)
 8006d08:	2208      	movs	r2, #8
 8006d0a:	611a      	str	r2, [r3, #16]
  hnor3.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8006d0c:	4b40      	ldr	r3, [pc, #256]	; (8006e10 <MX_FSMC_Init+0x2cc>)
 8006d0e:	2210      	movs	r2, #16
 8006d10:	615a      	str	r2, [r3, #20]
  hnor3.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8006d12:	4b3f      	ldr	r3, [pc, #252]	; (8006e10 <MX_FSMC_Init+0x2cc>)
 8006d14:	2200      	movs	r2, #0
 8006d16:	619a      	str	r2, [r3, #24]
  hnor3.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8006d18:	4b3d      	ldr	r3, [pc, #244]	; (8006e10 <MX_FSMC_Init+0x2cc>)
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	61da      	str	r2, [r3, #28]
  hnor3.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8006d1e:	4b3c      	ldr	r3, [pc, #240]	; (8006e10 <MX_FSMC_Init+0x2cc>)
 8006d20:	2200      	movs	r2, #0
 8006d22:	625a      	str	r2, [r3, #36]	; 0x24
  hnor3.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8006d24:	4b3a      	ldr	r3, [pc, #232]	; (8006e10 <MX_FSMC_Init+0x2cc>)
 8006d26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006d2a:	629a      	str	r2, [r3, #40]	; 0x28
  hnor3.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8006d2c:	4b38      	ldr	r3, [pc, #224]	; (8006e10 <MX_FSMC_Init+0x2cc>)
 8006d2e:	2200      	movs	r2, #0
 8006d30:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor3.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8006d32:	4b37      	ldr	r3, [pc, #220]	; (8006e10 <MX_FSMC_Init+0x2cc>)
 8006d34:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006d38:	631a      	str	r2, [r3, #48]	; 0x30
  hnor3.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8006d3a:	4b35      	ldr	r3, [pc, #212]	; (8006e10 <MX_FSMC_Init+0x2cc>)
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	635a      	str	r2, [r3, #52]	; 0x34
  hnor3.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8006d40:	4b33      	ldr	r3, [pc, #204]	; (8006e10 <MX_FSMC_Init+0x2cc>)
 8006d42:	2200      	movs	r2, #0
 8006d44:	639a      	str	r2, [r3, #56]	; 0x38
  hnor3.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8006d46:	4b32      	ldr	r3, [pc, #200]	; (8006e10 <MX_FSMC_Init+0x2cc>)
 8006d48:	2200      	movs	r2, #0
 8006d4a:	63da      	str	r2, [r3, #60]	; 0x3c
  hnor3.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8006d4c:	4b30      	ldr	r3, [pc, #192]	; (8006e10 <MX_FSMC_Init+0x2cc>)
 8006d4e:	2200      	movs	r2, #0
 8006d50:	641a      	str	r2, [r3, #64]	; 0x40
  hnor3.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8006d52:	4b2f      	ldr	r3, [pc, #188]	; (8006e10 <MX_FSMC_Init+0x2cc>)
 8006d54:	2200      	movs	r2, #0
 8006d56:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8006d58:	230f      	movs	r3, #15
 8006d5a:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8006d5c:	230f      	movs	r3, #15
 8006d5e:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 255;
 8006d60:	23ff      	movs	r3, #255	; 0xff
 8006d62:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 8006d64:	230f      	movs	r3, #15
 8006d66:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8006d68:	2310      	movs	r3, #16
 8006d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8006d6c:	2311      	movs	r3, #17
 8006d6e:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_B;
 8006d70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006d74:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 15;
 8006d76:	230f      	movs	r3, #15
 8006d78:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8006d7a:	230f      	movs	r3, #15
 8006d7c:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 255;
 8006d7e:	23ff      	movs	r3, #255	; 0xff
 8006d80:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 15;
 8006d82:	230f      	movs	r3, #15
 8006d84:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8006d86:	2310      	movs	r3, #16
 8006d88:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8006d8a:	2311      	movs	r3, #17
 8006d8c:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_B;
 8006d8e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006d92:	61bb      	str	r3, [r7, #24]

  if (HAL_NOR_Init(&hnor3, &Timing, &ExtTiming) != HAL_OK)
 8006d94:	463a      	mov	r2, r7
 8006d96:	f107 031c 	add.w	r3, r7, #28
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	481c      	ldr	r0, [pc, #112]	; (8006e10 <MX_FSMC_Init+0x2cc>)
 8006d9e:	f7fa fab1 	bl	8001304 <HAL_NOR_Init>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d001      	beq.n	8006dac <MX_FSMC_Init+0x268>
  {
    Error_Handler( );
 8006da8:	f000 fb98 	bl	80074dc <Error_Handler>
  }

  /** Perform the SRAM4 memory initialization sequence
  */
  hsram4.Instance = FSMC_NORSRAM_DEVICE;
 8006dac:	4b19      	ldr	r3, [pc, #100]	; (8006e14 <MX_FSMC_Init+0x2d0>)
 8006dae:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8006db2:	601a      	str	r2, [r3, #0]
  hsram4.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8006db4:	4b17      	ldr	r3, [pc, #92]	; (8006e14 <MX_FSMC_Init+0x2d0>)
 8006db6:	4a14      	ldr	r2, [pc, #80]	; (8006e08 <MX_FSMC_Init+0x2c4>)
 8006db8:	605a      	str	r2, [r3, #4]
  /* hsram4.Init */
  hsram4.Init.NSBank = FSMC_NORSRAM_BANK4;
 8006dba:	4b16      	ldr	r3, [pc, #88]	; (8006e14 <MX_FSMC_Init+0x2d0>)
 8006dbc:	2206      	movs	r2, #6
 8006dbe:	609a      	str	r2, [r3, #8]
  hsram4.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8006dc0:	4b14      	ldr	r3, [pc, #80]	; (8006e14 <MX_FSMC_Init+0x2d0>)
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	60da      	str	r2, [r3, #12]
  hsram4.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8006dc6:	4b13      	ldr	r3, [pc, #76]	; (8006e14 <MX_FSMC_Init+0x2d0>)
 8006dc8:	2200      	movs	r2, #0
 8006dca:	611a      	str	r2, [r3, #16]
  hsram4.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8006dcc:	4b11      	ldr	r3, [pc, #68]	; (8006e14 <MX_FSMC_Init+0x2d0>)
 8006dce:	2210      	movs	r2, #16
 8006dd0:	615a      	str	r2, [r3, #20]
  hsram4.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8006dd2:	4b10      	ldr	r3, [pc, #64]	; (8006e14 <MX_FSMC_Init+0x2d0>)
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	619a      	str	r2, [r3, #24]
  hsram4.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8006dd8:	4b0e      	ldr	r3, [pc, #56]	; (8006e14 <MX_FSMC_Init+0x2d0>)
 8006dda:	2200      	movs	r2, #0
 8006ddc:	61da      	str	r2, [r3, #28]
  hsram4.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8006dde:	4b0d      	ldr	r3, [pc, #52]	; (8006e14 <MX_FSMC_Init+0x2d0>)
 8006de0:	2200      	movs	r2, #0
 8006de2:	625a      	str	r2, [r3, #36]	; 0x24
  hsram4.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8006de4:	4b0b      	ldr	r3, [pc, #44]	; (8006e14 <MX_FSMC_Init+0x2d0>)
 8006de6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006dea:	629a      	str	r2, [r3, #40]	; 0x28
  hsram4.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8006dec:	4b09      	ldr	r3, [pc, #36]	; (8006e14 <MX_FSMC_Init+0x2d0>)
 8006dee:	2200      	movs	r2, #0
 8006df0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram4.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8006df2:	4b08      	ldr	r3, [pc, #32]	; (8006e14 <MX_FSMC_Init+0x2d0>)
 8006df4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006df8:	631a      	str	r2, [r3, #48]	; 0x30
  hsram4.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8006dfa:	4b06      	ldr	r3, [pc, #24]	; (8006e14 <MX_FSMC_Init+0x2d0>)
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	635a      	str	r2, [r3, #52]	; 0x34
 8006e00:	e00a      	b.n	8006e18 <MX_FSMC_Init+0x2d4>
 8006e02:	bf00      	nop
 8006e04:	200006d8 	.word	0x200006d8
 8006e08:	a0000104 	.word	0xa0000104
 8006e0c:	20000724 	.word	0x20000724
 8006e10:	200007c4 	.word	0x200007c4
 8006e14:	20000774 	.word	0x20000774
  hsram4.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8006e18:	4b1b      	ldr	r3, [pc, #108]	; (8006e88 <MX_FSMC_Init+0x344>)
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	639a      	str	r2, [r3, #56]	; 0x38
  hsram4.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8006e1e:	4b1a      	ldr	r3, [pc, #104]	; (8006e88 <MX_FSMC_Init+0x344>)
 8006e20:	2200      	movs	r2, #0
 8006e22:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram4.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8006e24:	4b18      	ldr	r3, [pc, #96]	; (8006e88 <MX_FSMC_Init+0x344>)
 8006e26:	2200      	movs	r2, #0
 8006e28:	641a      	str	r2, [r3, #64]	; 0x40
  hsram4.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8006e2a:	4b17      	ldr	r3, [pc, #92]	; (8006e88 <MX_FSMC_Init+0x344>)
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8006e30:	230f      	movs	r3, #15
 8006e32:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8006e34:	230f      	movs	r3, #15
 8006e36:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 255;
 8006e38:	23ff      	movs	r3, #255	; 0xff
 8006e3a:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 8006e3c:	230f      	movs	r3, #15
 8006e3e:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8006e40:	2310      	movs	r3, #16
 8006e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8006e44:	2311      	movs	r3, #17
 8006e46:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 15;
 8006e4c:	230f      	movs	r3, #15
 8006e4e:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8006e50:	230f      	movs	r3, #15
 8006e52:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 255;
 8006e54:	23ff      	movs	r3, #255	; 0xff
 8006e56:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 15;
 8006e58:	230f      	movs	r3, #15
 8006e5a:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8006e5c:	2310      	movs	r3, #16
 8006e5e:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8006e60:	2311      	movs	r3, #17
 8006e62:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8006e64:	2300      	movs	r3, #0
 8006e66:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram4, &Timing, &ExtTiming) != HAL_OK)
 8006e68:	463a      	mov	r2, r7
 8006e6a:	f107 031c 	add.w	r3, r7, #28
 8006e6e:	4619      	mov	r1, r3
 8006e70:	4805      	ldr	r0, [pc, #20]	; (8006e88 <MX_FSMC_Init+0x344>)
 8006e72:	f7fc fecc 	bl	8003c0e <HAL_SRAM_Init>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d001      	beq.n	8006e80 <MX_FSMC_Init+0x33c>
  {
    Error_Handler( );
 8006e7c:	f000 fb2e 	bl	80074dc <Error_Handler>
  }

}
 8006e80:	bf00      	nop
 8006e82:	3738      	adds	r7, #56	; 0x38
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	20000774 	.word	0x20000774

08006e8c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b086      	sub	sp, #24
 8006e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e92:	1d3b      	adds	r3, r7, #4
 8006e94:	2200      	movs	r2, #0
 8006e96:	601a      	str	r2, [r3, #0]
 8006e98:	605a      	str	r2, [r3, #4]
 8006e9a:	609a      	str	r2, [r3, #8]
 8006e9c:	60da      	str	r2, [r3, #12]
 8006e9e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8006ea0:	4b2c      	ldr	r3, [pc, #176]	; (8006f54 <HAL_FSMC_MspInit+0xc8>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d151      	bne.n	8006f4c <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8006ea8:	4b2a      	ldr	r3, [pc, #168]	; (8006f54 <HAL_FSMC_MspInit+0xc8>)
 8006eaa:	2201      	movs	r2, #1
 8006eac:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8006eae:	2300      	movs	r3, #0
 8006eb0:	603b      	str	r3, [r7, #0]
 8006eb2:	4b29      	ldr	r3, [pc, #164]	; (8006f58 <HAL_FSMC_MspInit+0xcc>)
 8006eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb6:	4a28      	ldr	r2, [pc, #160]	; (8006f58 <HAL_FSMC_MspInit+0xcc>)
 8006eb8:	f043 0301 	orr.w	r3, r3, #1
 8006ebc:	6393      	str	r3, [r2, #56]	; 0x38
 8006ebe:	4b26      	ldr	r3, [pc, #152]	; (8006f58 <HAL_FSMC_MspInit+0xcc>)
 8006ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec2:	f003 0301 	and.w	r3, r3, #1
 8006ec6:	603b      	str	r3, [r7, #0]
 8006ec8:	683b      	ldr	r3, [r7, #0]
  PG14   ------> FSMC_A25
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8006eca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006ece:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ed8:	2303      	movs	r3, #3
 8006eda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8006edc:	230c      	movs	r3, #12
 8006ede:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006ee0:	1d3b      	adds	r3, r7, #4
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	481d      	ldr	r0, [pc, #116]	; (8006f5c <HAL_FSMC_MspInit+0xd0>)
 8006ee6:	f7f9 ff21 	bl	8000d2c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8006eea:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8006eee:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ef0:	2302      	movs	r3, #2
 8006ef2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8006efc:	230c      	movs	r3, #12
 8006efe:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006f00:	1d3b      	adds	r3, r7, #4
 8006f02:	4619      	mov	r1, r3
 8006f04:	4816      	ldr	r0, [pc, #88]	; (8006f60 <HAL_FSMC_MspInit+0xd4>)
 8006f06:	f7f9 ff11 	bl	8000d2c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8006f0a:	f247 633f 	movw	r3, #30271	; 0x763f
 8006f0e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|nCE1_Pin|nCE2_Pin 
                          |nCE3_Pin|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f10:	2302      	movs	r3, #2
 8006f12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f14:	2300      	movs	r3, #0
 8006f16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8006f1c:	230c      	movs	r3, #12
 8006f1e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006f20:	1d3b      	adds	r3, r7, #4
 8006f22:	4619      	mov	r1, r3
 8006f24:	480f      	ldr	r0, [pc, #60]	; (8006f64 <HAL_FSMC_MspInit+0xd8>)
 8006f26:	f7f9 ff01 	bl	8000d2c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8006f2a:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 8006f2e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_0|GPIO_PIN_1|nRD_Pin|nWR_Pin 
                          |nCE0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f30:	2302      	movs	r3, #2
 8006f32:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f34:	2300      	movs	r3, #0
 8006f36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8006f3c:	230c      	movs	r3, #12
 8006f3e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006f40:	1d3b      	adds	r3, r7, #4
 8006f42:	4619      	mov	r1, r3
 8006f44:	4808      	ldr	r0, [pc, #32]	; (8006f68 <HAL_FSMC_MspInit+0xdc>)
 8006f46:	f7f9 fef1 	bl	8000d2c <HAL_GPIO_Init>
 8006f4a:	e000      	b.n	8006f4e <HAL_FSMC_MspInit+0xc2>
    return;
 8006f4c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8006f4e:	3718      	adds	r7, #24
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	2000020c 	.word	0x2000020c
 8006f58:	40023800 	.word	0x40023800
 8006f5c:	40021000 	.word	0x40021000
 8006f60:	40021400 	.word	0x40021400
 8006f64:	40021800 	.word	0x40021800
 8006f68:	40020c00 	.word	0x40020c00

08006f6c <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* norHandle){
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FSMC_MspInit();
 8006f74:	f7ff ff8a 	bl	8006e8c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 8006f78:	bf00      	nop
 8006f7a:	3708      	adds	r7, #8
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8006f88:	f7ff ff80 	bl	8006e8c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8006f8c:	bf00      	nop
 8006f8e:	3708      	adds	r7, #8
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <MX_GPIO_Init>:
     PB0   ------> SharedStack_PB0
     PB1   ------> SharedStack_PB1
     PC6   ------> SharedStack_PC6
*/
void MX_GPIO_Init(void)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b08e      	sub	sp, #56	; 0x38
 8006f98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	601a      	str	r2, [r3, #0]
 8006fa2:	605a      	str	r2, [r3, #4]
 8006fa4:	609a      	str	r2, [r3, #8]
 8006fa6:	60da      	str	r2, [r3, #12]
 8006fa8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006faa:	2300      	movs	r3, #0
 8006fac:	623b      	str	r3, [r7, #32]
 8006fae:	4ba6      	ldr	r3, [pc, #664]	; (8007248 <MX_GPIO_Init+0x2b4>)
 8006fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb2:	4aa5      	ldr	r2, [pc, #660]	; (8007248 <MX_GPIO_Init+0x2b4>)
 8006fb4:	f043 0310 	orr.w	r3, r3, #16
 8006fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8006fba:	4ba3      	ldr	r3, [pc, #652]	; (8007248 <MX_GPIO_Init+0x2b4>)
 8006fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fbe:	f003 0310 	and.w	r3, r3, #16
 8006fc2:	623b      	str	r3, [r7, #32]
 8006fc4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	61fb      	str	r3, [r7, #28]
 8006fca:	4b9f      	ldr	r3, [pc, #636]	; (8007248 <MX_GPIO_Init+0x2b4>)
 8006fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fce:	4a9e      	ldr	r2, [pc, #632]	; (8007248 <MX_GPIO_Init+0x2b4>)
 8006fd0:	f043 0304 	orr.w	r3, r3, #4
 8006fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8006fd6:	4b9c      	ldr	r3, [pc, #624]	; (8007248 <MX_GPIO_Init+0x2b4>)
 8006fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fda:	f003 0304 	and.w	r3, r3, #4
 8006fde:	61fb      	str	r3, [r7, #28]
 8006fe0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	61bb      	str	r3, [r7, #24]
 8006fe6:	4b98      	ldr	r3, [pc, #608]	; (8007248 <MX_GPIO_Init+0x2b4>)
 8006fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fea:	4a97      	ldr	r2, [pc, #604]	; (8007248 <MX_GPIO_Init+0x2b4>)
 8006fec:	f043 0320 	orr.w	r3, r3, #32
 8006ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8006ff2:	4b95      	ldr	r3, [pc, #596]	; (8007248 <MX_GPIO_Init+0x2b4>)
 8006ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff6:	f003 0320 	and.w	r3, r3, #32
 8006ffa:	61bb      	str	r3, [r7, #24]
 8006ffc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006ffe:	2300      	movs	r3, #0
 8007000:	617b      	str	r3, [r7, #20]
 8007002:	4b91      	ldr	r3, [pc, #580]	; (8007248 <MX_GPIO_Init+0x2b4>)
 8007004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007006:	4a90      	ldr	r2, [pc, #576]	; (8007248 <MX_GPIO_Init+0x2b4>)
 8007008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800700c:	6313      	str	r3, [r2, #48]	; 0x30
 800700e:	4b8e      	ldr	r3, [pc, #568]	; (8007248 <MX_GPIO_Init+0x2b4>)
 8007010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007016:	617b      	str	r3, [r7, #20]
 8007018:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800701a:	2300      	movs	r3, #0
 800701c:	613b      	str	r3, [r7, #16]
 800701e:	4b8a      	ldr	r3, [pc, #552]	; (8007248 <MX_GPIO_Init+0x2b4>)
 8007020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007022:	4a89      	ldr	r2, [pc, #548]	; (8007248 <MX_GPIO_Init+0x2b4>)
 8007024:	f043 0301 	orr.w	r3, r3, #1
 8007028:	6313      	str	r3, [r2, #48]	; 0x30
 800702a:	4b87      	ldr	r3, [pc, #540]	; (8007248 <MX_GPIO_Init+0x2b4>)
 800702c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800702e:	f003 0301 	and.w	r3, r3, #1
 8007032:	613b      	str	r3, [r7, #16]
 8007034:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007036:	2300      	movs	r3, #0
 8007038:	60fb      	str	r3, [r7, #12]
 800703a:	4b83      	ldr	r3, [pc, #524]	; (8007248 <MX_GPIO_Init+0x2b4>)
 800703c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800703e:	4a82      	ldr	r2, [pc, #520]	; (8007248 <MX_GPIO_Init+0x2b4>)
 8007040:	f043 0302 	orr.w	r3, r3, #2
 8007044:	6313      	str	r3, [r2, #48]	; 0x30
 8007046:	4b80      	ldr	r3, [pc, #512]	; (8007248 <MX_GPIO_Init+0x2b4>)
 8007048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800704a:	f003 0302 	and.w	r3, r3, #2
 800704e:	60fb      	str	r3, [r7, #12]
 8007050:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007052:	2300      	movs	r3, #0
 8007054:	60bb      	str	r3, [r7, #8]
 8007056:	4b7c      	ldr	r3, [pc, #496]	; (8007248 <MX_GPIO_Init+0x2b4>)
 8007058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800705a:	4a7b      	ldr	r2, [pc, #492]	; (8007248 <MX_GPIO_Init+0x2b4>)
 800705c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007060:	6313      	str	r3, [r2, #48]	; 0x30
 8007062:	4b79      	ldr	r3, [pc, #484]	; (8007248 <MX_GPIO_Init+0x2b4>)
 8007064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800706a:	60bb      	str	r3, [r7, #8]
 800706c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800706e:	2300      	movs	r3, #0
 8007070:	607b      	str	r3, [r7, #4]
 8007072:	4b75      	ldr	r3, [pc, #468]	; (8007248 <MX_GPIO_Init+0x2b4>)
 8007074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007076:	4a74      	ldr	r2, [pc, #464]	; (8007248 <MX_GPIO_Init+0x2b4>)
 8007078:	f043 0308 	orr.w	r3, r3, #8
 800707c:	6313      	str	r3, [r2, #48]	; 0x30
 800707e:	4b72      	ldr	r3, [pc, #456]	; (8007248 <MX_GPIO_Init+0x2b4>)
 8007080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007082:	f003 0308 	and.w	r3, r3, #8
 8007086:	607b      	str	r3, [r7, #4]
 8007088:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED3_Pin|LED2_Pin|LED1_Pin|LED0_Pin 
 800708a:	2200      	movs	r2, #0
 800708c:	f240 111f 	movw	r1, #287	; 0x11f
 8007090:	486e      	ldr	r0, [pc, #440]	; (800724c <MX_GPIO_Init+0x2b8>)
 8007092:	f7f9 fff5 	bl	8001080 <HAL_GPIO_WritePin>
                          |nOUT_EN0_Pin|VSEL0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GP3_GPIO_Port, GP3_Pin, GPIO_PIN_RESET);
 8007096:	2200      	movs	r2, #0
 8007098:	2120      	movs	r1, #32
 800709a:	486d      	ldr	r0, [pc, #436]	; (8007250 <MX_GPIO_Init+0x2bc>)
 800709c:	f7f9 fff0 	bl	8001080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nOUT_EN1_GPIO_Port, nOUT_EN1_Pin, GPIO_PIN_RESET);
 80070a0:	2200      	movs	r2, #0
 80070a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80070a6:	486b      	ldr	r0, [pc, #428]	; (8007254 <MX_GPIO_Init+0x2c0>)
 80070a8:	f7f9 ffea 	bl	8001080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, SEL0_Pin|SEL1_Pin, GPIO_PIN_RESET);
 80070ac:	2200      	movs	r2, #0
 80070ae:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80070b2:	4869      	ldr	r0, [pc, #420]	; (8007258 <MX_GPIO_Init+0x2c4>)
 80070b4:	f7f9 ffe4 	bl	8001080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOOT_EN_GPIO_Port, BOOT_EN_Pin, GPIO_PIN_RESET);
 80070b8:	2200      	movs	r2, #0
 80070ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80070be:	4867      	ldr	r0, [pc, #412]	; (800725c <MX_GPIO_Init+0x2c8>)
 80070c0:	f7f9 ffde 	bl	8001080 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = nDTCT_Pin|GP2_Pin|GP8_Pin;
 80070c4:	f242 0350 	movw	r3, #8272	; 0x2050
 80070c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80070ca:	2300      	movs	r3, #0
 80070cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070ce:	2300      	movs	r3, #0
 80070d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80070d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070d6:	4619      	mov	r1, r3
 80070d8:	485d      	ldr	r0, [pc, #372]	; (8007250 <MX_GPIO_Init+0x2bc>)
 80070da:	f7f9 fe27 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1 
                           PC2 PC3 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1 
 80070de:	f24c 038f 	movw	r3, #49295	; 0xc08f
 80070e2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80070e4:	2303      	movs	r3, #3
 80070e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070e8:	2300      	movs	r3, #0
 80070ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80070ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070f0:	4619      	mov	r1, r3
 80070f2:	4857      	ldr	r0, [pc, #348]	; (8007250 <MX_GPIO_Init+0x2bc>)
 80070f4:	f7f9 fe1a 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF8 PF9 
                           PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
 80070f8:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80070fc:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80070fe:	2303      	movs	r3, #3
 8007100:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007102:	2300      	movs	r3, #0
 8007104:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007106:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800710a:	4619      	mov	r1, r3
 800710c:	4851      	ldr	r0, [pc, #324]	; (8007254 <MX_GPIO_Init+0x2c0>)
 800710e:	f7f9 fe0d 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin|LED1_Pin|LED0_Pin 
 8007112:	f240 131f 	movw	r3, #287	; 0x11f
 8007116:	627b      	str	r3, [r7, #36]	; 0x24
                          |nOUT_EN0_Pin|VSEL0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007118:	2301      	movs	r3, #1
 800711a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800711c:	2300      	movs	r3, #0
 800711e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007120:	2300      	movs	r3, #0
 8007122:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007128:	4619      	mov	r1, r3
 800712a:	4848      	ldr	r0, [pc, #288]	; (800724c <MX_GPIO_Init+0x2b8>)
 800712c:	f7f9 fdfe 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_9|GPIO_PIN_10;
 8007130:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 8007134:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007136:	2303      	movs	r3, #3
 8007138:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800713a:	2300      	movs	r3, #0
 800713c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800713e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007142:	4619      	mov	r1, r3
 8007144:	4841      	ldr	r0, [pc, #260]	; (800724c <MX_GPIO_Init+0x2b8>)
 8007146:	f7f9 fdf1 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GP3_Pin;
 800714a:	2320      	movs	r3, #32
 800714c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800714e:	2301      	movs	r3, #1
 8007150:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007152:	2300      	movs	r3, #0
 8007154:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007156:	2300      	movs	r3, #0
 8007158:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GP3_GPIO_Port, &GPIO_InitStruct);
 800715a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800715e:	4619      	mov	r1, r3
 8007160:	483b      	ldr	r0, [pc, #236]	; (8007250 <MX_GPIO_Init+0x2bc>)
 8007162:	f7f9 fde3 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GP0_Pin|GP1_Pin|BOOT1_Pin|nSDWP_Pin;
 8007166:	f240 2307 	movw	r3, #519	; 0x207
 800716a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800716c:	2300      	movs	r3, #0
 800716e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007170:	2300      	movs	r3, #0
 8007172:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007178:	4619      	mov	r1, r3
 800717a:	4838      	ldr	r0, [pc, #224]	; (800725c <MX_GPIO_Init+0x2c8>)
 800717c:	f7f9 fdd6 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nOUT_EN1_Pin;
 8007180:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007184:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007186:	2301      	movs	r3, #1
 8007188:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800718a:	2300      	movs	r3, #0
 800718c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800718e:	2300      	movs	r3, #0
 8007190:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(nOUT_EN1_GPIO_Port, &GPIO_InitStruct);
 8007192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007196:	4619      	mov	r1, r3
 8007198:	482e      	ldr	r0, [pc, #184]	; (8007254 <MX_GPIO_Init+0x2c0>)
 800719a:	f7f9 fdc7 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG6 PG11 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_11;
 800719e:	f44f 6304 	mov.w	r3, #2112	; 0x840
 80071a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80071a4:	2303      	movs	r3, #3
 80071a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071a8:	2300      	movs	r3, #0
 80071aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80071ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071b0:	4619      	mov	r1, r3
 80071b2:	4829      	ldr	r0, [pc, #164]	; (8007258 <MX_GPIO_Init+0x2c4>)
 80071b4:	f7f9 fdba 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = SEL0_Pin|SEL1_Pin;
 80071b8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80071bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80071be:	2301      	movs	r3, #1
 80071c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071c2:	2300      	movs	r3, #0
 80071c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071c6:	2300      	movs	r3, #0
 80071c8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80071ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071ce:	4619      	mov	r1, r3
 80071d0:	4821      	ldr	r0, [pc, #132]	; (8007258 <MX_GPIO_Init+0x2c4>)
 80071d2:	f7f9 fdab 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 80071d6:	2348      	movs	r3, #72	; 0x48
 80071d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80071da:	2303      	movs	r3, #3
 80071dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071de:	2300      	movs	r3, #0
 80071e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80071e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071e6:	4619      	mov	r1, r3
 80071e8:	481d      	ldr	r0, [pc, #116]	; (8007260 <MX_GPIO_Init+0x2cc>)
 80071ea:	f7f9 fd9f 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nSDCD_Pin;
 80071ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80071f4:	2300      	movs	r3, #0
 80071f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071f8:	2300      	movs	r3, #0
 80071fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(nSDCD_GPIO_Port, &GPIO_InitStruct);
 80071fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007200:	4619      	mov	r1, r3
 8007202:	4815      	ldr	r0, [pc, #84]	; (8007258 <MX_GPIO_Init+0x2c4>)
 8007204:	f7f9 fd92 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8007208:	2320      	movs	r3, #32
 800720a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800720c:	2303      	movs	r3, #3
 800720e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007210:	2300      	movs	r3, #0
 8007212:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007214:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007218:	4619      	mov	r1, r3
 800721a:	4810      	ldr	r0, [pc, #64]	; (800725c <MX_GPIO_Init+0x2c8>)
 800721c:	f7f9 fd86 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT_EN_Pin;
 8007220:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007224:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007226:	2301      	movs	r3, #1
 8007228:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800722a:	2300      	movs	r3, #0
 800722c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800722e:	2300      	movs	r3, #0
 8007230:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BOOT_EN_GPIO_Port, &GPIO_InitStruct);
 8007232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007236:	4619      	mov	r1, r3
 8007238:	4808      	ldr	r0, [pc, #32]	; (800725c <MX_GPIO_Init+0x2c8>)
 800723a:	f7f9 fd77 	bl	8000d2c <HAL_GPIO_Init>

}
 800723e:	bf00      	nop
 8007240:	3738      	adds	r7, #56	; 0x38
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	40023800 	.word	0x40023800
 800724c:	40020000 	.word	0x40020000
 8007250:	40020800 	.word	0x40020800
 8007254:	40021400 	.word	0x40021400
 8007258:	40021800 	.word	0x40021800
 800725c:	40020400 	.word	0x40020400
 8007260:	40020c00 	.word	0x40020c00

08007264 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8007268:	4b12      	ldr	r3, [pc, #72]	; (80072b4 <MX_I2C1_Init+0x50>)
 800726a:	4a13      	ldr	r2, [pc, #76]	; (80072b8 <MX_I2C1_Init+0x54>)
 800726c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800726e:	4b11      	ldr	r3, [pc, #68]	; (80072b4 <MX_I2C1_Init+0x50>)
 8007270:	4a12      	ldr	r2, [pc, #72]	; (80072bc <MX_I2C1_Init+0x58>)
 8007272:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007274:	4b0f      	ldr	r3, [pc, #60]	; (80072b4 <MX_I2C1_Init+0x50>)
 8007276:	2200      	movs	r2, #0
 8007278:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800727a:	4b0e      	ldr	r3, [pc, #56]	; (80072b4 <MX_I2C1_Init+0x50>)
 800727c:	2200      	movs	r2, #0
 800727e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007280:	4b0c      	ldr	r3, [pc, #48]	; (80072b4 <MX_I2C1_Init+0x50>)
 8007282:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007286:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007288:	4b0a      	ldr	r3, [pc, #40]	; (80072b4 <MX_I2C1_Init+0x50>)
 800728a:	2200      	movs	r2, #0
 800728c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800728e:	4b09      	ldr	r3, [pc, #36]	; (80072b4 <MX_I2C1_Init+0x50>)
 8007290:	2200      	movs	r2, #0
 8007292:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007294:	4b07      	ldr	r3, [pc, #28]	; (80072b4 <MX_I2C1_Init+0x50>)
 8007296:	2200      	movs	r2, #0
 8007298:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800729a:	4b06      	ldr	r3, [pc, #24]	; (80072b4 <MX_I2C1_Init+0x50>)
 800729c:	2200      	movs	r2, #0
 800729e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80072a0:	4804      	ldr	r0, [pc, #16]	; (80072b4 <MX_I2C1_Init+0x50>)
 80072a2:	f7f9 ff07 	bl	80010b4 <HAL_I2C_Init>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d001      	beq.n	80072b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80072ac:	f000 f916 	bl	80074dc <Error_Handler>
  }

}
 80072b0:	bf00      	nop
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	20000810 	.word	0x20000810
 80072b8:	40005400 	.word	0x40005400
 80072bc:	000186a0 	.word	0x000186a0

080072c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b08a      	sub	sp, #40	; 0x28
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072c8:	f107 0314 	add.w	r3, r7, #20
 80072cc:	2200      	movs	r2, #0
 80072ce:	601a      	str	r2, [r3, #0]
 80072d0:	605a      	str	r2, [r3, #4]
 80072d2:	609a      	str	r2, [r3, #8]
 80072d4:	60da      	str	r2, [r3, #12]
 80072d6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a19      	ldr	r2, [pc, #100]	; (8007344 <HAL_I2C_MspInit+0x84>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d12b      	bne.n	800733a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80072e2:	2300      	movs	r3, #0
 80072e4:	613b      	str	r3, [r7, #16]
 80072e6:	4b18      	ldr	r3, [pc, #96]	; (8007348 <HAL_I2C_MspInit+0x88>)
 80072e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ea:	4a17      	ldr	r2, [pc, #92]	; (8007348 <HAL_I2C_MspInit+0x88>)
 80072ec:	f043 0302 	orr.w	r3, r3, #2
 80072f0:	6313      	str	r3, [r2, #48]	; 0x30
 80072f2:	4b15      	ldr	r3, [pc, #84]	; (8007348 <HAL_I2C_MspInit+0x88>)
 80072f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f6:	f003 0302 	and.w	r3, r3, #2
 80072fa:	613b      	str	r3, [r7, #16]
 80072fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL1_Pin|SDA1_Pin;
 80072fe:	23c0      	movs	r3, #192	; 0xc0
 8007300:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007302:	2312      	movs	r3, #18
 8007304:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007306:	2301      	movs	r3, #1
 8007308:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800730a:	2303      	movs	r3, #3
 800730c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800730e:	2304      	movs	r3, #4
 8007310:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007312:	f107 0314 	add.w	r3, r7, #20
 8007316:	4619      	mov	r1, r3
 8007318:	480c      	ldr	r0, [pc, #48]	; (800734c <HAL_I2C_MspInit+0x8c>)
 800731a:	f7f9 fd07 	bl	8000d2c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800731e:	2300      	movs	r3, #0
 8007320:	60fb      	str	r3, [r7, #12]
 8007322:	4b09      	ldr	r3, [pc, #36]	; (8007348 <HAL_I2C_MspInit+0x88>)
 8007324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007326:	4a08      	ldr	r2, [pc, #32]	; (8007348 <HAL_I2C_MspInit+0x88>)
 8007328:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800732c:	6413      	str	r3, [r2, #64]	; 0x40
 800732e:	4b06      	ldr	r3, [pc, #24]	; (8007348 <HAL_I2C_MspInit+0x88>)
 8007330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007332:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007336:	60fb      	str	r3, [r7, #12]
 8007338:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800733a:	bf00      	nop
 800733c:	3728      	adds	r7, #40	; 0x28
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	40005400 	.word	0x40005400
 8007348:	40023800 	.word	0x40023800
 800734c:	40020400 	.word	0x40020400

08007350 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b082      	sub	sp, #8
 8007354:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007356:	f7f9 f8df 	bl	8000518 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800735a:	f000 f81d 	bl	8007398 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800735e:	f7ff fe19 	bl	8006f94 <MX_GPIO_Init>
  MX_ADC1_Init();
 8007362:	f7ff fa69 	bl	8006838 <MX_ADC1_Init>
  MX_CRC_Init();
 8007366:	f7ff fb8f 	bl	8006a88 <MX_CRC_Init>
  MX_FSMC_Init();
 800736a:	f7ff fbeb 	bl	8006b44 <MX_FSMC_Init>
  MX_I2C1_Init();
 800736e:	f7ff ff79 	bl	8007264 <MX_I2C1_Init>
  MX_SDIO_SD_Init();
 8007372:	f000 f99f 	bl	80076b4 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8007376:	f000 fa25 	bl	80077c4 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 800737a:	f000 fb59 	bl	8007a30 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 800737e:	f7ff fbb9 	bl	8006af4 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8007382:	f000 fbc7 	bl	8007b14 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  UMD UMDapp;
 8007386:	1d3b      	adds	r3, r7, #4
 8007388:	4618      	mov	r0, r3
 800738a:	f7ff f9ba 	bl	8006702 <_ZN3UMDC1Ev>
	  UMDapp.run();
 800738e:	1d3b      	adds	r3, r7, #4
 8007390:	4618      	mov	r0, r3
 8007392:	f7ff f9c1 	bl	8006718 <_ZN3UMD3runEv>

  }
 8007396:	e7f6      	b.n	8007386 <main+0x36>

08007398 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b0aa      	sub	sp, #168	; 0xa8
 800739c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800739e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80073a2:	2234      	movs	r2, #52	; 0x34
 80073a4:	2100      	movs	r1, #0
 80073a6:	4618      	mov	r0, r3
 80073a8:	f000 ff84 	bl	80082b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80073ac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80073b0:	2200      	movs	r2, #0
 80073b2:	601a      	str	r2, [r3, #0]
 80073b4:	605a      	str	r2, [r3, #4]
 80073b6:	609a      	str	r2, [r3, #8]
 80073b8:	60da      	str	r2, [r3, #12]
 80073ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80073bc:	f107 0308 	add.w	r3, r7, #8
 80073c0:	2258      	movs	r2, #88	; 0x58
 80073c2:	2100      	movs	r1, #0
 80073c4:	4618      	mov	r0, r3
 80073c6:	f000 ff75 	bl	80082b4 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80073ca:	2300      	movs	r3, #0
 80073cc:	607b      	str	r3, [r7, #4]
 80073ce:	4b41      	ldr	r3, [pc, #260]	; (80074d4 <_Z18SystemClock_Configv+0x13c>)
 80073d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d2:	4a40      	ldr	r2, [pc, #256]	; (80074d4 <_Z18SystemClock_Configv+0x13c>)
 80073d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073d8:	6413      	str	r3, [r2, #64]	; 0x40
 80073da:	4b3e      	ldr	r3, [pc, #248]	; (80074d4 <_Z18SystemClock_Configv+0x13c>)
 80073dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073e2:	607b      	str	r3, [r7, #4]
 80073e4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80073e6:	2300      	movs	r3, #0
 80073e8:	603b      	str	r3, [r7, #0]
 80073ea:	4b3b      	ldr	r3, [pc, #236]	; (80074d8 <_Z18SystemClock_Configv+0x140>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a3a      	ldr	r2, [pc, #232]	; (80074d8 <_Z18SystemClock_Configv+0x140>)
 80073f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80073f4:	6013      	str	r3, [r2, #0]
 80073f6:	4b38      	ldr	r3, [pc, #224]	; (80074d8 <_Z18SystemClock_Configv+0x140>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80073fe:	603b      	str	r3, [r7, #0]
 8007400:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007402:	2301      	movs	r3, #1
 8007404:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007406:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800740a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800740c:	2302      	movs	r3, #2
 800740e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007412:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007416:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 8;
 800741a:	2308      	movs	r3, #8
 800741c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 200;
 8007420:	23c8      	movs	r3, #200	; 0xc8
 8007422:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007426:	2302      	movs	r3, #2
 8007428:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800742c:	2302      	movs	r3, #2
 800742e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 8007432:	2302      	movs	r3, #2
 8007434:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007438:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800743c:	4618      	mov	r0, r3
 800743e:	f7fa ffc7 	bl	80023d0 <HAL_RCC_OscConfig>
 8007442:	4603      	mov	r3, r0
 8007444:	2b00      	cmp	r3, #0
 8007446:	bf14      	ite	ne
 8007448:	2301      	movne	r3, #1
 800744a:	2300      	moveq	r3, #0
 800744c:	b2db      	uxtb	r3, r3
 800744e:	2b00      	cmp	r3, #0
 8007450:	d001      	beq.n	8007456 <_Z18SystemClock_Configv+0xbe>
  {
    Error_Handler();
 8007452:	f000 f843 	bl	80074dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007456:	230f      	movs	r3, #15
 8007458:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800745a:	2302      	movs	r3, #2
 800745c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800745e:	2300      	movs	r3, #0
 8007460:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007462:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007466:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007468:	2300      	movs	r3, #0
 800746a:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800746c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007470:	2103      	movs	r1, #3
 8007472:	4618      	mov	r0, r3
 8007474:	f7fa fb32 	bl	8001adc <HAL_RCC_ClockConfig>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	bf14      	ite	ne
 800747e:	2301      	movne	r3, #1
 8007480:	2300      	moveq	r3, #0
 8007482:	b2db      	uxtb	r3, r3
 8007484:	2b00      	cmp	r3, #0
 8007486:	d001      	beq.n	800748c <_Z18SystemClock_Configv+0xf4>
  {
    Error_Handler();
 8007488:	f000 f828 	bl	80074dc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 800748c:	2360      	movs	r3, #96	; 0x60
 800748e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8007490:	23c0      	movs	r3, #192	; 0xc0
 8007492:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 8007494:	2308      	movs	r3, #8
 8007496:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8007498:	2302      	movs	r3, #2
 800749a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 4;
 800749c:	2304      	movs	r3, #4
 800749e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLI2SQ;
 80074a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80074a4:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80074a6:	2300      	movs	r3, #0
 80074a8:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 80074aa:	2300      	movs	r3, #0
 80074ac:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80074ae:	f107 0308 	add.w	r3, r7, #8
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7fa fd00 	bl	8001eb8 <HAL_RCCEx_PeriphCLKConfig>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	bf14      	ite	ne
 80074be:	2301      	movne	r3, #1
 80074c0:	2300      	moveq	r3, #0
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d001      	beq.n	80074cc <_Z18SystemClock_Configv+0x134>
  {
    Error_Handler();
 80074c8:	f000 f808 	bl	80074dc <Error_Handler>
  }
}
 80074cc:	bf00      	nop
 80074ce:	37a8      	adds	r7, #168	; 0xa8
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}
 80074d4:	40023800 	.word	0x40023800
 80074d8:	40007000 	.word	0x40007000

080074dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80074dc:	b480      	push	{r7}
 80074de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80074e0:	bf00      	nop
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr
	...

080074ec <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b082      	sub	sp, #8
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	4603      	mov	r3, r0
 80074f4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80074f6:	4b0b      	ldr	r3, [pc, #44]	; (8007524 <SD_CheckStatus+0x38>)
 80074f8:	2201      	movs	r2, #1
 80074fa:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80074fc:	f7ff fa94 	bl	8006a28 <BSP_SD_GetCardState>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	d107      	bne.n	8007516 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007506:	4b07      	ldr	r3, [pc, #28]	; (8007524 <SD_CheckStatus+0x38>)
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	b2db      	uxtb	r3, r3
 800750c:	f023 0301 	bic.w	r3, r3, #1
 8007510:	b2da      	uxtb	r2, r3
 8007512:	4b04      	ldr	r3, [pc, #16]	; (8007524 <SD_CheckStatus+0x38>)
 8007514:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007516:	4b03      	ldr	r3, [pc, #12]	; (8007524 <SD_CheckStatus+0x38>)
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	b2db      	uxtb	r3, r3
}
 800751c:	4618      	mov	r0, r3
 800751e:	3708      	adds	r7, #8
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}
 8007524:	20000117 	.word	0x20000117

08007528 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	4603      	mov	r3, r0
 8007530:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 8007532:	4b0b      	ldr	r3, [pc, #44]	; (8007560 <SD_initialize+0x38>)
 8007534:	2201      	movs	r2, #1
 8007536:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8007538:	f7ff fa14 	bl	8006964 <BSP_SD_Init>
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d107      	bne.n	8007552 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8007542:	79fb      	ldrb	r3, [r7, #7]
 8007544:	4618      	mov	r0, r3
 8007546:	f7ff ffd1 	bl	80074ec <SD_CheckStatus>
 800754a:	4603      	mov	r3, r0
 800754c:	461a      	mov	r2, r3
 800754e:	4b04      	ldr	r3, [pc, #16]	; (8007560 <SD_initialize+0x38>)
 8007550:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8007552:	4b03      	ldr	r3, [pc, #12]	; (8007560 <SD_initialize+0x38>)
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	b2db      	uxtb	r3, r3
}
 8007558:	4618      	mov	r0, r3
 800755a:	3708      	adds	r7, #8
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}
 8007560:	20000117 	.word	0x20000117

08007564 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	4603      	mov	r3, r0
 800756c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800756e:	79fb      	ldrb	r3, [r7, #7]
 8007570:	4618      	mov	r0, r3
 8007572:	f7ff ffbb 	bl	80074ec <SD_CheckStatus>
 8007576:	4603      	mov	r3, r0
}
 8007578:	4618      	mov	r0, r3
 800757a:	3708      	adds	r7, #8
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b086      	sub	sp, #24
 8007584:	af00      	add	r7, sp, #0
 8007586:	60b9      	str	r1, [r7, #8]
 8007588:	607a      	str	r2, [r7, #4]
 800758a:	603b      	str	r3, [r7, #0]
 800758c:	4603      	mov	r3, r0
 800758e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8007594:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007598:	683a      	ldr	r2, [r7, #0]
 800759a:	6879      	ldr	r1, [r7, #4]
 800759c:	68b8      	ldr	r0, [r7, #8]
 800759e:	f7ff fa07 	bl	80069b0 <BSP_SD_ReadBlocks>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d107      	bne.n	80075b8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80075a8:	bf00      	nop
 80075aa:	f7ff fa3d 	bl	8006a28 <BSP_SD_GetCardState>
 80075ae:	4603      	mov	r3, r0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d1fa      	bne.n	80075aa <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80075b4:	2300      	movs	r3, #0
 80075b6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80075b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3718      	adds	r7, #24
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b086      	sub	sp, #24
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	60b9      	str	r1, [r7, #8]
 80075ca:	607a      	str	r2, [r7, #4]
 80075cc:	603b      	str	r3, [r7, #0]
 80075ce:	4603      	mov	r3, r0
 80075d0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80075d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075da:	683a      	ldr	r2, [r7, #0]
 80075dc:	6879      	ldr	r1, [r7, #4]
 80075de:	68b8      	ldr	r0, [r7, #8]
 80075e0:	f7ff fa04 	bl	80069ec <BSP_SD_WriteBlocks>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d107      	bne.n	80075fa <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80075ea:	bf00      	nop
 80075ec:	f7ff fa1c 	bl	8006a28 <BSP_SD_GetCardState>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d1fa      	bne.n	80075ec <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80075f6:	2300      	movs	r3, #0
 80075f8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80075fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3718      	adds	r7, #24
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b08c      	sub	sp, #48	; 0x30
 8007608:	af00      	add	r7, sp, #0
 800760a:	4603      	mov	r3, r0
 800760c:	603a      	str	r2, [r7, #0]
 800760e:	71fb      	strb	r3, [r7, #7]
 8007610:	460b      	mov	r3, r1
 8007612:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800761a:	4b25      	ldr	r3, [pc, #148]	; (80076b0 <SD_ioctl+0xac>)
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	b2db      	uxtb	r3, r3
 8007620:	f003 0301 	and.w	r3, r3, #1
 8007624:	2b00      	cmp	r3, #0
 8007626:	d001      	beq.n	800762c <SD_ioctl+0x28>
 8007628:	2303      	movs	r3, #3
 800762a:	e03c      	b.n	80076a6 <SD_ioctl+0xa2>

  switch (cmd)
 800762c:	79bb      	ldrb	r3, [r7, #6]
 800762e:	2b03      	cmp	r3, #3
 8007630:	d834      	bhi.n	800769c <SD_ioctl+0x98>
 8007632:	a201      	add	r2, pc, #4	; (adr r2, 8007638 <SD_ioctl+0x34>)
 8007634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007638:	08007649 	.word	0x08007649
 800763c:	08007651 	.word	0x08007651
 8007640:	08007669 	.word	0x08007669
 8007644:	08007683 	.word	0x08007683
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007648:	2300      	movs	r3, #0
 800764a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800764e:	e028      	b.n	80076a2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007650:	f107 030c 	add.w	r3, r7, #12
 8007654:	4618      	mov	r0, r3
 8007656:	f7ff f9f7 	bl	8006a48 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800765a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007660:	2300      	movs	r3, #0
 8007662:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007666:	e01c      	b.n	80076a2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007668:	f107 030c 	add.w	r3, r7, #12
 800766c:	4618      	mov	r0, r3
 800766e:	f7ff f9eb 	bl	8006a48 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007674:	b29a      	uxth	r2, r3
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800767a:	2300      	movs	r3, #0
 800767c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007680:	e00f      	b.n	80076a2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007682:	f107 030c 	add.w	r3, r7, #12
 8007686:	4618      	mov	r0, r3
 8007688:	f7ff f9de 	bl	8006a48 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800768c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800768e:	0a5a      	lsrs	r2, r3, #9
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007694:	2300      	movs	r3, #0
 8007696:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800769a:	e002      	b.n	80076a2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800769c:	2304      	movs	r3, #4
 800769e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80076a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3730      	adds	r7, #48	; 0x30
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	20000117 	.word	0x20000117

080076b4 <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 80076b4:	b480      	push	{r7}
 80076b6:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 80076b8:	4b0c      	ldr	r3, [pc, #48]	; (80076ec <MX_SDIO_SD_Init+0x38>)
 80076ba:	4a0d      	ldr	r2, [pc, #52]	; (80076f0 <MX_SDIO_SD_Init+0x3c>)
 80076bc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80076be:	4b0b      	ldr	r3, [pc, #44]	; (80076ec <MX_SDIO_SD_Init+0x38>)
 80076c0:	2200      	movs	r2, #0
 80076c2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80076c4:	4b09      	ldr	r3, [pc, #36]	; (80076ec <MX_SDIO_SD_Init+0x38>)
 80076c6:	2200      	movs	r2, #0
 80076c8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80076ca:	4b08      	ldr	r3, [pc, #32]	; (80076ec <MX_SDIO_SD_Init+0x38>)
 80076cc:	2200      	movs	r2, #0
 80076ce:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80076d0:	4b06      	ldr	r3, [pc, #24]	; (80076ec <MX_SDIO_SD_Init+0x38>)
 80076d2:	2200      	movs	r2, #0
 80076d4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80076d6:	4b05      	ldr	r3, [pc, #20]	; (80076ec <MX_SDIO_SD_Init+0x38>)
 80076d8:	2200      	movs	r2, #0
 80076da:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80076dc:	4b03      	ldr	r3, [pc, #12]	; (80076ec <MX_SDIO_SD_Init+0x38>)
 80076de:	2200      	movs	r2, #0
 80076e0:	619a      	str	r2, [r3, #24]

}
 80076e2:	bf00      	nop
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr
 80076ec:	20000864 	.word	0x20000864
 80076f0:	40012c00 	.word	0x40012c00

080076f4 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b08a      	sub	sp, #40	; 0x28
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076fc:	f107 0314 	add.w	r3, r7, #20
 8007700:	2200      	movs	r2, #0
 8007702:	601a      	str	r2, [r3, #0]
 8007704:	605a      	str	r2, [r3, #4]
 8007706:	609a      	str	r2, [r3, #8]
 8007708:	60da      	str	r2, [r3, #12]
 800770a:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a28      	ldr	r2, [pc, #160]	; (80077b4 <HAL_SD_MspInit+0xc0>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d14a      	bne.n	80077ac <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8007716:	2300      	movs	r3, #0
 8007718:	613b      	str	r3, [r7, #16]
 800771a:	4b27      	ldr	r3, [pc, #156]	; (80077b8 <HAL_SD_MspInit+0xc4>)
 800771c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800771e:	4a26      	ldr	r2, [pc, #152]	; (80077b8 <HAL_SD_MspInit+0xc4>)
 8007720:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007724:	6453      	str	r3, [r2, #68]	; 0x44
 8007726:	4b24      	ldr	r3, [pc, #144]	; (80077b8 <HAL_SD_MspInit+0xc4>)
 8007728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800772a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800772e:	613b      	str	r3, [r7, #16]
 8007730:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007732:	2300      	movs	r3, #0
 8007734:	60fb      	str	r3, [r7, #12]
 8007736:	4b20      	ldr	r3, [pc, #128]	; (80077b8 <HAL_SD_MspInit+0xc4>)
 8007738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800773a:	4a1f      	ldr	r2, [pc, #124]	; (80077b8 <HAL_SD_MspInit+0xc4>)
 800773c:	f043 0304 	orr.w	r3, r3, #4
 8007740:	6313      	str	r3, [r2, #48]	; 0x30
 8007742:	4b1d      	ldr	r3, [pc, #116]	; (80077b8 <HAL_SD_MspInit+0xc4>)
 8007744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007746:	f003 0304 	and.w	r3, r3, #4
 800774a:	60fb      	str	r3, [r7, #12]
 800774c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800774e:	2300      	movs	r3, #0
 8007750:	60bb      	str	r3, [r7, #8]
 8007752:	4b19      	ldr	r3, [pc, #100]	; (80077b8 <HAL_SD_MspInit+0xc4>)
 8007754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007756:	4a18      	ldr	r2, [pc, #96]	; (80077b8 <HAL_SD_MspInit+0xc4>)
 8007758:	f043 0308 	orr.w	r3, r3, #8
 800775c:	6313      	str	r3, [r2, #48]	; 0x30
 800775e:	4b16      	ldr	r3, [pc, #88]	; (80077b8 <HAL_SD_MspInit+0xc4>)
 8007760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007762:	f003 0308 	and.w	r3, r3, #8
 8007766:	60bb      	str	r3, [r7, #8]
 8007768:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800776a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800776e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007770:	2302      	movs	r3, #2
 8007772:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007774:	2300      	movs	r3, #0
 8007776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007778:	2303      	movs	r3, #3
 800777a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800777c:	230c      	movs	r3, #12
 800777e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007780:	f107 0314 	add.w	r3, r7, #20
 8007784:	4619      	mov	r1, r3
 8007786:	480d      	ldr	r0, [pc, #52]	; (80077bc <HAL_SD_MspInit+0xc8>)
 8007788:	f7f9 fad0 	bl	8000d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800778c:	2304      	movs	r3, #4
 800778e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007790:	2302      	movs	r3, #2
 8007792:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007794:	2300      	movs	r3, #0
 8007796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007798:	2303      	movs	r3, #3
 800779a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800779c:	230c      	movs	r3, #12
 800779e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80077a0:	f107 0314 	add.w	r3, r7, #20
 80077a4:	4619      	mov	r1, r3
 80077a6:	4806      	ldr	r0, [pc, #24]	; (80077c0 <HAL_SD_MspInit+0xcc>)
 80077a8:	f7f9 fac0 	bl	8000d2c <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80077ac:	bf00      	nop
 80077ae:	3728      	adds	r7, #40	; 0x28
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	40012c00 	.word	0x40012c00
 80077b8:	40023800 	.word	0x40023800
 80077bc:	40020800 	.word	0x40020800
 80077c0:	40020c00 	.word	0x40020c00

080077c4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80077c8:	4b17      	ldr	r3, [pc, #92]	; (8007828 <MX_SPI2_Init+0x64>)
 80077ca:	4a18      	ldr	r2, [pc, #96]	; (800782c <MX_SPI2_Init+0x68>)
 80077cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80077ce:	4b16      	ldr	r3, [pc, #88]	; (8007828 <MX_SPI2_Init+0x64>)
 80077d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80077d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80077d6:	4b14      	ldr	r3, [pc, #80]	; (8007828 <MX_SPI2_Init+0x64>)
 80077d8:	2200      	movs	r2, #0
 80077da:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80077dc:	4b12      	ldr	r3, [pc, #72]	; (8007828 <MX_SPI2_Init+0x64>)
 80077de:	2200      	movs	r2, #0
 80077e0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80077e2:	4b11      	ldr	r3, [pc, #68]	; (8007828 <MX_SPI2_Init+0x64>)
 80077e4:	2200      	movs	r2, #0
 80077e6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80077e8:	4b0f      	ldr	r3, [pc, #60]	; (8007828 <MX_SPI2_Init+0x64>)
 80077ea:	2200      	movs	r2, #0
 80077ec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80077ee:	4b0e      	ldr	r3, [pc, #56]	; (8007828 <MX_SPI2_Init+0x64>)
 80077f0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80077f4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80077f6:	4b0c      	ldr	r3, [pc, #48]	; (8007828 <MX_SPI2_Init+0x64>)
 80077f8:	2200      	movs	r2, #0
 80077fa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80077fc:	4b0a      	ldr	r3, [pc, #40]	; (8007828 <MX_SPI2_Init+0x64>)
 80077fe:	2200      	movs	r2, #0
 8007800:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007802:	4b09      	ldr	r3, [pc, #36]	; (8007828 <MX_SPI2_Init+0x64>)
 8007804:	2200      	movs	r2, #0
 8007806:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007808:	4b07      	ldr	r3, [pc, #28]	; (8007828 <MX_SPI2_Init+0x64>)
 800780a:	2200      	movs	r2, #0
 800780c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800780e:	4b06      	ldr	r3, [pc, #24]	; (8007828 <MX_SPI2_Init+0x64>)
 8007810:	220a      	movs	r2, #10
 8007812:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007814:	4804      	ldr	r0, [pc, #16]	; (8007828 <MX_SPI2_Init+0x64>)
 8007816:	f7fc f996 	bl	8003b46 <HAL_SPI_Init>
 800781a:	4603      	mov	r3, r0
 800781c:	2b00      	cmp	r3, #0
 800781e:	d001      	beq.n	8007824 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8007820:	f7ff fe5c 	bl	80074dc <Error_Handler>
  }

}
 8007824:	bf00      	nop
 8007826:	bd80      	pop	{r7, pc}
 8007828:	200008e8 	.word	0x200008e8
 800782c:	40003800 	.word	0x40003800

08007830 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b08a      	sub	sp, #40	; 0x28
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007838:	f107 0314 	add.w	r3, r7, #20
 800783c:	2200      	movs	r2, #0
 800783e:	601a      	str	r2, [r3, #0]
 8007840:	605a      	str	r2, [r3, #4]
 8007842:	609a      	str	r2, [r3, #8]
 8007844:	60da      	str	r2, [r3, #12]
 8007846:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a19      	ldr	r2, [pc, #100]	; (80078b4 <HAL_SPI_MspInit+0x84>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d12c      	bne.n	80078ac <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007852:	2300      	movs	r3, #0
 8007854:	613b      	str	r3, [r7, #16]
 8007856:	4b18      	ldr	r3, [pc, #96]	; (80078b8 <HAL_SPI_MspInit+0x88>)
 8007858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785a:	4a17      	ldr	r2, [pc, #92]	; (80078b8 <HAL_SPI_MspInit+0x88>)
 800785c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007860:	6413      	str	r3, [r2, #64]	; 0x40
 8007862:	4b15      	ldr	r3, [pc, #84]	; (80078b8 <HAL_SPI_MspInit+0x88>)
 8007864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800786a:	613b      	str	r3, [r7, #16]
 800786c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800786e:	2300      	movs	r3, #0
 8007870:	60fb      	str	r3, [r7, #12]
 8007872:	4b11      	ldr	r3, [pc, #68]	; (80078b8 <HAL_SPI_MspInit+0x88>)
 8007874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007876:	4a10      	ldr	r2, [pc, #64]	; (80078b8 <HAL_SPI_MspInit+0x88>)
 8007878:	f043 0302 	orr.w	r3, r3, #2
 800787c:	6313      	str	r3, [r2, #48]	; 0x30
 800787e:	4b0e      	ldr	r3, [pc, #56]	; (80078b8 <HAL_SPI_MspInit+0x88>)
 8007880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007882:	f003 0302 	and.w	r3, r3, #2
 8007886:	60fb      	str	r3, [r7, #12]
 8007888:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800788a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800788e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007890:	2302      	movs	r3, #2
 8007892:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007894:	2300      	movs	r3, #0
 8007896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007898:	2303      	movs	r3, #3
 800789a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800789c:	2305      	movs	r3, #5
 800789e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078a0:	f107 0314 	add.w	r3, r7, #20
 80078a4:	4619      	mov	r1, r3
 80078a6:	4805      	ldr	r0, [pc, #20]	; (80078bc <HAL_SPI_MspInit+0x8c>)
 80078a8:	f7f9 fa40 	bl	8000d2c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80078ac:	bf00      	nop
 80078ae:	3728      	adds	r7, #40	; 0x28
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	40003800 	.word	0x40003800
 80078b8:	40023800 	.word	0x40023800
 80078bc:	40020400 	.word	0x40020400

080078c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80078c6:	2300      	movs	r3, #0
 80078c8:	607b      	str	r3, [r7, #4]
 80078ca:	4b10      	ldr	r3, [pc, #64]	; (800790c <HAL_MspInit+0x4c>)
 80078cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ce:	4a0f      	ldr	r2, [pc, #60]	; (800790c <HAL_MspInit+0x4c>)
 80078d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80078d4:	6453      	str	r3, [r2, #68]	; 0x44
 80078d6:	4b0d      	ldr	r3, [pc, #52]	; (800790c <HAL_MspInit+0x4c>)
 80078d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078de:	607b      	str	r3, [r7, #4]
 80078e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80078e2:	2300      	movs	r3, #0
 80078e4:	603b      	str	r3, [r7, #0]
 80078e6:	4b09      	ldr	r3, [pc, #36]	; (800790c <HAL_MspInit+0x4c>)
 80078e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ea:	4a08      	ldr	r2, [pc, #32]	; (800790c <HAL_MspInit+0x4c>)
 80078ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078f0:	6413      	str	r3, [r2, #64]	; 0x40
 80078f2:	4b06      	ldr	r3, [pc, #24]	; (800790c <HAL_MspInit+0x4c>)
 80078f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078fa:	603b      	str	r3, [r7, #0]
 80078fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80078fe:	bf00      	nop
 8007900:	370c      	adds	r7, #12
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop
 800790c:	40023800 	.word	0x40023800

08007910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007910:	b480      	push	{r7}
 8007912:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007914:	bf00      	nop
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr

0800791e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800791e:	b480      	push	{r7}
 8007920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007922:	e7fe      	b.n	8007922 <HardFault_Handler+0x4>

08007924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007924:	b480      	push	{r7}
 8007926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007928:	e7fe      	b.n	8007928 <MemManage_Handler+0x4>

0800792a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800792a:	b480      	push	{r7}
 800792c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800792e:	e7fe      	b.n	800792e <BusFault_Handler+0x4>

08007930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007930:	b480      	push	{r7}
 8007932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007934:	e7fe      	b.n	8007934 <UsageFault_Handler+0x4>

08007936 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007936:	b480      	push	{r7}
 8007938:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800793a:	bf00      	nop
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007944:	b480      	push	{r7}
 8007946:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007948:	bf00      	nop
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr

08007952 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007952:	b480      	push	{r7}
 8007954:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007956:	bf00      	nop
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007964:	f7f8 fe2a 	bl	80005bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007968:	bf00      	nop
 800796a:	bd80      	pop	{r7, pc}

0800796c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007974:	4b11      	ldr	r3, [pc, #68]	; (80079bc <_sbrk+0x50>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d102      	bne.n	8007982 <_sbrk+0x16>
		heap_end = &end;
 800797c:	4b0f      	ldr	r3, [pc, #60]	; (80079bc <_sbrk+0x50>)
 800797e:	4a10      	ldr	r2, [pc, #64]	; (80079c0 <_sbrk+0x54>)
 8007980:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007982:	4b0e      	ldr	r3, [pc, #56]	; (80079bc <_sbrk+0x50>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007988:	4b0c      	ldr	r3, [pc, #48]	; (80079bc <_sbrk+0x50>)
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	4413      	add	r3, r2
 8007990:	466a      	mov	r2, sp
 8007992:	4293      	cmp	r3, r2
 8007994:	d907      	bls.n	80079a6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007996:	f000 fc53 	bl	8008240 <__errno>
 800799a:	4602      	mov	r2, r0
 800799c:	230c      	movs	r3, #12
 800799e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80079a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079a4:	e006      	b.n	80079b4 <_sbrk+0x48>
	}

	heap_end += incr;
 80079a6:	4b05      	ldr	r3, [pc, #20]	; (80079bc <_sbrk+0x50>)
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4413      	add	r3, r2
 80079ae:	4a03      	ldr	r2, [pc, #12]	; (80079bc <_sbrk+0x50>)
 80079b0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80079b2:	68fb      	ldr	r3, [r7, #12]
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3710      	adds	r7, #16
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	20000210 	.word	0x20000210
 80079c0:	20002228 	.word	0x20002228

080079c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80079c4:	b480      	push	{r7}
 80079c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80079c8:	4b16      	ldr	r3, [pc, #88]	; (8007a24 <SystemInit+0x60>)
 80079ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079ce:	4a15      	ldr	r2, [pc, #84]	; (8007a24 <SystemInit+0x60>)
 80079d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80079d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80079d8:	4b13      	ldr	r3, [pc, #76]	; (8007a28 <SystemInit+0x64>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a12      	ldr	r2, [pc, #72]	; (8007a28 <SystemInit+0x64>)
 80079de:	f043 0301 	orr.w	r3, r3, #1
 80079e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80079e4:	4b10      	ldr	r3, [pc, #64]	; (8007a28 <SystemInit+0x64>)
 80079e6:	2200      	movs	r2, #0
 80079e8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80079ea:	4b0f      	ldr	r3, [pc, #60]	; (8007a28 <SystemInit+0x64>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a0e      	ldr	r2, [pc, #56]	; (8007a28 <SystemInit+0x64>)
 80079f0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80079f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079f8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80079fa:	4b0b      	ldr	r3, [pc, #44]	; (8007a28 <SystemInit+0x64>)
 80079fc:	4a0b      	ldr	r2, [pc, #44]	; (8007a2c <SystemInit+0x68>)
 80079fe:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007a00:	4b09      	ldr	r3, [pc, #36]	; (8007a28 <SystemInit+0x64>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a08      	ldr	r2, [pc, #32]	; (8007a28 <SystemInit+0x64>)
 8007a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a0a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007a0c:	4b06      	ldr	r3, [pc, #24]	; (8007a28 <SystemInit+0x64>)
 8007a0e:	2200      	movs	r2, #0
 8007a10:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007a12:	4b04      	ldr	r3, [pc, #16]	; (8007a24 <SystemInit+0x60>)
 8007a14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007a18:	609a      	str	r2, [r3, #8]
#endif
}
 8007a1a:	bf00      	nop
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr
 8007a24:	e000ed00 	.word	0xe000ed00
 8007a28:	40023800 	.word	0x40023800
 8007a2c:	24003010 	.word	0x24003010

08007a30 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8007a34:	4b11      	ldr	r3, [pc, #68]	; (8007a7c <MX_USART3_UART_Init+0x4c>)
 8007a36:	4a12      	ldr	r2, [pc, #72]	; (8007a80 <MX_USART3_UART_Init+0x50>)
 8007a38:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8007a3a:	4b10      	ldr	r3, [pc, #64]	; (8007a7c <MX_USART3_UART_Init+0x4c>)
 8007a3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007a40:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8007a42:	4b0e      	ldr	r3, [pc, #56]	; (8007a7c <MX_USART3_UART_Init+0x4c>)
 8007a44:	2200      	movs	r2, #0
 8007a46:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007a48:	4b0c      	ldr	r3, [pc, #48]	; (8007a7c <MX_USART3_UART_Init+0x4c>)
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8007a4e:	4b0b      	ldr	r3, [pc, #44]	; (8007a7c <MX_USART3_UART_Init+0x4c>)
 8007a50:	2200      	movs	r2, #0
 8007a52:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8007a54:	4b09      	ldr	r3, [pc, #36]	; (8007a7c <MX_USART3_UART_Init+0x4c>)
 8007a56:	220c      	movs	r2, #12
 8007a58:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007a5a:	4b08      	ldr	r3, [pc, #32]	; (8007a7c <MX_USART3_UART_Init+0x4c>)
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007a60:	4b06      	ldr	r3, [pc, #24]	; (8007a7c <MX_USART3_UART_Init+0x4c>)
 8007a62:	2200      	movs	r2, #0
 8007a64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8007a66:	4805      	ldr	r0, [pc, #20]	; (8007a7c <MX_USART3_UART_Init+0x4c>)
 8007a68:	f7fc f915 	bl	8003c96 <HAL_UART_Init>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d001      	beq.n	8007a76 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8007a72:	f7ff fd33 	bl	80074dc <Error_Handler>
  }

}
 8007a76:	bf00      	nop
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	20000940 	.word	0x20000940
 8007a80:	40004800 	.word	0x40004800

08007a84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b08a      	sub	sp, #40	; 0x28
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a8c:	f107 0314 	add.w	r3, r7, #20
 8007a90:	2200      	movs	r2, #0
 8007a92:	601a      	str	r2, [r3, #0]
 8007a94:	605a      	str	r2, [r3, #4]
 8007a96:	609a      	str	r2, [r3, #8]
 8007a98:	60da      	str	r2, [r3, #12]
 8007a9a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a19      	ldr	r2, [pc, #100]	; (8007b08 <HAL_UART_MspInit+0x84>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d12c      	bne.n	8007b00 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	613b      	str	r3, [r7, #16]
 8007aaa:	4b18      	ldr	r3, [pc, #96]	; (8007b0c <HAL_UART_MspInit+0x88>)
 8007aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aae:	4a17      	ldr	r2, [pc, #92]	; (8007b0c <HAL_UART_MspInit+0x88>)
 8007ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8007ab6:	4b15      	ldr	r3, [pc, #84]	; (8007b0c <HAL_UART_MspInit+0x88>)
 8007ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007abe:	613b      	str	r3, [r7, #16]
 8007ac0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	60fb      	str	r3, [r7, #12]
 8007ac6:	4b11      	ldr	r3, [pc, #68]	; (8007b0c <HAL_UART_MspInit+0x88>)
 8007ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aca:	4a10      	ldr	r2, [pc, #64]	; (8007b0c <HAL_UART_MspInit+0x88>)
 8007acc:	f043 0302 	orr.w	r3, r3, #2
 8007ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8007ad2:	4b0e      	ldr	r3, [pc, #56]	; (8007b0c <HAL_UART_MspInit+0x88>)
 8007ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad6:	f003 0302 	and.w	r3, r3, #2
 8007ada:	60fb      	str	r3, [r7, #12]
 8007adc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007ade:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ae4:	2302      	movs	r3, #2
 8007ae6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007aec:	2303      	movs	r3, #3
 8007aee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007af0:	2307      	movs	r3, #7
 8007af2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007af4:	f107 0314 	add.w	r3, r7, #20
 8007af8:	4619      	mov	r1, r3
 8007afa:	4805      	ldr	r0, [pc, #20]	; (8007b10 <HAL_UART_MspInit+0x8c>)
 8007afc:	f7f9 f916 	bl	8000d2c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8007b00:	bf00      	nop
 8007b02:	3728      	adds	r7, #40	; 0x28
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}
 8007b08:	40004800 	.word	0x40004800
 8007b0c:	40023800 	.word	0x40023800
 8007b10:	40020400 	.word	0x40020400

08007b14 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007b18:	2200      	movs	r2, #0
 8007b1a:	4912      	ldr	r1, [pc, #72]	; (8007b64 <MX_USB_DEVICE_Init+0x50>)
 8007b1c:	4812      	ldr	r0, [pc, #72]	; (8007b68 <MX_USB_DEVICE_Init+0x54>)
 8007b1e:	f7fe fc9e 	bl	800645e <USBD_Init>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d001      	beq.n	8007b2c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007b28:	f7ff fcd8 	bl	80074dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007b2c:	490f      	ldr	r1, [pc, #60]	; (8007b6c <MX_USB_DEVICE_Init+0x58>)
 8007b2e:	480e      	ldr	r0, [pc, #56]	; (8007b68 <MX_USB_DEVICE_Init+0x54>)
 8007b30:	f7fe fcc0 	bl	80064b4 <USBD_RegisterClass>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d001      	beq.n	8007b3e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007b3a:	f7ff fccf 	bl	80074dc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007b3e:	490c      	ldr	r1, [pc, #48]	; (8007b70 <MX_USB_DEVICE_Init+0x5c>)
 8007b40:	4809      	ldr	r0, [pc, #36]	; (8007b68 <MX_USB_DEVICE_Init+0x54>)
 8007b42:	f7fe fc1d 	bl	8006380 <USBD_CDC_RegisterInterface>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d001      	beq.n	8007b50 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007b4c:	f7ff fcc6 	bl	80074dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007b50:	4805      	ldr	r0, [pc, #20]	; (8007b68 <MX_USB_DEVICE_Init+0x54>)
 8007b52:	f7fe fcc9 	bl	80064e8 <USBD_Start>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d001      	beq.n	8007b60 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007b5c:	f7ff fcbe 	bl	80074dc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007b60:	bf00      	nop
 8007b62:	bd80      	pop	{r7, pc}
 8007b64:	2000012c 	.word	0x2000012c
 8007b68:	20000980 	.word	0x20000980
 8007b6c:	20000014 	.word	0x20000014
 8007b70:	2000011c 	.word	0x2000011c

08007b74 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007b78:	2200      	movs	r2, #0
 8007b7a:	4905      	ldr	r1, [pc, #20]	; (8007b90 <CDC_Init_FS+0x1c>)
 8007b7c:	4805      	ldr	r0, [pc, #20]	; (8007b94 <CDC_Init_FS+0x20>)
 8007b7e:	f7fe fc16 	bl	80063ae <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007b82:	4905      	ldr	r1, [pc, #20]	; (8007b98 <CDC_Init_FS+0x24>)
 8007b84:	4803      	ldr	r0, [pc, #12]	; (8007b94 <CDC_Init_FS+0x20>)
 8007b86:	f7fe fc2c 	bl	80063e2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007b8a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	2000141c 	.word	0x2000141c
 8007b94:	20000980 	.word	0x20000980
 8007b98:	20000c1c 	.word	0x20000c1c

08007b9c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007ba0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	6039      	str	r1, [r7, #0]
 8007bb6:	71fb      	strb	r3, [r7, #7]
 8007bb8:	4613      	mov	r3, r2
 8007bba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007bbc:	79fb      	ldrb	r3, [r7, #7]
 8007bbe:	2b23      	cmp	r3, #35	; 0x23
 8007bc0:	d84a      	bhi.n	8007c58 <CDC_Control_FS+0xac>
 8007bc2:	a201      	add	r2, pc, #4	; (adr r2, 8007bc8 <CDC_Control_FS+0x1c>)
 8007bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc8:	08007c59 	.word	0x08007c59
 8007bcc:	08007c59 	.word	0x08007c59
 8007bd0:	08007c59 	.word	0x08007c59
 8007bd4:	08007c59 	.word	0x08007c59
 8007bd8:	08007c59 	.word	0x08007c59
 8007bdc:	08007c59 	.word	0x08007c59
 8007be0:	08007c59 	.word	0x08007c59
 8007be4:	08007c59 	.word	0x08007c59
 8007be8:	08007c59 	.word	0x08007c59
 8007bec:	08007c59 	.word	0x08007c59
 8007bf0:	08007c59 	.word	0x08007c59
 8007bf4:	08007c59 	.word	0x08007c59
 8007bf8:	08007c59 	.word	0x08007c59
 8007bfc:	08007c59 	.word	0x08007c59
 8007c00:	08007c59 	.word	0x08007c59
 8007c04:	08007c59 	.word	0x08007c59
 8007c08:	08007c59 	.word	0x08007c59
 8007c0c:	08007c59 	.word	0x08007c59
 8007c10:	08007c59 	.word	0x08007c59
 8007c14:	08007c59 	.word	0x08007c59
 8007c18:	08007c59 	.word	0x08007c59
 8007c1c:	08007c59 	.word	0x08007c59
 8007c20:	08007c59 	.word	0x08007c59
 8007c24:	08007c59 	.word	0x08007c59
 8007c28:	08007c59 	.word	0x08007c59
 8007c2c:	08007c59 	.word	0x08007c59
 8007c30:	08007c59 	.word	0x08007c59
 8007c34:	08007c59 	.word	0x08007c59
 8007c38:	08007c59 	.word	0x08007c59
 8007c3c:	08007c59 	.word	0x08007c59
 8007c40:	08007c59 	.word	0x08007c59
 8007c44:	08007c59 	.word	0x08007c59
 8007c48:	08007c59 	.word	0x08007c59
 8007c4c:	08007c59 	.word	0x08007c59
 8007c50:	08007c59 	.word	0x08007c59
 8007c54:	08007c59 	.word	0x08007c59
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007c58:	bf00      	nop
  }

  return (USBD_OK);
 8007c5a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	370c      	adds	r7, #12
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007c72:	6879      	ldr	r1, [r7, #4]
 8007c74:	4805      	ldr	r0, [pc, #20]	; (8007c8c <CDC_Receive_FS+0x24>)
 8007c76:	f7fe fbb4 	bl	80063e2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007c7a:	4804      	ldr	r0, [pc, #16]	; (8007c8c <CDC_Receive_FS+0x24>)
 8007c7c:	f7fe fbc5 	bl	800640a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007c80:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3708      	adds	r7, #8
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	20000980 	.word	0x20000980

08007c90 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b08a      	sub	sp, #40	; 0x28
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c98:	f107 0314 	add.w	r3, r7, #20
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	601a      	str	r2, [r3, #0]
 8007ca0:	605a      	str	r2, [r3, #4]
 8007ca2:	609a      	str	r2, [r3, #8]
 8007ca4:	60da      	str	r2, [r3, #12]
 8007ca6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007cb0:	d132      	bne.n	8007d18 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	613b      	str	r3, [r7, #16]
 8007cb6:	4b1a      	ldr	r3, [pc, #104]	; (8007d20 <HAL_PCD_MspInit+0x90>)
 8007cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cba:	4a19      	ldr	r2, [pc, #100]	; (8007d20 <HAL_PCD_MspInit+0x90>)
 8007cbc:	f043 0301 	orr.w	r3, r3, #1
 8007cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8007cc2:	4b17      	ldr	r3, [pc, #92]	; (8007d20 <HAL_PCD_MspInit+0x90>)
 8007cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cc6:	f003 0301 	and.w	r3, r3, #1
 8007cca:	613b      	str	r3, [r7, #16]
 8007ccc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007cce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007cd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cd4:	2302      	movs	r3, #2
 8007cd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007ce0:	230a      	movs	r3, #10
 8007ce2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ce4:	f107 0314 	add.w	r3, r7, #20
 8007ce8:	4619      	mov	r1, r3
 8007cea:	480e      	ldr	r0, [pc, #56]	; (8007d24 <HAL_PCD_MspInit+0x94>)
 8007cec:	f7f9 f81e 	bl	8000d2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007cf0:	4b0b      	ldr	r3, [pc, #44]	; (8007d20 <HAL_PCD_MspInit+0x90>)
 8007cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cf4:	4a0a      	ldr	r2, [pc, #40]	; (8007d20 <HAL_PCD_MspInit+0x90>)
 8007cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cfa:	6353      	str	r3, [r2, #52]	; 0x34
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	60fb      	str	r3, [r7, #12]
 8007d00:	4b07      	ldr	r3, [pc, #28]	; (8007d20 <HAL_PCD_MspInit+0x90>)
 8007d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d04:	4a06      	ldr	r2, [pc, #24]	; (8007d20 <HAL_PCD_MspInit+0x90>)
 8007d06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d0a:	6453      	str	r3, [r2, #68]	; 0x44
 8007d0c:	4b04      	ldr	r3, [pc, #16]	; (8007d20 <HAL_PCD_MspInit+0x90>)
 8007d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d14:	60fb      	str	r3, [r7, #12]
 8007d16:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007d18:	bf00      	nop
 8007d1a:	3728      	adds	r7, #40	; 0x28
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	40023800 	.word	0x40023800
 8007d24:	40020000 	.word	0x40020000

08007d28 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d13f      	bne.n	8007db8 <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007d38:	4a22      	ldr	r2, [pc, #136]	; (8007dc4 <USBD_LL_Init+0x9c>)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	4a20      	ldr	r2, [pc, #128]	; (8007dc4 <USBD_LL_Init+0x9c>)
 8007d44:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007d48:	4b1e      	ldr	r3, [pc, #120]	; (8007dc4 <USBD_LL_Init+0x9c>)
 8007d4a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007d4e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007d50:	4b1c      	ldr	r3, [pc, #112]	; (8007dc4 <USBD_LL_Init+0x9c>)
 8007d52:	2206      	movs	r2, #6
 8007d54:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007d56:	4b1b      	ldr	r3, [pc, #108]	; (8007dc4 <USBD_LL_Init+0x9c>)
 8007d58:	2202      	movs	r2, #2
 8007d5a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007d5c:	4b19      	ldr	r3, [pc, #100]	; (8007dc4 <USBD_LL_Init+0x9c>)
 8007d5e:	2200      	movs	r2, #0
 8007d60:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007d62:	4b18      	ldr	r3, [pc, #96]	; (8007dc4 <USBD_LL_Init+0x9c>)
 8007d64:	2202      	movs	r2, #2
 8007d66:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007d68:	4b16      	ldr	r3, [pc, #88]	; (8007dc4 <USBD_LL_Init+0x9c>)
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007d6e:	4b15      	ldr	r3, [pc, #84]	; (8007dc4 <USBD_LL_Init+0x9c>)
 8007d70:	2200      	movs	r2, #0
 8007d72:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007d74:	4b13      	ldr	r3, [pc, #76]	; (8007dc4 <USBD_LL_Init+0x9c>)
 8007d76:	2200      	movs	r2, #0
 8007d78:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8007d7a:	4b12      	ldr	r3, [pc, #72]	; (8007dc4 <USBD_LL_Init+0x9c>)
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007d80:	4b10      	ldr	r3, [pc, #64]	; (8007dc4 <USBD_LL_Init+0x9c>)
 8007d82:	2200      	movs	r2, #0
 8007d84:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007d86:	4b0f      	ldr	r3, [pc, #60]	; (8007dc4 <USBD_LL_Init+0x9c>)
 8007d88:	2200      	movs	r2, #0
 8007d8a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007d8c:	480d      	ldr	r0, [pc, #52]	; (8007dc4 <USBD_LL_Init+0x9c>)
 8007d8e:	f7f9 fb0f 	bl	80013b0 <HAL_PCD_Init>
 8007d92:	4603      	mov	r3, r0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d001      	beq.n	8007d9c <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 8007d98:	f7ff fba0 	bl	80074dc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007d9c:	2180      	movs	r1, #128	; 0x80
 8007d9e:	4809      	ldr	r0, [pc, #36]	; (8007dc4 <USBD_LL_Init+0x9c>)
 8007da0:	f7f9 fe67 	bl	8001a72 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007da4:	2240      	movs	r2, #64	; 0x40
 8007da6:	2100      	movs	r1, #0
 8007da8:	4806      	ldr	r0, [pc, #24]	; (8007dc4 <USBD_LL_Init+0x9c>)
 8007daa:	f7f9 fe1b 	bl	80019e4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007dae:	2280      	movs	r2, #128	; 0x80
 8007db0:	2101      	movs	r1, #1
 8007db2:	4804      	ldr	r0, [pc, #16]	; (8007dc4 <USBD_LL_Init+0x9c>)
 8007db4:	f7f9 fe16 	bl	80019e4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007db8:	2300      	movs	r3, #0
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3708      	adds	r7, #8
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	20001c1c 	.word	0x20001c1c

08007dc8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7f9 fc0a 	bl	80015f8 <HAL_PCD_Start>
 8007de4:	4603      	mov	r3, r0
 8007de6:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8007de8:	7bfb      	ldrb	r3, [r7, #15]
 8007dea:	4618      	mov	r0, r3
 8007dec:	f000 f8c4 	bl	8007f78 <USBD_Get_USB_Status>
 8007df0:	4603      	mov	r3, r0
 8007df2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007df4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3710      	adds	r7, #16
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}

08007dfe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b084      	sub	sp, #16
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
 8007e06:	4608      	mov	r0, r1
 8007e08:	4611      	mov	r1, r2
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	70fb      	strb	r3, [r7, #3]
 8007e10:	460b      	mov	r3, r1
 8007e12:	70bb      	strb	r3, [r7, #2]
 8007e14:	4613      	mov	r3, r2
 8007e16:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007e26:	78bb      	ldrb	r3, [r7, #2]
 8007e28:	883a      	ldrh	r2, [r7, #0]
 8007e2a:	78f9      	ldrb	r1, [r7, #3]
 8007e2c:	f7f9 fc17 	bl	800165e <HAL_PCD_EP_Open>
 8007e30:	4603      	mov	r3, r0
 8007e32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e34:	7bfb      	ldrb	r3, [r7, #15]
 8007e36:	4618      	mov	r0, r3
 8007e38:	f000 f89e 	bl	8007f78 <USBD_Get_USB_Status>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007e40:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3710      	adds	r7, #16
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b084      	sub	sp, #16
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
 8007e52:	460b      	mov	r3, r1
 8007e54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e56:	2300      	movs	r3, #0
 8007e58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007e64:	78fa      	ldrb	r2, [r7, #3]
 8007e66:	4611      	mov	r1, r2
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f7f9 fc60 	bl	800172e <HAL_PCD_EP_Close>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8007e72:	7bfb      	ldrb	r3, [r7, #15]
 8007e74:	4618      	mov	r0, r3
 8007e76:	f000 f87f 	bl	8007f78 <USBD_Get_USB_Status>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007e7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3710      	adds	r7, #16
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	460b      	mov	r3, r1
 8007e92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e94:	2300      	movs	r3, #0
 8007e96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007ea2:	78fa      	ldrb	r2, [r7, #3]
 8007ea4:	4611      	mov	r1, r2
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f7f9 fd38 	bl	800191c <HAL_PCD_EP_SetStall>
 8007eac:	4603      	mov	r3, r0
 8007eae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007eb0:	7bfb      	ldrb	r3, [r7, #15]
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f000 f860 	bl	8007f78 <USBD_Get_USB_Status>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8007ebc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3710      	adds	r7, #16
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b086      	sub	sp, #24
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	60f8      	str	r0, [r7, #12]
 8007ece:	607a      	str	r2, [r7, #4]
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	72fb      	strb	r3, [r7, #11]
 8007ed6:	4613      	mov	r3, r2
 8007ed8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007eda:	2300      	movs	r3, #0
 8007edc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007ee8:	893b      	ldrh	r3, [r7, #8]
 8007eea:	7af9      	ldrb	r1, [r7, #11]
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	f7f9 fccb 	bl	8001888 <HAL_PCD_EP_Transmit>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8007ef6:	7dfb      	ldrb	r3, [r7, #23]
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f000 f83d 	bl	8007f78 <USBD_Get_USB_Status>
 8007efe:	4603      	mov	r3, r0
 8007f00:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8007f02:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3718      	adds	r7, #24
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b086      	sub	sp, #24
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	607a      	str	r2, [r7, #4]
 8007f16:	461a      	mov	r2, r3
 8007f18:	460b      	mov	r3, r1
 8007f1a:	72fb      	strb	r3, [r7, #11]
 8007f1c:	4613      	mov	r3, r2
 8007f1e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f20:	2300      	movs	r3, #0
 8007f22:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f24:	2300      	movs	r3, #0
 8007f26:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007f2e:	893b      	ldrh	r3, [r7, #8]
 8007f30:	7af9      	ldrb	r1, [r7, #11]
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	f7f9 fc45 	bl	80017c2 <HAL_PCD_EP_Receive>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8007f3c:	7dfb      	ldrb	r3, [r7, #23]
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f000 f81a 	bl	8007f78 <USBD_Get_USB_Status>
 8007f44:	4603      	mov	r3, r0
 8007f46:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8007f48:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3718      	adds	r7, #24
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b082      	sub	sp, #8
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
 8007f5a:	460b      	mov	r3, r1
 8007f5c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007f64:	78fa      	ldrb	r2, [r7, #3]
 8007f66:	4611      	mov	r1, r2
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f7f9 fc75 	bl	8001858 <HAL_PCD_EP_GetRxCount>
 8007f6e:	4603      	mov	r3, r0
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3708      	adds	r7, #8
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b085      	sub	sp, #20
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	4603      	mov	r3, r0
 8007f80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f82:	2300      	movs	r3, #0
 8007f84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007f86:	79fb      	ldrb	r3, [r7, #7]
 8007f88:	2b03      	cmp	r3, #3
 8007f8a:	d817      	bhi.n	8007fbc <USBD_Get_USB_Status+0x44>
 8007f8c:	a201      	add	r2, pc, #4	; (adr r2, 8007f94 <USBD_Get_USB_Status+0x1c>)
 8007f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f92:	bf00      	nop
 8007f94:	08007fa5 	.word	0x08007fa5
 8007f98:	08007fab 	.word	0x08007fab
 8007f9c:	08007fb1 	.word	0x08007fb1
 8007fa0:	08007fb7 	.word	0x08007fb7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	73fb      	strb	r3, [r7, #15]
    break;
 8007fa8:	e00b      	b.n	8007fc2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007faa:	2302      	movs	r3, #2
 8007fac:	73fb      	strb	r3, [r7, #15]
    break;
 8007fae:	e008      	b.n	8007fc2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	73fb      	strb	r3, [r7, #15]
    break;
 8007fb4:	e005      	b.n	8007fc2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007fb6:	2302      	movs	r3, #2
 8007fb8:	73fb      	strb	r3, [r7, #15]
    break;
 8007fba:	e002      	b.n	8007fc2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007fbc:	2302      	movs	r3, #2
 8007fbe:	73fb      	strb	r3, [r7, #15]
    break;
 8007fc0:	bf00      	nop
  }
  return usb_status;
 8007fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3714      	adds	r7, #20
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	6039      	str	r1, [r7, #0]
 8007fda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	2212      	movs	r2, #18
 8007fe0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007fe2:	4b03      	ldr	r3, [pc, #12]	; (8007ff0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr
 8007ff0:	20000148 	.word	0x20000148

08007ff4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	6039      	str	r1, [r7, #0]
 8007ffe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	2204      	movs	r2, #4
 8008004:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008006:	4b03      	ldr	r3, [pc, #12]	; (8008014 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008008:	4618      	mov	r0, r3
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr
 8008014:	2000015c 	.word	0x2000015c

08008018 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	4603      	mov	r3, r0
 8008020:	6039      	str	r1, [r7, #0]
 8008022:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008024:	79fb      	ldrb	r3, [r7, #7]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d105      	bne.n	8008036 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800802a:	683a      	ldr	r2, [r7, #0]
 800802c:	4907      	ldr	r1, [pc, #28]	; (800804c <USBD_FS_ProductStrDescriptor+0x34>)
 800802e:	4808      	ldr	r0, [pc, #32]	; (8008050 <USBD_FS_ProductStrDescriptor+0x38>)
 8008030:	f7fe fa77 	bl	8006522 <USBD_GetString>
 8008034:	e004      	b.n	8008040 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008036:	683a      	ldr	r2, [r7, #0]
 8008038:	4904      	ldr	r1, [pc, #16]	; (800804c <USBD_FS_ProductStrDescriptor+0x34>)
 800803a:	4805      	ldr	r0, [pc, #20]	; (8008050 <USBD_FS_ProductStrDescriptor+0x38>)
 800803c:	f7fe fa71 	bl	8006522 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008040:	4b02      	ldr	r3, [pc, #8]	; (800804c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008042:	4618      	mov	r0, r3
 8008044:	3708      	adds	r7, #8
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	20002024 	.word	0x20002024
 8008050:	08008450 	.word	0x08008450

08008054 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b082      	sub	sp, #8
 8008058:	af00      	add	r7, sp, #0
 800805a:	4603      	mov	r3, r0
 800805c:	6039      	str	r1, [r7, #0]
 800805e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008060:	683a      	ldr	r2, [r7, #0]
 8008062:	4904      	ldr	r1, [pc, #16]	; (8008074 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008064:	4804      	ldr	r0, [pc, #16]	; (8008078 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008066:	f7fe fa5c 	bl	8006522 <USBD_GetString>
  return USBD_StrDesc;
 800806a:	4b02      	ldr	r3, [pc, #8]	; (8008074 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800806c:	4618      	mov	r0, r3
 800806e:	3708      	adds	r7, #8
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	20002024 	.word	0x20002024
 8008078:	08008468 	.word	0x08008468

0800807c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	4603      	mov	r3, r0
 8008084:	6039      	str	r1, [r7, #0]
 8008086:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	221a      	movs	r2, #26
 800808c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800808e:	f000 f843 	bl	8008118 <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 8008092:	4b02      	ldr	r3, [pc, #8]	; (800809c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008094:	4618      	mov	r0, r3
 8008096:	3708      	adds	r7, #8
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}
 800809c:	20000160 	.word	0x20000160

080080a0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b082      	sub	sp, #8
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	4603      	mov	r3, r0
 80080a8:	6039      	str	r1, [r7, #0]
 80080aa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80080ac:	79fb      	ldrb	r3, [r7, #7]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d105      	bne.n	80080be <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80080b2:	683a      	ldr	r2, [r7, #0]
 80080b4:	4907      	ldr	r1, [pc, #28]	; (80080d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80080b6:	4808      	ldr	r0, [pc, #32]	; (80080d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80080b8:	f7fe fa33 	bl	8006522 <USBD_GetString>
 80080bc:	e004      	b.n	80080c8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80080be:	683a      	ldr	r2, [r7, #0]
 80080c0:	4904      	ldr	r1, [pc, #16]	; (80080d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80080c2:	4805      	ldr	r0, [pc, #20]	; (80080d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80080c4:	f7fe fa2d 	bl	8006522 <USBD_GetString>
  }
  return USBD_StrDesc;
 80080c8:	4b02      	ldr	r3, [pc, #8]	; (80080d4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3708      	adds	r7, #8
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	20002024 	.word	0x20002024
 80080d8:	0800847c 	.word	0x0800847c

080080dc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	4603      	mov	r3, r0
 80080e4:	6039      	str	r1, [r7, #0]
 80080e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80080e8:	79fb      	ldrb	r3, [r7, #7]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d105      	bne.n	80080fa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80080ee:	683a      	ldr	r2, [r7, #0]
 80080f0:	4907      	ldr	r1, [pc, #28]	; (8008110 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80080f2:	4808      	ldr	r0, [pc, #32]	; (8008114 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80080f4:	f7fe fa15 	bl	8006522 <USBD_GetString>
 80080f8:	e004      	b.n	8008104 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80080fa:	683a      	ldr	r2, [r7, #0]
 80080fc:	4904      	ldr	r1, [pc, #16]	; (8008110 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80080fe:	4805      	ldr	r0, [pc, #20]	; (8008114 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008100:	f7fe fa0f 	bl	8006522 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008104:	4b02      	ldr	r3, [pc, #8]	; (8008110 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008106:	4618      	mov	r0, r3
 8008108:	3708      	adds	r7, #8
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	20002024 	.word	0x20002024
 8008114:	08008488 	.word	0x08008488

08008118 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800811e:	4b0f      	ldr	r3, [pc, #60]	; (800815c <Get_SerialNum+0x44>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008124:	4b0e      	ldr	r3, [pc, #56]	; (8008160 <Get_SerialNum+0x48>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800812a:	4b0e      	ldr	r3, [pc, #56]	; (8008164 <Get_SerialNum+0x4c>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008130:	68fa      	ldr	r2, [r7, #12]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4413      	add	r3, r2
 8008136:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d009      	beq.n	8008152 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800813e:	2208      	movs	r2, #8
 8008140:	4909      	ldr	r1, [pc, #36]	; (8008168 <Get_SerialNum+0x50>)
 8008142:	68f8      	ldr	r0, [r7, #12]
 8008144:	f000 f814 	bl	8008170 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008148:	2204      	movs	r2, #4
 800814a:	4908      	ldr	r1, [pc, #32]	; (800816c <Get_SerialNum+0x54>)
 800814c:	68b8      	ldr	r0, [r7, #8]
 800814e:	f000 f80f 	bl	8008170 <IntToUnicode>
  }
}
 8008152:	bf00      	nop
 8008154:	3710      	adds	r7, #16
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	1fff7a10 	.word	0x1fff7a10
 8008160:	1fff7a14 	.word	0x1fff7a14
 8008164:	1fff7a18 	.word	0x1fff7a18
 8008168:	20000162 	.word	0x20000162
 800816c:	20000172 	.word	0x20000172

08008170 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008170:	b480      	push	{r7}
 8008172:	b087      	sub	sp, #28
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	4613      	mov	r3, r2
 800817c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800817e:	2300      	movs	r3, #0
 8008180:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008182:	2300      	movs	r3, #0
 8008184:	75fb      	strb	r3, [r7, #23]
 8008186:	e027      	b.n	80081d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	0f1b      	lsrs	r3, r3, #28
 800818c:	2b09      	cmp	r3, #9
 800818e:	d80b      	bhi.n	80081a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	0f1b      	lsrs	r3, r3, #28
 8008194:	b2da      	uxtb	r2, r3
 8008196:	7dfb      	ldrb	r3, [r7, #23]
 8008198:	005b      	lsls	r3, r3, #1
 800819a:	4619      	mov	r1, r3
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	440b      	add	r3, r1
 80081a0:	3230      	adds	r2, #48	; 0x30
 80081a2:	b2d2      	uxtb	r2, r2
 80081a4:	701a      	strb	r2, [r3, #0]
 80081a6:	e00a      	b.n	80081be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	0f1b      	lsrs	r3, r3, #28
 80081ac:	b2da      	uxtb	r2, r3
 80081ae:	7dfb      	ldrb	r3, [r7, #23]
 80081b0:	005b      	lsls	r3, r3, #1
 80081b2:	4619      	mov	r1, r3
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	440b      	add	r3, r1
 80081b8:	3237      	adds	r2, #55	; 0x37
 80081ba:	b2d2      	uxtb	r2, r2
 80081bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	011b      	lsls	r3, r3, #4
 80081c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80081c4:	7dfb      	ldrb	r3, [r7, #23]
 80081c6:	005b      	lsls	r3, r3, #1
 80081c8:	3301      	adds	r3, #1
 80081ca:	68ba      	ldr	r2, [r7, #8]
 80081cc:	4413      	add	r3, r2
 80081ce:	2200      	movs	r2, #0
 80081d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80081d2:	7dfb      	ldrb	r3, [r7, #23]
 80081d4:	3301      	adds	r3, #1
 80081d6:	75fb      	strb	r3, [r7, #23]
 80081d8:	7dfa      	ldrb	r2, [r7, #23]
 80081da:	79fb      	ldrb	r3, [r7, #7]
 80081dc:	429a      	cmp	r2, r3
 80081de:	d3d3      	bcc.n	8008188 <IntToUnicode+0x18>
  }
}
 80081e0:	bf00      	nop
 80081e2:	371c      	adds	r7, #28
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr

080081ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80081ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008224 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80081f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80081f2:	e003      	b.n	80081fc <LoopCopyDataInit>

080081f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80081f4:	4b0c      	ldr	r3, [pc, #48]	; (8008228 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80081f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80081f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80081fa:	3104      	adds	r1, #4

080081fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80081fc:	480b      	ldr	r0, [pc, #44]	; (800822c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80081fe:	4b0c      	ldr	r3, [pc, #48]	; (8008230 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008200:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008202:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008204:	d3f6      	bcc.n	80081f4 <CopyDataInit>
  ldr  r2, =_sbss
 8008206:	4a0b      	ldr	r2, [pc, #44]	; (8008234 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008208:	e002      	b.n	8008210 <LoopFillZerobss>

0800820a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800820a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800820c:	f842 3b04 	str.w	r3, [r2], #4

08008210 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008210:	4b09      	ldr	r3, [pc, #36]	; (8008238 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008212:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008214:	d3f9      	bcc.n	800820a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008216:	f7ff fbd5 	bl	80079c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800821a:	f000 f817 	bl	800824c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800821e:	f7ff f897 	bl	8007350 <main>
  bx  lr    
 8008222:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8008224:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8008228:	080084d4 	.word	0x080084d4
  ldr  r0, =_sdata
 800822c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008230:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8008234:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8008238:	20002228 	.word	0x20002228

0800823c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800823c:	e7fe      	b.n	800823c <ADC_IRQHandler>
	...

08008240 <__errno>:
 8008240:	4b01      	ldr	r3, [pc, #4]	; (8008248 <__errno+0x8>)
 8008242:	6818      	ldr	r0, [r3, #0]
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop
 8008248:	2000017c 	.word	0x2000017c

0800824c <__libc_init_array>:
 800824c:	b570      	push	{r4, r5, r6, lr}
 800824e:	4e0d      	ldr	r6, [pc, #52]	; (8008284 <__libc_init_array+0x38>)
 8008250:	4c0d      	ldr	r4, [pc, #52]	; (8008288 <__libc_init_array+0x3c>)
 8008252:	1ba4      	subs	r4, r4, r6
 8008254:	10a4      	asrs	r4, r4, #2
 8008256:	2500      	movs	r5, #0
 8008258:	42a5      	cmp	r5, r4
 800825a:	d109      	bne.n	8008270 <__libc_init_array+0x24>
 800825c:	4e0b      	ldr	r6, [pc, #44]	; (800828c <__libc_init_array+0x40>)
 800825e:	4c0c      	ldr	r4, [pc, #48]	; (8008290 <__libc_init_array+0x44>)
 8008260:	f000 f8ea 	bl	8008438 <_init>
 8008264:	1ba4      	subs	r4, r4, r6
 8008266:	10a4      	asrs	r4, r4, #2
 8008268:	2500      	movs	r5, #0
 800826a:	42a5      	cmp	r5, r4
 800826c:	d105      	bne.n	800827a <__libc_init_array+0x2e>
 800826e:	bd70      	pop	{r4, r5, r6, pc}
 8008270:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008274:	4798      	blx	r3
 8008276:	3501      	adds	r5, #1
 8008278:	e7ee      	b.n	8008258 <__libc_init_array+0xc>
 800827a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800827e:	4798      	blx	r3
 8008280:	3501      	adds	r5, #1
 8008282:	e7f2      	b.n	800826a <__libc_init_array+0x1e>
 8008284:	080084cc 	.word	0x080084cc
 8008288:	080084cc 	.word	0x080084cc
 800828c:	080084cc 	.word	0x080084cc
 8008290:	080084d0 	.word	0x080084d0

08008294 <malloc>:
 8008294:	4b02      	ldr	r3, [pc, #8]	; (80082a0 <malloc+0xc>)
 8008296:	4601      	mov	r1, r0
 8008298:	6818      	ldr	r0, [r3, #0]
 800829a:	f000 b861 	b.w	8008360 <_malloc_r>
 800829e:	bf00      	nop
 80082a0:	2000017c 	.word	0x2000017c

080082a4 <free>:
 80082a4:	4b02      	ldr	r3, [pc, #8]	; (80082b0 <free+0xc>)
 80082a6:	4601      	mov	r1, r0
 80082a8:	6818      	ldr	r0, [r3, #0]
 80082aa:	f000 b80b 	b.w	80082c4 <_free_r>
 80082ae:	bf00      	nop
 80082b0:	2000017c 	.word	0x2000017c

080082b4 <memset>:
 80082b4:	4402      	add	r2, r0
 80082b6:	4603      	mov	r3, r0
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d100      	bne.n	80082be <memset+0xa>
 80082bc:	4770      	bx	lr
 80082be:	f803 1b01 	strb.w	r1, [r3], #1
 80082c2:	e7f9      	b.n	80082b8 <memset+0x4>

080082c4 <_free_r>:
 80082c4:	b538      	push	{r3, r4, r5, lr}
 80082c6:	4605      	mov	r5, r0
 80082c8:	2900      	cmp	r1, #0
 80082ca:	d045      	beq.n	8008358 <_free_r+0x94>
 80082cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082d0:	1f0c      	subs	r4, r1, #4
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	bfb8      	it	lt
 80082d6:	18e4      	addlt	r4, r4, r3
 80082d8:	f000 f8ac 	bl	8008434 <__malloc_lock>
 80082dc:	4a1f      	ldr	r2, [pc, #124]	; (800835c <_free_r+0x98>)
 80082de:	6813      	ldr	r3, [r2, #0]
 80082e0:	4610      	mov	r0, r2
 80082e2:	b933      	cbnz	r3, 80082f2 <_free_r+0x2e>
 80082e4:	6063      	str	r3, [r4, #4]
 80082e6:	6014      	str	r4, [r2, #0]
 80082e8:	4628      	mov	r0, r5
 80082ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082ee:	f000 b8a2 	b.w	8008436 <__malloc_unlock>
 80082f2:	42a3      	cmp	r3, r4
 80082f4:	d90c      	bls.n	8008310 <_free_r+0x4c>
 80082f6:	6821      	ldr	r1, [r4, #0]
 80082f8:	1862      	adds	r2, r4, r1
 80082fa:	4293      	cmp	r3, r2
 80082fc:	bf04      	itt	eq
 80082fe:	681a      	ldreq	r2, [r3, #0]
 8008300:	685b      	ldreq	r3, [r3, #4]
 8008302:	6063      	str	r3, [r4, #4]
 8008304:	bf04      	itt	eq
 8008306:	1852      	addeq	r2, r2, r1
 8008308:	6022      	streq	r2, [r4, #0]
 800830a:	6004      	str	r4, [r0, #0]
 800830c:	e7ec      	b.n	80082e8 <_free_r+0x24>
 800830e:	4613      	mov	r3, r2
 8008310:	685a      	ldr	r2, [r3, #4]
 8008312:	b10a      	cbz	r2, 8008318 <_free_r+0x54>
 8008314:	42a2      	cmp	r2, r4
 8008316:	d9fa      	bls.n	800830e <_free_r+0x4a>
 8008318:	6819      	ldr	r1, [r3, #0]
 800831a:	1858      	adds	r0, r3, r1
 800831c:	42a0      	cmp	r0, r4
 800831e:	d10b      	bne.n	8008338 <_free_r+0x74>
 8008320:	6820      	ldr	r0, [r4, #0]
 8008322:	4401      	add	r1, r0
 8008324:	1858      	adds	r0, r3, r1
 8008326:	4282      	cmp	r2, r0
 8008328:	6019      	str	r1, [r3, #0]
 800832a:	d1dd      	bne.n	80082e8 <_free_r+0x24>
 800832c:	6810      	ldr	r0, [r2, #0]
 800832e:	6852      	ldr	r2, [r2, #4]
 8008330:	605a      	str	r2, [r3, #4]
 8008332:	4401      	add	r1, r0
 8008334:	6019      	str	r1, [r3, #0]
 8008336:	e7d7      	b.n	80082e8 <_free_r+0x24>
 8008338:	d902      	bls.n	8008340 <_free_r+0x7c>
 800833a:	230c      	movs	r3, #12
 800833c:	602b      	str	r3, [r5, #0]
 800833e:	e7d3      	b.n	80082e8 <_free_r+0x24>
 8008340:	6820      	ldr	r0, [r4, #0]
 8008342:	1821      	adds	r1, r4, r0
 8008344:	428a      	cmp	r2, r1
 8008346:	bf04      	itt	eq
 8008348:	6811      	ldreq	r1, [r2, #0]
 800834a:	6852      	ldreq	r2, [r2, #4]
 800834c:	6062      	str	r2, [r4, #4]
 800834e:	bf04      	itt	eq
 8008350:	1809      	addeq	r1, r1, r0
 8008352:	6021      	streq	r1, [r4, #0]
 8008354:	605c      	str	r4, [r3, #4]
 8008356:	e7c7      	b.n	80082e8 <_free_r+0x24>
 8008358:	bd38      	pop	{r3, r4, r5, pc}
 800835a:	bf00      	nop
 800835c:	20000214 	.word	0x20000214

08008360 <_malloc_r>:
 8008360:	b570      	push	{r4, r5, r6, lr}
 8008362:	1ccd      	adds	r5, r1, #3
 8008364:	f025 0503 	bic.w	r5, r5, #3
 8008368:	3508      	adds	r5, #8
 800836a:	2d0c      	cmp	r5, #12
 800836c:	bf38      	it	cc
 800836e:	250c      	movcc	r5, #12
 8008370:	2d00      	cmp	r5, #0
 8008372:	4606      	mov	r6, r0
 8008374:	db01      	blt.n	800837a <_malloc_r+0x1a>
 8008376:	42a9      	cmp	r1, r5
 8008378:	d903      	bls.n	8008382 <_malloc_r+0x22>
 800837a:	230c      	movs	r3, #12
 800837c:	6033      	str	r3, [r6, #0]
 800837e:	2000      	movs	r0, #0
 8008380:	bd70      	pop	{r4, r5, r6, pc}
 8008382:	f000 f857 	bl	8008434 <__malloc_lock>
 8008386:	4a21      	ldr	r2, [pc, #132]	; (800840c <_malloc_r+0xac>)
 8008388:	6814      	ldr	r4, [r2, #0]
 800838a:	4621      	mov	r1, r4
 800838c:	b991      	cbnz	r1, 80083b4 <_malloc_r+0x54>
 800838e:	4c20      	ldr	r4, [pc, #128]	; (8008410 <_malloc_r+0xb0>)
 8008390:	6823      	ldr	r3, [r4, #0]
 8008392:	b91b      	cbnz	r3, 800839c <_malloc_r+0x3c>
 8008394:	4630      	mov	r0, r6
 8008396:	f000 f83d 	bl	8008414 <_sbrk_r>
 800839a:	6020      	str	r0, [r4, #0]
 800839c:	4629      	mov	r1, r5
 800839e:	4630      	mov	r0, r6
 80083a0:	f000 f838 	bl	8008414 <_sbrk_r>
 80083a4:	1c43      	adds	r3, r0, #1
 80083a6:	d124      	bne.n	80083f2 <_malloc_r+0x92>
 80083a8:	230c      	movs	r3, #12
 80083aa:	6033      	str	r3, [r6, #0]
 80083ac:	4630      	mov	r0, r6
 80083ae:	f000 f842 	bl	8008436 <__malloc_unlock>
 80083b2:	e7e4      	b.n	800837e <_malloc_r+0x1e>
 80083b4:	680b      	ldr	r3, [r1, #0]
 80083b6:	1b5b      	subs	r3, r3, r5
 80083b8:	d418      	bmi.n	80083ec <_malloc_r+0x8c>
 80083ba:	2b0b      	cmp	r3, #11
 80083bc:	d90f      	bls.n	80083de <_malloc_r+0x7e>
 80083be:	600b      	str	r3, [r1, #0]
 80083c0:	50cd      	str	r5, [r1, r3]
 80083c2:	18cc      	adds	r4, r1, r3
 80083c4:	4630      	mov	r0, r6
 80083c6:	f000 f836 	bl	8008436 <__malloc_unlock>
 80083ca:	f104 000b 	add.w	r0, r4, #11
 80083ce:	1d23      	adds	r3, r4, #4
 80083d0:	f020 0007 	bic.w	r0, r0, #7
 80083d4:	1ac3      	subs	r3, r0, r3
 80083d6:	d0d3      	beq.n	8008380 <_malloc_r+0x20>
 80083d8:	425a      	negs	r2, r3
 80083da:	50e2      	str	r2, [r4, r3]
 80083dc:	e7d0      	b.n	8008380 <_malloc_r+0x20>
 80083de:	428c      	cmp	r4, r1
 80083e0:	684b      	ldr	r3, [r1, #4]
 80083e2:	bf16      	itet	ne
 80083e4:	6063      	strne	r3, [r4, #4]
 80083e6:	6013      	streq	r3, [r2, #0]
 80083e8:	460c      	movne	r4, r1
 80083ea:	e7eb      	b.n	80083c4 <_malloc_r+0x64>
 80083ec:	460c      	mov	r4, r1
 80083ee:	6849      	ldr	r1, [r1, #4]
 80083f0:	e7cc      	b.n	800838c <_malloc_r+0x2c>
 80083f2:	1cc4      	adds	r4, r0, #3
 80083f4:	f024 0403 	bic.w	r4, r4, #3
 80083f8:	42a0      	cmp	r0, r4
 80083fa:	d005      	beq.n	8008408 <_malloc_r+0xa8>
 80083fc:	1a21      	subs	r1, r4, r0
 80083fe:	4630      	mov	r0, r6
 8008400:	f000 f808 	bl	8008414 <_sbrk_r>
 8008404:	3001      	adds	r0, #1
 8008406:	d0cf      	beq.n	80083a8 <_malloc_r+0x48>
 8008408:	6025      	str	r5, [r4, #0]
 800840a:	e7db      	b.n	80083c4 <_malloc_r+0x64>
 800840c:	20000214 	.word	0x20000214
 8008410:	20000218 	.word	0x20000218

08008414 <_sbrk_r>:
 8008414:	b538      	push	{r3, r4, r5, lr}
 8008416:	4c06      	ldr	r4, [pc, #24]	; (8008430 <_sbrk_r+0x1c>)
 8008418:	2300      	movs	r3, #0
 800841a:	4605      	mov	r5, r0
 800841c:	4608      	mov	r0, r1
 800841e:	6023      	str	r3, [r4, #0]
 8008420:	f7ff faa4 	bl	800796c <_sbrk>
 8008424:	1c43      	adds	r3, r0, #1
 8008426:	d102      	bne.n	800842e <_sbrk_r+0x1a>
 8008428:	6823      	ldr	r3, [r4, #0]
 800842a:	b103      	cbz	r3, 800842e <_sbrk_r+0x1a>
 800842c:	602b      	str	r3, [r5, #0]
 800842e:	bd38      	pop	{r3, r4, r5, pc}
 8008430:	20002224 	.word	0x20002224

08008434 <__malloc_lock>:
 8008434:	4770      	bx	lr

08008436 <__malloc_unlock>:
 8008436:	4770      	bx	lr

08008438 <_init>:
 8008438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800843a:	bf00      	nop
 800843c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800843e:	bc08      	pop	{r3}
 8008440:	469e      	mov	lr, r3
 8008442:	4770      	bx	lr

08008444 <_fini>:
 8008444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008446:	bf00      	nop
 8008448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800844a:	bc08      	pop	{r3}
 800844c:	469e      	mov	lr, r3
 800844e:	4770      	bx	lr
