
UMDv2-stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086d0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080088a8  080088a8  000188a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800897c  0800897c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800897c  0800897c  0001897c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008984  08008984  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008984  08008984  00018984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008988  08008988  00018988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800898c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001858  200001e0  08008b6c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a38  08008b6c  00021a38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030488  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000063de  00000000  00000000  00050698  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b60  00000000  00000000  00056a78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001898  00000000  00000000  000585d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002da35  00000000  00000000  00059e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002005e  00000000  00000000  000878a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e4bb6  00000000  00000000  000a7903  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018c4b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008504  00000000  00000000  0018c534  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001e0 	.word	0x200001e0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008890 	.word	0x08008890

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001e4 	.word	0x200001e4
 8000214:	08008890 	.word	0x08008890

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_uldivmod>:
 8000228:	b953      	cbnz	r3, 8000240 <__aeabi_uldivmod+0x18>
 800022a:	b94a      	cbnz	r2, 8000240 <__aeabi_uldivmod+0x18>
 800022c:	2900      	cmp	r1, #0
 800022e:	bf08      	it	eq
 8000230:	2800      	cmpeq	r0, #0
 8000232:	bf1c      	itt	ne
 8000234:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000238:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800023c:	f000 b972 	b.w	8000524 <__aeabi_idiv0>
 8000240:	f1ad 0c08 	sub.w	ip, sp, #8
 8000244:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000248:	f000 f806 	bl	8000258 <__udivmoddi4>
 800024c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000254:	b004      	add	sp, #16
 8000256:	4770      	bx	lr

08000258 <__udivmoddi4>:
 8000258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800025c:	9e08      	ldr	r6, [sp, #32]
 800025e:	4604      	mov	r4, r0
 8000260:	4688      	mov	r8, r1
 8000262:	2b00      	cmp	r3, #0
 8000264:	d14b      	bne.n	80002fe <__udivmoddi4+0xa6>
 8000266:	428a      	cmp	r2, r1
 8000268:	4615      	mov	r5, r2
 800026a:	d967      	bls.n	800033c <__udivmoddi4+0xe4>
 800026c:	fab2 f282 	clz	r2, r2
 8000270:	b14a      	cbz	r2, 8000286 <__udivmoddi4+0x2e>
 8000272:	f1c2 0720 	rsb	r7, r2, #32
 8000276:	fa01 f302 	lsl.w	r3, r1, r2
 800027a:	fa20 f707 	lsr.w	r7, r0, r7
 800027e:	4095      	lsls	r5, r2
 8000280:	ea47 0803 	orr.w	r8, r7, r3
 8000284:	4094      	lsls	r4, r2
 8000286:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800028a:	0c23      	lsrs	r3, r4, #16
 800028c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000290:	fa1f fc85 	uxth.w	ip, r5
 8000294:	fb0e 8817 	mls	r8, lr, r7, r8
 8000298:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800029c:	fb07 f10c 	mul.w	r1, r7, ip
 80002a0:	4299      	cmp	r1, r3
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x60>
 80002a4:	18eb      	adds	r3, r5, r3
 80002a6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002aa:	f080 811b 	bcs.w	80004e4 <__udivmoddi4+0x28c>
 80002ae:	4299      	cmp	r1, r3
 80002b0:	f240 8118 	bls.w	80004e4 <__udivmoddi4+0x28c>
 80002b4:	3f02      	subs	r7, #2
 80002b6:	442b      	add	r3, r5
 80002b8:	1a5b      	subs	r3, r3, r1
 80002ba:	b2a4      	uxth	r4, r4
 80002bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002cc:	45a4      	cmp	ip, r4
 80002ce:	d909      	bls.n	80002e4 <__udivmoddi4+0x8c>
 80002d0:	192c      	adds	r4, r5, r4
 80002d2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002d6:	f080 8107 	bcs.w	80004e8 <__udivmoddi4+0x290>
 80002da:	45a4      	cmp	ip, r4
 80002dc:	f240 8104 	bls.w	80004e8 <__udivmoddi4+0x290>
 80002e0:	3802      	subs	r0, #2
 80002e2:	442c      	add	r4, r5
 80002e4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e8:	eba4 040c 	sub.w	r4, r4, ip
 80002ec:	2700      	movs	r7, #0
 80002ee:	b11e      	cbz	r6, 80002f8 <__udivmoddi4+0xa0>
 80002f0:	40d4      	lsrs	r4, r2
 80002f2:	2300      	movs	r3, #0
 80002f4:	e9c6 4300 	strd	r4, r3, [r6]
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	428b      	cmp	r3, r1
 8000300:	d909      	bls.n	8000316 <__udivmoddi4+0xbe>
 8000302:	2e00      	cmp	r6, #0
 8000304:	f000 80eb 	beq.w	80004de <__udivmoddi4+0x286>
 8000308:	2700      	movs	r7, #0
 800030a:	e9c6 0100 	strd	r0, r1, [r6]
 800030e:	4638      	mov	r0, r7
 8000310:	4639      	mov	r1, r7
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	fab3 f783 	clz	r7, r3
 800031a:	2f00      	cmp	r7, #0
 800031c:	d147      	bne.n	80003ae <__udivmoddi4+0x156>
 800031e:	428b      	cmp	r3, r1
 8000320:	d302      	bcc.n	8000328 <__udivmoddi4+0xd0>
 8000322:	4282      	cmp	r2, r0
 8000324:	f200 80fa 	bhi.w	800051c <__udivmoddi4+0x2c4>
 8000328:	1a84      	subs	r4, r0, r2
 800032a:	eb61 0303 	sbc.w	r3, r1, r3
 800032e:	2001      	movs	r0, #1
 8000330:	4698      	mov	r8, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d0e0      	beq.n	80002f8 <__udivmoddi4+0xa0>
 8000336:	e9c6 4800 	strd	r4, r8, [r6]
 800033a:	e7dd      	b.n	80002f8 <__udivmoddi4+0xa0>
 800033c:	b902      	cbnz	r2, 8000340 <__udivmoddi4+0xe8>
 800033e:	deff      	udf	#255	; 0xff
 8000340:	fab2 f282 	clz	r2, r2
 8000344:	2a00      	cmp	r2, #0
 8000346:	f040 808f 	bne.w	8000468 <__udivmoddi4+0x210>
 800034a:	1b49      	subs	r1, r1, r5
 800034c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000350:	fa1f f885 	uxth.w	r8, r5
 8000354:	2701      	movs	r7, #1
 8000356:	fbb1 fcfe 	udiv	ip, r1, lr
 800035a:	0c23      	lsrs	r3, r4, #16
 800035c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb08 f10c 	mul.w	r1, r8, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x124>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x122>
 8000374:	4299      	cmp	r1, r3
 8000376:	f200 80cd 	bhi.w	8000514 <__udivmoddi4+0x2bc>
 800037a:	4684      	mov	ip, r0
 800037c:	1a59      	subs	r1, r3, r1
 800037e:	b2a3      	uxth	r3, r4
 8000380:	fbb1 f0fe 	udiv	r0, r1, lr
 8000384:	fb0e 1410 	mls	r4, lr, r0, r1
 8000388:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800038c:	fb08 f800 	mul.w	r8, r8, r0
 8000390:	45a0      	cmp	r8, r4
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0x14c>
 8000394:	192c      	adds	r4, r5, r4
 8000396:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x14a>
 800039c:	45a0      	cmp	r8, r4
 800039e:	f200 80b6 	bhi.w	800050e <__udivmoddi4+0x2b6>
 80003a2:	4618      	mov	r0, r3
 80003a4:	eba4 0408 	sub.w	r4, r4, r8
 80003a8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003ac:	e79f      	b.n	80002ee <__udivmoddi4+0x96>
 80003ae:	f1c7 0c20 	rsb	ip, r7, #32
 80003b2:	40bb      	lsls	r3, r7
 80003b4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003b8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003bc:	fa01 f407 	lsl.w	r4, r1, r7
 80003c0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003c4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003c8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003cc:	4325      	orrs	r5, r4
 80003ce:	fbb3 f9f8 	udiv	r9, r3, r8
 80003d2:	0c2c      	lsrs	r4, r5, #16
 80003d4:	fb08 3319 	mls	r3, r8, r9, r3
 80003d8:	fa1f fa8e 	uxth.w	sl, lr
 80003dc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003e0:	fb09 f40a 	mul.w	r4, r9, sl
 80003e4:	429c      	cmp	r4, r3
 80003e6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ea:	fa00 f107 	lsl.w	r1, r0, r7
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b0>
 80003f0:	eb1e 0303 	adds.w	r3, lr, r3
 80003f4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003f8:	f080 8087 	bcs.w	800050a <__udivmoddi4+0x2b2>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f240 8084 	bls.w	800050a <__udivmoddi4+0x2b2>
 8000402:	f1a9 0902 	sub.w	r9, r9, #2
 8000406:	4473      	add	r3, lr
 8000408:	1b1b      	subs	r3, r3, r4
 800040a:	b2ad      	uxth	r5, r5
 800040c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000410:	fb08 3310 	mls	r3, r8, r0, r3
 8000414:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000418:	fb00 fa0a 	mul.w	sl, r0, sl
 800041c:	45a2      	cmp	sl, r4
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1da>
 8000420:	eb1e 0404 	adds.w	r4, lr, r4
 8000424:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000428:	d26b      	bcs.n	8000502 <__udivmoddi4+0x2aa>
 800042a:	45a2      	cmp	sl, r4
 800042c:	d969      	bls.n	8000502 <__udivmoddi4+0x2aa>
 800042e:	3802      	subs	r0, #2
 8000430:	4474      	add	r4, lr
 8000432:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000436:	fba0 8902 	umull	r8, r9, r0, r2
 800043a:	eba4 040a 	sub.w	r4, r4, sl
 800043e:	454c      	cmp	r4, r9
 8000440:	46c2      	mov	sl, r8
 8000442:	464b      	mov	r3, r9
 8000444:	d354      	bcc.n	80004f0 <__udivmoddi4+0x298>
 8000446:	d051      	beq.n	80004ec <__udivmoddi4+0x294>
 8000448:	2e00      	cmp	r6, #0
 800044a:	d069      	beq.n	8000520 <__udivmoddi4+0x2c8>
 800044c:	ebb1 050a 	subs.w	r5, r1, sl
 8000450:	eb64 0403 	sbc.w	r4, r4, r3
 8000454:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000458:	40fd      	lsrs	r5, r7
 800045a:	40fc      	lsrs	r4, r7
 800045c:	ea4c 0505 	orr.w	r5, ip, r5
 8000460:	e9c6 5400 	strd	r5, r4, [r6]
 8000464:	2700      	movs	r7, #0
 8000466:	e747      	b.n	80002f8 <__udivmoddi4+0xa0>
 8000468:	f1c2 0320 	rsb	r3, r2, #32
 800046c:	fa20 f703 	lsr.w	r7, r0, r3
 8000470:	4095      	lsls	r5, r2
 8000472:	fa01 f002 	lsl.w	r0, r1, r2
 8000476:	fa21 f303 	lsr.w	r3, r1, r3
 800047a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800047e:	4338      	orrs	r0, r7
 8000480:	0c01      	lsrs	r1, r0, #16
 8000482:	fbb3 f7fe 	udiv	r7, r3, lr
 8000486:	fa1f f885 	uxth.w	r8, r5
 800048a:	fb0e 3317 	mls	r3, lr, r7, r3
 800048e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000492:	fb07 f308 	mul.w	r3, r7, r8
 8000496:	428b      	cmp	r3, r1
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d907      	bls.n	80004ae <__udivmoddi4+0x256>
 800049e:	1869      	adds	r1, r5, r1
 80004a0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004a4:	d22f      	bcs.n	8000506 <__udivmoddi4+0x2ae>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d92d      	bls.n	8000506 <__udivmoddi4+0x2ae>
 80004aa:	3f02      	subs	r7, #2
 80004ac:	4429      	add	r1, r5
 80004ae:	1acb      	subs	r3, r1, r3
 80004b0:	b281      	uxth	r1, r0
 80004b2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004be:	fb00 f308 	mul.w	r3, r0, r8
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d907      	bls.n	80004d6 <__udivmoddi4+0x27e>
 80004c6:	1869      	adds	r1, r5, r1
 80004c8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004cc:	d217      	bcs.n	80004fe <__udivmoddi4+0x2a6>
 80004ce:	428b      	cmp	r3, r1
 80004d0:	d915      	bls.n	80004fe <__udivmoddi4+0x2a6>
 80004d2:	3802      	subs	r0, #2
 80004d4:	4429      	add	r1, r5
 80004d6:	1ac9      	subs	r1, r1, r3
 80004d8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004dc:	e73b      	b.n	8000356 <__udivmoddi4+0xfe>
 80004de:	4637      	mov	r7, r6
 80004e0:	4630      	mov	r0, r6
 80004e2:	e709      	b.n	80002f8 <__udivmoddi4+0xa0>
 80004e4:	4607      	mov	r7, r0
 80004e6:	e6e7      	b.n	80002b8 <__udivmoddi4+0x60>
 80004e8:	4618      	mov	r0, r3
 80004ea:	e6fb      	b.n	80002e4 <__udivmoddi4+0x8c>
 80004ec:	4541      	cmp	r1, r8
 80004ee:	d2ab      	bcs.n	8000448 <__udivmoddi4+0x1f0>
 80004f0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004f4:	eb69 020e 	sbc.w	r2, r9, lr
 80004f8:	3801      	subs	r0, #1
 80004fa:	4613      	mov	r3, r2
 80004fc:	e7a4      	b.n	8000448 <__udivmoddi4+0x1f0>
 80004fe:	4660      	mov	r0, ip
 8000500:	e7e9      	b.n	80004d6 <__udivmoddi4+0x27e>
 8000502:	4618      	mov	r0, r3
 8000504:	e795      	b.n	8000432 <__udivmoddi4+0x1da>
 8000506:	4667      	mov	r7, ip
 8000508:	e7d1      	b.n	80004ae <__udivmoddi4+0x256>
 800050a:	4681      	mov	r9, r0
 800050c:	e77c      	b.n	8000408 <__udivmoddi4+0x1b0>
 800050e:	3802      	subs	r0, #2
 8000510:	442c      	add	r4, r5
 8000512:	e747      	b.n	80003a4 <__udivmoddi4+0x14c>
 8000514:	f1ac 0c02 	sub.w	ip, ip, #2
 8000518:	442b      	add	r3, r5
 800051a:	e72f      	b.n	800037c <__udivmoddi4+0x124>
 800051c:	4638      	mov	r0, r7
 800051e:	e708      	b.n	8000332 <__udivmoddi4+0xda>
 8000520:	4637      	mov	r7, r6
 8000522:	e6e9      	b.n	80002f8 <__udivmoddi4+0xa0>

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800052c:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <HAL_Init+0x40>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a0d      	ldr	r2, [pc, #52]	; (8000568 <HAL_Init+0x40>)
 8000532:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000536:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000538:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <HAL_Init+0x40>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a0a      	ldr	r2, [pc, #40]	; (8000568 <HAL_Init+0x40>)
 800053e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000542:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000544:	4b08      	ldr	r3, [pc, #32]	; (8000568 <HAL_Init+0x40>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a07      	ldr	r2, [pc, #28]	; (8000568 <HAL_Init+0x40>)
 800054a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800054e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000550:	2003      	movs	r0, #3
 8000552:	f000 fba1 	bl	8000c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000556:	2000      	movs	r0, #0
 8000558:	f000 f808 	bl	800056c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800055c:	f007 fa1a 	bl	8007994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000560:	2300      	movs	r3, #0
}
 8000562:	4618      	mov	r0, r3
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40023c00 	.word	0x40023c00

0800056c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000574:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <HAL_InitTick+0x54>)
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <HAL_InitTick+0x58>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	4619      	mov	r1, r3
 800057e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000582:	fbb3 f3f1 	udiv	r3, r3, r1
 8000586:	fbb2 f3f3 	udiv	r3, r2, r3
 800058a:	4618      	mov	r0, r3
 800058c:	f000 fbab 	bl	8000ce6 <HAL_SYSTICK_Config>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000596:	2301      	movs	r3, #1
 8000598:	e00e      	b.n	80005b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	2b0f      	cmp	r3, #15
 800059e:	d80a      	bhi.n	80005b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005a0:	2200      	movs	r2, #0
 80005a2:	6879      	ldr	r1, [r7, #4]
 80005a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005a8:	f000 fb81 	bl	8000cae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005ac:	4a06      	ldr	r2, [pc, #24]	; (80005c8 <HAL_InitTick+0x5c>)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005b2:	2300      	movs	r3, #0
 80005b4:	e000      	b.n	80005b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005b6:	2301      	movs	r3, #1
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20000118 	.word	0x20000118
 80005c4:	20000004 	.word	0x20000004
 80005c8:	20000000 	.word	0x20000000

080005cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <HAL_IncTick+0x20>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	461a      	mov	r2, r3
 80005d6:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <HAL_IncTick+0x24>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4413      	add	r3, r2
 80005dc:	4a04      	ldr	r2, [pc, #16]	; (80005f0 <HAL_IncTick+0x24>)
 80005de:	6013      	str	r3, [r2, #0]
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	20000004 	.word	0x20000004
 80005f0:	20000a2c 	.word	0x20000a2c

080005f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  return uwTick;
 80005f8:	4b03      	ldr	r3, [pc, #12]	; (8000608 <HAL_GetTick+0x14>)
 80005fa:	681b      	ldr	r3, [r3, #0]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	20000a2c 	.word	0x20000a2c

0800060c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000614:	f7ff ffee 	bl	80005f4 <HAL_GetTick>
 8000618:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000624:	d005      	beq.n	8000632 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <HAL_Delay+0x40>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	461a      	mov	r2, r3
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	4413      	add	r3, r2
 8000630:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000632:	bf00      	nop
 8000634:	f7ff ffde 	bl	80005f4 <HAL_GetTick>
 8000638:	4602      	mov	r2, r0
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	1ad3      	subs	r3, r2, r3
 800063e:	68fa      	ldr	r2, [r7, #12]
 8000640:	429a      	cmp	r2, r3
 8000642:	d8f7      	bhi.n	8000634 <HAL_Delay+0x28>
  {
  }
}
 8000644:	bf00      	nop
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000004 	.word	0x20000004

08000650 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000658:	2300      	movs	r3, #0
 800065a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d101      	bne.n	8000666 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000662:	2301      	movs	r3, #1
 8000664:	e033      	b.n	80006ce <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066a:	2b00      	cmp	r3, #0
 800066c:	d109      	bne.n	8000682 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800066e:	6878      	ldr	r0, [r7, #4]
 8000670:	f006 f99e 	bl	80069b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2200      	movs	r2, #0
 8000678:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2200      	movs	r2, #0
 800067e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000686:	f003 0310 	and.w	r3, r3, #16
 800068a:	2b00      	cmp	r3, #0
 800068c:	d118      	bne.n	80006c0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000692:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000696:	f023 0302 	bic.w	r3, r3, #2
 800069a:	f043 0202 	orr.w	r2, r3, #2
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80006a2:	6878      	ldr	r0, [r7, #4]
 80006a4:	f000 f94a 	bl	800093c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2200      	movs	r2, #0
 80006ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b2:	f023 0303 	bic.w	r3, r3, #3
 80006b6:	f043 0201 	orr.w	r2, r3, #1
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	641a      	str	r2, [r3, #64]	; 0x40
 80006be:	e001      	b.n	80006c4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80006c0:	2301      	movs	r3, #1
 80006c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2200      	movs	r2, #0
 80006c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80006cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3710      	adds	r7, #16
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
	...

080006d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d101      	bne.n	80006f4 <HAL_ADC_ConfigChannel+0x1c>
 80006f0:	2302      	movs	r3, #2
 80006f2:	e113      	b.n	800091c <HAL_ADC_ConfigChannel+0x244>
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2201      	movs	r2, #1
 80006f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2b09      	cmp	r3, #9
 8000702:	d925      	bls.n	8000750 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	68d9      	ldr	r1, [r3, #12]
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	b29b      	uxth	r3, r3
 8000710:	461a      	mov	r2, r3
 8000712:	4613      	mov	r3, r2
 8000714:	005b      	lsls	r3, r3, #1
 8000716:	4413      	add	r3, r2
 8000718:	3b1e      	subs	r3, #30
 800071a:	2207      	movs	r2, #7
 800071c:	fa02 f303 	lsl.w	r3, r2, r3
 8000720:	43da      	mvns	r2, r3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	400a      	ands	r2, r1
 8000728:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	68d9      	ldr	r1, [r3, #12]
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	689a      	ldr	r2, [r3, #8]
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	b29b      	uxth	r3, r3
 800073a:	4618      	mov	r0, r3
 800073c:	4603      	mov	r3, r0
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	4403      	add	r3, r0
 8000742:	3b1e      	subs	r3, #30
 8000744:	409a      	lsls	r2, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	430a      	orrs	r2, r1
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	e022      	b.n	8000796 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	6919      	ldr	r1, [r3, #16]
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	b29b      	uxth	r3, r3
 800075c:	461a      	mov	r2, r3
 800075e:	4613      	mov	r3, r2
 8000760:	005b      	lsls	r3, r3, #1
 8000762:	4413      	add	r3, r2
 8000764:	2207      	movs	r2, #7
 8000766:	fa02 f303 	lsl.w	r3, r2, r3
 800076a:	43da      	mvns	r2, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	400a      	ands	r2, r1
 8000772:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	6919      	ldr	r1, [r3, #16]
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	689a      	ldr	r2, [r3, #8]
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	b29b      	uxth	r3, r3
 8000784:	4618      	mov	r0, r3
 8000786:	4603      	mov	r3, r0
 8000788:	005b      	lsls	r3, r3, #1
 800078a:	4403      	add	r3, r0
 800078c:	409a      	lsls	r2, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	430a      	orrs	r2, r1
 8000794:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	685b      	ldr	r3, [r3, #4]
 800079a:	2b06      	cmp	r3, #6
 800079c:	d824      	bhi.n	80007e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	685a      	ldr	r2, [r3, #4]
 80007a8:	4613      	mov	r3, r2
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	4413      	add	r3, r2
 80007ae:	3b05      	subs	r3, #5
 80007b0:	221f      	movs	r2, #31
 80007b2:	fa02 f303 	lsl.w	r3, r2, r3
 80007b6:	43da      	mvns	r2, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	400a      	ands	r2, r1
 80007be:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	4618      	mov	r0, r3
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	685a      	ldr	r2, [r3, #4]
 80007d2:	4613      	mov	r3, r2
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	4413      	add	r3, r2
 80007d8:	3b05      	subs	r3, #5
 80007da:	fa00 f203 	lsl.w	r2, r0, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	430a      	orrs	r2, r1
 80007e4:	635a      	str	r2, [r3, #52]	; 0x34
 80007e6:	e04c      	b.n	8000882 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	2b0c      	cmp	r3, #12
 80007ee:	d824      	bhi.n	800083a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	685a      	ldr	r2, [r3, #4]
 80007fa:	4613      	mov	r3, r2
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	4413      	add	r3, r2
 8000800:	3b23      	subs	r3, #35	; 0x23
 8000802:	221f      	movs	r2, #31
 8000804:	fa02 f303 	lsl.w	r3, r2, r3
 8000808:	43da      	mvns	r2, r3
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	400a      	ands	r2, r1
 8000810:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	b29b      	uxth	r3, r3
 800081e:	4618      	mov	r0, r3
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	685a      	ldr	r2, [r3, #4]
 8000824:	4613      	mov	r3, r2
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	4413      	add	r3, r2
 800082a:	3b23      	subs	r3, #35	; 0x23
 800082c:	fa00 f203 	lsl.w	r2, r0, r3
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	430a      	orrs	r2, r1
 8000836:	631a      	str	r2, [r3, #48]	; 0x30
 8000838:	e023      	b.n	8000882 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	685a      	ldr	r2, [r3, #4]
 8000844:	4613      	mov	r3, r2
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	4413      	add	r3, r2
 800084a:	3b41      	subs	r3, #65	; 0x41
 800084c:	221f      	movs	r2, #31
 800084e:	fa02 f303 	lsl.w	r3, r2, r3
 8000852:	43da      	mvns	r2, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	400a      	ands	r2, r1
 800085a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	b29b      	uxth	r3, r3
 8000868:	4618      	mov	r0, r3
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	685a      	ldr	r2, [r3, #4]
 800086e:	4613      	mov	r3, r2
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	4413      	add	r3, r2
 8000874:	3b41      	subs	r3, #65	; 0x41
 8000876:	fa00 f203 	lsl.w	r2, r0, r3
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	430a      	orrs	r2, r1
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000882:	4b29      	ldr	r3, [pc, #164]	; (8000928 <HAL_ADC_ConfigChannel+0x250>)
 8000884:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a28      	ldr	r2, [pc, #160]	; (800092c <HAL_ADC_ConfigChannel+0x254>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d10f      	bne.n	80008b0 <HAL_ADC_ConfigChannel+0x1d8>
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b12      	cmp	r3, #18
 8000896:	d10b      	bne.n	80008b0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a1d      	ldr	r2, [pc, #116]	; (800092c <HAL_ADC_ConfigChannel+0x254>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d12b      	bne.n	8000912 <HAL_ADC_ConfigChannel+0x23a>
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a1c      	ldr	r2, [pc, #112]	; (8000930 <HAL_ADC_ConfigChannel+0x258>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d003      	beq.n	80008cc <HAL_ADC_ConfigChannel+0x1f4>
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2b11      	cmp	r3, #17
 80008ca:	d122      	bne.n	8000912 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a11      	ldr	r2, [pc, #68]	; (8000930 <HAL_ADC_ConfigChannel+0x258>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d111      	bne.n	8000912 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <HAL_ADC_ConfigChannel+0x25c>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a11      	ldr	r2, [pc, #68]	; (8000938 <HAL_ADC_ConfigChannel+0x260>)
 80008f4:	fba2 2303 	umull	r2, r3, r2, r3
 80008f8:	0c9a      	lsrs	r2, r3, #18
 80008fa:	4613      	mov	r3, r2
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	4413      	add	r3, r2
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000904:	e002      	b.n	800090c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	3b01      	subs	r3, #1
 800090a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d1f9      	bne.n	8000906 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2200      	movs	r2, #0
 8000916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800091a:	2300      	movs	r3, #0
}
 800091c:	4618      	mov	r0, r3
 800091e:	3714      	adds	r7, #20
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	40012300 	.word	0x40012300
 800092c:	40012000 	.word	0x40012000
 8000930:	10000012 	.word	0x10000012
 8000934:	20000118 	.word	0x20000118
 8000938:	431bde83 	.word	0x431bde83

0800093c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000944:	4b79      	ldr	r3, [pc, #484]	; (8000b2c <ADC_Init+0x1f0>)
 8000946:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	685a      	ldr	r2, [r3, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	431a      	orrs	r2, r3
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	685a      	ldr	r2, [r3, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000970:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	6859      	ldr	r1, [r3, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	691b      	ldr	r3, [r3, #16]
 800097c:	021a      	lsls	r2, r3, #8
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	430a      	orrs	r2, r1
 8000984:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	685a      	ldr	r2, [r3, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000994:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	6859      	ldr	r1, [r3, #4]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	689a      	ldr	r2, [r3, #8]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	430a      	orrs	r2, r1
 80009a6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	689a      	ldr	r2, [r3, #8]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80009b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	6899      	ldr	r1, [r3, #8]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	68da      	ldr	r2, [r3, #12]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	430a      	orrs	r2, r1
 80009c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ce:	4a58      	ldr	r2, [pc, #352]	; (8000b30 <ADC_Init+0x1f4>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d022      	beq.n	8000a1a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	689a      	ldr	r2, [r3, #8]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80009e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	6899      	ldr	r1, [r3, #8]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	430a      	orrs	r2, r1
 80009f4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	689a      	ldr	r2, [r3, #8]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000a04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	6899      	ldr	r1, [r3, #8]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	430a      	orrs	r2, r1
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	e00f      	b.n	8000a3a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	689a      	ldr	r2, [r3, #8]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000a28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	689a      	ldr	r2, [r3, #8]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000a38:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	689a      	ldr	r2, [r3, #8]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f022 0202 	bic.w	r2, r2, #2
 8000a48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	6899      	ldr	r1, [r3, #8]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	7e1b      	ldrb	r3, [r3, #24]
 8000a54:	005a      	lsls	r2, r3, #1
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d01b      	beq.n	8000aa0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	685a      	ldr	r2, [r3, #4]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000a76:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	685a      	ldr	r2, [r3, #4]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000a86:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	6859      	ldr	r1, [r3, #4]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a92:	3b01      	subs	r3, #1
 8000a94:	035a      	lsls	r2, r3, #13
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	430a      	orrs	r2, r1
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	e007      	b.n	8000ab0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	685a      	ldr	r2, [r3, #4]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000aae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000abe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	69db      	ldr	r3, [r3, #28]
 8000aca:	3b01      	subs	r3, #1
 8000acc:	051a      	lsls	r2, r3, #20
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	689a      	ldr	r2, [r3, #8]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000ae4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	6899      	ldr	r1, [r3, #8]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000af2:	025a      	lsls	r2, r3, #9
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	430a      	orrs	r2, r1
 8000afa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	689a      	ldr	r2, [r3, #8]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	6899      	ldr	r1, [r3, #8]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	695b      	ldr	r3, [r3, #20]
 8000b16:	029a      	lsls	r2, r3, #10
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	430a      	orrs	r2, r1
 8000b1e:	609a      	str	r2, [r3, #8]
}
 8000b20:	bf00      	nop
 8000b22:	3714      	adds	r7, #20
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	40012300 	.word	0x40012300
 8000b30:	0f000001 	.word	0x0f000001

08000b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <__NVIC_SetPriorityGrouping+0x44>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4a:	68ba      	ldr	r2, [r7, #8]
 8000b4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b50:	4013      	ands	r3, r2
 8000b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b66:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <__NVIC_SetPriorityGrouping+0x44>)
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	60d3      	str	r3, [r2, #12]
}
 8000b6c:	bf00      	nop
 8000b6e:	3714      	adds	r7, #20
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b80:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <__NVIC_GetPriorityGrouping+0x18>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	0a1b      	lsrs	r3, r3, #8
 8000b86:	f003 0307 	and.w	r3, r3, #7
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	6039      	str	r1, [r7, #0]
 8000ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	db0a      	blt.n	8000bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	490c      	ldr	r1, [pc, #48]	; (8000be4 <__NVIC_SetPriority+0x4c>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	0112      	lsls	r2, r2, #4
 8000bb8:	b2d2      	uxtb	r2, r2
 8000bba:	440b      	add	r3, r1
 8000bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc0:	e00a      	b.n	8000bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4908      	ldr	r1, [pc, #32]	; (8000be8 <__NVIC_SetPriority+0x50>)
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	f003 030f 	and.w	r3, r3, #15
 8000bce:	3b04      	subs	r3, #4
 8000bd0:	0112      	lsls	r2, r2, #4
 8000bd2:	b2d2      	uxtb	r2, r2
 8000bd4:	440b      	add	r3, r1
 8000bd6:	761a      	strb	r2, [r3, #24]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000e100 	.word	0xe000e100
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b089      	sub	sp, #36	; 0x24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	f1c3 0307 	rsb	r3, r3, #7
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	bf28      	it	cs
 8000c0a:	2304      	movcs	r3, #4
 8000c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	3304      	adds	r3, #4
 8000c12:	2b06      	cmp	r3, #6
 8000c14:	d902      	bls.n	8000c1c <NVIC_EncodePriority+0x30>
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3b03      	subs	r3, #3
 8000c1a:	e000      	b.n	8000c1e <NVIC_EncodePriority+0x32>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43da      	mvns	r2, r3
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	401a      	ands	r2, r3
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3e:	43d9      	mvns	r1, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	4313      	orrs	r3, r2
         );
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3724      	adds	r7, #36	; 0x24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
	...

08000c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c64:	d301      	bcc.n	8000c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c66:	2301      	movs	r3, #1
 8000c68:	e00f      	b.n	8000c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <SysTick_Config+0x40>)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c72:	210f      	movs	r1, #15
 8000c74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c78:	f7ff ff8e 	bl	8000b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c7c:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <SysTick_Config+0x40>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c82:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <SysTick_Config+0x40>)
 8000c84:	2207      	movs	r2, #7
 8000c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	e000e010 	.word	0xe000e010

08000c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f7ff ff47 	bl	8000b34 <__NVIC_SetPriorityGrouping>
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b086      	sub	sp, #24
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	60b9      	str	r1, [r7, #8]
 8000cb8:	607a      	str	r2, [r7, #4]
 8000cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc0:	f7ff ff5c 	bl	8000b7c <__NVIC_GetPriorityGrouping>
 8000cc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	68b9      	ldr	r1, [r7, #8]
 8000cca:	6978      	ldr	r0, [r7, #20]
 8000ccc:	f7ff ff8e 	bl	8000bec <NVIC_EncodePriority>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff ff5d 	bl	8000b98 <__NVIC_SetPriority>
}
 8000cde:	bf00      	nop
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f7ff ffb0 	bl	8000c54 <SysTick_Config>
 8000cf4:	4603      	mov	r3, r0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d101      	bne.n	8000d10 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	e011      	b.n	8000d34 <HAL_CRC_Init+0x36>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	795b      	ldrb	r3, [r3, #5]
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d105      	bne.n	8000d26 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f005 ff2f 	bl	8006b84 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2202      	movs	r2, #2
 8000d2a:	715a      	strb	r2, [r3, #5]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2201      	movs	r2, #1
 8000d30:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000d32:	2300      	movs	r3, #0
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b089      	sub	sp, #36	; 0x24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
 8000d56:	e165      	b.n	8001024 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d58:	2201      	movs	r2, #1
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	697a      	ldr	r2, [r7, #20]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	f040 8154 	bne.w	800101e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d003      	beq.n	8000d86 <HAL_GPIO_Init+0x4a>
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	2b12      	cmp	r3, #18
 8000d84:	d123      	bne.n	8000dce <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	08da      	lsrs	r2, r3, #3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	3208      	adds	r2, #8
 8000d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	220f      	movs	r2, #15
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43db      	mvns	r3, r3
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4013      	ands	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	691a      	ldr	r2, [r3, #16]
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	f003 0307 	and.w	r3, r3, #7
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	08da      	lsrs	r2, r3, #3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3208      	adds	r2, #8
 8000dc8:	69b9      	ldr	r1, [r7, #24]
 8000dca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	2203      	movs	r2, #3
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43db      	mvns	r3, r3
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	4013      	ands	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f003 0203 	and.w	r2, r3, #3
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d00b      	beq.n	8000e22 <HAL_GPIO_Init+0xe6>
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d007      	beq.n	8000e22 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e16:	2b11      	cmp	r3, #17
 8000e18:	d003      	beq.n	8000e22 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	2b12      	cmp	r3, #18
 8000e20:	d130      	bne.n	8000e84 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	43db      	mvns	r3, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4013      	ands	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	68da      	ldr	r2, [r3, #12]
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e58:	2201      	movs	r2, #1
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	43db      	mvns	r3, r3
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4013      	ands	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	091b      	lsrs	r3, r3, #4
 8000e6e:	f003 0201 	and.w	r2, r3, #1
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	2203      	movs	r2, #3
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	689a      	ldr	r2, [r3, #8]
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	f000 80ae 	beq.w	800101e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	4b5c      	ldr	r3, [pc, #368]	; (8001038 <HAL_GPIO_Init+0x2fc>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eca:	4a5b      	ldr	r2, [pc, #364]	; (8001038 <HAL_GPIO_Init+0x2fc>)
 8000ecc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ed2:	4b59      	ldr	r3, [pc, #356]	; (8001038 <HAL_GPIO_Init+0x2fc>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ede:	4a57      	ldr	r2, [pc, #348]	; (800103c <HAL_GPIO_Init+0x300>)
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	089b      	lsrs	r3, r3, #2
 8000ee4:	3302      	adds	r3, #2
 8000ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	f003 0303 	and.w	r3, r3, #3
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	220f      	movs	r2, #15
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4013      	ands	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a4e      	ldr	r2, [pc, #312]	; (8001040 <HAL_GPIO_Init+0x304>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d025      	beq.n	8000f56 <HAL_GPIO_Init+0x21a>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a4d      	ldr	r2, [pc, #308]	; (8001044 <HAL_GPIO_Init+0x308>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d01f      	beq.n	8000f52 <HAL_GPIO_Init+0x216>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a4c      	ldr	r2, [pc, #304]	; (8001048 <HAL_GPIO_Init+0x30c>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d019      	beq.n	8000f4e <HAL_GPIO_Init+0x212>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a4b      	ldr	r2, [pc, #300]	; (800104c <HAL_GPIO_Init+0x310>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d013      	beq.n	8000f4a <HAL_GPIO_Init+0x20e>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a4a      	ldr	r2, [pc, #296]	; (8001050 <HAL_GPIO_Init+0x314>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d00d      	beq.n	8000f46 <HAL_GPIO_Init+0x20a>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a49      	ldr	r2, [pc, #292]	; (8001054 <HAL_GPIO_Init+0x318>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d007      	beq.n	8000f42 <HAL_GPIO_Init+0x206>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a48      	ldr	r2, [pc, #288]	; (8001058 <HAL_GPIO_Init+0x31c>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d101      	bne.n	8000f3e <HAL_GPIO_Init+0x202>
 8000f3a:	2306      	movs	r3, #6
 8000f3c:	e00c      	b.n	8000f58 <HAL_GPIO_Init+0x21c>
 8000f3e:	2307      	movs	r3, #7
 8000f40:	e00a      	b.n	8000f58 <HAL_GPIO_Init+0x21c>
 8000f42:	2305      	movs	r3, #5
 8000f44:	e008      	b.n	8000f58 <HAL_GPIO_Init+0x21c>
 8000f46:	2304      	movs	r3, #4
 8000f48:	e006      	b.n	8000f58 <HAL_GPIO_Init+0x21c>
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e004      	b.n	8000f58 <HAL_GPIO_Init+0x21c>
 8000f4e:	2302      	movs	r3, #2
 8000f50:	e002      	b.n	8000f58 <HAL_GPIO_Init+0x21c>
 8000f52:	2301      	movs	r3, #1
 8000f54:	e000      	b.n	8000f58 <HAL_GPIO_Init+0x21c>
 8000f56:	2300      	movs	r3, #0
 8000f58:	69fa      	ldr	r2, [r7, #28]
 8000f5a:	f002 0203 	and.w	r2, r2, #3
 8000f5e:	0092      	lsls	r2, r2, #2
 8000f60:	4093      	lsls	r3, r2
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f68:	4934      	ldr	r1, [pc, #208]	; (800103c <HAL_GPIO_Init+0x300>)
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	089b      	lsrs	r3, r3, #2
 8000f6e:	3302      	adds	r3, #2
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f76:	4b39      	ldr	r3, [pc, #228]	; (800105c <HAL_GPIO_Init+0x320>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4013      	ands	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f9a:	4a30      	ldr	r2, [pc, #192]	; (800105c <HAL_GPIO_Init+0x320>)
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fa0:	4b2e      	ldr	r3, [pc, #184]	; (800105c <HAL_GPIO_Init+0x320>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d003      	beq.n	8000fc4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fc4:	4a25      	ldr	r2, [pc, #148]	; (800105c <HAL_GPIO_Init+0x320>)
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fca:	4b24      	ldr	r3, [pc, #144]	; (800105c <HAL_GPIO_Init+0x320>)
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fee:	4a1b      	ldr	r2, [pc, #108]	; (800105c <HAL_GPIO_Init+0x320>)
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ff4:	4b19      	ldr	r3, [pc, #100]	; (800105c <HAL_GPIO_Init+0x320>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d003      	beq.n	8001018 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	4313      	orrs	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001018:	4a10      	ldr	r2, [pc, #64]	; (800105c <HAL_GPIO_Init+0x320>)
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3301      	adds	r3, #1
 8001022:	61fb      	str	r3, [r7, #28]
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	2b0f      	cmp	r3, #15
 8001028:	f67f ae96 	bls.w	8000d58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800102c:	bf00      	nop
 800102e:	3724      	adds	r7, #36	; 0x24
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	40023800 	.word	0x40023800
 800103c:	40013800 	.word	0x40013800
 8001040:	40020000 	.word	0x40020000
 8001044:	40020400 	.word	0x40020400
 8001048:	40020800 	.word	0x40020800
 800104c:	40020c00 	.word	0x40020c00
 8001050:	40021000 	.word	0x40021000
 8001054:	40021400 	.word	0x40021400
 8001058:	40021800 	.word	0x40021800
 800105c:	40013c00 	.word	0x40013c00

08001060 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	460b      	mov	r3, r1
 800106a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	691a      	ldr	r2, [r3, #16]
 8001070:	887b      	ldrh	r3, [r7, #2]
 8001072:	4013      	ands	r3, r2
 8001074:	2b00      	cmp	r3, #0
 8001076:	d002      	beq.n	800107e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001078:	2301      	movs	r3, #1
 800107a:	73fb      	strb	r3, [r7, #15]
 800107c:	e001      	b.n	8001082 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800107e:	2300      	movs	r3, #0
 8001080:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001082:	7bfb      	ldrb	r3, [r7, #15]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	807b      	strh	r3, [r7, #2]
 800109c:	4613      	mov	r3, r2
 800109e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010a0:	787b      	ldrb	r3, [r7, #1]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010a6:	887a      	ldrh	r2, [r7, #2]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010ac:	e003      	b.n	80010b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010ae:	887b      	ldrh	r3, [r7, #2]
 80010b0:	041a      	lsls	r2, r3, #16
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	619a      	str	r2, [r3, #24]
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
	...

080010c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d101      	bne.n	80010d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e10f      	b.n	80012f6 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d106      	bne.n	80010f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f006 f952 	bl	8007394 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2224      	movs	r2, #36	; 0x24
 80010f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f022 0201 	bic.w	r2, r2, #1
 8001106:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001108:	f000 feb6 	bl	8001e78 <HAL_RCC_GetPCLK1Freq>
 800110c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	4a7b      	ldr	r2, [pc, #492]	; (8001300 <HAL_I2C_Init+0x23c>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d807      	bhi.n	8001128 <HAL_I2C_Init+0x64>
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4a7a      	ldr	r2, [pc, #488]	; (8001304 <HAL_I2C_Init+0x240>)
 800111c:	4293      	cmp	r3, r2
 800111e:	bf94      	ite	ls
 8001120:	2301      	movls	r3, #1
 8001122:	2300      	movhi	r3, #0
 8001124:	b2db      	uxtb	r3, r3
 8001126:	e006      	b.n	8001136 <HAL_I2C_Init+0x72>
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4a77      	ldr	r2, [pc, #476]	; (8001308 <HAL_I2C_Init+0x244>)
 800112c:	4293      	cmp	r3, r2
 800112e:	bf94      	ite	ls
 8001130:	2301      	movls	r3, #1
 8001132:	2300      	movhi	r3, #0
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e0db      	b.n	80012f6 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	4a72      	ldr	r2, [pc, #456]	; (800130c <HAL_I2C_Init+0x248>)
 8001142:	fba2 2303 	umull	r2, r3, r2, r3
 8001146:	0c9b      	lsrs	r3, r3, #18
 8001148:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	68ba      	ldr	r2, [r7, #8]
 800115a:	430a      	orrs	r2, r1
 800115c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	6a1b      	ldr	r3, [r3, #32]
 8001164:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	4a64      	ldr	r2, [pc, #400]	; (8001300 <HAL_I2C_Init+0x23c>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d802      	bhi.n	8001178 <HAL_I2C_Init+0xb4>
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	3301      	adds	r3, #1
 8001176:	e009      	b.n	800118c <HAL_I2C_Init+0xc8>
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800117e:	fb02 f303 	mul.w	r3, r2, r3
 8001182:	4a63      	ldr	r2, [pc, #396]	; (8001310 <HAL_I2C_Init+0x24c>)
 8001184:	fba2 2303 	umull	r2, r3, r2, r3
 8001188:	099b      	lsrs	r3, r3, #6
 800118a:	3301      	adds	r3, #1
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	6812      	ldr	r2, [r2, #0]
 8001190:	430b      	orrs	r3, r1
 8001192:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800119e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	4956      	ldr	r1, [pc, #344]	; (8001300 <HAL_I2C_Init+0x23c>)
 80011a8:	428b      	cmp	r3, r1
 80011aa:	d80d      	bhi.n	80011c8 <HAL_I2C_Init+0x104>
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	1e59      	subs	r1, r3, #1
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80011ba:	3301      	adds	r3, #1
 80011bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011c0:	2b04      	cmp	r3, #4
 80011c2:	bf38      	it	cc
 80011c4:	2304      	movcc	r3, #4
 80011c6:	e04f      	b.n	8001268 <HAL_I2C_Init+0x1a4>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d111      	bne.n	80011f4 <HAL_I2C_Init+0x130>
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	1e58      	subs	r0, r3, #1
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6859      	ldr	r1, [r3, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	440b      	add	r3, r1
 80011de:	fbb0 f3f3 	udiv	r3, r0, r3
 80011e2:	3301      	adds	r3, #1
 80011e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	bf0c      	ite	eq
 80011ec:	2301      	moveq	r3, #1
 80011ee:	2300      	movne	r3, #0
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	e012      	b.n	800121a <HAL_I2C_Init+0x156>
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	1e58      	subs	r0, r3, #1
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6859      	ldr	r1, [r3, #4]
 80011fc:	460b      	mov	r3, r1
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	440b      	add	r3, r1
 8001202:	0099      	lsls	r1, r3, #2
 8001204:	440b      	add	r3, r1
 8001206:	fbb0 f3f3 	udiv	r3, r0, r3
 800120a:	3301      	adds	r3, #1
 800120c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001210:	2b00      	cmp	r3, #0
 8001212:	bf0c      	ite	eq
 8001214:	2301      	moveq	r3, #1
 8001216:	2300      	movne	r3, #0
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <HAL_I2C_Init+0x15e>
 800121e:	2301      	movs	r3, #1
 8001220:	e022      	b.n	8001268 <HAL_I2C_Init+0x1a4>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d10e      	bne.n	8001248 <HAL_I2C_Init+0x184>
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	1e58      	subs	r0, r3, #1
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6859      	ldr	r1, [r3, #4]
 8001232:	460b      	mov	r3, r1
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	440b      	add	r3, r1
 8001238:	fbb0 f3f3 	udiv	r3, r0, r3
 800123c:	3301      	adds	r3, #1
 800123e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001246:	e00f      	b.n	8001268 <HAL_I2C_Init+0x1a4>
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	1e58      	subs	r0, r3, #1
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6859      	ldr	r1, [r3, #4]
 8001250:	460b      	mov	r3, r1
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	440b      	add	r3, r1
 8001256:	0099      	lsls	r1, r3, #2
 8001258:	440b      	add	r3, r1
 800125a:	fbb0 f3f3 	udiv	r3, r0, r3
 800125e:	3301      	adds	r3, #1
 8001260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001264:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001268:	6879      	ldr	r1, [r7, #4]
 800126a:	6809      	ldr	r1, [r1, #0]
 800126c:	4313      	orrs	r3, r2
 800126e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69da      	ldr	r2, [r3, #28]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a1b      	ldr	r3, [r3, #32]
 8001282:	431a      	orrs	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	430a      	orrs	r2, r1
 800128a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001296:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	6911      	ldr	r1, [r2, #16]
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	68d2      	ldr	r2, [r2, #12]
 80012a2:	4311      	orrs	r1, r2
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	6812      	ldr	r2, [r2, #0]
 80012a8:	430b      	orrs	r3, r1
 80012aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	695a      	ldr	r2, [r3, #20]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	431a      	orrs	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	430a      	orrs	r2, r1
 80012c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f042 0201 	orr.w	r2, r2, #1
 80012d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2220      	movs	r2, #32
 80012e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	000186a0 	.word	0x000186a0
 8001304:	001e847f 	.word	0x001e847f
 8001308:	003d08ff 	.word	0x003d08ff
 800130c:	431bde83 	.word	0x431bde83
 8001310:	10624dd3 	.word	0x10624dd3

08001314 <HAL_NOR_Init>:
  * @param  Timing pointer to NOR control timing structure 
  * @param  ExtTiming pointer to NOR extended mode timing structure    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
  /* Check the NOR handle parameter */
  if(hnor == NULL)
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <HAL_NOR_Init+0x16>
  {
     return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e043      	b.n	80013b2 <HAL_NOR_Init+0x9e>
  }
  
  if(hnor->State == HAL_NOR_STATE_RESET)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	d106      	bne.n	8001344 <HAL_NOR_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2200      	movs	r2, #0
 800133a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 800133e:	68f8      	ldr	r0, [r7, #12]
 8001340:	f005 fe7e 	bl	8007040 <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }
  
  /* Initialize NOR control Interface */
  FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	3308      	adds	r3, #8
 800134c:	4619      	mov	r1, r3
 800134e:	4610      	mov	r0, r2
 8001350:	f002 ff00 	bl	8004154 <FSMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank); 
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	6818      	ldr	r0, [r3, #0]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	461a      	mov	r2, r3
 800135e:	68b9      	ldr	r1, [r7, #8]
 8001360:	f002 ff68 	bl	8004234 <FSMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	6858      	ldr	r0, [r3, #4]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	689a      	ldr	r2, [r3, #8]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001370:	6879      	ldr	r1, [r7, #4]
 8001372:	f002 ffb3 	bl	80042dc <FSMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	6892      	ldr	r2, [r2, #8]
 800137e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	6892      	ldr	r2, [r2, #8]
 800138a:	f041 0101 	orr.w	r1, r1, #1
 800138e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d103      	bne.n	80013a2 <HAL_NOR_Init+0x8e>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 800139a:	4b08      	ldr	r3, [pc, #32]	; (80013bc <HAL_NOR_Init+0xa8>)
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	e002      	b.n	80013a8 <HAL_NOR_Init+0x94>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_NOR_Init+0xa8>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	601a      	str	r2, [r3, #0]
  }

  /* Check the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY; 
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2201      	movs	r2, #1
 80013ac:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  return HAL_OK;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	200001fc 	.word	0x200001fc

080013c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80013c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c2:	b08f      	sub	sp, #60	; 0x3c
 80013c4:	af0a      	add	r7, sp, #40	; 0x28
 80013c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d101      	bne.n	80013d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e116      	b.n	8001600 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d106      	bne.n	80013f2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f006 fd4f 	bl	8007e90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2203      	movs	r2, #3
 80013f6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001402:	2b00      	cmp	r3, #0
 8001404:	d102      	bne.n	800140c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f003 fd75 	bl	8004f00 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	603b      	str	r3, [r7, #0]
 800141c:	687e      	ldr	r6, [r7, #4]
 800141e:	466d      	mov	r5, sp
 8001420:	f106 0410 	add.w	r4, r6, #16
 8001424:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001426:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001428:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800142a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800142c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001430:	e885 0003 	stmia.w	r5, {r0, r1}
 8001434:	1d33      	adds	r3, r6, #4
 8001436:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001438:	6838      	ldr	r0, [r7, #0]
 800143a:	f003 fcef 	bl	8004e1c <USB_CoreInit>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d005      	beq.n	8001450 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2202      	movs	r2, #2
 8001448:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e0d7      	b.n	8001600 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2100      	movs	r1, #0
 8001456:	4618      	mov	r0, r3
 8001458:	f003 fd63 	bl	8004f22 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800145c:	2300      	movs	r3, #0
 800145e:	73fb      	strb	r3, [r7, #15]
 8001460:	e04a      	b.n	80014f8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001462:	7bfa      	ldrb	r2, [r7, #15]
 8001464:	6879      	ldr	r1, [r7, #4]
 8001466:	4613      	mov	r3, r2
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	1a9b      	subs	r3, r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	440b      	add	r3, r1
 8001470:	333d      	adds	r3, #61	; 0x3d
 8001472:	2201      	movs	r2, #1
 8001474:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001476:	7bfa      	ldrb	r2, [r7, #15]
 8001478:	6879      	ldr	r1, [r7, #4]
 800147a:	4613      	mov	r3, r2
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	1a9b      	subs	r3, r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	440b      	add	r3, r1
 8001484:	333c      	adds	r3, #60	; 0x3c
 8001486:	7bfa      	ldrb	r2, [r7, #15]
 8001488:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800148a:	7bfa      	ldrb	r2, [r7, #15]
 800148c:	7bfb      	ldrb	r3, [r7, #15]
 800148e:	b298      	uxth	r0, r3
 8001490:	6879      	ldr	r1, [r7, #4]
 8001492:	4613      	mov	r3, r2
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	1a9b      	subs	r3, r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	440b      	add	r3, r1
 800149c:	3342      	adds	r3, #66	; 0x42
 800149e:	4602      	mov	r2, r0
 80014a0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014a2:	7bfa      	ldrb	r2, [r7, #15]
 80014a4:	6879      	ldr	r1, [r7, #4]
 80014a6:	4613      	mov	r3, r2
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	1a9b      	subs	r3, r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	440b      	add	r3, r1
 80014b0:	333f      	adds	r3, #63	; 0x3f
 80014b2:	2200      	movs	r2, #0
 80014b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80014b6:	7bfa      	ldrb	r2, [r7, #15]
 80014b8:	6879      	ldr	r1, [r7, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	1a9b      	subs	r3, r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	440b      	add	r3, r1
 80014c4:	3344      	adds	r3, #68	; 0x44
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80014ca:	7bfa      	ldrb	r2, [r7, #15]
 80014cc:	6879      	ldr	r1, [r7, #4]
 80014ce:	4613      	mov	r3, r2
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	1a9b      	subs	r3, r3, r2
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	440b      	add	r3, r1
 80014d8:	3348      	adds	r3, #72	; 0x48
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80014de:	7bfa      	ldrb	r2, [r7, #15]
 80014e0:	6879      	ldr	r1, [r7, #4]
 80014e2:	4613      	mov	r3, r2
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	1a9b      	subs	r3, r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	440b      	add	r3, r1
 80014ec:	3350      	adds	r3, #80	; 0x50
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014f2:	7bfb      	ldrb	r3, [r7, #15]
 80014f4:	3301      	adds	r3, #1
 80014f6:	73fb      	strb	r3, [r7, #15]
 80014f8:	7bfa      	ldrb	r2, [r7, #15]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d3af      	bcc.n	8001462 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001502:	2300      	movs	r3, #0
 8001504:	73fb      	strb	r3, [r7, #15]
 8001506:	e044      	b.n	8001592 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001508:	7bfa      	ldrb	r2, [r7, #15]
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	4613      	mov	r3, r2
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	1a9b      	subs	r3, r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	440b      	add	r3, r1
 8001516:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800151a:	2200      	movs	r2, #0
 800151c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800151e:	7bfa      	ldrb	r2, [r7, #15]
 8001520:	6879      	ldr	r1, [r7, #4]
 8001522:	4613      	mov	r3, r2
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	1a9b      	subs	r3, r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	440b      	add	r3, r1
 800152c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001530:	7bfa      	ldrb	r2, [r7, #15]
 8001532:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001534:	7bfa      	ldrb	r2, [r7, #15]
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	4613      	mov	r3, r2
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	1a9b      	subs	r3, r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	440b      	add	r3, r1
 8001542:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001546:	2200      	movs	r2, #0
 8001548:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800154a:	7bfa      	ldrb	r2, [r7, #15]
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	4613      	mov	r3, r2
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	1a9b      	subs	r3, r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	440b      	add	r3, r1
 8001558:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001560:	7bfa      	ldrb	r2, [r7, #15]
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	4613      	mov	r3, r2
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	1a9b      	subs	r3, r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	440b      	add	r3, r1
 800156e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001576:	7bfa      	ldrb	r2, [r7, #15]
 8001578:	6879      	ldr	r1, [r7, #4]
 800157a:	4613      	mov	r3, r2
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	1a9b      	subs	r3, r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	440b      	add	r3, r1
 8001584:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	3301      	adds	r3, #1
 8001590:	73fb      	strb	r3, [r7, #15]
 8001592:	7bfa      	ldrb	r2, [r7, #15]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	429a      	cmp	r2, r3
 800159a:	d3b5      	bcc.n	8001508 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	603b      	str	r3, [r7, #0]
 80015a2:	687e      	ldr	r6, [r7, #4]
 80015a4:	466d      	mov	r5, sp
 80015a6:	f106 0410 	add.w	r4, r6, #16
 80015aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80015ba:	1d33      	adds	r3, r6, #4
 80015bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015be:	6838      	ldr	r0, [r7, #0]
 80015c0:	f003 fcda 	bl	8004f78 <USB_DevInit>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d005      	beq.n	80015d6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2202      	movs	r2, #2
 80015ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e014      	b.n	8001600 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2201      	movs	r2, #1
 80015e2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d102      	bne.n	80015f4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 fa58 	bl	8001aa4 <HAL_PCDEx_ActivateLPM>
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f004 fbe7 	bl	8005dcc <USB_DevDisconnect>

  return HAL_OK;
 80015fe:	2300      	movs	r3, #0
}
 8001600:	4618      	mov	r0, r3
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001608 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800161c:	2b01      	cmp	r3, #1
 800161e:	d101      	bne.n	8001624 <HAL_PCD_Start+0x1c>
 8001620:	2302      	movs	r3, #2
 8001622:	e020      	b.n	8001666 <HAL_PCD_Start+0x5e>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2201      	movs	r2, #1
 8001628:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001630:	2b01      	cmp	r3, #1
 8001632:	d109      	bne.n	8001648 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001638:	2b01      	cmp	r3, #1
 800163a:	d005      	beq.n	8001648 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001640:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f004 fba5 	bl	8005d9c <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f003 fc41 	bl	8004ede <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b084      	sub	sp, #16
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
 8001676:	4608      	mov	r0, r1
 8001678:	4611      	mov	r1, r2
 800167a:	461a      	mov	r2, r3
 800167c:	4603      	mov	r3, r0
 800167e:	70fb      	strb	r3, [r7, #3]
 8001680:	460b      	mov	r3, r1
 8001682:	803b      	strh	r3, [r7, #0]
 8001684:	4613      	mov	r3, r2
 8001686:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001688:	2300      	movs	r3, #0
 800168a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800168c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001690:	2b00      	cmp	r3, #0
 8001692:	da0f      	bge.n	80016b4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001694:	78fb      	ldrb	r3, [r7, #3]
 8001696:	f003 020f 	and.w	r2, r3, #15
 800169a:	4613      	mov	r3, r2
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	1a9b      	subs	r3, r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	3338      	adds	r3, #56	; 0x38
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	4413      	add	r3, r2
 80016a8:	3304      	adds	r3, #4
 80016aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2201      	movs	r2, #1
 80016b0:	705a      	strb	r2, [r3, #1]
 80016b2:	e00f      	b.n	80016d4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016b4:	78fb      	ldrb	r3, [r7, #3]
 80016b6:	f003 020f 	and.w	r2, r3, #15
 80016ba:	4613      	mov	r3, r2
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	1a9b      	subs	r3, r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	4413      	add	r3, r2
 80016ca:	3304      	adds	r3, #4
 80016cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2200      	movs	r2, #0
 80016d2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80016d4:	78fb      	ldrb	r3, [r7, #3]
 80016d6:	f003 030f 	and.w	r3, r3, #15
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80016e0:	883a      	ldrh	r2, [r7, #0]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	78ba      	ldrb	r2, [r7, #2]
 80016ea:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	785b      	ldrb	r3, [r3, #1]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d004      	beq.n	80016fe <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80016fe:	78bb      	ldrb	r3, [r7, #2]
 8001700:	2b02      	cmp	r3, #2
 8001702:	d102      	bne.n	800170a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2200      	movs	r2, #0
 8001708:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001710:	2b01      	cmp	r3, #1
 8001712:	d101      	bne.n	8001718 <HAL_PCD_EP_Open+0xaa>
 8001714:	2302      	movs	r3, #2
 8001716:	e00e      	b.n	8001736 <HAL_PCD_EP_Open+0xc8>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2201      	movs	r2, #1
 800171c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	68f9      	ldr	r1, [r7, #12]
 8001726:	4618      	mov	r0, r3
 8001728:	f003 fdf3 	bl	8005312 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001734:	7afb      	ldrb	r3, [r7, #11]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b084      	sub	sp, #16
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
 8001746:	460b      	mov	r3, r1
 8001748:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800174a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800174e:	2b00      	cmp	r3, #0
 8001750:	da0f      	bge.n	8001772 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001752:	78fb      	ldrb	r3, [r7, #3]
 8001754:	f003 020f 	and.w	r2, r3, #15
 8001758:	4613      	mov	r3, r2
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	1a9b      	subs	r3, r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	3338      	adds	r3, #56	; 0x38
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	3304      	adds	r3, #4
 8001768:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2201      	movs	r2, #1
 800176e:	705a      	strb	r2, [r3, #1]
 8001770:	e00f      	b.n	8001792 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001772:	78fb      	ldrb	r3, [r7, #3]
 8001774:	f003 020f 	and.w	r2, r3, #15
 8001778:	4613      	mov	r3, r2
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	1a9b      	subs	r3, r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	4413      	add	r3, r2
 8001788:	3304      	adds	r3, #4
 800178a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2200      	movs	r2, #0
 8001790:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001792:	78fb      	ldrb	r3, [r7, #3]
 8001794:	f003 030f 	and.w	r3, r3, #15
 8001798:	b2da      	uxtb	r2, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d101      	bne.n	80017ac <HAL_PCD_EP_Close+0x6e>
 80017a8:	2302      	movs	r3, #2
 80017aa:	e00e      	b.n	80017ca <HAL_PCD_EP_Close+0x8c>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	68f9      	ldr	r1, [r7, #12]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f003 fe30 	bl	8005420 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b086      	sub	sp, #24
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	60f8      	str	r0, [r7, #12]
 80017da:	607a      	str	r2, [r7, #4]
 80017dc:	603b      	str	r3, [r7, #0]
 80017de:	460b      	mov	r3, r1
 80017e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017e2:	7afb      	ldrb	r3, [r7, #11]
 80017e4:	f003 020f 	and.w	r2, r3, #15
 80017e8:	4613      	mov	r3, r2
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	1a9b      	subs	r3, r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	4413      	add	r3, r2
 80017f8:	3304      	adds	r3, #4
 80017fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	2200      	movs	r2, #0
 800180c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	2200      	movs	r2, #0
 8001812:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001814:	7afb      	ldrb	r3, [r7, #11]
 8001816:	f003 030f 	and.w	r3, r3, #15
 800181a:	b2da      	uxtb	r2, r3
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	691b      	ldr	r3, [r3, #16]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d102      	bne.n	800182e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800182e:	7afb      	ldrb	r3, [r7, #11]
 8001830:	f003 030f 	and.w	r3, r3, #15
 8001834:	2b00      	cmp	r3, #0
 8001836:	d109      	bne.n	800184c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	6818      	ldr	r0, [r3, #0]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	b2db      	uxtb	r3, r3
 8001842:	461a      	mov	r2, r3
 8001844:	6979      	ldr	r1, [r7, #20]
 8001846:	f004 f8b3 	bl	80059b0 <USB_EP0StartXfer>
 800184a:	e008      	b.n	800185e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6818      	ldr	r0, [r3, #0]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	b2db      	uxtb	r3, r3
 8001856:	461a      	mov	r2, r3
 8001858:	6979      	ldr	r1, [r7, #20]
 800185a:	f003 fe65 	bl	8005528 <USB_EPStartXfer>
  }

  return HAL_OK;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	460b      	mov	r3, r1
 8001872:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001874:	78fb      	ldrb	r3, [r7, #3]
 8001876:	f003 020f 	and.w	r2, r3, #15
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	4613      	mov	r3, r2
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	1a9b      	subs	r3, r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	440b      	add	r3, r1
 8001886:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800188a:	681b      	ldr	r3, [r3, #0]
}
 800188c:	4618      	mov	r0, r3
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	607a      	str	r2, [r7, #4]
 80018a2:	603b      	str	r3, [r7, #0]
 80018a4:	460b      	mov	r3, r1
 80018a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018a8:	7afb      	ldrb	r3, [r7, #11]
 80018aa:	f003 020f 	and.w	r2, r3, #15
 80018ae:	4613      	mov	r3, r2
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	1a9b      	subs	r3, r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	3338      	adds	r3, #56	; 0x38
 80018b8:	68fa      	ldr	r2, [r7, #12]
 80018ba:	4413      	add	r3, r2
 80018bc:	3304      	adds	r3, #4
 80018be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	2200      	movs	r2, #0
 80018d0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	2201      	movs	r2, #1
 80018d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018d8:	7afb      	ldrb	r3, [r7, #11]
 80018da:	f003 030f 	and.w	r3, r3, #15
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d102      	bne.n	80018f2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80018f2:	7afb      	ldrb	r3, [r7, #11]
 80018f4:	f003 030f 	and.w	r3, r3, #15
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d109      	bne.n	8001910 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6818      	ldr	r0, [r3, #0]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	b2db      	uxtb	r3, r3
 8001906:	461a      	mov	r2, r3
 8001908:	6979      	ldr	r1, [r7, #20]
 800190a:	f004 f851 	bl	80059b0 <USB_EP0StartXfer>
 800190e:	e008      	b.n	8001922 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6818      	ldr	r0, [r3, #0]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	b2db      	uxtb	r3, r3
 800191a:	461a      	mov	r2, r3
 800191c:	6979      	ldr	r1, [r7, #20]
 800191e:	f003 fe03 	bl	8005528 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	460b      	mov	r3, r1
 8001936:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001938:	78fb      	ldrb	r3, [r7, #3]
 800193a:	f003 020f 	and.w	r2, r3, #15
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	429a      	cmp	r2, r3
 8001944:	d901      	bls.n	800194a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e050      	b.n	80019ec <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800194a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800194e:	2b00      	cmp	r3, #0
 8001950:	da0f      	bge.n	8001972 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001952:	78fb      	ldrb	r3, [r7, #3]
 8001954:	f003 020f 	and.w	r2, r3, #15
 8001958:	4613      	mov	r3, r2
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	1a9b      	subs	r3, r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	3338      	adds	r3, #56	; 0x38
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	3304      	adds	r3, #4
 8001968:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2201      	movs	r2, #1
 800196e:	705a      	strb	r2, [r3, #1]
 8001970:	e00d      	b.n	800198e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001972:	78fa      	ldrb	r2, [r7, #3]
 8001974:	4613      	mov	r3, r2
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	1a9b      	subs	r3, r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	4413      	add	r3, r2
 8001984:	3304      	adds	r3, #4
 8001986:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2200      	movs	r2, #0
 800198c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2201      	movs	r2, #1
 8001992:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001994:	78fb      	ldrb	r3, [r7, #3]
 8001996:	f003 030f 	and.w	r3, r3, #15
 800199a:	b2da      	uxtb	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d101      	bne.n	80019ae <HAL_PCD_EP_SetStall+0x82>
 80019aa:	2302      	movs	r3, #2
 80019ac:	e01e      	b.n	80019ec <HAL_PCD_EP_SetStall+0xc0>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2201      	movs	r2, #1
 80019b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	68f9      	ldr	r1, [r7, #12]
 80019bc:	4618      	mov	r0, r3
 80019be:	f004 f97f 	bl	8005cc0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019c2:	78fb      	ldrb	r3, [r7, #3]
 80019c4:	f003 030f 	and.w	r3, r3, #15
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d10a      	bne.n	80019e2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6818      	ldr	r0, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	b2d9      	uxtb	r1, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80019dc:	461a      	mov	r2, r3
 80019de:	f004 fa0d 	bl	8005dfc <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3710      	adds	r7, #16
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	460b      	mov	r3, r1
 80019fe:	70fb      	strb	r3, [r7, #3]
 8001a00:	4613      	mov	r3, r2
 8001a02:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8001a0c:	78fb      	ldrb	r3, [r7, #3]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d107      	bne.n	8001a22 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001a12:	883b      	ldrh	r3, [r7, #0]
 8001a14:	0419      	lsls	r1, r3, #16
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68ba      	ldr	r2, [r7, #8]
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	629a      	str	r2, [r3, #40]	; 0x28
 8001a20:	e028      	b.n	8001a74 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a28:	0c1b      	lsrs	r3, r3, #16
 8001a2a:	68ba      	ldr	r2, [r7, #8]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001a30:	2300      	movs	r3, #0
 8001a32:	73fb      	strb	r3, [r7, #15]
 8001a34:	e00d      	b.n	8001a52 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
 8001a3c:	3340      	adds	r3, #64	; 0x40
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4413      	add	r3, r2
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	0c1b      	lsrs	r3, r3, #16
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	4413      	add	r3, r2
 8001a4a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	73fb      	strb	r3, [r7, #15]
 8001a52:	7bfa      	ldrb	r2, [r7, #15]
 8001a54:	78fb      	ldrb	r3, [r7, #3]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d3ec      	bcc.n	8001a36 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001a5c:	883b      	ldrh	r3, [r7, #0]
 8001a5e:	0418      	lsls	r0, r3, #16
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6819      	ldr	r1, [r3, #0]
 8001a64:	78fb      	ldrb	r3, [r7, #3]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	68ba      	ldr	r2, [r7, #8]
 8001a6a:	4302      	orrs	r2, r0
 8001a6c:	3340      	adds	r3, #64	; 0x40
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	440b      	add	r3, r1
 8001a72:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b083      	sub	sp, #12
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	887a      	ldrh	r2, [r7, #2]
 8001a94:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad6:	f043 0303 	orr.w	r3, r3, #3
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e0ca      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b00:	4b67      	ldr	r3, [pc, #412]	; (8001ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 030f 	and.w	r3, r3, #15
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d90c      	bls.n	8001b28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b0e:	4b64      	ldr	r3, [pc, #400]	; (8001ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	b2d2      	uxtb	r2, r2
 8001b14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b16:	4b62      	ldr	r3, [pc, #392]	; (8001ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d001      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e0b6      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d020      	beq.n	8001b76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d005      	beq.n	8001b4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b40:	4b58      	ldr	r3, [pc, #352]	; (8001ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	4a57      	ldr	r2, [pc, #348]	; (8001ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0308 	and.w	r3, r3, #8
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d005      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b58:	4b52      	ldr	r3, [pc, #328]	; (8001ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	4a51      	ldr	r2, [pc, #324]	; (8001ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b64:	4b4f      	ldr	r3, [pc, #316]	; (8001ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	494c      	ldr	r1, [pc, #304]	; (8001ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d044      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d107      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8a:	4b46      	ldr	r3, [pc, #280]	; (8001ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d119      	bne.n	8001bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e07d      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d003      	beq.n	8001baa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ba6:	2b03      	cmp	r3, #3
 8001ba8:	d107      	bne.n	8001bba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001baa:	4b3e      	ldr	r3, [pc, #248]	; (8001ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d109      	bne.n	8001bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e06d      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bba:	4b3a      	ldr	r3, [pc, #232]	; (8001ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e065      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bca:	4b36      	ldr	r3, [pc, #216]	; (8001ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f023 0203 	bic.w	r2, r3, #3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	4933      	ldr	r1, [pc, #204]	; (8001ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bdc:	f7fe fd0a 	bl	80005f4 <HAL_GetTick>
 8001be0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001be2:	e00a      	b.n	8001bfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be4:	f7fe fd06 	bl	80005f4 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e04d      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bfa:	4b2a      	ldr	r3, [pc, #168]	; (8001ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f003 020c 	and.w	r2, r3, #12
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d1eb      	bne.n	8001be4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c0c:	4b24      	ldr	r3, [pc, #144]	; (8001ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 030f 	and.w	r3, r3, #15
 8001c14:	683a      	ldr	r2, [r7, #0]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d20c      	bcs.n	8001c34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c1a:	4b21      	ldr	r3, [pc, #132]	; (8001ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c22:	4b1f      	ldr	r3, [pc, #124]	; (8001ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d001      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e030      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d008      	beq.n	8001c52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c40:	4b18      	ldr	r3, [pc, #96]	; (8001ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	4915      	ldr	r1, [pc, #84]	; (8001ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0308 	and.w	r3, r3, #8
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d009      	beq.n	8001c72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c5e:	4b11      	ldr	r3, [pc, #68]	; (8001ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	490d      	ldr	r1, [pc, #52]	; (8001ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c72:	f000 f81d 	bl	8001cb0 <HAL_RCC_GetSysClockFreq>
 8001c76:	4601      	mov	r1, r0
 8001c78:	4b0a      	ldr	r3, [pc, #40]	; (8001ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	091b      	lsrs	r3, r3, #4
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	4a09      	ldr	r2, [pc, #36]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c84:	5cd3      	ldrb	r3, [r2, r3]
 8001c86:	fa21 f303 	lsr.w	r3, r1, r3
 8001c8a:	4a08      	ldr	r2, [pc, #32]	; (8001cac <HAL_RCC_ClockConfig+0x1c0>)
 8001c8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c8e:	2000      	movs	r0, #0
 8001c90:	f7fe fc6c 	bl	800056c <HAL_InitTick>

  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40023c00 	.word	0x40023c00
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	08008920 	.word	0x08008920
 8001cac:	20000118 	.word	0x20000118

08001cb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	607b      	str	r3, [r7, #4]
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cc6:	4b63      	ldr	r3, [pc, #396]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f003 030c 	and.w	r3, r3, #12
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	d007      	beq.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x32>
 8001cd2:	2b08      	cmp	r3, #8
 8001cd4:	d008      	beq.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x38>
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f040 80b4 	bne.w	8001e44 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cdc:	4b5e      	ldr	r3, [pc, #376]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001cde:	60bb      	str	r3, [r7, #8]
       break;
 8001ce0:	e0b3      	b.n	8001e4a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ce2:	4b5e      	ldr	r3, [pc, #376]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001ce4:	60bb      	str	r3, [r7, #8]
      break;
 8001ce6:	e0b0      	b.n	8001e4a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ce8:	4b5a      	ldr	r3, [pc, #360]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cf0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cf2:	4b58      	ldr	r3, [pc, #352]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d04a      	beq.n	8001d94 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cfe:	4b55      	ldr	r3, [pc, #340]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	099b      	lsrs	r3, r3, #6
 8001d04:	f04f 0400 	mov.w	r4, #0
 8001d08:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d0c:	f04f 0200 	mov.w	r2, #0
 8001d10:	ea03 0501 	and.w	r5, r3, r1
 8001d14:	ea04 0602 	and.w	r6, r4, r2
 8001d18:	4629      	mov	r1, r5
 8001d1a:	4632      	mov	r2, r6
 8001d1c:	f04f 0300 	mov.w	r3, #0
 8001d20:	f04f 0400 	mov.w	r4, #0
 8001d24:	0154      	lsls	r4, r2, #5
 8001d26:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d2a:	014b      	lsls	r3, r1, #5
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4622      	mov	r2, r4
 8001d30:	1b49      	subs	r1, r1, r5
 8001d32:	eb62 0206 	sbc.w	r2, r2, r6
 8001d36:	f04f 0300 	mov.w	r3, #0
 8001d3a:	f04f 0400 	mov.w	r4, #0
 8001d3e:	0194      	lsls	r4, r2, #6
 8001d40:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001d44:	018b      	lsls	r3, r1, #6
 8001d46:	1a5b      	subs	r3, r3, r1
 8001d48:	eb64 0402 	sbc.w	r4, r4, r2
 8001d4c:	f04f 0100 	mov.w	r1, #0
 8001d50:	f04f 0200 	mov.w	r2, #0
 8001d54:	00e2      	lsls	r2, r4, #3
 8001d56:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001d5a:	00d9      	lsls	r1, r3, #3
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	4614      	mov	r4, r2
 8001d60:	195b      	adds	r3, r3, r5
 8001d62:	eb44 0406 	adc.w	r4, r4, r6
 8001d66:	f04f 0100 	mov.w	r1, #0
 8001d6a:	f04f 0200 	mov.w	r2, #0
 8001d6e:	0262      	lsls	r2, r4, #9
 8001d70:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001d74:	0259      	lsls	r1, r3, #9
 8001d76:	460b      	mov	r3, r1
 8001d78:	4614      	mov	r4, r2
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	4621      	mov	r1, r4
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f04f 0400 	mov.w	r4, #0
 8001d84:	461a      	mov	r2, r3
 8001d86:	4623      	mov	r3, r4
 8001d88:	f7fe fa4e 	bl	8000228 <__aeabi_uldivmod>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	460c      	mov	r4, r1
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	e049      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d94:	4b2f      	ldr	r3, [pc, #188]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	099b      	lsrs	r3, r3, #6
 8001d9a:	f04f 0400 	mov.w	r4, #0
 8001d9e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001da2:	f04f 0200 	mov.w	r2, #0
 8001da6:	ea03 0501 	and.w	r5, r3, r1
 8001daa:	ea04 0602 	and.w	r6, r4, r2
 8001dae:	4629      	mov	r1, r5
 8001db0:	4632      	mov	r2, r6
 8001db2:	f04f 0300 	mov.w	r3, #0
 8001db6:	f04f 0400 	mov.w	r4, #0
 8001dba:	0154      	lsls	r4, r2, #5
 8001dbc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001dc0:	014b      	lsls	r3, r1, #5
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4622      	mov	r2, r4
 8001dc6:	1b49      	subs	r1, r1, r5
 8001dc8:	eb62 0206 	sbc.w	r2, r2, r6
 8001dcc:	f04f 0300 	mov.w	r3, #0
 8001dd0:	f04f 0400 	mov.w	r4, #0
 8001dd4:	0194      	lsls	r4, r2, #6
 8001dd6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001dda:	018b      	lsls	r3, r1, #6
 8001ddc:	1a5b      	subs	r3, r3, r1
 8001dde:	eb64 0402 	sbc.w	r4, r4, r2
 8001de2:	f04f 0100 	mov.w	r1, #0
 8001de6:	f04f 0200 	mov.w	r2, #0
 8001dea:	00e2      	lsls	r2, r4, #3
 8001dec:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001df0:	00d9      	lsls	r1, r3, #3
 8001df2:	460b      	mov	r3, r1
 8001df4:	4614      	mov	r4, r2
 8001df6:	195b      	adds	r3, r3, r5
 8001df8:	eb44 0406 	adc.w	r4, r4, r6
 8001dfc:	f04f 0100 	mov.w	r1, #0
 8001e00:	f04f 0200 	mov.w	r2, #0
 8001e04:	02a2      	lsls	r2, r4, #10
 8001e06:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001e0a:	0299      	lsls	r1, r3, #10
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	4614      	mov	r4, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	4621      	mov	r1, r4
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f04f 0400 	mov.w	r4, #0
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	4623      	mov	r3, r4
 8001e1e:	f7fe fa03 	bl	8000228 <__aeabi_uldivmod>
 8001e22:	4603      	mov	r3, r0
 8001e24:	460c      	mov	r4, r1
 8001e26:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e28:	4b0a      	ldr	r3, [pc, #40]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	0c1b      	lsrs	r3, r3, #16
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	3301      	adds	r3, #1
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e40:	60bb      	str	r3, [r7, #8]
      break;
 8001e42:	e002      	b.n	8001e4a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e44:	4b04      	ldr	r3, [pc, #16]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001e46:	60bb      	str	r3, [r7, #8]
      break;
 8001e48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e4a:	68bb      	ldr	r3, [r7, #8]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e54:	40023800 	.word	0x40023800
 8001e58:	00f42400 	.word	0x00f42400
 8001e5c:	007a1200 	.word	0x007a1200

08001e60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e64:	4b03      	ldr	r3, [pc, #12]	; (8001e74 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e66:	681b      	ldr	r3, [r3, #0]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	20000118 	.word	0x20000118

08001e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e7c:	f7ff fff0 	bl	8001e60 <HAL_RCC_GetHCLKFreq>
 8001e80:	4601      	mov	r1, r0
 8001e82:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	0a9b      	lsrs	r3, r3, #10
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	4a03      	ldr	r2, [pc, #12]	; (8001e9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e8e:	5cd3      	ldrb	r3, [r2, r3]
 8001e90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	08008930 	.word	0x08008930

08001ea0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ea4:	f7ff ffdc 	bl	8001e60 <HAL_RCC_GetHCLKFreq>
 8001ea8:	4601      	mov	r1, r0
 8001eaa:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	0b5b      	lsrs	r3, r3, #13
 8001eb0:	f003 0307 	and.w	r3, r3, #7
 8001eb4:	4a03      	ldr	r2, [pc, #12]	; (8001ec4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eb6:	5cd3      	ldrb	r3, [r2, r3]
 8001eb8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	08008930 	.word	0x08008930

08001ec8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b088      	sub	sp, #32
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d010      	beq.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001eec:	4b7a      	ldr	r3, [pc, #488]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001eee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ef2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	4977      	ldr	r1, [pc, #476]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d010      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001f1a:	4b6f      	ldr	r3, [pc, #444]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f20:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	496b      	ldr	r1, [pc, #428]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d022      	beq.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8001f48:	4b63      	ldr	r3, [pc, #396]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001f4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f56:	4960      	ldr	r1, [pc, #384]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8001f66:	2301      	movs	r3, #1
 8001f68:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f72:	d10c      	bne.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8001f74:	4b58      	ldr	r3, [pc, #352]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001f76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f7a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	3b01      	subs	r3, #1
 8001f84:	021b      	lsls	r3, r3, #8
 8001f86:	4954      	ldr	r1, [pc, #336]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d022      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8001f9a:	4b4f      	ldr	r3, [pc, #316]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001f9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fa0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa8:	494b      	ldr	r1, [pc, #300]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d101      	bne.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001fc4:	d10c      	bne.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8001fc6:	4b44      	ldr	r3, [pc, #272]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fcc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	695b      	ldr	r3, [r3, #20]
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	021b      	lsls	r3, r3, #8
 8001fd8:	493f      	ldr	r1, [pc, #252]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0308 	and.w	r3, r3, #8
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f000 808a 	beq.w	8002102 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	4b39      	ldr	r3, [pc, #228]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	4a38      	ldr	r2, [pc, #224]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ffe:	4b36      	ldr	r3, [pc, #216]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800200a:	4b34      	ldr	r3, [pc, #208]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a33      	ldr	r2, [pc, #204]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8002010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002014:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002016:	f7fe faed 	bl	80005f4 <HAL_GetTick>
 800201a:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800201c:	e008      	b.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800201e:	f7fe fae9 	bl	80005f4 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e1d1      	b.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002030:	4b2a      	ldr	r3, [pc, #168]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0f0      	beq.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800203c:	4b26      	ldr	r3, [pc, #152]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800203e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002040:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002044:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d02f      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002050:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	429a      	cmp	r2, r3
 8002058:	d028      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800205a:	4b1f      	ldr	r3, [pc, #124]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800205c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800205e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002062:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002064:	4b1e      	ldr	r3, [pc, #120]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002066:	2201      	movs	r2, #1
 8002068:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800206a:	4b1d      	ldr	r3, [pc, #116]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002070:	4a19      	ldr	r2, [pc, #100]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002076:	4b18      	ldr	r3, [pc, #96]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b01      	cmp	r3, #1
 8002080:	d114      	bne.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002082:	f7fe fab7 	bl	80005f4 <HAL_GetTick>
 8002086:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002088:	e00a      	b.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800208a:	f7fe fab3 	bl	80005f4 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	f241 3288 	movw	r2, #5000	; 0x1388
 8002098:	4293      	cmp	r3, r2
 800209a:	d901      	bls.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e199      	b.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020a0:	4b0d      	ldr	r3, [pc, #52]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80020a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0ee      	beq.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80020b8:	d114      	bne.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80020ba:	4b07      	ldr	r3, [pc, #28]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80020ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020ce:	4902      	ldr	r1, [pc, #8]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	608b      	str	r3, [r1, #8]
 80020d4:	e00c      	b.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x228>
 80020d6:	bf00      	nop
 80020d8:	40023800 	.word	0x40023800
 80020dc:	40007000 	.word	0x40007000
 80020e0:	42470e40 	.word	0x42470e40
 80020e4:	4b89      	ldr	r3, [pc, #548]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	4a88      	ldr	r2, [pc, #544]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80020ea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80020ee:	6093      	str	r3, [r2, #8]
 80020f0:	4b86      	ldr	r3, [pc, #536]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80020f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020fc:	4983      	ldr	r1, [pc, #524]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0304 	and.w	r3, r3, #4
 800210a:	2b00      	cmp	r3, #0
 800210c:	d004      	beq.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8002114:	4b7e      	ldr	r3, [pc, #504]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8002116:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0310 	and.w	r3, r3, #16
 8002120:	2b00      	cmp	r3, #0
 8002122:	d00a      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002124:	4b79      	ldr	r3, [pc, #484]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800212a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002132:	4976      	ldr	r1, [pc, #472]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002134:	4313      	orrs	r3, r2
 8002136:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0320 	and.w	r3, r3, #32
 8002142:	2b00      	cmp	r3, #0
 8002144:	d011      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002146:	4b71      	ldr	r3, [pc, #452]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002148:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800214c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002154:	496d      	ldr	r1, [pc, #436]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002156:	4313      	orrs	r3, r2
 8002158:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002160:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002164:	d101      	bne.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8002166:	2301      	movs	r3, #1
 8002168:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00a      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002176:	4b65      	ldr	r3, [pc, #404]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002178:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800217c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002184:	4961      	ldr	r1, [pc, #388]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002186:	4313      	orrs	r3, r2
 8002188:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d004      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2b80      	cmp	r3, #128	; 0x80
 8002198:	f040 80c6 	bne.w	8002328 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800219c:	4b5d      	ldr	r3, [pc, #372]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80021a2:	f7fe fa27 	bl	80005f4 <HAL_GetTick>
 80021a6:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80021a8:	e008      	b.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80021aa:	f7fe fa23 	bl	80005f4 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e10b      	b.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80021bc:	4b53      	ldr	r3, [pc, #332]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1f0      	bne.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 80021c8:	4a53      	ldr	r2, [pc, #332]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ce:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d003      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	69db      	ldr	r3, [r3, #28]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d023      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d019      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002200:	2b00      	cmp	r3, #0
 8002202:	d004      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002208:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800220c:	d00e      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002216:	2b00      	cmp	r3, #0
 8002218:	d019      	beq.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221e:	2b00      	cmp	r3, #0
 8002220:	d115      	bne.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x386>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800222a:	d110      	bne.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	019b      	lsls	r3, r3, #6
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	061b      	lsls	r3, r3, #24
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	071b      	lsls	r3, r3, #28
 8002246:	4931      	ldr	r1, [pc, #196]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002248:	4313      	orrs	r3, r2
 800224a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800225e:	2b00      	cmp	r3, #0
 8002260:	d009      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 800226a:	2b00      	cmp	r3, #0
 800226c:	d026      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002272:	2b00      	cmp	r3, #0
 8002274:	d122      	bne.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002276:	4b25      	ldr	r3, [pc, #148]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002278:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800227c:	0e1b      	lsrs	r3, r3, #24
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	019b      	lsls	r3, r3, #6
 800228e:	431a      	orrs	r2, r3
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	061b      	lsls	r3, r3, #24
 8002294:	431a      	orrs	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	071b      	lsls	r3, r3, #28
 800229c:	491b      	ldr	r1, [pc, #108]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 80022a4:	4b19      	ldr	r3, [pc, #100]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80022a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022aa:	f023 021f 	bic.w	r2, r3, #31
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	4915      	ldr	r1, [pc, #84]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d010      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	019b      	lsls	r3, r3, #6
 80022d2:	431a      	orrs	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	061b      	lsls	r3, r3, #24
 80022da:	431a      	orrs	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	071b      	lsls	r3, r3, #28
 80022e2:	490a      	ldr	r1, [pc, #40]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80022ea:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80022ec:	2201      	movs	r2, #1
 80022ee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80022f0:	f7fe f980 	bl	80005f4 <HAL_GetTick>
 80022f4:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80022f6:	e011      	b.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80022f8:	f7fe f97c 	bl	80005f4 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d90a      	bls.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e064      	b.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800230a:	bf00      	nop
 800230c:	40023800 	.word	0x40023800
 8002310:	424711e0 	.word	0x424711e0
 8002314:	42470068 	.word	0x42470068
 8002318:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800231c:	4b2f      	ldr	r3, [pc, #188]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0e7      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002330:	2b00      	cmp	r3, #0
 8002332:	d00a      	beq.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002334:	4b29      	ldr	r3, [pc, #164]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002336:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800233a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002342:	4926      	ldr	r1, [pc, #152]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002344:	4313      	orrs	r3, r2
 8002346:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00a      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002356:	4b21      	ldr	r3, [pc, #132]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002358:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800235c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002364:	491d      	ldr	r1, [pc, #116]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002366:	4313      	orrs	r3, r2
 8002368:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00a      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8002378:	4b18      	ldr	r3, [pc, #96]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800237a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800237e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002386:	4915      	ldr	r1, [pc, #84]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002388:	4313      	orrs	r3, r2
 800238a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00a      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 800239a:	4b10      	ldr	r3, [pc, #64]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800239c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023a0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a8:	490c      	ldr	r1, [pc, #48]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00a      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023bc:	4b07      	ldr	r3, [pc, #28]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80023be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023c2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ca:	4904      	ldr	r1, [pc, #16]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3720      	adds	r7, #32
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40023800 	.word	0x40023800

080023e0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d075      	beq.n	80024e4 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80023f8:	4ba2      	ldr	r3, [pc, #648]	; (8002684 <HAL_RCC_OscConfig+0x2a4>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 030c 	and.w	r3, r3, #12
 8002400:	2b04      	cmp	r3, #4
 8002402:	d00c      	beq.n	800241e <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002404:	4b9f      	ldr	r3, [pc, #636]	; (8002684 <HAL_RCC_OscConfig+0x2a4>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800240c:	2b08      	cmp	r3, #8
 800240e:	d112      	bne.n	8002436 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002410:	4b9c      	ldr	r3, [pc, #624]	; (8002684 <HAL_RCC_OscConfig+0x2a4>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002418:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800241c:	d10b      	bne.n	8002436 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800241e:	4b99      	ldr	r3, [pc, #612]	; (8002684 <HAL_RCC_OscConfig+0x2a4>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d05b      	beq.n	80024e2 <HAL_RCC_OscConfig+0x102>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d157      	bne.n	80024e2 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e20b      	b.n	800284e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800243e:	d106      	bne.n	800244e <HAL_RCC_OscConfig+0x6e>
 8002440:	4b90      	ldr	r3, [pc, #576]	; (8002684 <HAL_RCC_OscConfig+0x2a4>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a8f      	ldr	r2, [pc, #572]	; (8002684 <HAL_RCC_OscConfig+0x2a4>)
 8002446:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800244a:	6013      	str	r3, [r2, #0]
 800244c:	e01d      	b.n	800248a <HAL_RCC_OscConfig+0xaa>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002456:	d10c      	bne.n	8002472 <HAL_RCC_OscConfig+0x92>
 8002458:	4b8a      	ldr	r3, [pc, #552]	; (8002684 <HAL_RCC_OscConfig+0x2a4>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a89      	ldr	r2, [pc, #548]	; (8002684 <HAL_RCC_OscConfig+0x2a4>)
 800245e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002462:	6013      	str	r3, [r2, #0]
 8002464:	4b87      	ldr	r3, [pc, #540]	; (8002684 <HAL_RCC_OscConfig+0x2a4>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a86      	ldr	r2, [pc, #536]	; (8002684 <HAL_RCC_OscConfig+0x2a4>)
 800246a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246e:	6013      	str	r3, [r2, #0]
 8002470:	e00b      	b.n	800248a <HAL_RCC_OscConfig+0xaa>
 8002472:	4b84      	ldr	r3, [pc, #528]	; (8002684 <HAL_RCC_OscConfig+0x2a4>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a83      	ldr	r2, [pc, #524]	; (8002684 <HAL_RCC_OscConfig+0x2a4>)
 8002478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	4b81      	ldr	r3, [pc, #516]	; (8002684 <HAL_RCC_OscConfig+0x2a4>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a80      	ldr	r2, [pc, #512]	; (8002684 <HAL_RCC_OscConfig+0x2a4>)
 8002484:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002488:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d013      	beq.n	80024ba <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002492:	f7fe f8af 	bl	80005f4 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800249a:	f7fe f8ab 	bl	80005f4 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b64      	cmp	r3, #100	; 0x64
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e1d0      	b.n	800284e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ac:	4b75      	ldr	r3, [pc, #468]	; (8002684 <HAL_RCC_OscConfig+0x2a4>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0f0      	beq.n	800249a <HAL_RCC_OscConfig+0xba>
 80024b8:	e014      	b.n	80024e4 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ba:	f7fe f89b 	bl	80005f4 <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024c2:	f7fe f897 	bl	80005f4 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b64      	cmp	r3, #100	; 0x64
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e1bc      	b.n	800284e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024d4:	4b6b      	ldr	r3, [pc, #428]	; (8002684 <HAL_RCC_OscConfig+0x2a4>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1f0      	bne.n	80024c2 <HAL_RCC_OscConfig+0xe2>
 80024e0:	e000      	b.n	80024e4 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d063      	beq.n	80025b8 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80024f0:	4b64      	ldr	r3, [pc, #400]	; (8002684 <HAL_RCC_OscConfig+0x2a4>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 030c 	and.w	r3, r3, #12
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00b      	beq.n	8002514 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024fc:	4b61      	ldr	r3, [pc, #388]	; (8002684 <HAL_RCC_OscConfig+0x2a4>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002504:	2b08      	cmp	r3, #8
 8002506:	d11c      	bne.n	8002542 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002508:	4b5e      	ldr	r3, [pc, #376]	; (8002684 <HAL_RCC_OscConfig+0x2a4>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d116      	bne.n	8002542 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002514:	4b5b      	ldr	r3, [pc, #364]	; (8002684 <HAL_RCC_OscConfig+0x2a4>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d005      	beq.n	800252c <HAL_RCC_OscConfig+0x14c>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d001      	beq.n	800252c <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e190      	b.n	800284e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800252c:	4b55      	ldr	r3, [pc, #340]	; (8002684 <HAL_RCC_OscConfig+0x2a4>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	4952      	ldr	r1, [pc, #328]	; (8002684 <HAL_RCC_OscConfig+0x2a4>)
 800253c:	4313      	orrs	r3, r2
 800253e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002540:	e03a      	b.n	80025b8 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d020      	beq.n	800258c <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800254a:	4b4f      	ldr	r3, [pc, #316]	; (8002688 <HAL_RCC_OscConfig+0x2a8>)
 800254c:	2201      	movs	r2, #1
 800254e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002550:	f7fe f850 	bl	80005f4 <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002558:	f7fe f84c 	bl	80005f4 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e171      	b.n	800284e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800256a:	4b46      	ldr	r3, [pc, #280]	; (8002684 <HAL_RCC_OscConfig+0x2a4>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0f0      	beq.n	8002558 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002576:	4b43      	ldr	r3, [pc, #268]	; (8002684 <HAL_RCC_OscConfig+0x2a4>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	493f      	ldr	r1, [pc, #252]	; (8002684 <HAL_RCC_OscConfig+0x2a4>)
 8002586:	4313      	orrs	r3, r2
 8002588:	600b      	str	r3, [r1, #0]
 800258a:	e015      	b.n	80025b8 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800258c:	4b3e      	ldr	r3, [pc, #248]	; (8002688 <HAL_RCC_OscConfig+0x2a8>)
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002592:	f7fe f82f 	bl	80005f4 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800259a:	f7fe f82b 	bl	80005f4 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e150      	b.n	800284e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ac:	4b35      	ldr	r3, [pc, #212]	; (8002684 <HAL_RCC_OscConfig+0x2a4>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1f0      	bne.n	800259a <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0308 	and.w	r3, r3, #8
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d030      	beq.n	8002626 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d016      	beq.n	80025fa <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025cc:	4b2f      	ldr	r3, [pc, #188]	; (800268c <HAL_RCC_OscConfig+0x2ac>)
 80025ce:	2201      	movs	r2, #1
 80025d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d2:	f7fe f80f 	bl	80005f4 <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025d8:	e008      	b.n	80025ec <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025da:	f7fe f80b 	bl	80005f4 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e130      	b.n	800284e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ec:	4b25      	ldr	r3, [pc, #148]	; (8002684 <HAL_RCC_OscConfig+0x2a4>)
 80025ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0f0      	beq.n	80025da <HAL_RCC_OscConfig+0x1fa>
 80025f8:	e015      	b.n	8002626 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025fa:	4b24      	ldr	r3, [pc, #144]	; (800268c <HAL_RCC_OscConfig+0x2ac>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002600:	f7fd fff8 	bl	80005f4 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002608:	f7fd fff4 	bl	80005f4 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e119      	b.n	800284e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800261a:	4b1a      	ldr	r3, [pc, #104]	; (8002684 <HAL_RCC_OscConfig+0x2a4>)
 800261c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f0      	bne.n	8002608 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0304 	and.w	r3, r3, #4
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 809f 	beq.w	8002772 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002634:	2300      	movs	r3, #0
 8002636:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002638:	4b12      	ldr	r3, [pc, #72]	; (8002684 <HAL_RCC_OscConfig+0x2a4>)
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10f      	bne.n	8002664 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002644:	2300      	movs	r3, #0
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	4b0e      	ldr	r3, [pc, #56]	; (8002684 <HAL_RCC_OscConfig+0x2a4>)
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	4a0d      	ldr	r2, [pc, #52]	; (8002684 <HAL_RCC_OscConfig+0x2a4>)
 800264e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002652:	6413      	str	r3, [r2, #64]	; 0x40
 8002654:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <HAL_RCC_OscConfig+0x2a4>)
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002660:	2301      	movs	r3, #1
 8002662:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002664:	4b0a      	ldr	r3, [pc, #40]	; (8002690 <HAL_RCC_OscConfig+0x2b0>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266c:	2b00      	cmp	r3, #0
 800266e:	d120      	bne.n	80026b2 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002670:	4b07      	ldr	r3, [pc, #28]	; (8002690 <HAL_RCC_OscConfig+0x2b0>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a06      	ldr	r2, [pc, #24]	; (8002690 <HAL_RCC_OscConfig+0x2b0>)
 8002676:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800267a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800267c:	f7fd ffba 	bl	80005f4 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002682:	e010      	b.n	80026a6 <HAL_RCC_OscConfig+0x2c6>
 8002684:	40023800 	.word	0x40023800
 8002688:	42470000 	.word	0x42470000
 800268c:	42470e80 	.word	0x42470e80
 8002690:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002694:	f7fd ffae 	bl	80005f4 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e0d3      	b.n	800284e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a6:	4b6c      	ldr	r3, [pc, #432]	; (8002858 <HAL_RCC_OscConfig+0x478>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0f0      	beq.n	8002694 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d106      	bne.n	80026c8 <HAL_RCC_OscConfig+0x2e8>
 80026ba:	4b68      	ldr	r3, [pc, #416]	; (800285c <HAL_RCC_OscConfig+0x47c>)
 80026bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026be:	4a67      	ldr	r2, [pc, #412]	; (800285c <HAL_RCC_OscConfig+0x47c>)
 80026c0:	f043 0301 	orr.w	r3, r3, #1
 80026c4:	6713      	str	r3, [r2, #112]	; 0x70
 80026c6:	e01c      	b.n	8002702 <HAL_RCC_OscConfig+0x322>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	2b05      	cmp	r3, #5
 80026ce:	d10c      	bne.n	80026ea <HAL_RCC_OscConfig+0x30a>
 80026d0:	4b62      	ldr	r3, [pc, #392]	; (800285c <HAL_RCC_OscConfig+0x47c>)
 80026d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d4:	4a61      	ldr	r2, [pc, #388]	; (800285c <HAL_RCC_OscConfig+0x47c>)
 80026d6:	f043 0304 	orr.w	r3, r3, #4
 80026da:	6713      	str	r3, [r2, #112]	; 0x70
 80026dc:	4b5f      	ldr	r3, [pc, #380]	; (800285c <HAL_RCC_OscConfig+0x47c>)
 80026de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e0:	4a5e      	ldr	r2, [pc, #376]	; (800285c <HAL_RCC_OscConfig+0x47c>)
 80026e2:	f043 0301 	orr.w	r3, r3, #1
 80026e6:	6713      	str	r3, [r2, #112]	; 0x70
 80026e8:	e00b      	b.n	8002702 <HAL_RCC_OscConfig+0x322>
 80026ea:	4b5c      	ldr	r3, [pc, #368]	; (800285c <HAL_RCC_OscConfig+0x47c>)
 80026ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ee:	4a5b      	ldr	r2, [pc, #364]	; (800285c <HAL_RCC_OscConfig+0x47c>)
 80026f0:	f023 0301 	bic.w	r3, r3, #1
 80026f4:	6713      	str	r3, [r2, #112]	; 0x70
 80026f6:	4b59      	ldr	r3, [pc, #356]	; (800285c <HAL_RCC_OscConfig+0x47c>)
 80026f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fa:	4a58      	ldr	r2, [pc, #352]	; (800285c <HAL_RCC_OscConfig+0x47c>)
 80026fc:	f023 0304 	bic.w	r3, r3, #4
 8002700:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d015      	beq.n	8002736 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800270a:	f7fd ff73 	bl	80005f4 <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002710:	e00a      	b.n	8002728 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002712:	f7fd ff6f 	bl	80005f4 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002720:	4293      	cmp	r3, r2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e092      	b.n	800284e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002728:	4b4c      	ldr	r3, [pc, #304]	; (800285c <HAL_RCC_OscConfig+0x47c>)
 800272a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d0ee      	beq.n	8002712 <HAL_RCC_OscConfig+0x332>
 8002734:	e014      	b.n	8002760 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002736:	f7fd ff5d 	bl	80005f4 <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800273c:	e00a      	b.n	8002754 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800273e:	f7fd ff59 	bl	80005f4 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	f241 3288 	movw	r2, #5000	; 0x1388
 800274c:	4293      	cmp	r3, r2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e07c      	b.n	800284e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002754:	4b41      	ldr	r3, [pc, #260]	; (800285c <HAL_RCC_OscConfig+0x47c>)
 8002756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1ee      	bne.n	800273e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002760:	7dfb      	ldrb	r3, [r7, #23]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d105      	bne.n	8002772 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002766:	4b3d      	ldr	r3, [pc, #244]	; (800285c <HAL_RCC_OscConfig+0x47c>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	4a3c      	ldr	r2, [pc, #240]	; (800285c <HAL_RCC_OscConfig+0x47c>)
 800276c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002770:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d068      	beq.n	800284c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800277a:	4b38      	ldr	r3, [pc, #224]	; (800285c <HAL_RCC_OscConfig+0x47c>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 030c 	and.w	r3, r3, #12
 8002782:	2b08      	cmp	r3, #8
 8002784:	d060      	beq.n	8002848 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	2b02      	cmp	r3, #2
 800278c:	d145      	bne.n	800281a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800278e:	4b34      	ldr	r3, [pc, #208]	; (8002860 <HAL_RCC_OscConfig+0x480>)
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002794:	f7fd ff2e 	bl	80005f4 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800279c:	f7fd ff2a 	bl	80005f4 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e04f      	b.n	800284e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ae:	4b2b      	ldr	r3, [pc, #172]	; (800285c <HAL_RCC_OscConfig+0x47c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f0      	bne.n	800279c <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69da      	ldr	r2, [r3, #28]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c8:	019b      	lsls	r3, r3, #6
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d0:	085b      	lsrs	r3, r3, #1
 80027d2:	3b01      	subs	r3, #1
 80027d4:	041b      	lsls	r3, r3, #16
 80027d6:	431a      	orrs	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027dc:	061b      	lsls	r3, r3, #24
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e4:	071b      	lsls	r3, r3, #28
 80027e6:	491d      	ldr	r1, [pc, #116]	; (800285c <HAL_RCC_OscConfig+0x47c>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027ec:	4b1c      	ldr	r3, [pc, #112]	; (8002860 <HAL_RCC_OscConfig+0x480>)
 80027ee:	2201      	movs	r2, #1
 80027f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f2:	f7fd feff 	bl	80005f4 <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027fa:	f7fd fefb 	bl	80005f4 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e020      	b.n	800284e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800280c:	4b13      	ldr	r3, [pc, #76]	; (800285c <HAL_RCC_OscConfig+0x47c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d0f0      	beq.n	80027fa <HAL_RCC_OscConfig+0x41a>
 8002818:	e018      	b.n	800284c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800281a:	4b11      	ldr	r3, [pc, #68]	; (8002860 <HAL_RCC_OscConfig+0x480>)
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002820:	f7fd fee8 	bl	80005f4 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002828:	f7fd fee4 	bl	80005f4 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e009      	b.n	800284e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800283a:	4b08      	ldr	r3, [pc, #32]	; (800285c <HAL_RCC_OscConfig+0x47c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f0      	bne.n	8002828 <HAL_RCC_OscConfig+0x448>
 8002846:	e001      	b.n	800284c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e000      	b.n	800284e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3718      	adds	r7, #24
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	40007000 	.word	0x40007000
 800285c:	40023800 	.word	0x40023800
 8002860:	42470060 	.word	0x42470060

08002864 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e01d      	b.n	80028b2 <HAL_SD_Init+0x4e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d105      	bne.n	800288e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f004 ff9d 	bl	80077c8 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2203      	movs	r2, #3
 8002892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f810 	bl	80028bc <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
	...

080028bc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80028bc:	b5b0      	push	{r4, r5, r7, lr}
 80028be:	b08e      	sub	sp, #56	; 0x38
 80028c0:	af04      	add	r7, sp, #16
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80028c4:	2300      	movs	r3, #0
 80028c6:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80028c8:	2300      	movs	r3, #0
 80028ca:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80028cc:	2300      	movs	r3, #0
 80028ce:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80028d0:	2300      	movs	r3, #0
 80028d2:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80028d4:	2300      	movs	r3, #0
 80028d6:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80028d8:	2300      	movs	r3, #0
 80028da:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80028dc:	2376      	movs	r3, #118	; 0x76
 80028de:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681d      	ldr	r5, [r3, #0]
 80028e4:	466c      	mov	r4, sp
 80028e6:	f107 0318 	add.w	r3, r7, #24
 80028ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80028ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80028f2:	f107 030c 	add.w	r3, r7, #12
 80028f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028f8:	4628      	mov	r0, r5
 80028fa:	f001 fd2f 	bl	800435c <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd); 
 80028fe:	4b1c      	ldr	r3, [pc, #112]	; (8002970 <HAL_SD_InitCard+0xb4>)
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f001 fd70 	bl	80043ee <SDIO_PowerState_ON>
  
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800290e:	4b18      	ldr	r3, [pc, #96]	; (8002970 <HAL_SD_InitCard+0xb4>)
 8002910:	2201      	movs	r2, #1
 8002912:	601a      	str	r2, [r3, #0]
  
  /* Required power up waiting time before starting the SD initialization 
  sequence */
  HAL_Delay(2U);
 8002914:	2002      	movs	r0, #2
 8002916:	f7fd fe79 	bl	800060c <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 fee6 	bl	80036ec <SD_PowerON>
 8002920:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00b      	beq.n	8002940 <HAL_SD_InitCard+0x84>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e013      	b.n	8002968 <HAL_SD_InitCard+0xac>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 fe0a 	bl	800355a <SD_InitCard>
 8002946:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00b      	beq.n	8002966 <HAL_SD_InitCard+0xaa>
  {
    hsd->State = HAL_SD_STATE_READY;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295c:	431a      	orrs	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <HAL_SD_InitCard+0xac>
  }

  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3728      	adds	r7, #40	; 0x28
 800296c:	46bd      	mov	sp, r7
 800296e:	bdb0      	pop	{r4, r5, r7, pc}
 8002970:	422580a0 	.word	0x422580a0

08002974 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002974:	b590      	push	{r4, r7, lr}
 8002976:	b08f      	sub	sp, #60	; 0x3c
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
 8002980:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002982:	2300      	movs	r3, #0
 8002984:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 8002986:	f7fd fe35 	bl	80005f4 <HAL_GetTick>
 800298a:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0U, *tempbuff = (uint32_t *)pData;
 800298c:	2300      	movs	r3, #0
 800298e:	633b      	str	r3, [r7, #48]	; 0x30
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d107      	bne.n	80029aa <HAL_SD_ReadBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800299e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e176      	b.n	8002c98 <HAL_SD_ReadBlocks+0x324>
  }
 
  if(hsd->State == HAL_SD_STATE_READY)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	f040 8169 	bne.w	8002c8a <HAL_SD_ReadBlocks+0x316>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	441a      	add	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d907      	bls.n	80029dc <HAL_SD_ReadBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e15d      	b.n	8002c98 <HAL_SD_ReadBlocks+0x324>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2203      	movs	r2, #3
 80029e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2200      	movs	r2, #0
 80029ea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d002      	beq.n	80029fa <HAL_SD_ReadBlocks+0x86>
    {
      BlockAdd *= 512U;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	025b      	lsls	r3, r3, #9
 80029f8:	607b      	str	r3, [r7, #4]
    }
      
    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a02:	4618      	mov	r0, r3
 8002a04:	f001 fd87 	bl	8004516 <SDMMC_CmdBlockLength>
 8002a08:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d010      	beq.n	8002a32 <HAL_SD_ReadBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);      
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002a18:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a20:	431a      	orrs	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e132      	b.n	8002c98 <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002a32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a36:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	025b      	lsls	r3, r3, #9
 8002a3c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002a3e:	2390      	movs	r3, #144	; 0x90
 8002a40:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002a42:	2302      	movs	r3, #2
 8002a44:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002a46:	2300      	movs	r3, #0
 8002a48:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	627b      	str	r3, [r7, #36]	; 0x24
    SDIO_ConfigData(hsd->Instance, &config);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f107 0210 	add.w	r2, r7, #16
 8002a56:	4611      	mov	r1, r2
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f001 fd30 	bl	80044be <SDIO_ConfigData>
    
    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d90a      	bls.n	8002a7a <HAL_SD_ReadBlocks+0x106>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2202      	movs	r2, #2
 8002a68:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f001 fd98 	bl	80045a6 <SDMMC_CmdReadMultiBlock>
 8002a76:	6378      	str	r0, [r7, #52]	; 0x34
 8002a78:	e009      	b.n	8002a8e <HAL_SD_ReadBlocks+0x11a>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6879      	ldr	r1, [r7, #4]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f001 fd69 	bl	800455e <SDMMC_CmdReadSingleBlock>
 8002a8c:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d04a      	beq.n	8002b2a <HAL_SD_ReadBlocks+0x1b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002a9c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e0f0      	b.n	8002c98 <HAL_SD_ReadBlocks+0x324>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002abc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d016      	beq.n	8002af2 <HAL_SD_ReadBlocks+0x17e>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	633b      	str	r3, [r7, #48]	; 0x30
 8002ac8:	e00d      	b.n	8002ae6 <HAL_SD_ReadBlocks+0x172>
        {
          *(tempbuff + count) = SDIO_ReadFIFO(hsd->Instance);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6819      	ldr	r1, [r3, #0]
 8002ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ad4:	18d4      	adds	r4, r2, r3
 8002ad6:	4608      	mov	r0, r1
 8002ad8:	f001 fc6b 	bl	80043b2 <SDIO_ReadFIFO>
 8002adc:	4603      	mov	r3, r0
 8002ade:	6023      	str	r3, [r4, #0]
        for(count = 0U; count < 8U; count++)
 8002ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	633b      	str	r3, [r7, #48]	; 0x30
 8002ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae8:	2b07      	cmp	r3, #7
 8002aea:	d9ee      	bls.n	8002aca <HAL_SD_ReadBlocks+0x156>
        }
        tempbuff += 8U;
 8002aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aee:	3320      	adds	r3, #32
 8002af0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8002af2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d007      	beq.n	8002b08 <HAL_SD_ReadBlocks+0x194>
 8002af8:	f7fd fd7c 	bl	80005f4 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d810      	bhi.n	8002b2a <HAL_SD_ReadBlocks+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002b10:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b16:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e0b6      	b.n	8002c98 <HAL_SD_ReadBlocks+0x324>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b30:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0be      	beq.n	8002ab6 <HAL_SD_ReadBlocks+0x142>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d020      	beq.n	8002b88 <HAL_SD_ReadBlocks+0x214>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d91d      	bls.n	8002b88 <HAL_SD_ReadBlocks+0x214>
    {    
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b50:	2b03      	cmp	r3, #3
 8002b52:	d019      	beq.n	8002b88 <HAL_SD_ReadBlocks+0x214>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f001 fd91 	bl	8004680 <SDMMC_CmdStopTransfer>
 8002b5e:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8002b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d010      	beq.n	8002b88 <HAL_SD_ReadBlocks+0x214>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002b6e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b76:	431a      	orrs	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e087      	b.n	8002c98 <HAL_SD_ReadBlocks+0x324>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b8e:	f003 0308 	and.w	r3, r3, #8
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d010      	beq.n	8002bb8 <HAL_SD_ReadBlocks+0x244>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002b9e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba4:	f043 0208 	orr.w	r2, r3, #8
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e06f      	b.n	8002c98 <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d010      	beq.n	8002be8 <HAL_SD_ReadBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002bce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd4:	f043 0202 	orr.w	r2, r3, #2
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e057      	b.n	8002c98 <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bee:	f003 0320 	and.w	r3, r3, #32
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d037      	beq.n	8002c66 <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002bfe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c04:	f043 0220 	orr.w	r2, r3, #32
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e03f      	b.n	8002c98 <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
    {
      *tempbuff = SDIO_ReadFIFO(hsd->Instance);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f001 fbc8 	bl	80043b2 <SDIO_ReadFIFO>
 8002c22:	4602      	mov	r2, r0
 8002c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c26:	601a      	str	r2, [r3, #0]
      tempbuff++;
 8002c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c2a:	3304      	adds	r3, #4
 8002c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8002c2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d007      	beq.n	8002c44 <HAL_SD_ReadBlocks+0x2d0>
 8002c34:	f7fd fcde 	bl	80005f4 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d810      	bhi.n	8002c66 <HAL_SD_ReadBlocks+0x2f2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);        
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002c4c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c52:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e018      	b.n	8002c98 <HAL_SD_ReadBlocks+0x324>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1d1      	bne.n	8002c18 <HAL_SD_ReadBlocks+0x2a4>
      }
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002c7c:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8002c86:	2300      	movs	r3, #0
 8002c88:	e006      	b.n	8002c98 <HAL_SD_ReadBlocks+0x324>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
  }
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	373c      	adds	r7, #60	; 0x3c
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd90      	pop	{r4, r7, pc}

08002ca0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08e      	sub	sp, #56	; 0x38
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
 8002cac:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 8002cb2:	f7fd fc9f 	bl	80005f4 <HAL_GetTick>
 8002cb6:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t *tempbuff = (uint32_t *)pData;
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d107      	bne.n	8002cd6 <HAL_SD_WriteBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e147      	b.n	8002f66 <HAL_SD_WriteBlocks+0x2c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	f040 813a 	bne.w	8002f58 <HAL_SD_WriteBlocks+0x2b8>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	441a      	add	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d907      	bls.n	8002d08 <HAL_SD_WriteBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e12e      	b.n	8002f66 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2203      	movs	r2, #3
 8002d0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2200      	movs	r2, #0
 8002d16:	62da      	str	r2, [r3, #44]	; 0x2c
     
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d002      	beq.n	8002d26 <HAL_SD_WriteBlocks+0x86>
    {
      BlockAdd *= 512U;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	025b      	lsls	r3, r3, #9
 8002d24:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f001 fbf1 	bl	8004516 <SDMMC_CmdBlockLength>
 8002d34:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8002d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d010      	beq.n	8002d5e <HAL_SD_WriteBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002d44:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e103      	b.n	8002f66 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d90a      	bls.n	8002d7a <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2220      	movs	r2, #32
 8002d68:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f001 fc60 	bl	8004636 <SDMMC_CmdWriteMultiBlock>
 8002d76:	6378      	str	r0, [r7, #52]	; 0x34
 8002d78:	e009      	b.n	8002d8e <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2210      	movs	r2, #16
 8002d7e:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f001 fc31 	bl	80045ee <SDMMC_CmdWriteSingleBlock>
 8002d8c:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d010      	beq.n	8002db6 <HAL_SD_WriteBlocks+0x116>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002d9c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002da4:	431a      	orrs	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e0d7      	b.n	8002f66 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002db6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002dba:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	025b      	lsls	r3, r3, #9
 8002dc0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002dc2:	2390      	movs	r3, #144	; 0x90
 8002dc4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	627b      	str	r3, [r7, #36]	; 0x24
    SDIO_ConfigData(hsd->Instance, &config);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f107 0210 	add.w	r2, r7, #16
 8002dda:	4611      	mov	r1, r2
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f001 fb6e 	bl	80044be <SDIO_ConfigData>
    
    /* Write block(s) in polling mode */
#ifdef SDIO_STA_STBITERR
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8002de2:	e037      	b.n	8002e54 <HAL_SD_WriteBlocks+0x1b4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d014      	beq.n	8002e1c <HAL_SD_WriteBlocks+0x17c>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8002df2:	2300      	movs	r3, #0
 8002df4:	633b      	str	r3, [r7, #48]	; 0x30
 8002df6:	e00b      	b.n	8002e10 <HAL_SD_WriteBlocks+0x170>
        {
          SDIO_WriteFIFO(hsd->Instance, (tempbuff + count));
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6818      	ldr	r0, [r3, #0]
 8002dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e02:	4413      	add	r3, r2
 8002e04:	4619      	mov	r1, r3
 8002e06:	f001 fae1 	bl	80043cc <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8002e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	633b      	str	r3, [r7, #48]	; 0x30
 8002e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e12:	2b07      	cmp	r3, #7
 8002e14:	d9f0      	bls.n	8002df8 <HAL_SD_WriteBlocks+0x158>
        }
        tempbuff += 8U;
 8002e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e18:	3320      	adds	r3, #32
 8002e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8002e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d007      	beq.n	8002e32 <HAL_SD_WriteBlocks+0x192>
 8002e22:	f7fd fbe7 	bl	80005f4 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d810      	bhi.n	8002e54 <HAL_SD_WriteBlocks+0x1b4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002e3a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e42:	431a      	orrs	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e088      	b.n	8002f66 <HAL_SD_WriteBlocks+0x2c6>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e5a:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0c0      	beq.n	8002de4 <HAL_SD_WriteBlocks+0x144>
      }
    }
    
    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d020      	beq.n	8002eb2 <HAL_SD_WriteBlocks+0x212>
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d91d      	bls.n	8002eb2 <HAL_SD_WriteBlocks+0x212>
    { 
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7a:	2b03      	cmp	r3, #3
 8002e7c:	d019      	beq.n	8002eb2 <HAL_SD_WriteBlocks+0x212>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f001 fbfc 	bl	8004680 <SDMMC_CmdStopTransfer>
 8002e88:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8002e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d010      	beq.n	8002eb2 <HAL_SD_WriteBlocks+0x212>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002e98:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e059      	b.n	8002f66 <HAL_SD_WriteBlocks+0x2c6>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb8:	f003 0308 	and.w	r3, r3, #8
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d010      	beq.n	8002ee2 <HAL_SD_WriteBlocks+0x242>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002ec8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ece:	f043 0208 	orr.w	r2, r3, #8
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e041      	b.n	8002f66 <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d010      	beq.n	8002f12 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002ef8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efe:	f043 0202 	orr.w	r2, r3, #2
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e029      	b.n	8002f66 <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f18:	f003 0310 	and.w	r3, r3, #16
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d010      	beq.n	8002f42 <HAL_SD_WriteBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002f28:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2e:	f043 0210 	orr.w	r2, r3, #16
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e011      	b.n	8002f66 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002f4a:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8002f54:	2300      	movs	r3, #0
 8002f56:	e006      	b.n	8002f66 <HAL_SD_WriteBlocks+0x2c6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
  }
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3738      	adds	r7, #56	; 0x38
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b085      	sub	sp, #20
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
 8002f76:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f80:	0e1b      	lsrs	r3, r3, #24
 8002f82:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	099b      	lsrs	r3, r3, #6
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	b2da      	uxtb	r2, r3
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	089b      	lsrs	r3, r3, #2
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	f003 030f 	and.w	r3, r3, #15
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	f003 0303 	and.w	r3, r3, #3
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fb6:	0c1b      	lsrs	r3, r3, #16
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fc8:	0a1b      	lsrs	r3, r3, #8
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fea:	0e1b      	lsrs	r3, r3, #24
 8002fec:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	011b      	lsls	r3, r3, #4
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ffe:	0c1b      	lsrs	r3, r3, #16
 8003000:	b2db      	uxtb	r3, r3
 8003002:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	88db      	ldrh	r3, [r3, #6]
 8003008:	b29a      	uxth	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	091b      	lsrs	r3, r3, #4
 800300e:	b29b      	uxth	r3, r3
 8003010:	f003 030f 	and.w	r3, r3, #15
 8003014:	b29b      	uxth	r3, r3
 8003016:	4313      	orrs	r3, r2
 8003018:	b29a      	uxth	r2, r3
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	b2db      	uxtb	r3, r3
 8003022:	f003 030f 	and.w	r3, r3, #15
 8003026:	b2da      	uxtb	r2, r3
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003030:	0a1b      	lsrs	r3, r3, #8
 8003032:	b2db      	uxtb	r3, r3
 8003034:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	09db      	lsrs	r3, r3, #7
 800303a:	b2db      	uxtb	r3, r3
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	b2da      	uxtb	r2, r3
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	099b      	lsrs	r3, r3, #6
 800304a:	b2db      	uxtb	r3, r3
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	b2da      	uxtb	r2, r3
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	095b      	lsrs	r3, r3, #5
 800305a:	b2db      	uxtb	r3, r3
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	b2da      	uxtb	r2, r3
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	091b      	lsrs	r3, r3, #4
 800306a:	b2db      	uxtb	r3, r3
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	b2da      	uxtb	r2, r3
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	2200      	movs	r2, #0
 800307a:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003080:	2b00      	cmp	r3, #0
 8003082:	f040 8087 	bne.w	8003194 <HAL_SD_GetCardCSD+0x226>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	029b      	lsls	r3, r3, #10
 800308a:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003096:	b2db      	uxtb	r3, r3
 8003098:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2U;
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	691a      	ldr	r2, [r3, #16]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	431a      	orrs	r2, r3
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030ac:	0e1b      	lsrs	r3, r3, #24
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	691a      	ldr	r2, [r3, #16]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	099b      	lsrs	r3, r3, #6
 80030ba:	f003 0303 	and.w	r3, r3, #3
 80030be:	431a      	orrs	r2, r3
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	08db      	lsrs	r3, r3, #3
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	f003 0307 	and.w	r3, r3, #7
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030e6:	0c1b      	lsrs	r3, r3, #16
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	095b      	lsrs	r3, r3, #5
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	b2da      	uxtb	r2, r3
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	089b      	lsrs	r3, r3, #2
 8003100:	b2db      	uxtb	r3, r3
 8003102:	f003 0307 	and.w	r3, r3, #7
 8003106:	b2da      	uxtb	r2, r3
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	b2db      	uxtb	r3, r3
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	b2db      	uxtb	r3, r3
 8003114:	f003 0306 	and.w	r3, r3, #6
 8003118:	b2da      	uxtb	r2, r3
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003122:	0a1b      	lsrs	r3, r3, #8
 8003124:	b2db      	uxtb	r3, r3
 8003126:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	7e1b      	ldrb	r3, [r3, #24]
 800312c:	b2da      	uxtb	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	09db      	lsrs	r3, r3, #7
 8003132:	b2db      	uxtb	r3, r3
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	b2db      	uxtb	r3, r3
 800313a:	4313      	orrs	r3, r2
 800313c:	b2da      	uxtb	r2, r3
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	1c5a      	adds	r2, r3, #1
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	7e1b      	ldrb	r3, [r3, #24]
 8003150:	b2db      	uxtb	r3, r3
 8003152:	3302      	adds	r3, #2
 8003154:	2201      	movs	r2, #1
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800315e:	fb02 f203 	mul.w	r2, r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	7a1b      	ldrb	r3, [r3, #8]
 800316a:	b2db      	uxtb	r3, r3
 800316c:	461a      	mov	r2, r3
 800316e:	2301      	movs	r3, #1
 8003170:	fa03 f202 	lsl.w	r2, r3, r2
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003180:	0a52      	lsrs	r2, r2, #9
 8003182:	fb02 f203 	mul.w	r2, r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003190:	661a      	str	r2, [r3, #96]	; 0x60
 8003192:	e04d      	b.n	8003230 <HAL_SD_GetCardCSD+0x2c2>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003198:	2b01      	cmp	r3, #1
 800319a:	d138      	bne.n	800320e <HAL_SD_GetCardCSD+0x2a0>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	041b      	lsls	r3, r3, #16
 80031a8:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031b4:	0e1b      	lsrs	r3, r3, #24
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8U);
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	691a      	ldr	r2, [r3, #16]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	021b      	lsls	r3, r3, #8
 80031c2:	431a      	orrs	r2, r3
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031cc:	0c1b      	lsrs	r3, r3, #16
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	691a      	ldr	r2, [r3, #16]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	431a      	orrs	r2, r3
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031e2:	0a1b      	lsrs	r3, r3, #8
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	3301      	adds	r3, #1
 80031ee:	029a      	lsls	r2, r3, #10
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	655a      	str	r2, [r3, #84]	; 0x54
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003202:	659a      	str	r2, [r3, #88]	; 0x58
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	661a      	str	r2, [r3, #96]	; 0x60
 800320c:	e010      	b.n	8003230 <HAL_SD_GetCardCSD+0x2c2>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003216:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e0c1      	b.n	80033b4 <HAL_SD_GetCardCSD+0x446>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	099b      	lsrs	r3, r3, #6
 8003234:	b2db      	uxtb	r3, r3
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	b2da      	uxtb	r2, r3
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	b2db      	uxtb	r3, r3
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	b2db      	uxtb	r3, r3
 8003248:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800324c:	b2da      	uxtb	r2, r3
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003256:	b2db      	uxtb	r3, r3
 8003258:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	7e9b      	ldrb	r3, [r3, #26]
 800325e:	b2da      	uxtb	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	09db      	lsrs	r3, r3, #7
 8003264:	b2db      	uxtb	r3, r3
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	b2db      	uxtb	r3, r3
 800326c:	4313      	orrs	r3, r2
 800326e:	b2da      	uxtb	r2, r3
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	b2db      	uxtb	r3, r3
 8003278:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800327c:	b2da      	uxtb	r2, r3
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003286:	0e1b      	lsrs	r3, r3, #24
 8003288:	b2db      	uxtb	r3, r3
 800328a:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	09db      	lsrs	r3, r3, #7
 8003290:	b2db      	uxtb	r3, r3
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	b2da      	uxtb	r2, r3
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	095b      	lsrs	r3, r3, #5
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	f003 0303 	and.w	r3, r3, #3
 80032a6:	b2da      	uxtb	r2, r3
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	089b      	lsrs	r3, r3, #2
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	b2da      	uxtb	r2, r3
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	f003 030c 	and.w	r3, r3, #12
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d2:	0c1b      	lsrs	r3, r3, #16
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	7fdb      	ldrb	r3, [r3, #31]
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	099b      	lsrs	r3, r3, #6
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	f003 0303 	and.w	r3, r3, #3
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	4313      	orrs	r3, r2
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	095b      	lsrs	r3, r3, #5
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0U;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	b2db      	uxtb	r3, r3
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	b2da      	uxtb	r2, r3
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003320:	0a1b      	lsrs	r3, r3, #8
 8003322:	b2db      	uxtb	r3, r3
 8003324:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	09db      	lsrs	r3, r3, #7
 800332a:	b2db      	uxtb	r3, r3
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	b2da      	uxtb	r2, r3
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	099b      	lsrs	r3, r3, #6
 800333c:	b2db      	uxtb	r3, r3
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	b2da      	uxtb	r2, r3
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	095b      	lsrs	r3, r3, #5
 800334e:	b2db      	uxtb	r3, r3
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	b2da      	uxtb	r2, r3
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	091b      	lsrs	r3, r3, #4
 8003360:	b2db      	uxtb	r3, r3
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	b2da      	uxtb	r2, r3
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	089b      	lsrs	r3, r3, #2
 8003372:	b2db      	uxtb	r3, r3
 8003374:	f003 0303 	and.w	r3, r3, #3
 8003378:	b2da      	uxtb	r2, r3
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	b2db      	uxtb	r3, r3
 8003384:	f003 0303 	and.w	r3, r3, #3
 8003388:	b2da      	uxtb	r2, r3
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003394:	b2db      	uxtb	r3, r3
 8003396:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	085b      	lsrs	r3, r3, #1
 800339c:	b2db      	uxtb	r3, r3
 800339e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003418:	b5b0      	push	{r4, r5, r7, lr}
 800341a:	b08e      	sub	sp, #56	; 0x38
 800341c:	af04      	add	r7, sp, #16
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003422:	2300      	movs	r3, #0
 8003424:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2203      	movs	r2, #3
 800342a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003432:	2b03      	cmp	r3, #3
 8003434:	d02e      	beq.n	8003494 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800343c:	d106      	bne.n	800344c <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003442:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	639a      	str	r2, [r3, #56]	; 0x38
 800344a:	e029      	b.n	80034a0 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003452:	d10a      	bne.n	800346a <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 fa1b 	bl	8003890 <SD_WideBus_Enable>
 800345a:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003462:	431a      	orrs	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	639a      	str	r2, [r3, #56]	; 0x38
 8003468:	e01a      	b.n	80034a0 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10a      	bne.n	8003486 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 fa5a 	bl	800392a <SD_WideBus_Disable>
 8003476:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800347c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347e:	431a      	orrs	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	639a      	str	r2, [r3, #56]	; 0x38
 8003484:	e00c      	b.n	80034a0 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	639a      	str	r2, [r3, #56]	; 0x38
 8003492:	e005      	b.n	80034a0 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003498:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00a      	beq.n	80034be <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80034b0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e024      	b.n	8003508 <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	623b      	str	r3, [r7, #32]
    SDIO_Init(hsd->Instance, Init);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681d      	ldr	r5, [r3, #0]
 80034e4:	466c      	mov	r4, sp
 80034e6:	f107 0318 	add.w	r3, r7, #24
 80034ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80034ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80034f2:	f107 030c 	add.w	r3, r7, #12
 80034f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034f8:	4628      	mov	r0, r5
 80034fa:	f000 ff2f 	bl	800435c <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3728      	adds	r7, #40	; 0x28
 800350c:	46bd      	mov	sp, r7
 800350e:	bdb0      	pop	{r4, r5, r7, pc}

08003510 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 8003518:	2304      	movs	r3, #4
 800351a:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800351c:	2300      	movs	r3, #0
 800351e:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 8003520:	2300      	movs	r3, #0
 8003522:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 8003524:	f107 030c 	add.w	r3, r7, #12
 8003528:	4619      	mov	r1, r3
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f986 	bl	800383c <SD_SendStatus>
 8003530:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d005      	beq.n	8003544 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	431a      	orrs	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9U) & 0x0FU);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	0a5b      	lsrs	r3, r3, #9
 8003548:	b2db      	uxtb	r3, r3
 800354a:	f003 030f 	and.w	r3, r3, #15
 800354e:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 8003550:	7dfb      	ldrb	r3, [r7, #23]
}
 8003552:	4618      	mov	r0, r3
 8003554:	3718      	adds	r7, #24
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800355a:	b5b0      	push	{r4, r5, r7, lr}
 800355c:	b094      	sub	sp, #80	; 0x50
 800355e:	af04      	add	r7, sp, #16
 8003560:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003562:	2300      	movs	r3, #0
 8003564:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1U;
 8003566:	2301      	movs	r3, #1
 8003568:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4618      	mov	r0, r3
 8003570:	f000 ff4b 	bl	800440a <SDIO_GetPowerState>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d102      	bne.n	8003580 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800357a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800357e:	e0b1      	b.n	80036e4 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003584:	2b03      	cmp	r3, #3
 8003586:	d02f      	beq.n	80035e8 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4618      	mov	r0, r3
 800358e:	f001 f991 	bl	80048b4 <SDMMC_CmdSendCID>
 8003592:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <SD_InitCard+0x44>
    {
      return errorstate;
 800359a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800359c:	e0a2      	b.n	80036e4 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2100      	movs	r1, #0
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 ff75 	bl	8004494 <SDIO_GetResponse>
 80035aa:	4602      	mov	r2, r0
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2104      	movs	r1, #4
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 ff6c 	bl	8004494 <SDIO_GetResponse>
 80035bc:	4602      	mov	r2, r0
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2108      	movs	r1, #8
 80035c8:	4618      	mov	r0, r3
 80035ca:	f000 ff63 	bl	8004494 <SDIO_GetResponse>
 80035ce:	4602      	mov	r2, r0
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	210c      	movs	r1, #12
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 ff5a 	bl	8004494 <SDIO_GetResponse>
 80035e0:	4602      	mov	r2, r0
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ec:	2b03      	cmp	r3, #3
 80035ee:	d00d      	beq.n	800360c <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f107 020e 	add.w	r2, r7, #14
 80035f8:	4611      	mov	r1, r2
 80035fa:	4618      	mov	r0, r3
 80035fc:	f001 f99b 	bl	8004936 <SDMMC_CmdSetRelAdd>
 8003600:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003604:	2b00      	cmp	r3, #0
 8003606:	d001      	beq.n	800360c <SD_InitCard+0xb2>
    {
      return errorstate;
 8003608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800360a:	e06b      	b.n	80036e4 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003610:	2b03      	cmp	r3, #3
 8003612:	d036      	beq.n	8003682 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003614:	89fb      	ldrh	r3, [r7, #14]
 8003616:	461a      	mov	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003624:	041b      	lsls	r3, r3, #16
 8003626:	4619      	mov	r1, r3
 8003628:	4610      	mov	r0, r2
 800362a:	f001 f963 	bl	80048f4 <SDMMC_CmdSendCSD>
 800362e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <SD_InitCard+0xe0>
    {
      return errorstate;
 8003636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003638:	e054      	b.n	80036e4 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2100      	movs	r1, #0
 8003640:	4618      	mov	r0, r3
 8003642:	f000 ff27 	bl	8004494 <SDIO_GetResponse>
 8003646:	4602      	mov	r2, r0
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2104      	movs	r1, #4
 8003652:	4618      	mov	r0, r3
 8003654:	f000 ff1e 	bl	8004494 <SDIO_GetResponse>
 8003658:	4602      	mov	r2, r0
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2108      	movs	r1, #8
 8003664:	4618      	mov	r0, r3
 8003666:	f000 ff15 	bl	8004494 <SDIO_GetResponse>
 800366a:	4602      	mov	r2, r0
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	210c      	movs	r1, #12
 8003676:	4618      	mov	r0, r3
 8003678:	f000 ff0c 	bl	8004494 <SDIO_GetResponse>
 800367c:	4602      	mov	r2, r0
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2104      	movs	r1, #4
 8003688:	4618      	mov	r0, r3
 800368a:	f000 ff03 	bl	8004494 <SDIO_GetResponse>
 800368e:	4603      	mov	r3, r0
 8003690:	0d1a      	lsrs	r2, r3, #20
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 8003696:	f107 0310 	add.w	r3, r7, #16
 800369a:	4619      	mov	r1, r3
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7ff fc66 	bl	8002f6e <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6819      	ldr	r1, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036aa:	041b      	lsls	r3, r3, #16
 80036ac:	f04f 0400 	mov.w	r4, #0
 80036b0:	461a      	mov	r2, r3
 80036b2:	4623      	mov	r3, r4
 80036b4:	4608      	mov	r0, r1
 80036b6:	f001 f807 	bl	80046c8 <SDMMC_CmdSelDesel>
 80036ba:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80036bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <SD_InitCard+0x16c>
  {
    return errorstate;
 80036c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036c4:	e00e      	b.n	80036e4 <SD_InitCard+0x18a>
  }

  /* Configure SDIO peripheral interface */     
  SDIO_Init(hsd->Instance, hsd->Init);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681d      	ldr	r5, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	466c      	mov	r4, sp
 80036ce:	f103 0210 	add.w	r2, r3, #16
 80036d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80036d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80036d8:	3304      	adds	r3, #4
 80036da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036dc:	4628      	mov	r0, r5
 80036de:	f000 fe3d 	bl	800435c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3740      	adds	r7, #64	; 0x40
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bdb0      	pop	{r4, r5, r7, pc}

080036ec <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80036f4:	2300      	movs	r3, #0
 80036f6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	617b      	str	r3, [r7, #20]
 80036fc:	2300      	movs	r3, #0
 80036fe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003700:	2300      	movs	r3, #0
 8003702:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4618      	mov	r0, r3
 800370a:	f001 f802 	bl	8004712 <SDMMC_CmdGoIdleState>
 800370e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <SD_PowerON+0x2e>
  {
    return errorstate;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	e08c      	b.n	8003834 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f001 f817 	bl	8004752 <SDMMC_CmdOperCond>
 8003724:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d03d      	beq.n	80037a8 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 8003732:	e032      	b.n	800379a <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	1c5a      	adds	r2, r3, #1
 8003738:	60ba      	str	r2, [r7, #8]
 800373a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800373e:	4293      	cmp	r3, r2
 8003740:	d102      	bne.n	8003748 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003742:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003746:	e075      	b.n	8003834 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2100      	movs	r1, #0
 800374e:	4618      	mov	r0, r3
 8003750:	f001 f820 	bl	8004794 <SDMMC_CmdAppCommand>
 8003754:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d002      	beq.n	8003762 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800375c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003760:	e068      	b.n	8003834 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2100      	movs	r1, #0
 8003768:	4618      	mov	r0, r3
 800376a:	f001 f837 	bl	80047dc <SDMMC_CmdAppOperCommand>
 800376e:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d002      	beq.n	800377c <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003776:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800377a:	e05b      	b.n	8003834 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2100      	movs	r1, #0
 8003782:	4618      	mov	r0, r3
 8003784:	f000 fe86 	bl	8004494 <SDIO_GetResponse>
 8003788:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	0fdb      	lsrs	r3, r3, #31
 800378e:	2b01      	cmp	r3, #1
 8003790:	d101      	bne.n	8003796 <SD_PowerON+0xaa>
 8003792:	2301      	movs	r3, #1
 8003794:	e000      	b.n	8003798 <SD_PowerON+0xac>
 8003796:	2300      	movs	r3, #0
 8003798:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0c9      	beq.n	8003734 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	645a      	str	r2, [r3, #68]	; 0x44
 80037a6:	e044      	b.n	8003832 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 80037ae:	e031      	b.n	8003814 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	1c5a      	adds	r2, r3, #1
 80037b4:	60ba      	str	r2, [r7, #8]
 80037b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d102      	bne.n	80037c4 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80037be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037c2:	e037      	b.n	8003834 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2100      	movs	r1, #0
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 ffe2 	bl	8004794 <SDMMC_CmdAppCommand>
 80037d0:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <SD_PowerON+0xf0>
      {
        return errorstate;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	e02b      	b.n	8003834 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80037e4:	4618      	mov	r0, r3
 80037e6:	f000 fff9 	bl	80047dc <SDMMC_CmdAppOperCommand>
 80037ea:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <SD_PowerON+0x10a>
      {
        return errorstate;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	e01e      	b.n	8003834 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2100      	movs	r1, #0
 80037fc:	4618      	mov	r0, r3
 80037fe:	f000 fe49 	bl	8004494 <SDIO_GetResponse>
 8003802:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	0fdb      	lsrs	r3, r3, #31
 8003808:	2b01      	cmp	r3, #1
 800380a:	d101      	bne.n	8003810 <SD_PowerON+0x124>
 800380c:	2301      	movs	r3, #1
 800380e:	e000      	b.n	8003812 <SD_PowerON+0x126>
 8003810:	2300      	movs	r3, #0
 8003812:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d0ca      	beq.n	80037b0 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d003      	beq.n	800382c <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	645a      	str	r2, [r3, #68]	; 0x44
 800382a:	e002      	b.n	8003832 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3718      	adds	r7, #24
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003846:	2300      	movs	r3, #0
 8003848:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d102      	bne.n	8003856 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 8003850:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003854:	e018      	b.n	8003888 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800385e:	041b      	lsls	r3, r3, #16
 8003860:	4619      	mov	r1, r3
 8003862:	4610      	mov	r0, r2
 8003864:	f001 f88a 	bl	800497c <SDMMC_CmdSendStatus>
 8003868:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <SD_SendStatus+0x38>
  {
    return errorstate;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	e009      	b.n	8003888 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2100      	movs	r1, #0
 800387a:	4618      	mov	r0, r3
 800387c:	f000 fe0a 	bl	8004494 <SDIO_GetResponse>
 8003880:	4602      	mov	r2, r0
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003898:	2300      	movs	r3, #0
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	2300      	movs	r3, #0
 800389e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80038a0:	2300      	movs	r3, #0
 80038a2:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2100      	movs	r1, #0
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 fdf2 	bl	8004494 <SDIO_GetResponse>
 80038b0:	4603      	mov	r3, r0
 80038b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038ba:	d102      	bne.n	80038c2 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80038bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80038c0:	e02f      	b.n	8003922 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80038c2:	f107 030c 	add.w	r3, r7, #12
 80038c6:	4619      	mov	r1, r3
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 f87b 	bl	80039c4 <SD_FindSCR>
 80038ce:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	e023      	b.n	8003922 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d01c      	beq.n	800391e <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ec:	041b      	lsls	r3, r3, #16
 80038ee:	4619      	mov	r1, r3
 80038f0:	4610      	mov	r0, r2
 80038f2:	f000 ff4f 	bl	8004794 <SDMMC_CmdAppCommand>
 80038f6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	e00f      	b.n	8003922 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2102      	movs	r1, #2
 8003908:	4618      	mov	r0, r3
 800390a:	f000 ff8c 	bl	8004826 <SDMMC_CmdBusWidth>
 800390e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	e003      	b.n	8003922 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 800391a:	2300      	movs	r3, #0
 800391c:	e001      	b.n	8003922 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800391e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003922:	4618      	mov	r0, r3
 8003924:	3718      	adds	r7, #24
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b086      	sub	sp, #24
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003932:	2300      	movs	r3, #0
 8003934:	60fb      	str	r3, [r7, #12]
 8003936:	2300      	movs	r3, #0
 8003938:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800393a:	2300      	movs	r3, #0
 800393c:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2100      	movs	r1, #0
 8003944:	4618      	mov	r0, r3
 8003946:	f000 fda5 	bl	8004494 <SDIO_GetResponse>
 800394a:	4603      	mov	r3, r0
 800394c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003950:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003954:	d102      	bne.n	800395c <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003956:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800395a:	e02f      	b.n	80039bc <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800395c:	f107 030c 	add.w	r3, r7, #12
 8003960:	4619      	mov	r1, r3
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f82e 	bl	80039c4 <SD_FindSCR>
 8003968:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	e023      	b.n	80039bc <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d01c      	beq.n	80039b8 <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003986:	041b      	lsls	r3, r3, #16
 8003988:	4619      	mov	r1, r3
 800398a:	4610      	mov	r0, r2
 800398c:	f000 ff02 	bl	8004794 <SDMMC_CmdAppCommand>
 8003990:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	e00f      	b.n	80039bc <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2100      	movs	r1, #0
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 ff3f 	bl	8004826 <SDMMC_CmdBusWidth>
 80039a8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	e003      	b.n	80039bc <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 80039b4:	2300      	movs	r3, #0
 80039b6:	e001      	b.n	80039bc <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80039b8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3718      	adds	r7, #24
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80039c4:	b590      	push	{r4, r7, lr}
 80039c6:	b08f      	sub	sp, #60	; 0x3c
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80039ce:	2300      	movs	r3, #0
 80039d0:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80039d2:	f7fc fe0f 	bl	80005f4 <HAL_GetTick>
 80039d6:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0U;
 80039d8:	2300      	movs	r3, #0
 80039da:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80039dc:	2300      	movs	r3, #0
 80039de:	60fb      	str	r3, [r7, #12]
 80039e0:	2300      	movs	r3, #0
 80039e2:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2108      	movs	r1, #8
 80039ea:	4618      	mov	r0, r3
 80039ec:	f000 fd93 	bl	8004516 <SDMMC_CmdBlockLength>
 80039f0:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 80039f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <SD_FindSCR+0x38>
  {
    return errorstate;
 80039f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fa:	e0a8      	b.n	8003b4e <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a04:	041b      	lsls	r3, r3, #16
 8003a06:	4619      	mov	r1, r3
 8003a08:	4610      	mov	r0, r2
 8003a0a:	f000 fec3 	bl	8004794 <SDMMC_CmdAppCommand>
 8003a0e:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8003a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <SD_FindSCR+0x56>
  {
    return errorstate;
 8003a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a18:	e099      	b.n	8003b4e <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003a1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a1e:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8U;
 8003a20:	2308      	movs	r3, #8
 8003a22:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003a24:	2330      	movs	r3, #48	; 0x30
 8003a26:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003a28:	2302      	movs	r3, #2
 8003a2a:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003a30:	2301      	movs	r3, #1
 8003a32:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_ConfigData(hsd->Instance, &config);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f107 0214 	add.w	r2, r7, #20
 8003a3c:	4611      	mov	r1, r2
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 fd3d 	bl	80044be <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f000 ff10 	bl	800486e <SDMMC_CmdSendSCR>
 8003a4e:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8003a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d022      	beq.n	8003a9c <SD_FindSCR+0xd8>
  {
    return errorstate;
 8003a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a58:	e079      	b.n	8003b4e <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00e      	beq.n	8003a86 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6819      	ldr	r1, [r3, #0]
 8003a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	f107 020c 	add.w	r2, r7, #12
 8003a74:	18d4      	adds	r4, r2, r3
 8003a76:	4608      	mov	r0, r1
 8003a78:	f000 fc9b 	bl	80043b2 <SDIO_ReadFIFO>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	6023      	str	r3, [r4, #0]
      index++;
 8003a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a82:	3301      	adds	r3, #1
 8003a84:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003a86:	f7fc fdb5 	bl	80005f4 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a94:	d102      	bne.n	8003a9c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8003a96:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003a9a:	e058      	b.n	8003b4e <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003aa2:	f240 432a 	movw	r3, #1066	; 0x42a
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d0d6      	beq.n	8003a5a <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab2:	f003 0308 	and.w	r3, r3, #8
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d005      	beq.n	8003ac6 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2208      	movs	r2, #8
 8003ac0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003ac2:	2308      	movs	r3, #8
 8003ac4:	e043      	b.n	8003b4e <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d005      	beq.n	8003ae0 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2202      	movs	r2, #2
 8003ada:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8003adc:	2302      	movs	r3, #2
 8003ade:	e036      	b.n	8003b4e <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae6:	f003 0320 	and.w	r3, r3, #32
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d005      	beq.n	8003afa <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2220      	movs	r2, #32
 8003af4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 8003af6:	2320      	movs	r3, #32
 8003af8:	e029      	b.n	8003b4e <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003b02:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	061a      	lsls	r2, r3, #24
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	021b      	lsls	r3, r3, #8
 8003b0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003b10:	431a      	orrs	r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	0a1b      	lsrs	r3, r3, #8
 8003b16:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8003b1a:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	3304      	adds	r3, #4
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8003b26:	430a      	orrs	r2, r1
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8003b28:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	061a      	lsls	r2, r3, #24
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	021b      	lsls	r3, r3, #8
 8003b32:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003b36:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	0a1b      	lsrs	r3, r3, #8
 8003b3c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8003b40:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	0e1b      	lsrs	r3, r3, #24
 8003b46:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	373c      	adds	r7, #60	; 0x3c
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd90      	pop	{r4, r7, pc}

08003b56 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b082      	sub	sp, #8
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d101      	bne.n	8003b68 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e056      	b.n	8003c16 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d106      	bne.n	8003b88 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f003 febe 	bl	8007904 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685a      	ldr	r2, [r3, #4]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	431a      	orrs	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	ea42 0103 	orr.w	r1, r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	0c1b      	lsrs	r3, r3, #16
 8003be6:	f003 0104 	and.w	r1, r3, #4
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	69da      	ldr	r2, [r3, #28]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b084      	sub	sp, #16
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	60f8      	str	r0, [r7, #12]
 8003c26:	60b9      	str	r1, [r7, #8]
 8003c28:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e034      	b.n	8003c9e <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d106      	bne.n	8003c4e <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f003 fa03 	bl	8007054 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	3308      	adds	r3, #8
 8003c56:	4619      	mov	r1, r3
 8003c58:	4610      	mov	r0, r2
 8003c5a:	f000 fa7b 	bl	8004154 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6818      	ldr	r0, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	461a      	mov	r2, r3
 8003c68:	68b9      	ldr	r1, [r7, #8]
 8003c6a:	f000 fae3 	bl	8004234 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6858      	ldr	r0, [r3, #4]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	689a      	ldr	r2, [r3, #8]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7a:	6879      	ldr	r1, [r7, #4]
 8003c7c:	f000 fb2e 	bl	80042dc <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	6892      	ldr	r2, [r2, #8]
 8003c88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	6892      	ldr	r2, [r2, #8]
 8003c94:	f041 0101 	orr.w	r1, r1, #1
 8003c98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b082      	sub	sp, #8
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d101      	bne.n	8003cb8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e03f      	b.n	8003d38 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d106      	bne.n	8003cd2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f003 ff65 	bl	8007b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2224      	movs	r2, #36	; 0x24
 8003cd6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68da      	ldr	r2, [r3, #12]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ce8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 f828 	bl	8003d40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	691a      	ldr	r2, [r3, #16]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cfe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	695a      	ldr	r2, [r3, #20]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d0e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68da      	ldr	r2, [r3, #12]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d1e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2220      	movs	r2, #32
 8003d32:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3708      	adds	r7, #8
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d40:	b5b0      	push	{r4, r5, r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	689a      	ldr	r2, [r3, #8]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	431a      	orrs	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	431a      	orrs	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	69db      	ldr	r3, [r3, #28]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003d80:	f023 030c 	bic.w	r3, r3, #12
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	6812      	ldr	r2, [r2, #0]
 8003d88:	68f9      	ldr	r1, [r7, #12]
 8003d8a:	430b      	orrs	r3, r1
 8003d8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	699a      	ldr	r2, [r3, #24]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	430a      	orrs	r2, r1
 8003da2:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dac:	f040 80e4 	bne.w	8003f78 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4aab      	ldr	r2, [pc, #684]	; (8004064 <UART_SetConfig+0x324>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d004      	beq.n	8003dc4 <UART_SetConfig+0x84>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4aaa      	ldr	r2, [pc, #680]	; (8004068 <UART_SetConfig+0x328>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d16c      	bne.n	8003e9e <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003dc4:	f7fe f86c 	bl	8001ea0 <HAL_RCC_GetPCLK2Freq>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	4613      	mov	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	4413      	add	r3, r2
 8003dd0:	009a      	lsls	r2, r3, #2
 8003dd2:	441a      	add	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	005b      	lsls	r3, r3, #1
 8003dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dde:	4aa3      	ldr	r2, [pc, #652]	; (800406c <UART_SetConfig+0x32c>)
 8003de0:	fba2 2303 	umull	r2, r3, r2, r3
 8003de4:	095b      	lsrs	r3, r3, #5
 8003de6:	011c      	lsls	r4, r3, #4
 8003de8:	f7fe f85a 	bl	8001ea0 <HAL_RCC_GetPCLK2Freq>
 8003dec:	4602      	mov	r2, r0
 8003dee:	4613      	mov	r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	4413      	add	r3, r2
 8003df4:	009a      	lsls	r2, r3, #2
 8003df6:	441a      	add	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	fbb2 f5f3 	udiv	r5, r2, r3
 8003e02:	f7fe f84d 	bl	8001ea0 <HAL_RCC_GetPCLK2Freq>
 8003e06:	4602      	mov	r2, r0
 8003e08:	4613      	mov	r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	4413      	add	r3, r2
 8003e0e:	009a      	lsls	r2, r3, #2
 8003e10:	441a      	add	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e1c:	4a93      	ldr	r2, [pc, #588]	; (800406c <UART_SetConfig+0x32c>)
 8003e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e22:	095b      	lsrs	r3, r3, #5
 8003e24:	2264      	movs	r2, #100	; 0x64
 8003e26:	fb02 f303 	mul.w	r3, r2, r3
 8003e2a:	1aeb      	subs	r3, r5, r3
 8003e2c:	00db      	lsls	r3, r3, #3
 8003e2e:	3332      	adds	r3, #50	; 0x32
 8003e30:	4a8e      	ldr	r2, [pc, #568]	; (800406c <UART_SetConfig+0x32c>)
 8003e32:	fba2 2303 	umull	r2, r3, r2, r3
 8003e36:	095b      	lsrs	r3, r3, #5
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e3e:	441c      	add	r4, r3
 8003e40:	f7fe f82e 	bl	8001ea0 <HAL_RCC_GetPCLK2Freq>
 8003e44:	4602      	mov	r2, r0
 8003e46:	4613      	mov	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4413      	add	r3, r2
 8003e4c:	009a      	lsls	r2, r3, #2
 8003e4e:	441a      	add	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	fbb2 f5f3 	udiv	r5, r2, r3
 8003e5a:	f7fe f821 	bl	8001ea0 <HAL_RCC_GetPCLK2Freq>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	4613      	mov	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	4413      	add	r3, r2
 8003e66:	009a      	lsls	r2, r3, #2
 8003e68:	441a      	add	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e74:	4a7d      	ldr	r2, [pc, #500]	; (800406c <UART_SetConfig+0x32c>)
 8003e76:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7a:	095b      	lsrs	r3, r3, #5
 8003e7c:	2264      	movs	r2, #100	; 0x64
 8003e7e:	fb02 f303 	mul.w	r3, r2, r3
 8003e82:	1aeb      	subs	r3, r5, r3
 8003e84:	00db      	lsls	r3, r3, #3
 8003e86:	3332      	adds	r3, #50	; 0x32
 8003e88:	4a78      	ldr	r2, [pc, #480]	; (800406c <UART_SetConfig+0x32c>)
 8003e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8e:	095b      	lsrs	r3, r3, #5
 8003e90:	f003 0207 	and.w	r2, r3, #7
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4422      	add	r2, r4
 8003e9a:	609a      	str	r2, [r3, #8]
 8003e9c:	e154      	b.n	8004148 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003e9e:	f7fd ffeb 	bl	8001e78 <HAL_RCC_GetPCLK1Freq>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4413      	add	r3, r2
 8003eaa:	009a      	lsls	r2, r3, #2
 8003eac:	441a      	add	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb8:	4a6c      	ldr	r2, [pc, #432]	; (800406c <UART_SetConfig+0x32c>)
 8003eba:	fba2 2303 	umull	r2, r3, r2, r3
 8003ebe:	095b      	lsrs	r3, r3, #5
 8003ec0:	011c      	lsls	r4, r3, #4
 8003ec2:	f7fd ffd9 	bl	8001e78 <HAL_RCC_GetPCLK1Freq>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	4613      	mov	r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	4413      	add	r3, r2
 8003ece:	009a      	lsls	r2, r3, #2
 8003ed0:	441a      	add	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	fbb2 f5f3 	udiv	r5, r2, r3
 8003edc:	f7fd ffcc 	bl	8001e78 <HAL_RCC_GetPCLK1Freq>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	4413      	add	r3, r2
 8003ee8:	009a      	lsls	r2, r3, #2
 8003eea:	441a      	add	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef6:	4a5d      	ldr	r2, [pc, #372]	; (800406c <UART_SetConfig+0x32c>)
 8003ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8003efc:	095b      	lsrs	r3, r3, #5
 8003efe:	2264      	movs	r2, #100	; 0x64
 8003f00:	fb02 f303 	mul.w	r3, r2, r3
 8003f04:	1aeb      	subs	r3, r5, r3
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	3332      	adds	r3, #50	; 0x32
 8003f0a:	4a58      	ldr	r2, [pc, #352]	; (800406c <UART_SetConfig+0x32c>)
 8003f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f10:	095b      	lsrs	r3, r3, #5
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f18:	441c      	add	r4, r3
 8003f1a:	f7fd ffad 	bl	8001e78 <HAL_RCC_GetPCLK1Freq>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	4613      	mov	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4413      	add	r3, r2
 8003f26:	009a      	lsls	r2, r3, #2
 8003f28:	441a      	add	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	fbb2 f5f3 	udiv	r5, r2, r3
 8003f34:	f7fd ffa0 	bl	8001e78 <HAL_RCC_GetPCLK1Freq>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	4413      	add	r3, r2
 8003f40:	009a      	lsls	r2, r3, #2
 8003f42:	441a      	add	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f4e:	4a47      	ldr	r2, [pc, #284]	; (800406c <UART_SetConfig+0x32c>)
 8003f50:	fba2 2303 	umull	r2, r3, r2, r3
 8003f54:	095b      	lsrs	r3, r3, #5
 8003f56:	2264      	movs	r2, #100	; 0x64
 8003f58:	fb02 f303 	mul.w	r3, r2, r3
 8003f5c:	1aeb      	subs	r3, r5, r3
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	3332      	adds	r3, #50	; 0x32
 8003f62:	4a42      	ldr	r2, [pc, #264]	; (800406c <UART_SetConfig+0x32c>)
 8003f64:	fba2 2303 	umull	r2, r3, r2, r3
 8003f68:	095b      	lsrs	r3, r3, #5
 8003f6a:	f003 0207 	and.w	r2, r3, #7
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4422      	add	r2, r4
 8003f74:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8003f76:	e0e7      	b.n	8004148 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a39      	ldr	r2, [pc, #228]	; (8004064 <UART_SetConfig+0x324>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d004      	beq.n	8003f8c <UART_SetConfig+0x24c>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a38      	ldr	r2, [pc, #224]	; (8004068 <UART_SetConfig+0x328>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d171      	bne.n	8004070 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003f8c:	f7fd ff88 	bl	8001ea0 <HAL_RCC_GetPCLK2Freq>
 8003f90:	4602      	mov	r2, r0
 8003f92:	4613      	mov	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4413      	add	r3, r2
 8003f98:	009a      	lsls	r2, r3, #2
 8003f9a:	441a      	add	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa6:	4a31      	ldr	r2, [pc, #196]	; (800406c <UART_SetConfig+0x32c>)
 8003fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fac:	095b      	lsrs	r3, r3, #5
 8003fae:	011c      	lsls	r4, r3, #4
 8003fb0:	f7fd ff76 	bl	8001ea0 <HAL_RCC_GetPCLK2Freq>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4413      	add	r3, r2
 8003fbc:	009a      	lsls	r2, r3, #2
 8003fbe:	441a      	add	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	fbb2 f5f3 	udiv	r5, r2, r3
 8003fca:	f7fd ff69 	bl	8001ea0 <HAL_RCC_GetPCLK2Freq>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4413      	add	r3, r2
 8003fd6:	009a      	lsls	r2, r3, #2
 8003fd8:	441a      	add	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe4:	4a21      	ldr	r2, [pc, #132]	; (800406c <UART_SetConfig+0x32c>)
 8003fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fea:	095b      	lsrs	r3, r3, #5
 8003fec:	2264      	movs	r2, #100	; 0x64
 8003fee:	fb02 f303 	mul.w	r3, r2, r3
 8003ff2:	1aeb      	subs	r3, r5, r3
 8003ff4:	011b      	lsls	r3, r3, #4
 8003ff6:	3332      	adds	r3, #50	; 0x32
 8003ff8:	4a1c      	ldr	r2, [pc, #112]	; (800406c <UART_SetConfig+0x32c>)
 8003ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffe:	095b      	lsrs	r3, r3, #5
 8004000:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004004:	441c      	add	r4, r3
 8004006:	f7fd ff4b 	bl	8001ea0 <HAL_RCC_GetPCLK2Freq>
 800400a:	4602      	mov	r2, r0
 800400c:	4613      	mov	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	009a      	lsls	r2, r3, #2
 8004014:	441a      	add	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	fbb2 f5f3 	udiv	r5, r2, r3
 8004020:	f7fd ff3e 	bl	8001ea0 <HAL_RCC_GetPCLK2Freq>
 8004024:	4602      	mov	r2, r0
 8004026:	4613      	mov	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	009a      	lsls	r2, r3, #2
 800402e:	441a      	add	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	fbb2 f3f3 	udiv	r3, r2, r3
 800403a:	4a0c      	ldr	r2, [pc, #48]	; (800406c <UART_SetConfig+0x32c>)
 800403c:	fba2 2303 	umull	r2, r3, r2, r3
 8004040:	095b      	lsrs	r3, r3, #5
 8004042:	2264      	movs	r2, #100	; 0x64
 8004044:	fb02 f303 	mul.w	r3, r2, r3
 8004048:	1aeb      	subs	r3, r5, r3
 800404a:	011b      	lsls	r3, r3, #4
 800404c:	3332      	adds	r3, #50	; 0x32
 800404e:	4a07      	ldr	r2, [pc, #28]	; (800406c <UART_SetConfig+0x32c>)
 8004050:	fba2 2303 	umull	r2, r3, r2, r3
 8004054:	095b      	lsrs	r3, r3, #5
 8004056:	f003 020f 	and.w	r2, r3, #15
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4422      	add	r2, r4
 8004060:	609a      	str	r2, [r3, #8]
 8004062:	e071      	b.n	8004148 <UART_SetConfig+0x408>
 8004064:	40011000 	.word	0x40011000
 8004068:	40011400 	.word	0x40011400
 800406c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004070:	f7fd ff02 	bl	8001e78 <HAL_RCC_GetPCLK1Freq>
 8004074:	4602      	mov	r2, r0
 8004076:	4613      	mov	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4413      	add	r3, r2
 800407c:	009a      	lsls	r2, r3, #2
 800407e:	441a      	add	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	fbb2 f3f3 	udiv	r3, r2, r3
 800408a:	4a31      	ldr	r2, [pc, #196]	; (8004150 <UART_SetConfig+0x410>)
 800408c:	fba2 2303 	umull	r2, r3, r2, r3
 8004090:	095b      	lsrs	r3, r3, #5
 8004092:	011c      	lsls	r4, r3, #4
 8004094:	f7fd fef0 	bl	8001e78 <HAL_RCC_GetPCLK1Freq>
 8004098:	4602      	mov	r2, r0
 800409a:	4613      	mov	r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4413      	add	r3, r2
 80040a0:	009a      	lsls	r2, r3, #2
 80040a2:	441a      	add	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	fbb2 f5f3 	udiv	r5, r2, r3
 80040ae:	f7fd fee3 	bl	8001e78 <HAL_RCC_GetPCLK1Freq>
 80040b2:	4602      	mov	r2, r0
 80040b4:	4613      	mov	r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4413      	add	r3, r2
 80040ba:	009a      	lsls	r2, r3, #2
 80040bc:	441a      	add	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c8:	4a21      	ldr	r2, [pc, #132]	; (8004150 <UART_SetConfig+0x410>)
 80040ca:	fba2 2303 	umull	r2, r3, r2, r3
 80040ce:	095b      	lsrs	r3, r3, #5
 80040d0:	2264      	movs	r2, #100	; 0x64
 80040d2:	fb02 f303 	mul.w	r3, r2, r3
 80040d6:	1aeb      	subs	r3, r5, r3
 80040d8:	011b      	lsls	r3, r3, #4
 80040da:	3332      	adds	r3, #50	; 0x32
 80040dc:	4a1c      	ldr	r2, [pc, #112]	; (8004150 <UART_SetConfig+0x410>)
 80040de:	fba2 2303 	umull	r2, r3, r2, r3
 80040e2:	095b      	lsrs	r3, r3, #5
 80040e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040e8:	441c      	add	r4, r3
 80040ea:	f7fd fec5 	bl	8001e78 <HAL_RCC_GetPCLK1Freq>
 80040ee:	4602      	mov	r2, r0
 80040f0:	4613      	mov	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4413      	add	r3, r2
 80040f6:	009a      	lsls	r2, r3, #2
 80040f8:	441a      	add	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	fbb2 f5f3 	udiv	r5, r2, r3
 8004104:	f7fd feb8 	bl	8001e78 <HAL_RCC_GetPCLK1Freq>
 8004108:	4602      	mov	r2, r0
 800410a:	4613      	mov	r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	4413      	add	r3, r2
 8004110:	009a      	lsls	r2, r3, #2
 8004112:	441a      	add	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	fbb2 f3f3 	udiv	r3, r2, r3
 800411e:	4a0c      	ldr	r2, [pc, #48]	; (8004150 <UART_SetConfig+0x410>)
 8004120:	fba2 2303 	umull	r2, r3, r2, r3
 8004124:	095b      	lsrs	r3, r3, #5
 8004126:	2264      	movs	r2, #100	; 0x64
 8004128:	fb02 f303 	mul.w	r3, r2, r3
 800412c:	1aeb      	subs	r3, r5, r3
 800412e:	011b      	lsls	r3, r3, #4
 8004130:	3332      	adds	r3, #50	; 0x32
 8004132:	4a07      	ldr	r2, [pc, #28]	; (8004150 <UART_SetConfig+0x410>)
 8004134:	fba2 2303 	umull	r2, r3, r2, r3
 8004138:	095b      	lsrs	r3, r3, #5
 800413a:	f003 020f 	and.w	r2, r3, #15
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4422      	add	r2, r4
 8004144:	609a      	str	r2, [r3, #8]
}
 8004146:	e7ff      	b.n	8004148 <UART_SetConfig+0x408>
 8004148:	bf00      	nop
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bdb0      	pop	{r4, r5, r7, pc}
 8004150:	51eb851f 	.word	0x51eb851f

08004154 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800415e:	2300      	movs	r3, #0
 8004160:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800416c:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	4b2f      	ldr	r3, [pc, #188]	; (8004230 <FSMC_NORSRAM_Init+0xdc>)
 8004172:	4013      	ands	r3, r2
 8004174:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800417e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8004184:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800418a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8004190:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 8004196:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800419c:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 80041a2:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 80041a8:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 80041ae:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 80041b4:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 80041ba:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 80041c0:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 80041c6:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	2b08      	cmp	r3, #8
 80041d4:	d103      	bne.n	80041de <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041dc:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68f9      	ldr	r1, [r7, #12]
 80041e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041f2:	d10a      	bne.n	800420a <FSMC_NORSRAM_Init+0xb6>
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d006      	beq.n	800420a <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004204:	431a      	orrs	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d006      	beq.n	8004220 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421a:	431a      	orrs	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3714      	adds	r7, #20
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	ffc00480 	.word	0xffc00480

08004234 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004234:	b480      	push	{r7}
 8004236:	b087      	sub	sp, #28
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8004240:	2300      	movs	r3, #0
 8004242:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	1c5a      	adds	r2, r3, #1
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800424e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004256:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004262:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800426a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8004272:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	3b01      	subs	r3, #1
 800427a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800427c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	3b02      	subs	r3, #2
 8004284:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004286:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800428c:	4313      	orrs	r3, r2
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	4313      	orrs	r3, r2
 8004292:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	1c5a      	adds	r2, r3, #1
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6979      	ldr	r1, [r7, #20]
 800429c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042ac:	d10e      	bne.n	80042cc <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80042b6:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	3b01      	subs	r3, #1
 80042be:	051b      	lsls	r3, r3, #20
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	371c      	adds	r7, #28
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
	...

080042dc <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80042dc:	b480      	push	{r7}
 80042de:	b087      	sub	sp, #28
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
 80042e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042f4:	d122      	bne.n	800433c <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042fe:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	4b15      	ldr	r3, [pc, #84]	; (8004358 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8004304:	4013      	ands	r3, r2
 8004306:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004312:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800431a:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8004322:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004328:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	4313      	orrs	r3, r2
 800432e:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	6979      	ldr	r1, [r7, #20]
 8004336:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800433a:	e005      	b.n	8004348 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8004344:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	371c      	adds	r7, #28
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	cff00000 	.word	0xcff00000

0800435c <SDIO_Init>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800435c:	b084      	sub	sp, #16
 800435e:	b480      	push	{r7}
 8004360:	b085      	sub	sp, #20
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
 8004366:	f107 001c 	add.w	r0, r7, #28
 800436a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U;
 800436e:	2300      	movs	r3, #0
 8004370:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004372:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004374:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004376:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800437a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800437c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800437e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004382:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004386:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	4313      	orrs	r3, r2
 800438c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004396:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	431a      	orrs	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3714      	adds	r7, #20
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	b004      	add	sp, #16
 80043b0:	4770      	bx	lr

080043b2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b083      	sub	sp, #12
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <SDIO_WriteFIFO>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80043ee:	b480      	push	{r7}
 80043f0:	b083      	sub	sp, #12
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2203      	movs	r2, #3
 80043fa:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800440a:	b480      	push	{r7}
 800440c:	b083      	sub	sp, #12
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0303 	and.w	r3, r3, #3
}
 800441a:	4618      	mov	r0, r3
 800441c:	370c      	adds	r7, #12
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <SDIO_SendCommand>:
  * @param  Command pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004426:	b480      	push	{r7}
 8004428:	b085      	sub	sp, #20
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
 800442e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004430:	2300      	movs	r3, #0
 8004432:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004444:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800444a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004450:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	4313      	orrs	r3, r2
 8004456:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004460:	f023 030f 	bic.w	r3, r3, #15
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	431a      	orrs	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3714      	adds	r7, #20
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800447a:	b480      	push	{r7}
 800447c:	b083      	sub	sp, #12
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	b2db      	uxtb	r3, r3
}
 8004488:	4618      	mov	r0, r3
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <SDIO_GetResponse>:
  *            @arg SDIO_RESP1: Response Register 3
  *            @arg SDIO_RESP1: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 800449e:	2300      	movs	r3, #0
 80044a0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	3314      	adds	r3, #20
 80044a6:	461a      	mov	r2, r3
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	4413      	add	r3, r2
 80044ac:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
}  
 80044b2:	4618      	mov	r0, r3
 80044b4:	3714      	adds	r7, #20
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr

080044be <SDIO_ConfigData>:
  * @param  Data  pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80044be:	b480      	push	{r7}
 80044c0:	b085      	sub	sp, #20
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
 80044c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	685a      	ldr	r2, [r3, #4]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80044e4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80044ea:	431a      	orrs	r2, r3
                       Data->DPSM);
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80044f0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fc:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	431a      	orrs	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004508:	2300      	movs	r3, #0

}
 800450a:	4618      	mov	r0, r3
 800450c:	3714      	adds	r7, #20
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b088      	sub	sp, #32
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
 800451e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004520:	2300      	movs	r3, #0
 8004522:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004528:	2310      	movs	r3, #16
 800452a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800452c:	2340      	movs	r3, #64	; 0x40
 800452e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004530:	2300      	movs	r3, #0
 8004532:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004534:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004538:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800453a:	f107 0308 	add.w	r3, r7, #8
 800453e:	4619      	mov	r1, r3
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f7ff ff70 	bl	8004426 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004546:	f241 3288 	movw	r2, #5000	; 0x1388
 800454a:	2110      	movs	r1, #16
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 fa63 	bl	8004a18 <SDMMC_GetCmdResp1>
 8004552:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004554:	69fb      	ldr	r3, [r7, #28]
}
 8004556:	4618      	mov	r0, r3
 8004558:	3720      	adds	r7, #32
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800455e:	b580      	push	{r7, lr}
 8004560:	b088      	sub	sp, #32
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
 8004566:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004568:	2300      	movs	r3, #0
 800456a:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004570:	2311      	movs	r3, #17
 8004572:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004574:	2340      	movs	r3, #64	; 0x40
 8004576:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004578:	2300      	movs	r3, #0
 800457a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800457c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004580:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004582:	f107 0308 	add.w	r3, r7, #8
 8004586:	4619      	mov	r1, r3
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f7ff ff4c 	bl	8004426 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800458e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004592:	2111      	movs	r1, #17
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 fa3f 	bl	8004a18 <SDMMC_GetCmdResp1>
 800459a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800459c:	69fb      	ldr	r3, [r7, #28]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3720      	adds	r7, #32
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b088      	sub	sp, #32
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
 80045ae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80045b0:	2300      	movs	r3, #0
 80045b2:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80045b8:	2312      	movs	r3, #18
 80045ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80045bc:	2340      	movs	r3, #64	; 0x40
 80045be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80045c0:	2300      	movs	r3, #0
 80045c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80045c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045c8:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80045ca:	f107 0308 	add.w	r3, r7, #8
 80045ce:	4619      	mov	r1, r3
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f7ff ff28 	bl	8004426 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80045d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045da:	2112      	movs	r1, #18
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 fa1b 	bl	8004a18 <SDMMC_GetCmdResp1>
 80045e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80045e4:	69fb      	ldr	r3, [r7, #28]
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3720      	adds	r7, #32
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b088      	sub	sp, #32
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
 80045f6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80045f8:	2300      	movs	r3, #0
 80045fa:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004600:	2318      	movs	r3, #24
 8004602:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004604:	2340      	movs	r3, #64	; 0x40
 8004606:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004608:	2300      	movs	r3, #0
 800460a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800460c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004610:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004612:	f107 0308 	add.w	r3, r7, #8
 8004616:	4619      	mov	r1, r3
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f7ff ff04 	bl	8004426 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800461e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004622:	2118      	movs	r1, #24
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 f9f7 	bl	8004a18 <SDMMC_GetCmdResp1>
 800462a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800462c:	69fb      	ldr	r3, [r7, #28]
}
 800462e:	4618      	mov	r0, r3
 8004630:	3720      	adds	r7, #32
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b088      	sub	sp, #32
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
 800463e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004640:	2300      	movs	r3, #0
 8004642:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004648:	2319      	movs	r3, #25
 800464a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800464c:	2340      	movs	r3, #64	; 0x40
 800464e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004650:	2300      	movs	r3, #0
 8004652:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004654:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004658:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800465a:	f107 0308 	add.w	r3, r7, #8
 800465e:	4619      	mov	r1, r3
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f7ff fee0 	bl	8004426 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004666:	f241 3288 	movw	r2, #5000	; 0x1388
 800466a:	2119      	movs	r1, #25
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f9d3 	bl	8004a18 <SDMMC_GetCmdResp1>
 8004672:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004674:	69fb      	ldr	r3, [r7, #28]
}
 8004676:	4618      	mov	r0, r3
 8004678:	3720      	adds	r7, #32
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
	...

08004680 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b088      	sub	sp, #32
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004688:	2300      	movs	r3, #0
 800468a:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800468c:	2300      	movs	r3, #0
 800468e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004690:	230c      	movs	r3, #12
 8004692:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004694:	2340      	movs	r3, #64	; 0x40
 8004696:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004698:	2300      	movs	r3, #0
 800469a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800469c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046a0:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80046a2:	f107 0308 	add.w	r3, r7, #8
 80046a6:	4619      	mov	r1, r3
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f7ff febc 	bl	8004426 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 80046ae:	4a05      	ldr	r2, [pc, #20]	; (80046c4 <SDMMC_CmdStopTransfer+0x44>)
 80046b0:	210c      	movs	r1, #12
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f9b0 	bl	8004a18 <SDMMC_GetCmdResp1>
 80046b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80046ba:	69fb      	ldr	r3, [r7, #28]
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3720      	adds	r7, #32
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	05f5e100 	.word	0x05f5e100

080046c8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx Pointer to SDIO register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b08a      	sub	sp, #40	; 0x28
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80046d4:	2300      	movs	r3, #0
 80046d6:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80046dc:	2307      	movs	r3, #7
 80046de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80046e0:	2340      	movs	r3, #64	; 0x40
 80046e2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80046e4:	2300      	movs	r3, #0
 80046e6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80046e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046ec:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80046ee:	f107 0310 	add.w	r3, r7, #16
 80046f2:	4619      	mov	r1, r3
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f7ff fe96 	bl	8004426 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80046fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80046fe:	2107      	movs	r1, #7
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	f000 f989 	bl	8004a18 <SDMMC_GetCmdResp1>
 8004706:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800470a:	4618      	mov	r0, r3
 800470c:	3728      	adds	r7, #40	; 0x28
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b088      	sub	sp, #32
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800471a:	2300      	movs	r3, #0
 800471c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0U;
 800471e:	2300      	movs	r3, #0
 8004720:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004722:	2300      	movs	r3, #0
 8004724:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004726:	2300      	movs	r3, #0
 8004728:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800472a:	2300      	movs	r3, #0
 800472c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800472e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004732:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004734:	f107 0308 	add.w	r3, r7, #8
 8004738:	4619      	mov	r1, r3
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7ff fe73 	bl	8004426 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 f93f 	bl	80049c4 <SDMMC_GetCmdError>
 8004746:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004748:	69fb      	ldr	r3, [r7, #28]
}
 800474a:	4618      	mov	r0, r3
 800474c:	3720      	adds	r7, #32
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	b088      	sub	sp, #32
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800475a:	2300      	movs	r3, #0
 800475c:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800475e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004762:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004764:	2308      	movs	r3, #8
 8004766:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004768:	2340      	movs	r3, #64	; 0x40
 800476a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800476c:	2300      	movs	r3, #0
 800476e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004770:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004774:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004776:	f107 0308 	add.w	r3, r7, #8
 800477a:	4619      	mov	r1, r3
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f7ff fe52 	bl	8004426 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 fb10 	bl	8004da8 <SDMMC_GetCmdResp7>
 8004788:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800478a:	69fb      	ldr	r3, [r7, #28]
}
 800478c:	4618      	mov	r0, r3
 800478e:	3720      	adds	r7, #32
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b088      	sub	sp, #32
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800479e:	2300      	movs	r3, #0
 80047a0:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80047a6:	2337      	movs	r3, #55	; 0x37
 80047a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80047aa:	2340      	movs	r3, #64	; 0x40
 80047ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80047ae:	2300      	movs	r3, #0
 80047b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80047b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047b6:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80047b8:	f107 0308 	add.w	r3, r7, #8
 80047bc:	4619      	mov	r1, r3
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f7ff fe31 	bl	8004426 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80047c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c8:	2137      	movs	r1, #55	; 0x37
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 f924 	bl	8004a18 <SDMMC_GetCmdResp1>
 80047d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80047d2:	69fb      	ldr	r3, [r7, #28]
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3720      	adds	r7, #32
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b088      	sub	sp, #32
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80047e6:	2300      	movs	r3, #0
 80047e8:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80047f6:	2329      	movs	r3, #41	; 0x29
 80047f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80047fa:	2340      	movs	r3, #64	; 0x40
 80047fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80047fe:	2300      	movs	r3, #0
 8004800:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004802:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004806:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004808:	f107 0308 	add.w	r3, r7, #8
 800480c:	4619      	mov	r1, r3
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7ff fe09 	bl	8004426 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 fa25 	bl	8004c64 <SDMMC_GetCmdResp3>
 800481a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800481c:	69fb      	ldr	r3, [r7, #28]
}
 800481e:	4618      	mov	r0, r3
 8004820:	3720      	adds	r7, #32
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b088      	sub	sp, #32
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
 800482e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004830:	2300      	movs	r3, #0
 8004832:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004838:	2306      	movs	r3, #6
 800483a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800483c:	2340      	movs	r3, #64	; 0x40
 800483e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004840:	2300      	movs	r3, #0
 8004842:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004844:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004848:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800484a:	f107 0308 	add.w	r3, r7, #8
 800484e:	4619      	mov	r1, r3
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f7ff fde8 	bl	8004426 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8004856:	f241 3288 	movw	r2, #5000	; 0x1388
 800485a:	2106      	movs	r1, #6
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 f8db 	bl	8004a18 <SDMMC_GetCmdResp1>
 8004862:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004864:	69fb      	ldr	r3, [r7, #28]
}
 8004866:	4618      	mov	r0, r3
 8004868:	3720      	adds	r7, #32
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b088      	sub	sp, #32
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004876:	2300      	movs	r3, #0
 8004878:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800487a:	2300      	movs	r3, #0
 800487c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800487e:	2333      	movs	r3, #51	; 0x33
 8004880:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004882:	2340      	movs	r3, #64	; 0x40
 8004884:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004886:	2300      	movs	r3, #0
 8004888:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800488a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800488e:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004890:	f107 0308 	add.w	r3, r7, #8
 8004894:	4619      	mov	r1, r3
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7ff fdc5 	bl	8004426 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800489c:	f241 3288 	movw	r2, #5000	; 0x1388
 80048a0:	2133      	movs	r1, #51	; 0x33
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f8b8 	bl	8004a18 <SDMMC_GetCmdResp1>
 80048a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80048aa:	69fb      	ldr	r3, [r7, #28]
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3720      	adds	r7, #32
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b088      	sub	sp, #32
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80048bc:	2300      	movs	r3, #0
 80048be:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80048c0:	2300      	movs	r3, #0
 80048c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80048c4:	2302      	movs	r3, #2
 80048c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80048c8:	23c0      	movs	r3, #192	; 0xc0
 80048ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80048cc:	2300      	movs	r3, #0
 80048ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80048d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048d4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80048d6:	f107 0308 	add.w	r3, r7, #8
 80048da:	4619      	mov	r1, r3
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f7ff fda2 	bl	8004426 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 f97e 	bl	8004be4 <SDMMC_GetCmdResp2>
 80048e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80048ea:	69fb      	ldr	r3, [r7, #28]
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3720      	adds	r7, #32
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b088      	sub	sp, #32
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80048fe:	2300      	movs	r3, #0
 8004900:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004906:	2309      	movs	r3, #9
 8004908:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800490a:	23c0      	movs	r3, #192	; 0xc0
 800490c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800490e:	2300      	movs	r3, #0
 8004910:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004912:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004916:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004918:	f107 0308 	add.w	r3, r7, #8
 800491c:	4619      	mov	r1, r3
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7ff fd81 	bl	8004426 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 f95d 	bl	8004be4 <SDMMC_GetCmdResp2>
 800492a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800492c:	69fb      	ldr	r3, [r7, #28]
}
 800492e:	4618      	mov	r0, r3
 8004930:	3720      	adds	r7, #32
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b088      	sub	sp, #32
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
 800493e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004940:	2300      	movs	r3, #0
 8004942:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004944:	2300      	movs	r3, #0
 8004946:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004948:	2303      	movs	r3, #3
 800494a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800494c:	2340      	movs	r3, #64	; 0x40
 800494e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004950:	2300      	movs	r3, #0
 8004952:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004954:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004958:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800495a:	f107 0308 	add.w	r3, r7, #8
 800495e:	4619      	mov	r1, r3
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f7ff fd60 	bl	8004426 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	2103      	movs	r1, #3
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f9ae 	bl	8004ccc <SDMMC_GetCmdResp6>
 8004970:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004972:	69fb      	ldr	r3, [r7, #28]
}
 8004974:	4618      	mov	r0, r3
 8004976:	3720      	adds	r7, #32
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b088      	sub	sp, #32
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004986:	2300      	movs	r3, #0
 8004988:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800498e:	230d      	movs	r3, #13
 8004990:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004992:	2340      	movs	r3, #64	; 0x40
 8004994:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004996:	2300      	movs	r3, #0
 8004998:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800499a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800499e:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80049a0:	f107 0308 	add.w	r3, r7, #8
 80049a4:	4619      	mov	r1, r3
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f7ff fd3d 	bl	8004426 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80049ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80049b0:	210d      	movs	r1, #13
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f830 	bl	8004a18 <SDMMC_GetCmdResp1>
 80049b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049ba:	69fb      	ldr	r3, [r7, #28]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3720      	adds	r7, #32
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80049c4:	b490      	push	{r4, r7}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80049cc:	4b10      	ldr	r3, [pc, #64]	; (8004a10 <SDMMC_GetCmdError+0x4c>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a10      	ldr	r2, [pc, #64]	; (8004a14 <SDMMC_GetCmdError+0x50>)
 80049d2:	fba2 2303 	umull	r2, r3, r2, r3
 80049d6:	0a5b      	lsrs	r3, r3, #9
 80049d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049dc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80049e0:	4623      	mov	r3, r4
 80049e2:	1e5c      	subs	r4, r3, #1
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d102      	bne.n	80049ee <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80049e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80049ec:	e00a      	b.n	8004a04 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d0f2      	beq.n	80049e0 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004a00:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3708      	adds	r7, #8
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bc90      	pop	{r4, r7}
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	20000118 	.word	0x20000118
 8004a14:	10624dd3 	.word	0x10624dd3

08004a18 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004a18:	b590      	push	{r4, r7, lr}
 8004a1a:	b087      	sub	sp, #28
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	460b      	mov	r3, r1
 8004a22:	607a      	str	r2, [r7, #4]
 8004a24:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004a26:	4b6c      	ldr	r3, [pc, #432]	; (8004bd8 <SDMMC_GetCmdResp1+0x1c0>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a6c      	ldr	r2, [pc, #432]	; (8004bdc <SDMMC_GetCmdResp1+0x1c4>)
 8004a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a30:	0a5b      	lsrs	r3, r3, #9
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004a38:	4623      	mov	r3, r4
 8004a3a:	1e5c      	subs	r4, r3, #1
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d102      	bne.n	8004a46 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004a40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004a44:	e0c3      	b.n	8004bce <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a4a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d0f2      	beq.n	8004a38 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a56:	f003 0304 	and.w	r3, r3, #4
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d004      	beq.n	8004a68 <SDMMC_GetCmdResp1+0x50>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2204      	movs	r2, #4
 8004a62:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004a64:	2304      	movs	r3, #4
 8004a66:	e0b2      	b.n	8004bce <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d004      	beq.n	8004a7e <SDMMC_GetCmdResp1+0x66>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2201      	movs	r2, #1
 8004a78:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e0a7      	b.n	8004bce <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004a7e:	68f8      	ldr	r0, [r7, #12]
 8004a80:	f7ff fcfb 	bl	800447a <SDIO_GetCommandResponse>
 8004a84:	4603      	mov	r3, r0
 8004a86:	461a      	mov	r2, r3
 8004a88:	7afb      	ldrb	r3, [r7, #11]
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d001      	beq.n	8004a92 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e09d      	b.n	8004bce <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004a98:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f7ff fcf9 	bl	8004494 <SDIO_GetResponse>
 8004aa2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	4b4e      	ldr	r3, [pc, #312]	; (8004be0 <SDMMC_GetCmdResp1+0x1c8>)
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d101      	bne.n	8004ab2 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	e08d      	b.n	8004bce <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	da02      	bge.n	8004abe <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004ab8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004abc:	e087      	b.n	8004bce <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d001      	beq.n	8004acc <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004ac8:	2340      	movs	r3, #64	; 0x40
 8004aca:	e080      	b.n	8004bce <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004ad6:	2380      	movs	r3, #128	; 0x80
 8004ad8:	e079      	b.n	8004bce <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d002      	beq.n	8004aea <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004ae4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ae8:	e071      	b.n	8004bce <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d002      	beq.n	8004afa <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004af4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004af8:	e069      	b.n	8004bce <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d002      	beq.n	8004b0a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004b04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b08:	e061      	b.n	8004bce <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d002      	beq.n	8004b1a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004b14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b18:	e059      	b.n	8004bce <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d002      	beq.n	8004b2a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004b24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b28:	e051      	b.n	8004bce <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d002      	beq.n	8004b3a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004b34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b38:	e049      	b.n	8004bce <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d002      	beq.n	8004b4a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004b44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004b48:	e041      	b.n	8004bce <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d002      	beq.n	8004b5a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 8004b54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b58:	e039      	b.n	8004bce <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d002      	beq.n	8004b6a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004b64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b68:	e031      	b.n	8004bce <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d002      	beq.n	8004b7a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004b74:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004b78:	e029      	b.n	8004bce <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d002      	beq.n	8004b8a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004b84:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004b88:	e021      	b.n	8004bce <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d002      	beq.n	8004b9a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004b94:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004b98:	e019      	b.n	8004bce <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d002      	beq.n	8004baa <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004ba4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004ba8:	e011      	b.n	8004bce <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d002      	beq.n	8004bba <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004bb4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004bb8:	e009      	b.n	8004bce <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	f003 0308 	and.w	r3, r3, #8
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d002      	beq.n	8004bca <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004bc4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004bc8:	e001      	b.n	8004bce <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004bca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	371c      	adds	r7, #28
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd90      	pop	{r4, r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	20000118 	.word	0x20000118
 8004bdc:	10624dd3 	.word	0x10624dd3
 8004be0:	fdffe008 	.word	0xfdffe008

08004be4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004be4:	b490      	push	{r4, r7}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004bec:	4b1b      	ldr	r3, [pc, #108]	; (8004c5c <SDMMC_GetCmdResp2+0x78>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a1b      	ldr	r2, [pc, #108]	; (8004c60 <SDMMC_GetCmdResp2+0x7c>)
 8004bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf6:	0a5b      	lsrs	r3, r3, #9
 8004bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bfc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004c00:	4623      	mov	r3, r4
 8004c02:	1e5c      	subs	r4, r3, #1
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d102      	bne.n	8004c0e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004c08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004c0c:	e020      	b.n	8004c50 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c12:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d0f2      	beq.n	8004c00 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c1e:	f003 0304 	and.w	r3, r3, #4
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d004      	beq.n	8004c30 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2204      	movs	r2, #4
 8004c2a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004c2c:	2304      	movs	r3, #4
 8004c2e:	e00f      	b.n	8004c50 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d004      	beq.n	8004c46 <SDMMC_GetCmdResp2+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e004      	b.n	8004c50 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004c4c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3708      	adds	r7, #8
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bc90      	pop	{r4, r7}
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	20000118 	.word	0x20000118
 8004c60:	10624dd3 	.word	0x10624dd3

08004c64 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8004c64:	b490      	push	{r4, r7}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004c6c:	4b15      	ldr	r3, [pc, #84]	; (8004cc4 <SDMMC_GetCmdResp3+0x60>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a15      	ldr	r2, [pc, #84]	; (8004cc8 <SDMMC_GetCmdResp3+0x64>)
 8004c72:	fba2 2303 	umull	r2, r3, r2, r3
 8004c76:	0a5b      	lsrs	r3, r3, #9
 8004c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c7c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004c80:	4623      	mov	r3, r4
 8004c82:	1e5c      	subs	r4, r3, #1
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d102      	bne.n	8004c8e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004c88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004c8c:	e015      	b.n	8004cba <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c92:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d0f2      	beq.n	8004c80 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c9e:	f003 0304 	and.w	r3, r3, #4
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d004      	beq.n	8004cb0 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2204      	movs	r2, #4
 8004caa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004cac:	2304      	movs	r3, #4
 8004cae:	e004      	b.n	8004cba <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004cb6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3708      	adds	r7, #8
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bc90      	pop	{r4, r7}
 8004cc2:	4770      	bx	lr
 8004cc4:	20000118 	.word	0x20000118
 8004cc8:	10624dd3 	.word	0x10624dd3

08004ccc <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004ccc:	b590      	push	{r4, r7, lr}
 8004cce:	b087      	sub	sp, #28
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	607a      	str	r2, [r7, #4]
 8004cd8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004cda:	4b31      	ldr	r3, [pc, #196]	; (8004da0 <SDMMC_GetCmdResp6+0xd4>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a31      	ldr	r2, [pc, #196]	; (8004da4 <SDMMC_GetCmdResp6+0xd8>)
 8004ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce4:	0a5b      	lsrs	r3, r3, #9
 8004ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cea:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004cee:	4623      	mov	r3, r4
 8004cf0:	1e5c      	subs	r4, r3, #1
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d102      	bne.n	8004cfc <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004cf6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004cfa:	e04c      	b.n	8004d96 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d00:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d0f2      	beq.n	8004cee <SDMMC_GetCmdResp6+0x22>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d0c:	f003 0304 	and.w	r3, r3, #4
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d004      	beq.n	8004d1e <SDMMC_GetCmdResp6+0x52>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2204      	movs	r2, #4
 8004d18:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004d1a:	2304      	movs	r3, #4
 8004d1c:	e03b      	b.n	8004d96 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d004      	beq.n	8004d34 <SDMMC_GetCmdResp6+0x68>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e030      	b.n	8004d96 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f7ff fba0 	bl	800447a <SDIO_GetCommandResponse>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	7afb      	ldrb	r3, [r7, #11]
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d001      	beq.n	8004d48 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e026      	b.n	8004d96 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004d4e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004d50:	2100      	movs	r1, #0
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f7ff fb9e 	bl	8004494 <SDIO_GetResponse>
 8004d58:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d106      	bne.n	8004d72 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	0c1b      	lsrs	r3, r3, #16
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	e011      	b.n	8004d96 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d002      	beq.n	8004d82 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004d7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d80:	e009      	b.n	8004d96 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d002      	beq.n	8004d92 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004d8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d90:	e001      	b.n	8004d96 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004d92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	371c      	adds	r7, #28
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd90      	pop	{r4, r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	20000118 	.word	0x20000118
 8004da4:	10624dd3 	.word	0x10624dd3

08004da8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004da8:	b490      	push	{r4, r7}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004db0:	4b18      	ldr	r3, [pc, #96]	; (8004e14 <SDMMC_GetCmdResp7+0x6c>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a18      	ldr	r2, [pc, #96]	; (8004e18 <SDMMC_GetCmdResp7+0x70>)
 8004db6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dba:	0a5b      	lsrs	r3, r3, #9
 8004dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dc0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004dc4:	4623      	mov	r3, r4
 8004dc6:	1e5c      	subs	r4, r3, #1
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d102      	bne.n	8004dd2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004dcc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004dd0:	e01a      	b.n	8004e08 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dd6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d0f2      	beq.n	8004dc4 <SDMMC_GetCmdResp7+0x1c>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de2:	f003 0304 	and.w	r3, r3, #4
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d004      	beq.n	8004df4 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2240      	movs	r2, #64	; 0x40
 8004dee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004df0:	2304      	movs	r3, #4
 8004df2:	e009      	b.n	8004e08 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d002      	beq.n	8004e06 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2240      	movs	r2, #64	; 0x40
 8004e04:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004e06:	2300      	movs	r3, #0
  
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3708      	adds	r7, #8
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bc90      	pop	{r4, r7}
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	20000118 	.word	0x20000118
 8004e18:	10624dd3 	.word	0x10624dd3

08004e1c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e1c:	b084      	sub	sp, #16
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b084      	sub	sp, #16
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
 8004e26:	f107 001c 	add.w	r0, r7, #28
 8004e2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d122      	bne.n	8004e7a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004e48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d105      	bne.n	8004e6e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f001 f822 	bl	8005eb8 <USB_CoreReset>
 8004e74:	4603      	mov	r3, r0
 8004e76:	73fb      	strb	r3, [r7, #15]
 8004e78:	e01a      	b.n	8004eb0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f001 f816 	bl	8005eb8 <USB_CoreReset>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d106      	bne.n	8004ea4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	639a      	str	r2, [r3, #56]	; 0x38
 8004ea2:	e005      	b.n	8004eb0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d10b      	bne.n	8004ece <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f043 0206 	orr.w	r2, r3, #6
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f043 0220 	orr.w	r2, r3, #32
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3710      	adds	r7, #16
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004eda:	b004      	add	sp, #16
 8004edc:	4770      	bx	lr

08004ede <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b083      	sub	sp, #12
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f043 0201 	orr.w	r2, r3, #1
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f023 0201 	bic.w	r2, r3, #1
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr

08004f22 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b082      	sub	sp, #8
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f3a:	78fb      	ldrb	r3, [r7, #3]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d106      	bne.n	8004f4e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	60da      	str	r2, [r3, #12]
 8004f4c:	e00b      	b.n	8004f66 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f4e:	78fb      	ldrb	r3, [r7, #3]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d106      	bne.n	8004f62 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	60da      	str	r2, [r3, #12]
 8004f60:	e001      	b.n	8004f66 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e003      	b.n	8004f6e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004f66:	2032      	movs	r0, #50	; 0x32
 8004f68:	f7fb fb50 	bl	800060c <HAL_Delay>

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3708      	adds	r7, #8
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
	...

08004f78 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f78:	b084      	sub	sp, #16
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b086      	sub	sp, #24
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
 8004f82:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004f86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004f92:	2300      	movs	r3, #0
 8004f94:	613b      	str	r3, [r7, #16]
 8004f96:	e009      	b.n	8004fac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	3340      	adds	r3, #64	; 0x40
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	4413      	add	r3, r2
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	613b      	str	r3, [r7, #16]
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	2b0e      	cmp	r3, #14
 8004fb0:	d9f2      	bls.n	8004f98 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004fb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d112      	bne.n	8004fde <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fbc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	e005      	b.n	8004fea <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005004:	461a      	mov	r2, r3
 8005006:	680b      	ldr	r3, [r1, #0]
 8005008:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800500a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800500c:	2b01      	cmp	r3, #1
 800500e:	d10c      	bne.n	800502a <USB_DevInit+0xb2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005012:	2b00      	cmp	r3, #0
 8005014:	d104      	bne.n	8005020 <USB_DevInit+0xa8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005016:	2100      	movs	r1, #0
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 f961 	bl	80052e0 <USB_SetDevSpeed>
 800501e:	e008      	b.n	8005032 <USB_DevInit+0xba>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005020:	2101      	movs	r1, #1
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 f95c 	bl	80052e0 <USB_SetDevSpeed>
 8005028:	e003      	b.n	8005032 <USB_DevInit+0xba>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800502a:	2103      	movs	r1, #3
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f000 f957 	bl	80052e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005032:	2110      	movs	r1, #16
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 f90b 	bl	8005250 <USB_FlushTxFifo>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d001      	beq.n	8005044 <USB_DevInit+0xcc>
  {
    ret = HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 f929 	bl	800529c <USB_FlushRxFifo>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d001      	beq.n	8005054 <USB_DevInit+0xdc>
  {
    ret = HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800505a:	461a      	mov	r2, r3
 800505c:	2300      	movs	r3, #0
 800505e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005066:	461a      	mov	r2, r3
 8005068:	2300      	movs	r3, #0
 800506a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005072:	461a      	mov	r2, r3
 8005074:	2300      	movs	r3, #0
 8005076:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005078:	2300      	movs	r3, #0
 800507a:	613b      	str	r3, [r7, #16]
 800507c:	e043      	b.n	8005106 <USB_DevInit+0x18e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	015a      	lsls	r2, r3, #5
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	4413      	add	r3, r2
 8005086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005090:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005094:	d118      	bne.n	80050c8 <USB_DevInit+0x150>
    {
      if (i == 0U)
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d10a      	bne.n	80050b2 <USB_DevInit+0x13a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	015a      	lsls	r2, r3, #5
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a8:	461a      	mov	r2, r3
 80050aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80050ae:	6013      	str	r3, [r2, #0]
 80050b0:	e013      	b.n	80050da <USB_DevInit+0x162>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	015a      	lsls	r2, r3, #5
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	4413      	add	r3, r2
 80050ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050be:	461a      	mov	r2, r3
 80050c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80050c4:	6013      	str	r3, [r2, #0]
 80050c6:	e008      	b.n	80050da <USB_DevInit+0x162>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	015a      	lsls	r2, r3, #5
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	4413      	add	r3, r2
 80050d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050d4:	461a      	mov	r2, r3
 80050d6:	2300      	movs	r3, #0
 80050d8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	015a      	lsls	r2, r3, #5
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	4413      	add	r3, r2
 80050e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e6:	461a      	mov	r2, r3
 80050e8:	2300      	movs	r3, #0
 80050ea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	015a      	lsls	r2, r3, #5
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	4413      	add	r3, r2
 80050f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f8:	461a      	mov	r2, r3
 80050fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80050fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	3301      	adds	r3, #1
 8005104:	613b      	str	r3, [r7, #16]
 8005106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	429a      	cmp	r2, r3
 800510c:	d3b7      	bcc.n	800507e <USB_DevInit+0x106>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800510e:	2300      	movs	r3, #0
 8005110:	613b      	str	r3, [r7, #16]
 8005112:	e043      	b.n	800519c <USB_DevInit+0x224>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	015a      	lsls	r2, r3, #5
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	4413      	add	r3, r2
 800511c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005126:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800512a:	d118      	bne.n	800515e <USB_DevInit+0x1e6>
    {
      if (i == 0U)
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d10a      	bne.n	8005148 <USB_DevInit+0x1d0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	015a      	lsls	r2, r3, #5
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	4413      	add	r3, r2
 800513a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800513e:	461a      	mov	r2, r3
 8005140:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005144:	6013      	str	r3, [r2, #0]
 8005146:	e013      	b.n	8005170 <USB_DevInit+0x1f8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	015a      	lsls	r2, r3, #5
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	4413      	add	r3, r2
 8005150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005154:	461a      	mov	r2, r3
 8005156:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800515a:	6013      	str	r3, [r2, #0]
 800515c:	e008      	b.n	8005170 <USB_DevInit+0x1f8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	015a      	lsls	r2, r3, #5
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	4413      	add	r3, r2
 8005166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800516a:	461a      	mov	r2, r3
 800516c:	2300      	movs	r3, #0
 800516e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	015a      	lsls	r2, r3, #5
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	4413      	add	r3, r2
 8005178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800517c:	461a      	mov	r2, r3
 800517e:	2300      	movs	r3, #0
 8005180:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	015a      	lsls	r2, r3, #5
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	4413      	add	r3, r2
 800518a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800518e:	461a      	mov	r2, r3
 8005190:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005194:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	3301      	adds	r3, #1
 800519a:	613b      	str	r3, [r7, #16]
 800519c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d3b7      	bcc.n	8005114 <USB_DevInit+0x19c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051b6:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 80051b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d111      	bne.n	80051e2 <USB_DevInit+0x26a>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051c4:	461a      	mov	r2, r3
 80051c6:	4b20      	ldr	r3, [pc, #128]	; (8005248 <USB_DevInit+0x2d0>)
 80051c8:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051dc:	f043 0303 	orr.w	r3, r3, #3
 80051e0:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80051ee:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80051f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d105      	bne.n	8005202 <USB_DevInit+0x28a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	f043 0210 	orr.w	r2, r3, #16
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	699a      	ldr	r2, [r3, #24]
 8005206:	4b11      	ldr	r3, [pc, #68]	; (800524c <USB_DevInit+0x2d4>)
 8005208:	4313      	orrs	r3, r2
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800520e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005210:	2b00      	cmp	r3, #0
 8005212:	d005      	beq.n	8005220 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	f043 0208 	orr.w	r2, r3, #8
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005222:	2b01      	cmp	r3, #1
 8005224:	d107      	bne.n	8005236 <USB_DevInit+0x2be>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800522e:	f043 0304 	orr.w	r3, r3, #4
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005236:	7dfb      	ldrb	r3, [r7, #23]
}
 8005238:	4618      	mov	r0, r3
 800523a:	3718      	adds	r7, #24
 800523c:	46bd      	mov	sp, r7
 800523e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005242:	b004      	add	sp, #16
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	00800100 	.word	0x00800100
 800524c:	803c3800 	.word	0x803c3800

08005250 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800525a:	2300      	movs	r3, #0
 800525c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	019b      	lsls	r3, r3, #6
 8005262:	f043 0220 	orr.w	r2, r3, #32
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	3301      	adds	r3, #1
 800526e:	60fb      	str	r3, [r7, #12]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	4a09      	ldr	r2, [pc, #36]	; (8005298 <USB_FlushTxFifo+0x48>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d901      	bls.n	800527c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e006      	b.n	800528a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	f003 0320 	and.w	r3, r3, #32
 8005284:	2b20      	cmp	r3, #32
 8005286:	d0f0      	beq.n	800526a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3714      	adds	r7, #20
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	00030d40 	.word	0x00030d40

0800529c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80052a4:	2300      	movs	r3, #0
 80052a6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2210      	movs	r2, #16
 80052ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	3301      	adds	r3, #1
 80052b2:	60fb      	str	r3, [r7, #12]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4a09      	ldr	r2, [pc, #36]	; (80052dc <USB_FlushRxFifo+0x40>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d901      	bls.n	80052c0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e006      	b.n	80052ce <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	f003 0310 	and.w	r3, r3, #16
 80052c8:	2b10      	cmp	r3, #16
 80052ca:	d0f0      	beq.n	80052ae <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	00030d40 	.word	0x00030d40

080052e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	460b      	mov	r3, r1
 80052ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	78fb      	ldrb	r3, [r7, #3]
 80052fa:	68f9      	ldr	r1, [r7, #12]
 80052fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005300:	4313      	orrs	r3, r2
 8005302:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3714      	adds	r7, #20
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr

08005312 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005312:	b480      	push	{r7}
 8005314:	b085      	sub	sp, #20
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
 800531a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	785b      	ldrb	r3, [r3, #1]
 800532a:	2b01      	cmp	r3, #1
 800532c:	d13a      	bne.n	80053a4 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005334:	69da      	ldr	r2, [r3, #28]
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	f003 030f 	and.w	r3, r3, #15
 800533e:	2101      	movs	r1, #1
 8005340:	fa01 f303 	lsl.w	r3, r1, r3
 8005344:	b29b      	uxth	r3, r3
 8005346:	68f9      	ldr	r1, [r7, #12]
 8005348:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800534c:	4313      	orrs	r3, r2
 800534e:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	015a      	lsls	r2, r3, #5
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	4413      	add	r3, r2
 8005358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d155      	bne.n	8005412 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	015a      	lsls	r2, r3, #5
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	4413      	add	r3, r2
 800536e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	78db      	ldrb	r3, [r3, #3]
 8005380:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005382:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	059b      	lsls	r3, r3, #22
 8005388:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800538a:	4313      	orrs	r3, r2
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	0151      	lsls	r1, r2, #5
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	440a      	add	r2, r1
 8005394:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800539c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053a0:	6013      	str	r3, [r2, #0]
 80053a2:	e036      	b.n	8005412 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053aa:	69da      	ldr	r2, [r3, #28]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	f003 030f 	and.w	r3, r3, #15
 80053b4:	2101      	movs	r1, #1
 80053b6:	fa01 f303 	lsl.w	r3, r1, r3
 80053ba:	041b      	lsls	r3, r3, #16
 80053bc:	68f9      	ldr	r1, [r7, #12]
 80053be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053c2:	4313      	orrs	r3, r2
 80053c4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	015a      	lsls	r2, r3, #5
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	4413      	add	r3, r2
 80053ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d11a      	bne.n	8005412 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	015a      	lsls	r2, r3, #5
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	4413      	add	r3, r2
 80053e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	78db      	ldrb	r3, [r3, #3]
 80053f6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80053f8:	430b      	orrs	r3, r1
 80053fa:	4313      	orrs	r3, r2
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	0151      	lsls	r1, r2, #5
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	440a      	add	r2, r1
 8005404:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800540c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005410:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3714      	adds	r7, #20
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	785b      	ldrb	r3, [r3, #1]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d135      	bne.n	80054a8 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005442:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	f003 030f 	and.w	r3, r3, #15
 800544c:	2101      	movs	r1, #1
 800544e:	fa01 f303 	lsl.w	r3, r1, r3
 8005452:	b29b      	uxth	r3, r3
 8005454:	43db      	mvns	r3, r3
 8005456:	68f9      	ldr	r1, [r7, #12]
 8005458:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800545c:	4013      	ands	r3, r2
 800545e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005466:	69da      	ldr	r2, [r3, #28]
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	f003 030f 	and.w	r3, r3, #15
 8005470:	2101      	movs	r1, #1
 8005472:	fa01 f303 	lsl.w	r3, r1, r3
 8005476:	b29b      	uxth	r3, r3
 8005478:	43db      	mvns	r3, r3
 800547a:	68f9      	ldr	r1, [r7, #12]
 800547c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005480:	4013      	ands	r3, r2
 8005482:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	015a      	lsls	r2, r3, #5
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	4413      	add	r3, r2
 800548c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	0159      	lsls	r1, r3, #5
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	440b      	add	r3, r1
 800549a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800549e:	4619      	mov	r1, r3
 80054a0:	4b1f      	ldr	r3, [pc, #124]	; (8005520 <USB_DeactivateEndpoint+0x100>)
 80054a2:	4013      	ands	r3, r2
 80054a4:	600b      	str	r3, [r1, #0]
 80054a6:	e034      	b.n	8005512 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	f003 030f 	and.w	r3, r3, #15
 80054b8:	2101      	movs	r1, #1
 80054ba:	fa01 f303 	lsl.w	r3, r1, r3
 80054be:	041b      	lsls	r3, r3, #16
 80054c0:	43db      	mvns	r3, r3
 80054c2:	68f9      	ldr	r1, [r7, #12]
 80054c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054c8:	4013      	ands	r3, r2
 80054ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d2:	69da      	ldr	r2, [r3, #28]
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	f003 030f 	and.w	r3, r3, #15
 80054dc:	2101      	movs	r1, #1
 80054de:	fa01 f303 	lsl.w	r3, r1, r3
 80054e2:	041b      	lsls	r3, r3, #16
 80054e4:	43db      	mvns	r3, r3
 80054e6:	68f9      	ldr	r1, [r7, #12]
 80054e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054ec:	4013      	ands	r3, r2
 80054ee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	015a      	lsls	r2, r3, #5
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	4413      	add	r3, r2
 80054f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	0159      	lsls	r1, r3, #5
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	440b      	add	r3, r1
 8005506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800550a:	4619      	mov	r1, r3
 800550c:	4b05      	ldr	r3, [pc, #20]	; (8005524 <USB_DeactivateEndpoint+0x104>)
 800550e:	4013      	ands	r3, r2
 8005510:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	4618      	mov	r0, r3
 8005516:	3714      	adds	r7, #20
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr
 8005520:	ec337800 	.word	0xec337800
 8005524:	eff37800 	.word	0xeff37800

08005528 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b08a      	sub	sp, #40	; 0x28
 800552c:	af02      	add	r7, sp, #8
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	4613      	mov	r3, r2
 8005534:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	785b      	ldrb	r3, [r3, #1]
 8005544:	2b01      	cmp	r3, #1
 8005546:	f040 815c 	bne.w	8005802 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d132      	bne.n	80055b8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	015a      	lsls	r2, r3, #5
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	4413      	add	r3, r2
 800555a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	69ba      	ldr	r2, [r7, #24]
 8005562:	0151      	lsls	r1, r2, #5
 8005564:	69fa      	ldr	r2, [r7, #28]
 8005566:	440a      	add	r2, r1
 8005568:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800556c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005570:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005574:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	015a      	lsls	r2, r3, #5
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	4413      	add	r3, r2
 800557e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	0151      	lsls	r1, r2, #5
 8005588:	69fa      	ldr	r2, [r7, #28]
 800558a:	440a      	add	r2, r1
 800558c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005590:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005594:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	015a      	lsls	r2, r3, #5
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	4413      	add	r3, r2
 800559e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	0151      	lsls	r1, r2, #5
 80055a8:	69fa      	ldr	r2, [r7, #28]
 80055aa:	440a      	add	r2, r1
 80055ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055b0:	0cdb      	lsrs	r3, r3, #19
 80055b2:	04db      	lsls	r3, r3, #19
 80055b4:	6113      	str	r3, [r2, #16]
 80055b6:	e074      	b.n	80056a2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	69ba      	ldr	r2, [r7, #24]
 80055c8:	0151      	lsls	r1, r2, #5
 80055ca:	69fa      	ldr	r2, [r7, #28]
 80055cc:	440a      	add	r2, r1
 80055ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055d2:	0cdb      	lsrs	r3, r3, #19
 80055d4:	04db      	lsls	r3, r3, #19
 80055d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	015a      	lsls	r2, r3, #5
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	4413      	add	r3, r2
 80055e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	69ba      	ldr	r2, [r7, #24]
 80055e8:	0151      	lsls	r1, r2, #5
 80055ea:	69fa      	ldr	r2, [r7, #28]
 80055ec:	440a      	add	r2, r1
 80055ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	015a      	lsls	r2, r3, #5
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	4413      	add	r3, r2
 8005604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005608:	691a      	ldr	r2, [r3, #16]
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	6959      	ldr	r1, [r3, #20]
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	440b      	add	r3, r1
 8005614:	1e59      	subs	r1, r3, #1
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	fbb1 f3f3 	udiv	r3, r1, r3
 800561e:	04d9      	lsls	r1, r3, #19
 8005620:	4b9d      	ldr	r3, [pc, #628]	; (8005898 <USB_EPStartXfer+0x370>)
 8005622:	400b      	ands	r3, r1
 8005624:	69b9      	ldr	r1, [r7, #24]
 8005626:	0148      	lsls	r0, r1, #5
 8005628:	69f9      	ldr	r1, [r7, #28]
 800562a:	4401      	add	r1, r0
 800562c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005630:	4313      	orrs	r3, r2
 8005632:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	015a      	lsls	r2, r3, #5
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	4413      	add	r3, r2
 800563c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005640:	691a      	ldr	r2, [r3, #16]
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800564a:	69b9      	ldr	r1, [r7, #24]
 800564c:	0148      	lsls	r0, r1, #5
 800564e:	69f9      	ldr	r1, [r7, #28]
 8005650:	4401      	add	r1, r0
 8005652:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005656:	4313      	orrs	r3, r2
 8005658:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	78db      	ldrb	r3, [r3, #3]
 800565e:	2b01      	cmp	r3, #1
 8005660:	d11f      	bne.n	80056a2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	015a      	lsls	r2, r3, #5
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	4413      	add	r3, r2
 800566a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	69ba      	ldr	r2, [r7, #24]
 8005672:	0151      	lsls	r1, r2, #5
 8005674:	69fa      	ldr	r2, [r7, #28]
 8005676:	440a      	add	r2, r1
 8005678:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800567c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005680:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	015a      	lsls	r2, r3, #5
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	4413      	add	r3, r2
 800568a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	69ba      	ldr	r2, [r7, #24]
 8005692:	0151      	lsls	r1, r2, #5
 8005694:	69fa      	ldr	r2, [r7, #28]
 8005696:	440a      	add	r2, r1
 8005698:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800569c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80056a0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80056a2:	79fb      	ldrb	r3, [r7, #7]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d14b      	bne.n	8005740 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d009      	beq.n	80056c4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	015a      	lsls	r2, r3, #5
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	4413      	add	r3, r2
 80056b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056bc:	461a      	mov	r2, r3
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	78db      	ldrb	r3, [r3, #3]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d128      	bne.n	800571e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d110      	bne.n	80056fe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	015a      	lsls	r2, r3, #5
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	4413      	add	r3, r2
 80056e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	69ba      	ldr	r2, [r7, #24]
 80056ec:	0151      	lsls	r1, r2, #5
 80056ee:	69fa      	ldr	r2, [r7, #28]
 80056f0:	440a      	add	r2, r1
 80056f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80056fa:	6013      	str	r3, [r2, #0]
 80056fc:	e00f      	b.n	800571e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	015a      	lsls	r2, r3, #5
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	4413      	add	r3, r2
 8005706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	69ba      	ldr	r2, [r7, #24]
 800570e:	0151      	lsls	r1, r2, #5
 8005710:	69fa      	ldr	r2, [r7, #28]
 8005712:	440a      	add	r2, r1
 8005714:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800571c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	015a      	lsls	r2, r3, #5
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	4413      	add	r3, r2
 8005726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	69ba      	ldr	r2, [r7, #24]
 800572e:	0151      	lsls	r1, r2, #5
 8005730:	69fa      	ldr	r2, [r7, #28]
 8005732:	440a      	add	r2, r1
 8005734:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005738:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800573c:	6013      	str	r3, [r2, #0]
 800573e:	e12f      	b.n	80059a0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	015a      	lsls	r2, r3, #5
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	4413      	add	r3, r2
 8005748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	69ba      	ldr	r2, [r7, #24]
 8005750:	0151      	lsls	r1, r2, #5
 8005752:	69fa      	ldr	r2, [r7, #28]
 8005754:	440a      	add	r2, r1
 8005756:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800575a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800575e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	78db      	ldrb	r3, [r3, #3]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d015      	beq.n	8005794 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	2b00      	cmp	r3, #0
 800576e:	f000 8117 	beq.w	80059a0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005778:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	f003 030f 	and.w	r3, r3, #15
 8005782:	2101      	movs	r1, #1
 8005784:	fa01 f303 	lsl.w	r3, r1, r3
 8005788:	69f9      	ldr	r1, [r7, #28]
 800578a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800578e:	4313      	orrs	r3, r2
 8005790:	634b      	str	r3, [r1, #52]	; 0x34
 8005792:	e105      	b.n	80059a0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d110      	bne.n	80057c6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	69ba      	ldr	r2, [r7, #24]
 80057b4:	0151      	lsls	r1, r2, #5
 80057b6:	69fa      	ldr	r2, [r7, #28]
 80057b8:	440a      	add	r2, r1
 80057ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057c2:	6013      	str	r3, [r2, #0]
 80057c4:	e00f      	b.n	80057e6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	015a      	lsls	r2, r3, #5
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	4413      	add	r3, r2
 80057ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	69ba      	ldr	r2, [r7, #24]
 80057d6:	0151      	lsls	r1, r2, #5
 80057d8:	69fa      	ldr	r2, [r7, #28]
 80057da:	440a      	add	r2, r1
 80057dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057e4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	68d9      	ldr	r1, [r3, #12]
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	781a      	ldrb	r2, [r3, #0]
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	b298      	uxth	r0, r3
 80057f4:	79fb      	ldrb	r3, [r7, #7]
 80057f6:	9300      	str	r3, [sp, #0]
 80057f8:	4603      	mov	r3, r0
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f000 fa2b 	bl	8005c56 <USB_WritePacket>
 8005800:	e0ce      	b.n	80059a0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	015a      	lsls	r2, r3, #5
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	4413      	add	r3, r2
 800580a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	69ba      	ldr	r2, [r7, #24]
 8005812:	0151      	lsls	r1, r2, #5
 8005814:	69fa      	ldr	r2, [r7, #28]
 8005816:	440a      	add	r2, r1
 8005818:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800581c:	0cdb      	lsrs	r3, r3, #19
 800581e:	04db      	lsls	r3, r3, #19
 8005820:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	015a      	lsls	r2, r3, #5
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	4413      	add	r3, r2
 800582a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	69ba      	ldr	r2, [r7, #24]
 8005832:	0151      	lsls	r1, r2, #5
 8005834:	69fa      	ldr	r2, [r7, #28]
 8005836:	440a      	add	r2, r1
 8005838:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800583c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005840:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005844:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d126      	bne.n	800589c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	015a      	lsls	r2, r3, #5
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	4413      	add	r3, r2
 8005856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800585a:	691a      	ldr	r2, [r3, #16]
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005864:	69b9      	ldr	r1, [r7, #24]
 8005866:	0148      	lsls	r0, r1, #5
 8005868:	69f9      	ldr	r1, [r7, #28]
 800586a:	4401      	add	r1, r0
 800586c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005870:	4313      	orrs	r3, r2
 8005872:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	015a      	lsls	r2, r3, #5
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	4413      	add	r3, r2
 800587c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	69ba      	ldr	r2, [r7, #24]
 8005884:	0151      	lsls	r1, r2, #5
 8005886:	69fa      	ldr	r2, [r7, #28]
 8005888:	440a      	add	r2, r1
 800588a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800588e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005892:	6113      	str	r3, [r2, #16]
 8005894:	e036      	b.n	8005904 <USB_EPStartXfer+0x3dc>
 8005896:	bf00      	nop
 8005898:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	695a      	ldr	r2, [r3, #20]
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	4413      	add	r3, r2
 80058a6:	1e5a      	subs	r2, r3, #1
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	015a      	lsls	r2, r3, #5
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	4413      	add	r3, r2
 80058ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058be:	691a      	ldr	r2, [r3, #16]
 80058c0:	8afb      	ldrh	r3, [r7, #22]
 80058c2:	04d9      	lsls	r1, r3, #19
 80058c4:	4b39      	ldr	r3, [pc, #228]	; (80059ac <USB_EPStartXfer+0x484>)
 80058c6:	400b      	ands	r3, r1
 80058c8:	69b9      	ldr	r1, [r7, #24]
 80058ca:	0148      	lsls	r0, r1, #5
 80058cc:	69f9      	ldr	r1, [r7, #28]
 80058ce:	4401      	add	r1, r0
 80058d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80058d4:	4313      	orrs	r3, r2
 80058d6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e4:	691a      	ldr	r2, [r3, #16]
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	8af9      	ldrh	r1, [r7, #22]
 80058ec:	fb01 f303 	mul.w	r3, r1, r3
 80058f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058f4:	69b9      	ldr	r1, [r7, #24]
 80058f6:	0148      	lsls	r0, r1, #5
 80058f8:	69f9      	ldr	r1, [r7, #28]
 80058fa:	4401      	add	r1, r0
 80058fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005900:	4313      	orrs	r3, r2
 8005902:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005904:	79fb      	ldrb	r3, [r7, #7]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d10d      	bne.n	8005926 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d009      	beq.n	8005926 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	68d9      	ldr	r1, [r3, #12]
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	015a      	lsls	r2, r3, #5
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	4413      	add	r3, r2
 800591e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005922:	460a      	mov	r2, r1
 8005924:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	78db      	ldrb	r3, [r3, #3]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d128      	bne.n	8005980 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800593a:	2b00      	cmp	r3, #0
 800593c:	d110      	bne.n	8005960 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	015a      	lsls	r2, r3, #5
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	4413      	add	r3, r2
 8005946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	0151      	lsls	r1, r2, #5
 8005950:	69fa      	ldr	r2, [r7, #28]
 8005952:	440a      	add	r2, r1
 8005954:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005958:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800595c:	6013      	str	r3, [r2, #0]
 800595e:	e00f      	b.n	8005980 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	015a      	lsls	r2, r3, #5
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	4413      	add	r3, r2
 8005968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	69ba      	ldr	r2, [r7, #24]
 8005970:	0151      	lsls	r1, r2, #5
 8005972:	69fa      	ldr	r2, [r7, #28]
 8005974:	440a      	add	r2, r1
 8005976:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800597a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800597e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	4413      	add	r3, r2
 8005988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	69ba      	ldr	r2, [r7, #24]
 8005990:	0151      	lsls	r1, r2, #5
 8005992:	69fa      	ldr	r2, [r7, #28]
 8005994:	440a      	add	r2, r1
 8005996:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800599a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800599e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3720      	adds	r7, #32
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	1ff80000 	.word	0x1ff80000

080059b0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b087      	sub	sp, #28
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	4613      	mov	r3, r2
 80059bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	785b      	ldrb	r3, [r3, #1]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	f040 80cd 	bne.w	8005b6c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d132      	bne.n	8005a40 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	015a      	lsls	r2, r3, #5
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	4413      	add	r3, r2
 80059e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	0151      	lsls	r1, r2, #5
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	440a      	add	r2, r1
 80059f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	015a      	lsls	r2, r3, #5
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	4413      	add	r3, r2
 8005a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	0151      	lsls	r1, r2, #5
 8005a10:	697a      	ldr	r2, [r7, #20]
 8005a12:	440a      	add	r2, r1
 8005a14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	015a      	lsls	r2, r3, #5
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	4413      	add	r3, r2
 8005a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	0151      	lsls	r1, r2, #5
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	440a      	add	r2, r1
 8005a34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a38:	0cdb      	lsrs	r3, r3, #19
 8005a3a:	04db      	lsls	r3, r3, #19
 8005a3c:	6113      	str	r3, [r2, #16]
 8005a3e:	e04e      	b.n	8005ade <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	0151      	lsls	r1, r2, #5
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	440a      	add	r2, r1
 8005a56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a5a:	0cdb      	lsrs	r3, r3, #19
 8005a5c:	04db      	lsls	r3, r3, #19
 8005a5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	015a      	lsls	r2, r3, #5
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	4413      	add	r3, r2
 8005a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	0151      	lsls	r1, r2, #5
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	440a      	add	r2, r1
 8005a76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a7a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a7e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a82:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	695a      	ldr	r2, [r3, #20]
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d903      	bls.n	8005a98 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	689a      	ldr	r2, [r3, #8]
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	0151      	lsls	r1, r2, #5
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	440a      	add	r2, r1
 8005aae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ab2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ab6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	015a      	lsls	r2, r3, #5
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	4413      	add	r3, r2
 8005ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac4:	691a      	ldr	r2, [r3, #16]
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ace:	6939      	ldr	r1, [r7, #16]
 8005ad0:	0148      	lsls	r0, r1, #5
 8005ad2:	6979      	ldr	r1, [r7, #20]
 8005ad4:	4401      	add	r1, r0
 8005ad6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ada:	4313      	orrs	r3, r2
 8005adc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005ade:	79fb      	ldrb	r3, [r7, #7]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d11e      	bne.n	8005b22 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d009      	beq.n	8005b00 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	015a      	lsls	r2, r3, #5
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	4413      	add	r3, r2
 8005af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af8:	461a      	mov	r2, r3
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	015a      	lsls	r2, r3, #5
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	4413      	add	r3, r2
 8005b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	0151      	lsls	r1, r2, #5
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	440a      	add	r2, r1
 8005b16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b1e:	6013      	str	r3, [r2, #0]
 8005b20:	e092      	b.n	8005c48 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	015a      	lsls	r2, r3, #5
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	4413      	add	r3, r2
 8005b2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	693a      	ldr	r2, [r7, #16]
 8005b32:	0151      	lsls	r1, r2, #5
 8005b34:	697a      	ldr	r2, [r7, #20]
 8005b36:	440a      	add	r2, r1
 8005b38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b3c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b40:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d07e      	beq.n	8005c48 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	f003 030f 	and.w	r3, r3, #15
 8005b5a:	2101      	movs	r1, #1
 8005b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b60:	6979      	ldr	r1, [r7, #20]
 8005b62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b66:	4313      	orrs	r3, r2
 8005b68:	634b      	str	r3, [r1, #52]	; 0x34
 8005b6a:	e06d      	b.n	8005c48 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	015a      	lsls	r2, r3, #5
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	4413      	add	r3, r2
 8005b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	0151      	lsls	r1, r2, #5
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	440a      	add	r2, r1
 8005b82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b86:	0cdb      	lsrs	r3, r3, #19
 8005b88:	04db      	lsls	r3, r3, #19
 8005b8a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	015a      	lsls	r2, r3, #5
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	4413      	add	r3, r2
 8005b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	0151      	lsls	r1, r2, #5
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	440a      	add	r2, r1
 8005ba2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ba6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005baa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005bae:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d003      	beq.n	8005bc0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	689a      	ldr	r2, [r3, #8]
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	015a      	lsls	r2, r3, #5
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	0151      	lsls	r1, r2, #5
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	440a      	add	r2, r1
 8005bd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bde:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	015a      	lsls	r2, r3, #5
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	4413      	add	r3, r2
 8005be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bec:	691a      	ldr	r2, [r3, #16]
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bf6:	6939      	ldr	r1, [r7, #16]
 8005bf8:	0148      	lsls	r0, r1, #5
 8005bfa:	6979      	ldr	r1, [r7, #20]
 8005bfc:	4401      	add	r1, r0
 8005bfe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c02:	4313      	orrs	r3, r2
 8005c04:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005c06:	79fb      	ldrb	r3, [r7, #7]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d10d      	bne.n	8005c28 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d009      	beq.n	8005c28 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	68d9      	ldr	r1, [r3, #12]
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	015a      	lsls	r2, r3, #5
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	4413      	add	r3, r2
 8005c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c24:	460a      	mov	r2, r1
 8005c26:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	015a      	lsls	r2, r3, #5
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	4413      	add	r3, r2
 8005c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	693a      	ldr	r2, [r7, #16]
 8005c38:	0151      	lsls	r1, r2, #5
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	440a      	add	r2, r1
 8005c3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c42:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c46:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	371c      	adds	r7, #28
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr

08005c56 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005c56:	b480      	push	{r7}
 8005c58:	b089      	sub	sp, #36	; 0x24
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	60f8      	str	r0, [r7, #12]
 8005c5e:	60b9      	str	r1, [r7, #8]
 8005c60:	4611      	mov	r1, r2
 8005c62:	461a      	mov	r2, r3
 8005c64:	460b      	mov	r3, r1
 8005c66:	71fb      	strb	r3, [r7, #7]
 8005c68:	4613      	mov	r3, r2
 8005c6a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005c74:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d11a      	bne.n	8005cb2 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005c7c:	88bb      	ldrh	r3, [r7, #4]
 8005c7e:	3303      	adds	r3, #3
 8005c80:	089b      	lsrs	r3, r3, #2
 8005c82:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005c84:	2300      	movs	r3, #0
 8005c86:	61bb      	str	r3, [r7, #24]
 8005c88:	e00f      	b.n	8005caa <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005c8a:	79fb      	ldrb	r3, [r7, #7]
 8005c8c:	031a      	lsls	r2, r3, #12
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	4413      	add	r3, r2
 8005c92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c96:	461a      	mov	r2, r3
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	3304      	adds	r3, #4
 8005ca2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	61bb      	str	r3, [r7, #24]
 8005caa:	69ba      	ldr	r2, [r7, #24]
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d3eb      	bcc.n	8005c8a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3724      	adds	r7, #36	; 0x24
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	785b      	ldrb	r3, [r3, #1]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d12c      	bne.n	8005d36 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	015a      	lsls	r2, r3, #5
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	db12      	blt.n	8005d14 <USB_EPSetStall+0x54>
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00f      	beq.n	8005d14 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	015a      	lsls	r2, r3, #5
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	0151      	lsls	r1, r2, #5
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	440a      	add	r2, r1
 8005d0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d0e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d12:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	0151      	lsls	r1, r2, #5
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	440a      	add	r2, r1
 8005d2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d32:	6013      	str	r3, [r2, #0]
 8005d34:	e02b      	b.n	8005d8e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	015a      	lsls	r2, r3, #5
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	db12      	blt.n	8005d6e <USB_EPSetStall+0xae>
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00f      	beq.n	8005d6e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68ba      	ldr	r2, [r7, #8]
 8005d5e:	0151      	lsls	r1, r2, #5
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	440a      	add	r2, r1
 8005d64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d68:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d6c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	015a      	lsls	r2, r3, #5
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	4413      	add	r3, r2
 8005d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68ba      	ldr	r2, [r7, #8]
 8005d7e:	0151      	lsls	r1, r2, #5
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	440a      	add	r2, r1
 8005d84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d8c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3714      	adds	r7, #20
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005db6:	f023 0302 	bic.w	r3, r3, #2
 8005dba:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005dbc:	2003      	movs	r0, #3
 8005dbe:	f7fa fc25 	bl	800060c <HAL_Delay>

  return HAL_OK;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3710      	adds	r7, #16
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005de6:	f043 0302 	orr.w	r3, r3, #2
 8005dea:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005dec:	2003      	movs	r0, #3
 8005dee:	f7fa fc0d 	bl	800060c <HAL_Delay>

  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b087      	sub	sp, #28
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	460b      	mov	r3, r1
 8005e06:	607a      	str	r2, [r7, #4]
 8005e08:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	333c      	adds	r3, #60	; 0x3c
 8005e12:	3304      	adds	r3, #4
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	4a26      	ldr	r2, [pc, #152]	; (8005eb4 <USB_EP0_OutStart+0xb8>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d90a      	bls.n	8005e36 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e30:	d101      	bne.n	8005e36 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005e32:	2300      	movs	r3, #0
 8005e34:	e037      	b.n	8005ea6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	2300      	movs	r3, #0
 8005e40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	697a      	ldr	r2, [r7, #20]
 8005e4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	697a      	ldr	r2, [r7, #20]
 8005e60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e64:	f043 0318 	orr.w	r3, r3, #24
 8005e68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e78:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005e7c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005e7e:	7afb      	ldrb	r3, [r7, #11]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d10f      	bne.n	8005ea4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	697a      	ldr	r2, [r7, #20]
 8005e9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e9e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005ea2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	371c      	adds	r7, #28
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop
 8005eb4:	4f54300a 	.word	0x4f54300a

08005eb8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	60fb      	str	r3, [r7, #12]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	4a13      	ldr	r2, [pc, #76]	; (8005f1c <USB_CoreReset+0x64>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d901      	bls.n	8005ed6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e01b      	b.n	8005f0e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	daf2      	bge.n	8005ec4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	f043 0201 	orr.w	r2, r3, #1
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	60fb      	str	r3, [r7, #12]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	4a09      	ldr	r2, [pc, #36]	; (8005f1c <USB_CoreReset+0x64>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d901      	bls.n	8005f00 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e006      	b.n	8005f0e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d0f0      	beq.n	8005eee <USB_CoreReset+0x36>

  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3714      	adds	r7, #20
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	00030d40 	.word	0x00030d40

08005f20 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	460b      	mov	r3, r1
 8005f2a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	7c1b      	ldrb	r3, [r3, #16]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d115      	bne.n	8005f64 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005f38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f3c:	2202      	movs	r2, #2
 8005f3e:	2181      	movs	r1, #129	; 0x81
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f002 f85c 	bl	8007ffe <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005f4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f50:	2202      	movs	r2, #2
 8005f52:	2101      	movs	r1, #1
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f002 f852 	bl	8007ffe <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8005f62:	e012      	b.n	8005f8a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005f64:	2340      	movs	r3, #64	; 0x40
 8005f66:	2202      	movs	r2, #2
 8005f68:	2181      	movs	r1, #129	; 0x81
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f002 f847 	bl	8007ffe <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005f76:	2340      	movs	r3, #64	; 0x40
 8005f78:	2202      	movs	r2, #2
 8005f7a:	2101      	movs	r1, #1
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f002 f83e 	bl	8007ffe <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005f8a:	2308      	movs	r3, #8
 8005f8c:	2203      	movs	r2, #3
 8005f8e:	2182      	movs	r1, #130	; 0x82
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f002 f834 	bl	8007ffe <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8005f9c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005fa0:	f002 fb54 	bl	800864c <malloc>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d102      	bne.n	8005fbe <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	73fb      	strb	r3, [r7, #15]
 8005fbc:	e026      	b.n	800600c <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005fc4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	7c1b      	ldrb	r3, [r3, #16]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d109      	bne.n	8005ffc <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005fee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ff2:	2101      	movs	r1, #1
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f002 f889 	bl	800810c <USBD_LL_PrepareReceive>
 8005ffa:	e007      	b.n	800600c <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006002:	2340      	movs	r3, #64	; 0x40
 8006004:	2101      	movs	r1, #1
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f002 f880 	bl	800810c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800600c:	7bfb      	ldrb	r3, [r7, #15]
}
 800600e:	4618      	mov	r0, r3
 8006010:	3710      	adds	r7, #16
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}

08006016 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006016:	b580      	push	{r7, lr}
 8006018:	b084      	sub	sp, #16
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
 800601e:	460b      	mov	r3, r1
 8006020:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006022:	2300      	movs	r3, #0
 8006024:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006026:	2181      	movs	r1, #129	; 0x81
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f002 f80e 	bl	800804a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006034:	2101      	movs	r1, #1
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f002 f807 	bl	800804a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006044:	2182      	movs	r1, #130	; 0x82
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f001 ffff 	bl	800804a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00e      	beq.n	800607a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800606c:	4618      	mov	r0, r3
 800606e:	f002 faf5 	bl	800865c <free>
    pdev->pClassData = NULL;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800607a:	7bfb      	ldrb	r3, [r7, #15]
}
 800607c:	4618      	mov	r0, r3
 800607e:	3710      	adds	r7, #16
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006094:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006096:	2300      	movs	r3, #0
 8006098:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800609a:	2300      	movs	r3, #0
 800609c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800609e:	2300      	movs	r3, #0
 80060a0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d039      	beq.n	8006122 <USBD_CDC_Setup+0x9e>
 80060ae:	2b20      	cmp	r3, #32
 80060b0:	d17c      	bne.n	80061ac <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	88db      	ldrh	r3, [r3, #6]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d029      	beq.n	800610e <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	b25b      	sxtb	r3, r3
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	da11      	bge.n	80060e8 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	683a      	ldr	r2, [r7, #0]
 80060ce:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 80060d0:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80060d2:	683a      	ldr	r2, [r7, #0]
 80060d4:	88d2      	ldrh	r2, [r2, #6]
 80060d6:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80060d8:	6939      	ldr	r1, [r7, #16]
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	88db      	ldrh	r3, [r3, #6]
 80060de:	461a      	mov	r2, r3
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 fa71 	bl	80065c8 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 80060e6:	e068      	b.n	80061ba <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	785a      	ldrb	r2, [r3, #1]
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	88db      	ldrh	r3, [r3, #6]
 80060f6:	b2da      	uxtb	r2, r3
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80060fe:	6939      	ldr	r1, [r7, #16]
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	88db      	ldrh	r3, [r3, #6]
 8006104:	461a      	mov	r2, r3
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 fa7a 	bl	8006600 <USBD_CtlPrepareRx>
    break;
 800610c:	e055      	b.n	80061ba <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	683a      	ldr	r2, [r7, #0]
 8006118:	7850      	ldrb	r0, [r2, #1]
 800611a:	2200      	movs	r2, #0
 800611c:	6839      	ldr	r1, [r7, #0]
 800611e:	4798      	blx	r3
    break;
 8006120:	e04b      	b.n	80061ba <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	785b      	ldrb	r3, [r3, #1]
 8006126:	2b0a      	cmp	r3, #10
 8006128:	d017      	beq.n	800615a <USBD_CDC_Setup+0xd6>
 800612a:	2b0b      	cmp	r3, #11
 800612c:	d029      	beq.n	8006182 <USBD_CDC_Setup+0xfe>
 800612e:	2b00      	cmp	r3, #0
 8006130:	d133      	bne.n	800619a <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006138:	2b03      	cmp	r3, #3
 800613a:	d107      	bne.n	800614c <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800613c:	f107 030c 	add.w	r3, r7, #12
 8006140:	2202      	movs	r2, #2
 8006142:	4619      	mov	r1, r3
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 fa3f 	bl	80065c8 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800614a:	e02e      	b.n	80061aa <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800614c:	6839      	ldr	r1, [r7, #0]
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 f9cf 	bl	80064f2 <USBD_CtlError>
			  ret = USBD_FAIL;
 8006154:	2302      	movs	r3, #2
 8006156:	75fb      	strb	r3, [r7, #23]
      break;
 8006158:	e027      	b.n	80061aa <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006160:	2b03      	cmp	r3, #3
 8006162:	d107      	bne.n	8006174 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8006164:	f107 030f 	add.w	r3, r7, #15
 8006168:	2201      	movs	r2, #1
 800616a:	4619      	mov	r1, r3
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 fa2b 	bl	80065c8 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006172:	e01a      	b.n	80061aa <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8006174:	6839      	ldr	r1, [r7, #0]
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 f9bb 	bl	80064f2 <USBD_CtlError>
			  ret = USBD_FAIL;
 800617c:	2302      	movs	r3, #2
 800617e:	75fb      	strb	r3, [r7, #23]
      break;
 8006180:	e013      	b.n	80061aa <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006188:	2b03      	cmp	r3, #3
 800618a:	d00d      	beq.n	80061a8 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 800618c:	6839      	ldr	r1, [r7, #0]
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 f9af 	bl	80064f2 <USBD_CtlError>
			  ret = USBD_FAIL;
 8006194:	2302      	movs	r3, #2
 8006196:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006198:	e006      	b.n	80061a8 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800619a:	6839      	ldr	r1, [r7, #0]
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 f9a8 	bl	80064f2 <USBD_CtlError>
      ret = USBD_FAIL;
 80061a2:	2302      	movs	r3, #2
 80061a4:	75fb      	strb	r3, [r7, #23]
      break;
 80061a6:	e000      	b.n	80061aa <USBD_CDC_Setup+0x126>
      break;
 80061a8:	bf00      	nop
    }
    break;
 80061aa:	e006      	b.n	80061ba <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 80061ac:	6839      	ldr	r1, [r7, #0]
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 f99f 	bl	80064f2 <USBD_CtlError>
    ret = USBD_FAIL;
 80061b4:	2302      	movs	r3, #2
 80061b6:	75fb      	strb	r3, [r7, #23]
    break;
 80061b8:	bf00      	nop
  }

  return ret;
 80061ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3718      	adds	r7, #24
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	460b      	mov	r3, r1
 80061ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80061d6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80061de:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d03a      	beq.n	8006260 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80061ea:	78fa      	ldrb	r2, [r7, #3]
 80061ec:	6879      	ldr	r1, [r7, #4]
 80061ee:	4613      	mov	r3, r2
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	4413      	add	r3, r2
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	440b      	add	r3, r1
 80061f8:	331c      	adds	r3, #28
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d029      	beq.n	8006254 <USBD_CDC_DataIn+0x90>
 8006200:	78fa      	ldrb	r2, [r7, #3]
 8006202:	6879      	ldr	r1, [r7, #4]
 8006204:	4613      	mov	r3, r2
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	4413      	add	r3, r2
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	440b      	add	r3, r1
 800620e:	331c      	adds	r3, #28
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	78f9      	ldrb	r1, [r7, #3]
 8006214:	68b8      	ldr	r0, [r7, #8]
 8006216:	460b      	mov	r3, r1
 8006218:	00db      	lsls	r3, r3, #3
 800621a:	1a5b      	subs	r3, r3, r1
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	4403      	add	r3, r0
 8006220:	3344      	adds	r3, #68	; 0x44
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	fbb2 f1f3 	udiv	r1, r2, r3
 8006228:	fb03 f301 	mul.w	r3, r3, r1
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	2b00      	cmp	r3, #0
 8006230:	d110      	bne.n	8006254 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006232:	78fa      	ldrb	r2, [r7, #3]
 8006234:	6879      	ldr	r1, [r7, #4]
 8006236:	4613      	mov	r3, r2
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	4413      	add	r3, r2
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	440b      	add	r3, r1
 8006240:	331c      	adds	r3, #28
 8006242:	2200      	movs	r2, #0
 8006244:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8006246:	78f9      	ldrb	r1, [r7, #3]
 8006248:	2300      	movs	r3, #0
 800624a:	2200      	movs	r2, #0
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f001 ff3a 	bl	80080c6 <USBD_LL_Transmit>
 8006252:	e003      	b.n	800625c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800625c:	2300      	movs	r3, #0
 800625e:	e000      	b.n	8006262 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006260:	2302      	movs	r3, #2
  }
}
 8006262:	4618      	mov	r0, r3
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800626a:	b580      	push	{r7, lr}
 800626c:	b084      	sub	sp, #16
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
 8006272:	460b      	mov	r3, r1
 8006274:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800627c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800627e:	78fb      	ldrb	r3, [r7, #3]
 8006280:	4619      	mov	r1, r3
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f001 ff65 	bl	8008152 <USBD_LL_GetRxDataSize>
 8006288:	4602      	mov	r2, r0
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00d      	beq.n	80062b6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80062ae:	4611      	mov	r1, r2
 80062b0:	4798      	blx	r3

    return USBD_OK;
 80062b2:	2300      	movs	r3, #0
 80062b4:	e000      	b.n	80062b8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80062b6:	2302      	movs	r3, #2
  }
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3710      	adds	r7, #16
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80062ce:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d015      	beq.n	8006306 <USBD_CDC_EP0_RxReady+0x46>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80062e0:	2bff      	cmp	r3, #255	; 0xff
 80062e2:	d010      	beq.n	8006306 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80062f2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80062fa:	b292      	uxth	r2, r2
 80062fc:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	22ff      	movs	r2, #255	; 0xff
 8006302:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2243      	movs	r2, #67	; 0x43
 800631c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800631e:	4b03      	ldr	r3, [pc, #12]	; (800632c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006320:	4618      	mov	r0, r3
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr
 800632c:	20000090 	.word	0x20000090

08006330 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2243      	movs	r2, #67	; 0x43
 800633c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800633e:	4b03      	ldr	r3, [pc, #12]	; (800634c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006340:	4618      	mov	r0, r3
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr
 800634c:	2000004c 	.word	0x2000004c

08006350 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2243      	movs	r2, #67	; 0x43
 800635c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800635e:	4b03      	ldr	r3, [pc, #12]	; (800636c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006360:	4618      	mov	r0, r3
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr
 800636c:	200000d4 	.word	0x200000d4

08006370 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	220a      	movs	r2, #10
 800637c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800637e:	4b03      	ldr	r3, [pc, #12]	; (800638c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006380:	4618      	mov	r0, r3
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr
 800638c:	20000008 	.word	0x20000008

08006390 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800639a:	2302      	movs	r3, #2
 800639c:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d005      	beq.n	80063b0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	683a      	ldr	r2, [r7, #0]
 80063a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 80063ac:	2300      	movs	r3, #0
 80063ae:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80063b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3714      	adds	r7, #20
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr

080063be <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 80063be:	b480      	push	{r7}
 80063c0:	b087      	sub	sp, #28
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	60f8      	str	r0, [r7, #12]
 80063c6:	60b9      	str	r1, [r7, #8]
 80063c8:	4613      	mov	r3, r2
 80063ca:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80063d2:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80063dc:	88fa      	ldrh	r2, [r7, #6]
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	371c      	adds	r7, #28
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr

080063f2 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80063f2:	b580      	push	{r7, lr}
 80063f4:	b084      	sub	sp, #16
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006400:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006408:	2b00      	cmp	r3, #0
 800640a:	d01c      	beq.n	8006446 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006412:	2b00      	cmp	r3, #0
 8006414:	d115      	bne.n	8006442 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2201      	movs	r2, #1
 800641a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006434:	b29b      	uxth	r3, r3
 8006436:	2181      	movs	r1, #129	; 0x81
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f001 fe44 	bl	80080c6 <USBD_LL_Transmit>

      return USBD_OK;
 800643e:	2300      	movs	r3, #0
 8006440:	e002      	b.n	8006448 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006442:	2301      	movs	r3, #1
 8006444:	e000      	b.n	8006448 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006446:	2302      	movs	r3, #2
  }
}
 8006448:	4618      	mov	r0, r3
 800644a:	3710      	adds	r7, #16
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	4613      	mov	r3, r2
 800645c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d101      	bne.n	8006468 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006464:	2302      	movs	r3, #2
 8006466:	e01a      	b.n	800649e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800646e:	2b00      	cmp	r3, #0
 8006470:	d003      	beq.n	800647a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d003      	beq.n	8006488 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	79fa      	ldrb	r2, [r7, #7]
 8006494:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f001 fd46 	bl	8007f28 <USBD_LL_Init>

  return USBD_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3710      	adds	r7, #16
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80064a6:	b480      	push	{r7}
 80064a8:	b085      	sub	sp, #20
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
 80064ae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80064b0:	2300      	movs	r3, #0
 80064b2:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d006      	beq.n	80064c8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	683a      	ldr	r2, [r7, #0]
 80064be:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 80064c2:	2300      	movs	r3, #0
 80064c4:	73fb      	strb	r3, [r7, #15]
 80064c6:	e001      	b.n	80064cc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80064c8:	2302      	movs	r3, #2
 80064ca:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80064cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3714      	adds	r7, #20
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr

080064da <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b082      	sub	sp, #8
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f001 fd70 	bl	8007fc8 <USBD_LL_Start>

  return USBD_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3708      	adds	r7, #8
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b082      	sub	sp, #8
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
 80064fa:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 80064fc:	2180      	movs	r1, #128	; 0x80
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f001 fdc2 	bl	8008088 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8006504:	2100      	movs	r1, #0
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f001 fdbe 	bl	8008088 <USBD_LL_StallEP>
}
 800650c:	bf00      	nop
 800650e:	3708      	adds	r7, #8
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b086      	sub	sp, #24
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006520:	2300      	movs	r3, #0
 8006522:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d032      	beq.n	8006590 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	f000 f834 	bl	8006598 <USBD_GetLen>
 8006530:	4603      	mov	r3, r0
 8006532:	3301      	adds	r3, #1
 8006534:	b29b      	uxth	r3, r3
 8006536:	005b      	lsls	r3, r3, #1
 8006538:	b29a      	uxth	r2, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800653e:	7dfb      	ldrb	r3, [r7, #23]
 8006540:	1c5a      	adds	r2, r3, #1
 8006542:	75fa      	strb	r2, [r7, #23]
 8006544:	461a      	mov	r2, r3
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	4413      	add	r3, r2
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	7812      	ldrb	r2, [r2, #0]
 800654e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006550:	7dfb      	ldrb	r3, [r7, #23]
 8006552:	1c5a      	adds	r2, r3, #1
 8006554:	75fa      	strb	r2, [r7, #23]
 8006556:	461a      	mov	r2, r3
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	4413      	add	r3, r2
 800655c:	2203      	movs	r2, #3
 800655e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006560:	e012      	b.n	8006588 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	1c5a      	adds	r2, r3, #1
 8006566:	60fa      	str	r2, [r7, #12]
 8006568:	7dfa      	ldrb	r2, [r7, #23]
 800656a:	1c51      	adds	r1, r2, #1
 800656c:	75f9      	strb	r1, [r7, #23]
 800656e:	4611      	mov	r1, r2
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	440a      	add	r2, r1
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006578:	7dfb      	ldrb	r3, [r7, #23]
 800657a:	1c5a      	adds	r2, r3, #1
 800657c:	75fa      	strb	r2, [r7, #23]
 800657e:	461a      	mov	r2, r3
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	4413      	add	r3, r2
 8006584:	2200      	movs	r2, #0
 8006586:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d1e8      	bne.n	8006562 <USBD_GetString+0x4e>
    }
  }
}
 8006590:	bf00      	nop
 8006592:	3718      	adds	r7, #24
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80065a0:	2300      	movs	r3, #0
 80065a2:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 80065a4:	e005      	b.n	80065b2 <USBD_GetLen+0x1a>
    {
        len++;
 80065a6:	7bfb      	ldrb	r3, [r7, #15]
 80065a8:	3301      	adds	r3, #1
 80065aa:	73fb      	strb	r3, [r7, #15]
        buf++;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	3301      	adds	r3, #1
 80065b0:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1f5      	bne.n	80065a6 <USBD_GetLen+0xe>
    }

    return len;
 80065ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3714      	adds	r7, #20
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	4613      	mov	r3, r2
 80065d4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2202      	movs	r2, #2
 80065da:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 80065de:	88fa      	ldrh	r2, [r7, #6]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80065e4:	88fa      	ldrh	r2, [r7, #6]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80065ea:	88fb      	ldrh	r3, [r7, #6]
 80065ec:	68ba      	ldr	r2, [r7, #8]
 80065ee:	2100      	movs	r1, #0
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f001 fd68 	bl	80080c6 <USBD_LL_Transmit>

  return USBD_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3710      	adds	r7, #16
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	4613      	mov	r3, r2
 800660c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2203      	movs	r2, #3
 8006612:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8006616:	88fa      	ldrh	r2, [r7, #6]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800661e:	88fa      	ldrh	r2, [r7, #6]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8006626:	88fb      	ldrh	r3, [r7, #6]
 8006628:	68ba      	ldr	r2, [r7, #8]
 800662a:	2100      	movs	r1, #0
 800662c:	68f8      	ldr	r0, [r7, #12]
 800662e:	f001 fd6d 	bl	800810c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	3710      	adds	r7, #16
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800663c:	b480      	push	{r7}
 800663e:	b087      	sub	sp, #28
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	4613      	mov	r3, r2
 8006648:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800664a:	2301      	movs	r3, #1
 800664c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800664e:	2300      	movs	r3, #0
 8006650:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006652:	4b1f      	ldr	r3, [pc, #124]	; (80066d0 <FATFS_LinkDriverEx+0x94>)
 8006654:	7a5b      	ldrb	r3, [r3, #9]
 8006656:	b2db      	uxtb	r3, r3
 8006658:	2b00      	cmp	r3, #0
 800665a:	d131      	bne.n	80066c0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800665c:	4b1c      	ldr	r3, [pc, #112]	; (80066d0 <FATFS_LinkDriverEx+0x94>)
 800665e:	7a5b      	ldrb	r3, [r3, #9]
 8006660:	b2db      	uxtb	r3, r3
 8006662:	461a      	mov	r2, r3
 8006664:	4b1a      	ldr	r3, [pc, #104]	; (80066d0 <FATFS_LinkDriverEx+0x94>)
 8006666:	2100      	movs	r1, #0
 8006668:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800666a:	4b19      	ldr	r3, [pc, #100]	; (80066d0 <FATFS_LinkDriverEx+0x94>)
 800666c:	7a5b      	ldrb	r3, [r3, #9]
 800666e:	b2db      	uxtb	r3, r3
 8006670:	4a17      	ldr	r2, [pc, #92]	; (80066d0 <FATFS_LinkDriverEx+0x94>)
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	4413      	add	r3, r2
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800667a:	4b15      	ldr	r3, [pc, #84]	; (80066d0 <FATFS_LinkDriverEx+0x94>)
 800667c:	7a5b      	ldrb	r3, [r3, #9]
 800667e:	b2db      	uxtb	r3, r3
 8006680:	461a      	mov	r2, r3
 8006682:	4b13      	ldr	r3, [pc, #76]	; (80066d0 <FATFS_LinkDriverEx+0x94>)
 8006684:	4413      	add	r3, r2
 8006686:	79fa      	ldrb	r2, [r7, #7]
 8006688:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800668a:	4b11      	ldr	r3, [pc, #68]	; (80066d0 <FATFS_LinkDriverEx+0x94>)
 800668c:	7a5b      	ldrb	r3, [r3, #9]
 800668e:	b2db      	uxtb	r3, r3
 8006690:	1c5a      	adds	r2, r3, #1
 8006692:	b2d1      	uxtb	r1, r2
 8006694:	4a0e      	ldr	r2, [pc, #56]	; (80066d0 <FATFS_LinkDriverEx+0x94>)
 8006696:	7251      	strb	r1, [r2, #9]
 8006698:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800669a:	7dbb      	ldrb	r3, [r7, #22]
 800669c:	3330      	adds	r3, #48	; 0x30
 800669e:	b2da      	uxtb	r2, r3
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	3301      	adds	r3, #1
 80066a8:	223a      	movs	r2, #58	; 0x3a
 80066aa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	3302      	adds	r3, #2
 80066b0:	222f      	movs	r2, #47	; 0x2f
 80066b2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	3303      	adds	r3, #3
 80066b8:	2200      	movs	r2, #0
 80066ba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80066bc:	2300      	movs	r3, #0
 80066be:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80066c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	371c      	adds	r7, #28
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	20000200 	.word	0x20000200

080066d4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80066de:	2200      	movs	r2, #0
 80066e0:	6839      	ldr	r1, [r7, #0]
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f7ff ffaa 	bl	800663c <FATFS_LinkDriverEx>
 80066e8:	4603      	mov	r3, r0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3708      	adds	r7, #8
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
	...

080066f4 <_ZN3UMDC1Ev>:
#include "UMD.h"
#include <cstdint>
#include <string>
using namespace std;

UMD::UMD(){
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b090      	sub	sp, #64	; 0x40
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]

	string str = "UMDv2\n";
 80066fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006700:	4618      	mov	r0, r3
 8006702:	f001 fe9c 	bl	800843e <_ZNSaIcEC1Ev>
 8006706:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800670a:	f107 030c 	add.w	r3, r7, #12
 800670e:	4913      	ldr	r1, [pc, #76]	; (800675c <_ZN3UMDC1Ev+0x68>)
 8006710:	4618      	mov	r0, r3
 8006712:	f001 ff31 	bl	8008578 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800671a:	4618      	mov	r0, r3
 800671c:	f001 fe90 	bl	8008440 <_ZNSaIcED1Ev>

	sendUSB(str);
 8006720:	f107 020c 	add.w	r2, r7, #12
 8006724:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006728:	4611      	mov	r1, r2
 800672a:	4618      	mov	r0, r3
 800672c:	f001 fef2 	bl	8008514 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8006730:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006734:	4619      	mov	r1, r3
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 f84e 	bl	80067d8 <_ZN3UMD7sendUSBENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800673c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006740:	4618      	mov	r0, r3
 8006742:	f001 feb8 	bl	80084b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	string str = "UMDv2\n";
 8006746:	f107 030c 	add.w	r3, r7, #12
 800674a:	4618      	mov	r0, r3
 800674c:	f001 feb3 	bl	80084b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4618      	mov	r0, r3
 8006754:	3740      	adds	r7, #64	; 0x40
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	080088a8 	.word	0x080088a8

08006760 <_ZN3UMD3runEv>:

void UMD::run(void){
 8006760:	b580      	push	{r7, lr}
 8006762:	b090      	sub	sp, #64	; 0x40
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]

	string str = "UMDv2 running...\n";
 8006768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800676c:	4618      	mov	r0, r3
 800676e:	f001 fe66 	bl	800843e <_ZNSaIcEC1Ev>
 8006772:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006776:	f107 030c 	add.w	r3, r7, #12
 800677a:	4916      	ldr	r1, [pc, #88]	; (80067d4 <_ZN3UMD3runEv+0x74>)
 800677c:	4618      	mov	r0, r3
 800677e:	f001 fefb 	bl	8008578 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006786:	4618      	mov	r0, r3
 8006788:	f001 fe5a 	bl	8008440 <_ZNSaIcED1Ev>

	while(1){
		HAL_Delay(500);
 800678c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006790:	f7f9 ff3c 	bl	800060c <HAL_Delay>
		shift_LEDs(0);
 8006794:	2100      	movs	r1, #0
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 f834 	bl	8006804 <_ZN3UMD10shift_LEDsEh>
		HAL_Delay(500);
 800679c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80067a0:	f7f9 ff34 	bl	800060c <HAL_Delay>
		shift_LEDs(0);
 80067a4:	2100      	movs	r1, #0
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f82c 	bl	8006804 <_ZN3UMD10shift_LEDsEh>
		sendUSB(str);
 80067ac:	f107 020c 	add.w	r2, r7, #12
 80067b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80067b4:	4611      	mov	r1, r2
 80067b6:	4618      	mov	r0, r3
 80067b8:	f001 feac 	bl	8008514 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80067bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80067c0:	4619      	mov	r1, r3
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f808 	bl	80067d8 <_ZN3UMD7sendUSBENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80067c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80067cc:	4618      	mov	r0, r3
 80067ce:	f001 fe72 	bl	80084b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		HAL_Delay(500);
 80067d2:	e7db      	b.n	800678c <_ZN3UMD3runEv+0x2c>
 80067d4:	080088b0 	.word	0x080088b0

080067d8 <_ZN3UMD7sendUSBENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
	}
}

void UMD::sendUSB(string str){
 80067d8:	b590      	push	{r4, r7, lr}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
	//CDC_Transmit_FS( (uint8_t*)str.c_str(), str.length() );
	//CDC_Transmit_FS((uint8_t*)"UMDv2\n", 6);
	CDC_Transmit_FS( (uint8_t*)str.c_str(), str.length() );
 80067e2:	6838      	ldr	r0, [r7, #0]
 80067e4:	f001 fe6f 	bl	80084c6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80067e8:	4604      	mov	r4, r0
 80067ea:	6838      	ldr	r0, [r7, #0]
 80067ec:	f001 fe69 	bl	80084c2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 80067f0:	4603      	mov	r3, r0
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	4619      	mov	r1, r3
 80067f6:	4620      	mov	r0, r4
 80067f8:	f001 fb24 	bl	8007e44 <CDC_Transmit_FS>
}
 80067fc:	bf00      	nop
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	bd90      	pop	{r4, r7, pc}

08006804 <_ZN3UMD10shift_LEDsEh>:

void UMD::sendUSB(uint8_t* buf, uint16_t size){
	CDC_Transmit_FS( buf, size );
}

void UMD::shift_LEDs(uint8_t mode){
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	460b      	mov	r3, r1
 800680e:	70fb      	strb	r3, [r7, #3]
	if( HAL_GPIO_ReadPin(LED0_GPIO_Port, LED0_Pin) ){
 8006810:	2108      	movs	r1, #8
 8006812:	483d      	ldr	r0, [pc, #244]	; (8006908 <_ZN3UMD10shift_LEDsEh+0x104>)
 8006814:	f7fa fc24 	bl	8001060 <HAL_GPIO_ReadPin>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	bf14      	ite	ne
 800681e:	2301      	movne	r3, #1
 8006820:	2300      	moveq	r3, #0
 8006822:	b2db      	uxtb	r3, r3
 8006824:	2b00      	cmp	r3, #0
 8006826:	d014      	beq.n	8006852 <_ZN3UMD10shift_LEDsEh+0x4e>
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8006828:	2200      	movs	r2, #0
 800682a:	2108      	movs	r1, #8
 800682c:	4836      	ldr	r0, [pc, #216]	; (8006908 <_ZN3UMD10shift_LEDsEh+0x104>)
 800682e:	f7fa fc2f 	bl	8001090 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8006832:	2201      	movs	r2, #1
 8006834:	2104      	movs	r1, #4
 8006836:	4834      	ldr	r0, [pc, #208]	; (8006908 <_ZN3UMD10shift_LEDsEh+0x104>)
 8006838:	f7fa fc2a 	bl	8001090 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800683c:	2200      	movs	r2, #0
 800683e:	2102      	movs	r1, #2
 8006840:	4831      	ldr	r0, [pc, #196]	; (8006908 <_ZN3UMD10shift_LEDsEh+0x104>)
 8006842:	f7fa fc25 	bl	8001090 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8006846:	2200      	movs	r2, #0
 8006848:	2101      	movs	r1, #1
 800684a:	482f      	ldr	r0, [pc, #188]	; (8006908 <_ZN3UMD10shift_LEDsEh+0x104>)
 800684c:	f7fa fc20 	bl	8001090 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
	}
}
 8006850:	e055      	b.n	80068fe <_ZN3UMD10shift_LEDsEh+0xfa>
	}else if (HAL_GPIO_ReadPin(LED1_GPIO_Port, LED1_Pin) ){
 8006852:	2104      	movs	r1, #4
 8006854:	482c      	ldr	r0, [pc, #176]	; (8006908 <_ZN3UMD10shift_LEDsEh+0x104>)
 8006856:	f7fa fc03 	bl	8001060 <HAL_GPIO_ReadPin>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	bf14      	ite	ne
 8006860:	2301      	movne	r3, #1
 8006862:	2300      	moveq	r3, #0
 8006864:	b2db      	uxtb	r3, r3
 8006866:	2b00      	cmp	r3, #0
 8006868:	d014      	beq.n	8006894 <_ZN3UMD10shift_LEDsEh+0x90>
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 800686a:	2200      	movs	r2, #0
 800686c:	2108      	movs	r1, #8
 800686e:	4826      	ldr	r0, [pc, #152]	; (8006908 <_ZN3UMD10shift_LEDsEh+0x104>)
 8006870:	f7fa fc0e 	bl	8001090 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8006874:	2200      	movs	r2, #0
 8006876:	2104      	movs	r1, #4
 8006878:	4823      	ldr	r0, [pc, #140]	; (8006908 <_ZN3UMD10shift_LEDsEh+0x104>)
 800687a:	f7fa fc09 	bl	8001090 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800687e:	2201      	movs	r2, #1
 8006880:	2102      	movs	r1, #2
 8006882:	4821      	ldr	r0, [pc, #132]	; (8006908 <_ZN3UMD10shift_LEDsEh+0x104>)
 8006884:	f7fa fc04 	bl	8001090 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8006888:	2200      	movs	r2, #0
 800688a:	2101      	movs	r1, #1
 800688c:	481e      	ldr	r0, [pc, #120]	; (8006908 <_ZN3UMD10shift_LEDsEh+0x104>)
 800688e:	f7fa fbff 	bl	8001090 <HAL_GPIO_WritePin>
}
 8006892:	e034      	b.n	80068fe <_ZN3UMD10shift_LEDsEh+0xfa>
	}else if (HAL_GPIO_ReadPin(LED2_GPIO_Port, LED2_Pin) ){
 8006894:	2102      	movs	r1, #2
 8006896:	481c      	ldr	r0, [pc, #112]	; (8006908 <_ZN3UMD10shift_LEDsEh+0x104>)
 8006898:	f7fa fbe2 	bl	8001060 <HAL_GPIO_ReadPin>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	bf14      	ite	ne
 80068a2:	2301      	movne	r3, #1
 80068a4:	2300      	moveq	r3, #0
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d014      	beq.n	80068d6 <_ZN3UMD10shift_LEDsEh+0xd2>
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 80068ac:	2200      	movs	r2, #0
 80068ae:	2108      	movs	r1, #8
 80068b0:	4815      	ldr	r0, [pc, #84]	; (8006908 <_ZN3UMD10shift_LEDsEh+0x104>)
 80068b2:	f7fa fbed 	bl	8001090 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80068b6:	2200      	movs	r2, #0
 80068b8:	2104      	movs	r1, #4
 80068ba:	4813      	ldr	r0, [pc, #76]	; (8006908 <_ZN3UMD10shift_LEDsEh+0x104>)
 80068bc:	f7fa fbe8 	bl	8001090 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80068c0:	2200      	movs	r2, #0
 80068c2:	2102      	movs	r1, #2
 80068c4:	4810      	ldr	r0, [pc, #64]	; (8006908 <_ZN3UMD10shift_LEDsEh+0x104>)
 80068c6:	f7fa fbe3 	bl	8001090 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 80068ca:	2201      	movs	r2, #1
 80068cc:	2101      	movs	r1, #1
 80068ce:	480e      	ldr	r0, [pc, #56]	; (8006908 <_ZN3UMD10shift_LEDsEh+0x104>)
 80068d0:	f7fa fbde 	bl	8001090 <HAL_GPIO_WritePin>
}
 80068d4:	e013      	b.n	80068fe <_ZN3UMD10shift_LEDsEh+0xfa>
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 80068d6:	2201      	movs	r2, #1
 80068d8:	2108      	movs	r1, #8
 80068da:	480b      	ldr	r0, [pc, #44]	; (8006908 <_ZN3UMD10shift_LEDsEh+0x104>)
 80068dc:	f7fa fbd8 	bl	8001090 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80068e0:	2200      	movs	r2, #0
 80068e2:	2104      	movs	r1, #4
 80068e4:	4808      	ldr	r0, [pc, #32]	; (8006908 <_ZN3UMD10shift_LEDsEh+0x104>)
 80068e6:	f7fa fbd3 	bl	8001090 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80068ea:	2200      	movs	r2, #0
 80068ec:	2102      	movs	r1, #2
 80068ee:	4806      	ldr	r0, [pc, #24]	; (8006908 <_ZN3UMD10shift_LEDsEh+0x104>)
 80068f0:	f7fa fbce 	bl	8001090 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80068f4:	2200      	movs	r2, #0
 80068f6:	2101      	movs	r1, #1
 80068f8:	4803      	ldr	r0, [pc, #12]	; (8006908 <_ZN3UMD10shift_LEDsEh+0x104>)
 80068fa:	f7fa fbc9 	bl	8001090 <HAL_GPIO_WritePin>
}
 80068fe:	bf00      	nop
 8006900:	3708      	adds	r7, #8
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	40020000 	.word	0x40020000

0800690c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8006912:	463b      	mov	r3, r7
 8006914:	2200      	movs	r2, #0
 8006916:	601a      	str	r2, [r3, #0]
 8006918:	605a      	str	r2, [r3, #4]
 800691a:	609a      	str	r2, [r3, #8]
 800691c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800691e:	4b21      	ldr	r3, [pc, #132]	; (80069a4 <MX_ADC1_Init+0x98>)
 8006920:	4a21      	ldr	r2, [pc, #132]	; (80069a8 <MX_ADC1_Init+0x9c>)
 8006922:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006924:	4b1f      	ldr	r3, [pc, #124]	; (80069a4 <MX_ADC1_Init+0x98>)
 8006926:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800692a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800692c:	4b1d      	ldr	r3, [pc, #116]	; (80069a4 <MX_ADC1_Init+0x98>)
 800692e:	2200      	movs	r2, #0
 8006930:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8006932:	4b1c      	ldr	r3, [pc, #112]	; (80069a4 <MX_ADC1_Init+0x98>)
 8006934:	2200      	movs	r2, #0
 8006936:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8006938:	4b1a      	ldr	r3, [pc, #104]	; (80069a4 <MX_ADC1_Init+0x98>)
 800693a:	2200      	movs	r2, #0
 800693c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800693e:	4b19      	ldr	r3, [pc, #100]	; (80069a4 <MX_ADC1_Init+0x98>)
 8006940:	2200      	movs	r2, #0
 8006942:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006946:	4b17      	ldr	r3, [pc, #92]	; (80069a4 <MX_ADC1_Init+0x98>)
 8006948:	2200      	movs	r2, #0
 800694a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800694c:	4b15      	ldr	r3, [pc, #84]	; (80069a4 <MX_ADC1_Init+0x98>)
 800694e:	4a17      	ldr	r2, [pc, #92]	; (80069ac <MX_ADC1_Init+0xa0>)
 8006950:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006952:	4b14      	ldr	r3, [pc, #80]	; (80069a4 <MX_ADC1_Init+0x98>)
 8006954:	2200      	movs	r2, #0
 8006956:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8006958:	4b12      	ldr	r3, [pc, #72]	; (80069a4 <MX_ADC1_Init+0x98>)
 800695a:	2201      	movs	r2, #1
 800695c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800695e:	4b11      	ldr	r3, [pc, #68]	; (80069a4 <MX_ADC1_Init+0x98>)
 8006960:	2200      	movs	r2, #0
 8006962:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006966:	4b0f      	ldr	r3, [pc, #60]	; (80069a4 <MX_ADC1_Init+0x98>)
 8006968:	2201      	movs	r2, #1
 800696a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800696c:	480d      	ldr	r0, [pc, #52]	; (80069a4 <MX_ADC1_Init+0x98>)
 800696e:	f7f9 fe6f 	bl	8000650 <HAL_ADC_Init>
 8006972:	4603      	mov	r3, r0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d001      	beq.n	800697c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8006978:	f000 fe1a 	bl	80075b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800697c:	2307      	movs	r3, #7
 800697e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8006980:	2301      	movs	r3, #1
 8006982:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8006984:	2300      	movs	r3, #0
 8006986:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006988:	463b      	mov	r3, r7
 800698a:	4619      	mov	r1, r3
 800698c:	4805      	ldr	r0, [pc, #20]	; (80069a4 <MX_ADC1_Init+0x98>)
 800698e:	f7f9 fea3 	bl	80006d8 <HAL_ADC_ConfigChannel>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d001      	beq.n	800699c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8006998:	f000 fe0a 	bl	80075b0 <Error_Handler>
  }

}
 800699c:	bf00      	nop
 800699e:	3710      	adds	r7, #16
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}
 80069a4:	20000a30 	.word	0x20000a30
 80069a8:	40012000 	.word	0x40012000
 80069ac:	0f000001 	.word	0x0f000001

080069b0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b08a      	sub	sp, #40	; 0x28
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069b8:	f107 0314 	add.w	r3, r7, #20
 80069bc:	2200      	movs	r2, #0
 80069be:	601a      	str	r2, [r3, #0]
 80069c0:	605a      	str	r2, [r3, #4]
 80069c2:	609a      	str	r2, [r3, #8]
 80069c4:	60da      	str	r2, [r3, #12]
 80069c6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a17      	ldr	r2, [pc, #92]	; (8006a2c <HAL_ADC_MspInit+0x7c>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d127      	bne.n	8006a22 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80069d2:	2300      	movs	r3, #0
 80069d4:	613b      	str	r3, [r7, #16]
 80069d6:	4b16      	ldr	r3, [pc, #88]	; (8006a30 <HAL_ADC_MspInit+0x80>)
 80069d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069da:	4a15      	ldr	r2, [pc, #84]	; (8006a30 <HAL_ADC_MspInit+0x80>)
 80069dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069e0:	6453      	str	r3, [r2, #68]	; 0x44
 80069e2:	4b13      	ldr	r3, [pc, #76]	; (8006a30 <HAL_ADC_MspInit+0x80>)
 80069e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ea:	613b      	str	r3, [r7, #16]
 80069ec:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80069ee:	2300      	movs	r3, #0
 80069f0:	60fb      	str	r3, [r7, #12]
 80069f2:	4b0f      	ldr	r3, [pc, #60]	; (8006a30 <HAL_ADC_MspInit+0x80>)
 80069f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f6:	4a0e      	ldr	r2, [pc, #56]	; (8006a30 <HAL_ADC_MspInit+0x80>)
 80069f8:	f043 0301 	orr.w	r3, r3, #1
 80069fc:	6313      	str	r3, [r2, #48]	; 0x30
 80069fe:	4b0c      	ldr	r3, [pc, #48]	; (8006a30 <HAL_ADC_MspInit+0x80>)
 8006a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a02:	f003 0301 	and.w	r3, r3, #1
 8006a06:	60fb      	str	r3, [r7, #12]
 8006a08:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA7     ------> ADC1_IN7 
    */
    GPIO_InitStruct.Pin = ICART_Pin;
 8006a0a:	2380      	movs	r3, #128	; 0x80
 8006a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a12:	2300      	movs	r3, #0
 8006a14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ICART_GPIO_Port, &GPIO_InitStruct);
 8006a16:	f107 0314 	add.w	r3, r7, #20
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	4805      	ldr	r0, [pc, #20]	; (8006a34 <HAL_ADC_MspInit+0x84>)
 8006a1e:	f7fa f98d 	bl	8000d3c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8006a22:	bf00      	nop
 8006a24:	3728      	adds	r7, #40	; 0x28
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	40012000 	.word	0x40012000
 8006a30:	40023800 	.word	0x40023800
 8006a34:	40020000 	.word	0x40020000

08006a38 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006a42:	f000 f879 	bl	8006b38 <BSP_SD_IsDetected>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d001      	beq.n	8006a50 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e012      	b.n	8006a76 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8006a50:	480b      	ldr	r0, [pc, #44]	; (8006a80 <BSP_SD_Init+0x48>)
 8006a52:	f7fb ff07 	bl	8002864 <HAL_SD_Init>
 8006a56:	4603      	mov	r3, r0
 8006a58:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8006a5a:	79fb      	ldrb	r3, [r7, #7]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d109      	bne.n	8006a74 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8006a60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006a64:	4806      	ldr	r0, [pc, #24]	; (8006a80 <BSP_SD_Init+0x48>)
 8006a66:	f7fc fcd7 	bl	8003418 <HAL_SD_ConfigWideBusOperation>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d001      	beq.n	8006a74 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8006a74:	79fb      	ldrb	r3, [r7, #7]
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3708      	adds	r7, #8
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	20001074 	.word	0x20001074

08006a84 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b088      	sub	sp, #32
 8006a88:	af02      	add	r7, sp, #8
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	607a      	str	r2, [r7, #4]
 8006a90:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8006a92:	2300      	movs	r3, #0
 8006a94:	75fb      	strb	r3, [r7, #23]
  
  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	9300      	str	r3, [sp, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	68f9      	ldr	r1, [r7, #12]
 8006aa0:	4806      	ldr	r0, [pc, #24]	; (8006abc <BSP_SD_ReadBlocks+0x38>)
 8006aa2:	f7fb ff67 	bl	8002974 <HAL_SD_ReadBlocks>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d001      	beq.n	8006ab0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8006ab0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3718      	adds	r7, #24
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	20001074 	.word	0x20001074

08006ac0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b088      	sub	sp, #32
 8006ac4:	af02      	add	r7, sp, #8
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	607a      	str	r2, [r7, #4]
 8006acc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	75fb      	strb	r3, [r7, #23]
  
  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	9300      	str	r3, [sp, #0]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	68f9      	ldr	r1, [r7, #12]
 8006adc:	4806      	ldr	r0, [pc, #24]	; (8006af8 <BSP_SD_WriteBlocks+0x38>)
 8006ade:	f7fc f8df 	bl	8002ca0 <HAL_SD_WriteBlocks>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d001      	beq.n	8006aec <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8006aec:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3718      	adds	r7, #24
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	20001074 	.word	0x20001074

08006afc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006b00:	4805      	ldr	r0, [pc, #20]	; (8006b18 <BSP_SD_GetCardState+0x1c>)
 8006b02:	f7fc fd05 	bl	8003510 <HAL_SD_GetCardState>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b04      	cmp	r3, #4
 8006b0a:	bf14      	ite	ne
 8006b0c:	2301      	movne	r3, #1
 8006b0e:	2300      	moveq	r3, #0
 8006b10:	b2db      	uxtb	r3, r3
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	20001074 	.word	0x20001074

08006b1c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b082      	sub	sp, #8
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006b24:	6879      	ldr	r1, [r7, #4]
 8006b26:	4803      	ldr	r0, [pc, #12]	; (8006b34 <BSP_SD_GetCardInfo+0x18>)
 8006b28:	f7fc fc4a 	bl	80033c0 <HAL_SD_GetCardInfo>
}
 8006b2c:	bf00      	nop
 8006b2e:	3708      	adds	r7, #8
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	20001074 	.word	0x20001074

08006b38 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8006b42:	f000 f853 	bl	8006bec <BSP_PlatformIsDetected>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d101      	bne.n	8006b50 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8006b50:	79fb      	ldrb	r3, [r7, #7]
 8006b52:	b2db      	uxtb	r3, r3
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3708      	adds	r7, #8
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8006b60:	4b06      	ldr	r3, [pc, #24]	; (8006b7c <MX_CRC_Init+0x20>)
 8006b62:	4a07      	ldr	r2, [pc, #28]	; (8006b80 <MX_CRC_Init+0x24>)
 8006b64:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8006b66:	4805      	ldr	r0, [pc, #20]	; (8006b7c <MX_CRC_Init+0x20>)
 8006b68:	f7fa f8c9 	bl	8000cfe <HAL_CRC_Init>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d001      	beq.n	8006b76 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8006b72:	f000 fd1d 	bl	80075b0 <Error_Handler>
  }

}
 8006b76:	bf00      	nop
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	20000a78 	.word	0x20000a78
 8006b80:	40023000 	.word	0x40023000

08006b84 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b085      	sub	sp, #20
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a0b      	ldr	r2, [pc, #44]	; (8006bc0 <HAL_CRC_MspInit+0x3c>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d10d      	bne.n	8006bb2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8006b96:	2300      	movs	r3, #0
 8006b98:	60fb      	str	r3, [r7, #12]
 8006b9a:	4b0a      	ldr	r3, [pc, #40]	; (8006bc4 <HAL_CRC_MspInit+0x40>)
 8006b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b9e:	4a09      	ldr	r2, [pc, #36]	; (8006bc4 <HAL_CRC_MspInit+0x40>)
 8006ba0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8006ba6:	4b07      	ldr	r3, [pc, #28]	; (8006bc4 <HAL_CRC_MspInit+0x40>)
 8006ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006baa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006bae:	60fb      	str	r3, [r7, #12]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8006bb2:	bf00      	nop
 8006bb4:	3714      	adds	r7, #20
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop
 8006bc0:	40023000 	.word	0x40023000
 8006bc4:	40023800 	.word	0x40023800

08006bc8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006bcc:	4904      	ldr	r1, [pc, #16]	; (8006be0 <MX_FATFS_Init+0x18>)
 8006bce:	4805      	ldr	r0, [pc, #20]	; (8006be4 <MX_FATFS_Init+0x1c>)
 8006bd0:	f7ff fd80 	bl	80066d4 <FATFS_LinkDriver>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	4b03      	ldr	r3, [pc, #12]	; (8006be8 <MX_FATFS_Init+0x20>)
 8006bda:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8006bdc:	bf00      	nop
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	20000a84 	.word	0x20000a84
 8006be4:	0800890c 	.word	0x0800890c
 8006be8:	20000a80 	.word	0x20000a80

08006bec <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8006bf6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006bfa:	4806      	ldr	r0, [pc, #24]	; (8006c14 <BSP_PlatformIsDetected+0x28>)
 8006bfc:	f7fa fa30 	bl	8001060 <HAL_GPIO_ReadPin>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d001      	beq.n	8006c0a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8006c06:	2300      	movs	r3, #0
 8006c08:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8006c0a:	79fb      	ldrb	r3, [r7, #7]
}  
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3708      	adds	r7, #8
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}
 8006c14:	40021800 	.word	0x40021800

08006c18 <MX_FSMC_Init>:
NOR_HandleTypeDef hnor3;
SRAM_HandleTypeDef hsram4;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b08e      	sub	sp, #56	; 0x38
 8006c1c:	af00      	add	r7, sp, #0
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8006c1e:	f107 031c 	add.w	r3, r7, #28
 8006c22:	2200      	movs	r2, #0
 8006c24:	601a      	str	r2, [r3, #0]
 8006c26:	605a      	str	r2, [r3, #4]
 8006c28:	609a      	str	r2, [r3, #8]
 8006c2a:	60da      	str	r2, [r3, #12]
 8006c2c:	611a      	str	r2, [r3, #16]
 8006c2e:	615a      	str	r2, [r3, #20]
 8006c30:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8006c32:	463b      	mov	r3, r7
 8006c34:	2200      	movs	r2, #0
 8006c36:	601a      	str	r2, [r3, #0]
 8006c38:	605a      	str	r2, [r3, #4]
 8006c3a:	609a      	str	r2, [r3, #8]
 8006c3c:	60da      	str	r2, [r3, #12]
 8006c3e:	611a      	str	r2, [r3, #16]
 8006c40:	615a      	str	r2, [r3, #20]
 8006c42:	619a      	str	r2, [r3, #24]

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FSMC_NORSRAM_DEVICE;
 8006c44:	4ba4      	ldr	r3, [pc, #656]	; (8006ed8 <MX_FSMC_Init+0x2c0>)
 8006c46:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8006c4a:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8006c4c:	4ba2      	ldr	r3, [pc, #648]	; (8006ed8 <MX_FSMC_Init+0x2c0>)
 8006c4e:	4aa3      	ldr	r2, [pc, #652]	; (8006edc <MX_FSMC_Init+0x2c4>)
 8006c50:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8006c52:	4ba1      	ldr	r3, [pc, #644]	; (8006ed8 <MX_FSMC_Init+0x2c0>)
 8006c54:	2200      	movs	r2, #0
 8006c56:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8006c58:	4b9f      	ldr	r3, [pc, #636]	; (8006ed8 <MX_FSMC_Init+0x2c0>)
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FSMC_MEMORY_TYPE_NOR;
 8006c5e:	4b9e      	ldr	r3, [pc, #632]	; (8006ed8 <MX_FSMC_Init+0x2c0>)
 8006c60:	2208      	movs	r2, #8
 8006c62:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_8;
 8006c64:	4b9c      	ldr	r3, [pc, #624]	; (8006ed8 <MX_FSMC_Init+0x2c0>)
 8006c66:	2200      	movs	r2, #0
 8006c68:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8006c6a:	4b9b      	ldr	r3, [pc, #620]	; (8006ed8 <MX_FSMC_Init+0x2c0>)
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8006c70:	4b99      	ldr	r3, [pc, #612]	; (8006ed8 <MX_FSMC_Init+0x2c0>)
 8006c72:	2200      	movs	r2, #0
 8006c74:	61da      	str	r2, [r3, #28]
  hnor1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8006c76:	4b98      	ldr	r3, [pc, #608]	; (8006ed8 <MX_FSMC_Init+0x2c0>)
 8006c78:	2200      	movs	r2, #0
 8006c7a:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8006c7c:	4b96      	ldr	r3, [pc, #600]	; (8006ed8 <MX_FSMC_Init+0x2c0>)
 8006c7e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006c82:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8006c84:	4b94      	ldr	r3, [pc, #592]	; (8006ed8 <MX_FSMC_Init+0x2c0>)
 8006c86:	2200      	movs	r2, #0
 8006c88:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8006c8a:	4b93      	ldr	r3, [pc, #588]	; (8006ed8 <MX_FSMC_Init+0x2c0>)
 8006c8c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006c90:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8006c92:	4b91      	ldr	r3, [pc, #580]	; (8006ed8 <MX_FSMC_Init+0x2c0>)
 8006c94:	2200      	movs	r2, #0
 8006c96:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8006c98:	4b8f      	ldr	r3, [pc, #572]	; (8006ed8 <MX_FSMC_Init+0x2c0>)
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8006c9e:	4b8e      	ldr	r3, [pc, #568]	; (8006ed8 <MX_FSMC_Init+0x2c0>)
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	63da      	str	r2, [r3, #60]	; 0x3c
  hnor1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8006ca4:	4b8c      	ldr	r3, [pc, #560]	; (8006ed8 <MX_FSMC_Init+0x2c0>)
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	641a      	str	r2, [r3, #64]	; 0x40
  hnor1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8006caa:	4b8b      	ldr	r3, [pc, #556]	; (8006ed8 <MX_FSMC_Init+0x2c0>)
 8006cac:	2200      	movs	r2, #0
 8006cae:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8006cb0:	230f      	movs	r3, #15
 8006cb2:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8006cb4:	230f      	movs	r3, #15
 8006cb6:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 255;
 8006cb8:	23ff      	movs	r3, #255	; 0xff
 8006cba:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 8006cbc:	230f      	movs	r3, #15
 8006cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8006cc0:	2310      	movs	r3, #16
 8006cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8006cc4:	2311      	movs	r3, #17
 8006cc6:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_B;
 8006cc8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006ccc:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 15;
 8006cce:	230f      	movs	r3, #15
 8006cd0:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8006cd2:	230f      	movs	r3, #15
 8006cd4:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 255;
 8006cd6:	23ff      	movs	r3, #255	; 0xff
 8006cd8:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 15;
 8006cda:	230f      	movs	r3, #15
 8006cdc:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8006cde:	2310      	movs	r3, #16
 8006ce0:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8006ce2:	2311      	movs	r3, #17
 8006ce4:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_B;
 8006ce6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006cea:	61bb      	str	r3, [r7, #24]

  if (HAL_NOR_Init(&hnor1, &Timing, &ExtTiming) != HAL_OK)
 8006cec:	463a      	mov	r2, r7
 8006cee:	f107 031c 	add.w	r3, r7, #28
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	4878      	ldr	r0, [pc, #480]	; (8006ed8 <MX_FSMC_Init+0x2c0>)
 8006cf6:	f7fa fb0d 	bl	8001314 <HAL_NOR_Init>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d001      	beq.n	8006d04 <MX_FSMC_Init+0xec>
  {
    Error_Handler( );
 8006d00:	f000 fc56 	bl	80075b0 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 8006d04:	4b76      	ldr	r3, [pc, #472]	; (8006ee0 <MX_FSMC_Init+0x2c8>)
 8006d06:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8006d0a:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8006d0c:	4b74      	ldr	r3, [pc, #464]	; (8006ee0 <MX_FSMC_Init+0x2c8>)
 8006d0e:	4a73      	ldr	r2, [pc, #460]	; (8006edc <MX_FSMC_Init+0x2c4>)
 8006d10:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK2;
 8006d12:	4b73      	ldr	r3, [pc, #460]	; (8006ee0 <MX_FSMC_Init+0x2c8>)
 8006d14:	2202      	movs	r2, #2
 8006d16:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8006d18:	4b71      	ldr	r3, [pc, #452]	; (8006ee0 <MX_FSMC_Init+0x2c8>)
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8006d1e:	4b70      	ldr	r3, [pc, #448]	; (8006ee0 <MX_FSMC_Init+0x2c8>)
 8006d20:	2200      	movs	r2, #0
 8006d22:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_8;
 8006d24:	4b6e      	ldr	r3, [pc, #440]	; (8006ee0 <MX_FSMC_Init+0x2c8>)
 8006d26:	2200      	movs	r2, #0
 8006d28:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8006d2a:	4b6d      	ldr	r3, [pc, #436]	; (8006ee0 <MX_FSMC_Init+0x2c8>)
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8006d30:	4b6b      	ldr	r3, [pc, #428]	; (8006ee0 <MX_FSMC_Init+0x2c8>)
 8006d32:	2200      	movs	r2, #0
 8006d34:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8006d36:	4b6a      	ldr	r3, [pc, #424]	; (8006ee0 <MX_FSMC_Init+0x2c8>)
 8006d38:	2200      	movs	r2, #0
 8006d3a:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8006d3c:	4b68      	ldr	r3, [pc, #416]	; (8006ee0 <MX_FSMC_Init+0x2c8>)
 8006d3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006d42:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8006d44:	4b66      	ldr	r3, [pc, #408]	; (8006ee0 <MX_FSMC_Init+0x2c8>)
 8006d46:	2200      	movs	r2, #0
 8006d48:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8006d4a:	4b65      	ldr	r3, [pc, #404]	; (8006ee0 <MX_FSMC_Init+0x2c8>)
 8006d4c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006d50:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8006d52:	4b63      	ldr	r3, [pc, #396]	; (8006ee0 <MX_FSMC_Init+0x2c8>)
 8006d54:	2200      	movs	r2, #0
 8006d56:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8006d58:	4b61      	ldr	r3, [pc, #388]	; (8006ee0 <MX_FSMC_Init+0x2c8>)
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8006d5e:	4b60      	ldr	r3, [pc, #384]	; (8006ee0 <MX_FSMC_Init+0x2c8>)
 8006d60:	2200      	movs	r2, #0
 8006d62:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8006d64:	4b5e      	ldr	r3, [pc, #376]	; (8006ee0 <MX_FSMC_Init+0x2c8>)
 8006d66:	2200      	movs	r2, #0
 8006d68:	641a      	str	r2, [r3, #64]	; 0x40
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8006d6a:	4b5d      	ldr	r3, [pc, #372]	; (8006ee0 <MX_FSMC_Init+0x2c8>)
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8006d70:	230f      	movs	r3, #15
 8006d72:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8006d74:	230f      	movs	r3, #15
 8006d76:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 255;
 8006d78:	23ff      	movs	r3, #255	; 0xff
 8006d7a:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 8006d7c:	230f      	movs	r3, #15
 8006d7e:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8006d80:	2310      	movs	r3, #16
 8006d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8006d84:	2311      	movs	r3, #17
 8006d86:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 15;
 8006d8c:	230f      	movs	r3, #15
 8006d8e:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8006d90:	230f      	movs	r3, #15
 8006d92:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 255;
 8006d94:	23ff      	movs	r3, #255	; 0xff
 8006d96:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 15;
 8006d98:	230f      	movs	r3, #15
 8006d9a:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8006d9c:	2310      	movs	r3, #16
 8006d9e:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8006da0:	2311      	movs	r3, #17
 8006da2:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8006da4:	2300      	movs	r3, #0
 8006da6:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram2, &Timing, &ExtTiming) != HAL_OK)
 8006da8:	463a      	mov	r2, r7
 8006daa:	f107 031c 	add.w	r3, r7, #28
 8006dae:	4619      	mov	r1, r3
 8006db0:	484b      	ldr	r0, [pc, #300]	; (8006ee0 <MX_FSMC_Init+0x2c8>)
 8006db2:	f7fc ff34 	bl	8003c1e <HAL_SRAM_Init>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d001      	beq.n	8006dc0 <MX_FSMC_Init+0x1a8>
  {
    Error_Handler( );
 8006dbc:	f000 fbf8 	bl	80075b0 <Error_Handler>
  }

  /** Perform the NOR3 memory initialization sequence
  */
  hnor3.Instance = FSMC_NORSRAM_DEVICE;
 8006dc0:	4b48      	ldr	r3, [pc, #288]	; (8006ee4 <MX_FSMC_Init+0x2cc>)
 8006dc2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8006dc6:	601a      	str	r2, [r3, #0]
  hnor3.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8006dc8:	4b46      	ldr	r3, [pc, #280]	; (8006ee4 <MX_FSMC_Init+0x2cc>)
 8006dca:	4a44      	ldr	r2, [pc, #272]	; (8006edc <MX_FSMC_Init+0x2c4>)
 8006dcc:	605a      	str	r2, [r3, #4]
  /* hnor3.Init */
  hnor3.Init.NSBank = FSMC_NORSRAM_BANK3;
 8006dce:	4b45      	ldr	r3, [pc, #276]	; (8006ee4 <MX_FSMC_Init+0x2cc>)
 8006dd0:	2204      	movs	r2, #4
 8006dd2:	609a      	str	r2, [r3, #8]
  hnor3.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8006dd4:	4b43      	ldr	r3, [pc, #268]	; (8006ee4 <MX_FSMC_Init+0x2cc>)
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	60da      	str	r2, [r3, #12]
  hnor3.Init.MemoryType = FSMC_MEMORY_TYPE_NOR;
 8006dda:	4b42      	ldr	r3, [pc, #264]	; (8006ee4 <MX_FSMC_Init+0x2cc>)
 8006ddc:	2208      	movs	r2, #8
 8006dde:	611a      	str	r2, [r3, #16]
  hnor3.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8006de0:	4b40      	ldr	r3, [pc, #256]	; (8006ee4 <MX_FSMC_Init+0x2cc>)
 8006de2:	2210      	movs	r2, #16
 8006de4:	615a      	str	r2, [r3, #20]
  hnor3.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8006de6:	4b3f      	ldr	r3, [pc, #252]	; (8006ee4 <MX_FSMC_Init+0x2cc>)
 8006de8:	2200      	movs	r2, #0
 8006dea:	619a      	str	r2, [r3, #24]
  hnor3.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8006dec:	4b3d      	ldr	r3, [pc, #244]	; (8006ee4 <MX_FSMC_Init+0x2cc>)
 8006dee:	2200      	movs	r2, #0
 8006df0:	61da      	str	r2, [r3, #28]
  hnor3.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8006df2:	4b3c      	ldr	r3, [pc, #240]	; (8006ee4 <MX_FSMC_Init+0x2cc>)
 8006df4:	2200      	movs	r2, #0
 8006df6:	625a      	str	r2, [r3, #36]	; 0x24
  hnor3.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8006df8:	4b3a      	ldr	r3, [pc, #232]	; (8006ee4 <MX_FSMC_Init+0x2cc>)
 8006dfa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006dfe:	629a      	str	r2, [r3, #40]	; 0x28
  hnor3.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8006e00:	4b38      	ldr	r3, [pc, #224]	; (8006ee4 <MX_FSMC_Init+0x2cc>)
 8006e02:	2200      	movs	r2, #0
 8006e04:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor3.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8006e06:	4b37      	ldr	r3, [pc, #220]	; (8006ee4 <MX_FSMC_Init+0x2cc>)
 8006e08:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006e0c:	631a      	str	r2, [r3, #48]	; 0x30
  hnor3.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8006e0e:	4b35      	ldr	r3, [pc, #212]	; (8006ee4 <MX_FSMC_Init+0x2cc>)
 8006e10:	2200      	movs	r2, #0
 8006e12:	635a      	str	r2, [r3, #52]	; 0x34
  hnor3.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8006e14:	4b33      	ldr	r3, [pc, #204]	; (8006ee4 <MX_FSMC_Init+0x2cc>)
 8006e16:	2200      	movs	r2, #0
 8006e18:	639a      	str	r2, [r3, #56]	; 0x38
  hnor3.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8006e1a:	4b32      	ldr	r3, [pc, #200]	; (8006ee4 <MX_FSMC_Init+0x2cc>)
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	63da      	str	r2, [r3, #60]	; 0x3c
  hnor3.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8006e20:	4b30      	ldr	r3, [pc, #192]	; (8006ee4 <MX_FSMC_Init+0x2cc>)
 8006e22:	2200      	movs	r2, #0
 8006e24:	641a      	str	r2, [r3, #64]	; 0x40
  hnor3.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8006e26:	4b2f      	ldr	r3, [pc, #188]	; (8006ee4 <MX_FSMC_Init+0x2cc>)
 8006e28:	2200      	movs	r2, #0
 8006e2a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8006e2c:	230f      	movs	r3, #15
 8006e2e:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8006e30:	230f      	movs	r3, #15
 8006e32:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 255;
 8006e34:	23ff      	movs	r3, #255	; 0xff
 8006e36:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 8006e38:	230f      	movs	r3, #15
 8006e3a:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8006e3c:	2310      	movs	r3, #16
 8006e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8006e40:	2311      	movs	r3, #17
 8006e42:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_B;
 8006e44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006e48:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 15;
 8006e4a:	230f      	movs	r3, #15
 8006e4c:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8006e4e:	230f      	movs	r3, #15
 8006e50:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 255;
 8006e52:	23ff      	movs	r3, #255	; 0xff
 8006e54:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 15;
 8006e56:	230f      	movs	r3, #15
 8006e58:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8006e5a:	2310      	movs	r3, #16
 8006e5c:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8006e5e:	2311      	movs	r3, #17
 8006e60:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_B;
 8006e62:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006e66:	61bb      	str	r3, [r7, #24]

  if (HAL_NOR_Init(&hnor3, &Timing, &ExtTiming) != HAL_OK)
 8006e68:	463a      	mov	r2, r7
 8006e6a:	f107 031c 	add.w	r3, r7, #28
 8006e6e:	4619      	mov	r1, r3
 8006e70:	481c      	ldr	r0, [pc, #112]	; (8006ee4 <MX_FSMC_Init+0x2cc>)
 8006e72:	f7fa fa4f 	bl	8001314 <HAL_NOR_Init>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d001      	beq.n	8006e80 <MX_FSMC_Init+0x268>
  {
    Error_Handler( );
 8006e7c:	f000 fb98 	bl	80075b0 <Error_Handler>
  }

  /** Perform the SRAM4 memory initialization sequence
  */
  hsram4.Instance = FSMC_NORSRAM_DEVICE;
 8006e80:	4b19      	ldr	r3, [pc, #100]	; (8006ee8 <MX_FSMC_Init+0x2d0>)
 8006e82:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8006e86:	601a      	str	r2, [r3, #0]
  hsram4.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8006e88:	4b17      	ldr	r3, [pc, #92]	; (8006ee8 <MX_FSMC_Init+0x2d0>)
 8006e8a:	4a14      	ldr	r2, [pc, #80]	; (8006edc <MX_FSMC_Init+0x2c4>)
 8006e8c:	605a      	str	r2, [r3, #4]
  /* hsram4.Init */
  hsram4.Init.NSBank = FSMC_NORSRAM_BANK4;
 8006e8e:	4b16      	ldr	r3, [pc, #88]	; (8006ee8 <MX_FSMC_Init+0x2d0>)
 8006e90:	2206      	movs	r2, #6
 8006e92:	609a      	str	r2, [r3, #8]
  hsram4.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8006e94:	4b14      	ldr	r3, [pc, #80]	; (8006ee8 <MX_FSMC_Init+0x2d0>)
 8006e96:	2200      	movs	r2, #0
 8006e98:	60da      	str	r2, [r3, #12]
  hsram4.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8006e9a:	4b13      	ldr	r3, [pc, #76]	; (8006ee8 <MX_FSMC_Init+0x2d0>)
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	611a      	str	r2, [r3, #16]
  hsram4.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8006ea0:	4b11      	ldr	r3, [pc, #68]	; (8006ee8 <MX_FSMC_Init+0x2d0>)
 8006ea2:	2210      	movs	r2, #16
 8006ea4:	615a      	str	r2, [r3, #20]
  hsram4.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8006ea6:	4b10      	ldr	r3, [pc, #64]	; (8006ee8 <MX_FSMC_Init+0x2d0>)
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	619a      	str	r2, [r3, #24]
  hsram4.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8006eac:	4b0e      	ldr	r3, [pc, #56]	; (8006ee8 <MX_FSMC_Init+0x2d0>)
 8006eae:	2200      	movs	r2, #0
 8006eb0:	61da      	str	r2, [r3, #28]
  hsram4.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8006eb2:	4b0d      	ldr	r3, [pc, #52]	; (8006ee8 <MX_FSMC_Init+0x2d0>)
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	625a      	str	r2, [r3, #36]	; 0x24
  hsram4.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8006eb8:	4b0b      	ldr	r3, [pc, #44]	; (8006ee8 <MX_FSMC_Init+0x2d0>)
 8006eba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006ebe:	629a      	str	r2, [r3, #40]	; 0x28
  hsram4.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8006ec0:	4b09      	ldr	r3, [pc, #36]	; (8006ee8 <MX_FSMC_Init+0x2d0>)
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram4.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8006ec6:	4b08      	ldr	r3, [pc, #32]	; (8006ee8 <MX_FSMC_Init+0x2d0>)
 8006ec8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006ecc:	631a      	str	r2, [r3, #48]	; 0x30
  hsram4.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8006ece:	4b06      	ldr	r3, [pc, #24]	; (8006ee8 <MX_FSMC_Init+0x2d0>)
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	635a      	str	r2, [r3, #52]	; 0x34
 8006ed4:	e00a      	b.n	8006eec <MX_FSMC_Init+0x2d4>
 8006ed6:	bf00      	nop
 8006ed8:	20000ee8 	.word	0x20000ee8
 8006edc:	a0000104 	.word	0xa0000104
 8006ee0:	20000f34 	.word	0x20000f34
 8006ee4:	20000fd4 	.word	0x20000fd4
 8006ee8:	20000f84 	.word	0x20000f84
  hsram4.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8006eec:	4b1b      	ldr	r3, [pc, #108]	; (8006f5c <MX_FSMC_Init+0x344>)
 8006eee:	2200      	movs	r2, #0
 8006ef0:	639a      	str	r2, [r3, #56]	; 0x38
  hsram4.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8006ef2:	4b1a      	ldr	r3, [pc, #104]	; (8006f5c <MX_FSMC_Init+0x344>)
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram4.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8006ef8:	4b18      	ldr	r3, [pc, #96]	; (8006f5c <MX_FSMC_Init+0x344>)
 8006efa:	2200      	movs	r2, #0
 8006efc:	641a      	str	r2, [r3, #64]	; 0x40
  hsram4.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8006efe:	4b17      	ldr	r3, [pc, #92]	; (8006f5c <MX_FSMC_Init+0x344>)
 8006f00:	2200      	movs	r2, #0
 8006f02:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8006f04:	230f      	movs	r3, #15
 8006f06:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8006f08:	230f      	movs	r3, #15
 8006f0a:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 255;
 8006f0c:	23ff      	movs	r3, #255	; 0xff
 8006f0e:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 8006f10:	230f      	movs	r3, #15
 8006f12:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8006f14:	2310      	movs	r3, #16
 8006f16:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8006f18:	2311      	movs	r3, #17
 8006f1a:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 15;
 8006f20:	230f      	movs	r3, #15
 8006f22:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8006f24:	230f      	movs	r3, #15
 8006f26:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 255;
 8006f28:	23ff      	movs	r3, #255	; 0xff
 8006f2a:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 15;
 8006f2c:	230f      	movs	r3, #15
 8006f2e:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8006f30:	2310      	movs	r3, #16
 8006f32:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8006f34:	2311      	movs	r3, #17
 8006f36:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram4, &Timing, &ExtTiming) != HAL_OK)
 8006f3c:	463a      	mov	r2, r7
 8006f3e:	f107 031c 	add.w	r3, r7, #28
 8006f42:	4619      	mov	r1, r3
 8006f44:	4805      	ldr	r0, [pc, #20]	; (8006f5c <MX_FSMC_Init+0x344>)
 8006f46:	f7fc fe6a 	bl	8003c1e <HAL_SRAM_Init>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d001      	beq.n	8006f54 <MX_FSMC_Init+0x33c>
  {
    Error_Handler( );
 8006f50:	f000 fb2e 	bl	80075b0 <Error_Handler>
  }

}
 8006f54:	bf00      	nop
 8006f56:	3738      	adds	r7, #56	; 0x38
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	20000f84 	.word	0x20000f84

08006f60 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f66:	1d3b      	adds	r3, r7, #4
 8006f68:	2200      	movs	r2, #0
 8006f6a:	601a      	str	r2, [r3, #0]
 8006f6c:	605a      	str	r2, [r3, #4]
 8006f6e:	609a      	str	r2, [r3, #8]
 8006f70:	60da      	str	r2, [r3, #12]
 8006f72:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8006f74:	4b2c      	ldr	r3, [pc, #176]	; (8007028 <HAL_FSMC_MspInit+0xc8>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d151      	bne.n	8007020 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8006f7c:	4b2a      	ldr	r3, [pc, #168]	; (8007028 <HAL_FSMC_MspInit+0xc8>)
 8006f7e:	2201      	movs	r2, #1
 8006f80:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8006f82:	2300      	movs	r3, #0
 8006f84:	603b      	str	r3, [r7, #0]
 8006f86:	4b29      	ldr	r3, [pc, #164]	; (800702c <HAL_FSMC_MspInit+0xcc>)
 8006f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8a:	4a28      	ldr	r2, [pc, #160]	; (800702c <HAL_FSMC_MspInit+0xcc>)
 8006f8c:	f043 0301 	orr.w	r3, r3, #1
 8006f90:	6393      	str	r3, [r2, #56]	; 0x38
 8006f92:	4b26      	ldr	r3, [pc, #152]	; (800702c <HAL_FSMC_MspInit+0xcc>)
 8006f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f96:	f003 0301 	and.w	r3, r3, #1
 8006f9a:	603b      	str	r3, [r7, #0]
 8006f9c:	683b      	ldr	r3, [r7, #0]
  PG14   ------> FSMC_A25
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8006f9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006fa2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fa4:	2302      	movs	r3, #2
 8006fa6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fac:	2303      	movs	r3, #3
 8006fae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8006fb0:	230c      	movs	r3, #12
 8006fb2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006fb4:	1d3b      	adds	r3, r7, #4
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	481d      	ldr	r0, [pc, #116]	; (8007030 <HAL_FSMC_MspInit+0xd0>)
 8006fba:	f7f9 febf 	bl	8000d3c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8006fbe:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8006fc2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fc4:	2302      	movs	r3, #2
 8006fc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8006fd0:	230c      	movs	r3, #12
 8006fd2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006fd4:	1d3b      	adds	r3, r7, #4
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	4816      	ldr	r0, [pc, #88]	; (8007034 <HAL_FSMC_MspInit+0xd4>)
 8006fda:	f7f9 feaf 	bl	8000d3c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8006fde:	f247 633f 	movw	r3, #30271	; 0x763f
 8006fe2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|nCE1_Pin|nCE2_Pin 
                          |nCE3_Pin|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fec:	2303      	movs	r3, #3
 8006fee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8006ff0:	230c      	movs	r3, #12
 8006ff2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006ff4:	1d3b      	adds	r3, r7, #4
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	480f      	ldr	r0, [pc, #60]	; (8007038 <HAL_FSMC_MspInit+0xd8>)
 8006ffa:	f7f9 fe9f 	bl	8000d3c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8006ffe:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 8007002:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_0|GPIO_PIN_1|nRD_Pin|nWR_Pin 
                          |nCE0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007004:	2302      	movs	r3, #2
 8007006:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007008:	2300      	movs	r3, #0
 800700a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800700c:	2303      	movs	r3, #3
 800700e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8007010:	230c      	movs	r3, #12
 8007012:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007014:	1d3b      	adds	r3, r7, #4
 8007016:	4619      	mov	r1, r3
 8007018:	4808      	ldr	r0, [pc, #32]	; (800703c <HAL_FSMC_MspInit+0xdc>)
 800701a:	f7f9 fe8f 	bl	8000d3c <HAL_GPIO_Init>
 800701e:	e000      	b.n	8007022 <HAL_FSMC_MspInit+0xc2>
    return;
 8007020:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8007022:	3718      	adds	r7, #24
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}
 8007028:	20000a18 	.word	0x20000a18
 800702c:	40023800 	.word	0x40023800
 8007030:	40021000 	.word	0x40021000
 8007034:	40021400 	.word	0x40021400
 8007038:	40021800 	.word	0x40021800
 800703c:	40020c00 	.word	0x40020c00

08007040 <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* norHandle){
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FSMC_MspInit();
 8007048:	f7ff ff8a 	bl	8006f60 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 800704c:	bf00      	nop
 800704e:	3708      	adds	r7, #8
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800705c:	f7ff ff80 	bl	8006f60 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8007060:	bf00      	nop
 8007062:	3708      	adds	r7, #8
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <MX_GPIO_Init>:
     PB0   ------> SharedStack_PB0
     PB1   ------> SharedStack_PB1
     PC6   ------> SharedStack_PC6
*/
void MX_GPIO_Init(void)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b08e      	sub	sp, #56	; 0x38
 800706c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800706e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007072:	2200      	movs	r2, #0
 8007074:	601a      	str	r2, [r3, #0]
 8007076:	605a      	str	r2, [r3, #4]
 8007078:	609a      	str	r2, [r3, #8]
 800707a:	60da      	str	r2, [r3, #12]
 800707c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800707e:	2300      	movs	r3, #0
 8007080:	623b      	str	r3, [r7, #32]
 8007082:	4ba6      	ldr	r3, [pc, #664]	; (800731c <MX_GPIO_Init+0x2b4>)
 8007084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007086:	4aa5      	ldr	r2, [pc, #660]	; (800731c <MX_GPIO_Init+0x2b4>)
 8007088:	f043 0310 	orr.w	r3, r3, #16
 800708c:	6313      	str	r3, [r2, #48]	; 0x30
 800708e:	4ba3      	ldr	r3, [pc, #652]	; (800731c <MX_GPIO_Init+0x2b4>)
 8007090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007092:	f003 0310 	and.w	r3, r3, #16
 8007096:	623b      	str	r3, [r7, #32]
 8007098:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800709a:	2300      	movs	r3, #0
 800709c:	61fb      	str	r3, [r7, #28]
 800709e:	4b9f      	ldr	r3, [pc, #636]	; (800731c <MX_GPIO_Init+0x2b4>)
 80070a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a2:	4a9e      	ldr	r2, [pc, #632]	; (800731c <MX_GPIO_Init+0x2b4>)
 80070a4:	f043 0304 	orr.w	r3, r3, #4
 80070a8:	6313      	str	r3, [r2, #48]	; 0x30
 80070aa:	4b9c      	ldr	r3, [pc, #624]	; (800731c <MX_GPIO_Init+0x2b4>)
 80070ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ae:	f003 0304 	and.w	r3, r3, #4
 80070b2:	61fb      	str	r3, [r7, #28]
 80070b4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80070b6:	2300      	movs	r3, #0
 80070b8:	61bb      	str	r3, [r7, #24]
 80070ba:	4b98      	ldr	r3, [pc, #608]	; (800731c <MX_GPIO_Init+0x2b4>)
 80070bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070be:	4a97      	ldr	r2, [pc, #604]	; (800731c <MX_GPIO_Init+0x2b4>)
 80070c0:	f043 0320 	orr.w	r3, r3, #32
 80070c4:	6313      	str	r3, [r2, #48]	; 0x30
 80070c6:	4b95      	ldr	r3, [pc, #596]	; (800731c <MX_GPIO_Init+0x2b4>)
 80070c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ca:	f003 0320 	and.w	r3, r3, #32
 80070ce:	61bb      	str	r3, [r7, #24]
 80070d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80070d2:	2300      	movs	r3, #0
 80070d4:	617b      	str	r3, [r7, #20]
 80070d6:	4b91      	ldr	r3, [pc, #580]	; (800731c <MX_GPIO_Init+0x2b4>)
 80070d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070da:	4a90      	ldr	r2, [pc, #576]	; (800731c <MX_GPIO_Init+0x2b4>)
 80070dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070e0:	6313      	str	r3, [r2, #48]	; 0x30
 80070e2:	4b8e      	ldr	r3, [pc, #568]	; (800731c <MX_GPIO_Init+0x2b4>)
 80070e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ea:	617b      	str	r3, [r7, #20]
 80070ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80070ee:	2300      	movs	r3, #0
 80070f0:	613b      	str	r3, [r7, #16]
 80070f2:	4b8a      	ldr	r3, [pc, #552]	; (800731c <MX_GPIO_Init+0x2b4>)
 80070f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070f6:	4a89      	ldr	r2, [pc, #548]	; (800731c <MX_GPIO_Init+0x2b4>)
 80070f8:	f043 0301 	orr.w	r3, r3, #1
 80070fc:	6313      	str	r3, [r2, #48]	; 0x30
 80070fe:	4b87      	ldr	r3, [pc, #540]	; (800731c <MX_GPIO_Init+0x2b4>)
 8007100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007102:	f003 0301 	and.w	r3, r3, #1
 8007106:	613b      	str	r3, [r7, #16]
 8007108:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800710a:	2300      	movs	r3, #0
 800710c:	60fb      	str	r3, [r7, #12]
 800710e:	4b83      	ldr	r3, [pc, #524]	; (800731c <MX_GPIO_Init+0x2b4>)
 8007110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007112:	4a82      	ldr	r2, [pc, #520]	; (800731c <MX_GPIO_Init+0x2b4>)
 8007114:	f043 0302 	orr.w	r3, r3, #2
 8007118:	6313      	str	r3, [r2, #48]	; 0x30
 800711a:	4b80      	ldr	r3, [pc, #512]	; (800731c <MX_GPIO_Init+0x2b4>)
 800711c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800711e:	f003 0302 	and.w	r3, r3, #2
 8007122:	60fb      	str	r3, [r7, #12]
 8007124:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007126:	2300      	movs	r3, #0
 8007128:	60bb      	str	r3, [r7, #8]
 800712a:	4b7c      	ldr	r3, [pc, #496]	; (800731c <MX_GPIO_Init+0x2b4>)
 800712c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800712e:	4a7b      	ldr	r2, [pc, #492]	; (800731c <MX_GPIO_Init+0x2b4>)
 8007130:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007134:	6313      	str	r3, [r2, #48]	; 0x30
 8007136:	4b79      	ldr	r3, [pc, #484]	; (800731c <MX_GPIO_Init+0x2b4>)
 8007138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800713a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800713e:	60bb      	str	r3, [r7, #8]
 8007140:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007142:	2300      	movs	r3, #0
 8007144:	607b      	str	r3, [r7, #4]
 8007146:	4b75      	ldr	r3, [pc, #468]	; (800731c <MX_GPIO_Init+0x2b4>)
 8007148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800714a:	4a74      	ldr	r2, [pc, #464]	; (800731c <MX_GPIO_Init+0x2b4>)
 800714c:	f043 0308 	orr.w	r3, r3, #8
 8007150:	6313      	str	r3, [r2, #48]	; 0x30
 8007152:	4b72      	ldr	r3, [pc, #456]	; (800731c <MX_GPIO_Init+0x2b4>)
 8007154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007156:	f003 0308 	and.w	r3, r3, #8
 800715a:	607b      	str	r3, [r7, #4]
 800715c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED3_Pin|LED2_Pin|LED1_Pin|LED0_Pin 
 800715e:	2200      	movs	r2, #0
 8007160:	f240 111f 	movw	r1, #287	; 0x11f
 8007164:	486e      	ldr	r0, [pc, #440]	; (8007320 <MX_GPIO_Init+0x2b8>)
 8007166:	f7f9 ff93 	bl	8001090 <HAL_GPIO_WritePin>
                          |nOUT_EN0_Pin|VSEL0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GP3_GPIO_Port, GP3_Pin, GPIO_PIN_RESET);
 800716a:	2200      	movs	r2, #0
 800716c:	2120      	movs	r1, #32
 800716e:	486d      	ldr	r0, [pc, #436]	; (8007324 <MX_GPIO_Init+0x2bc>)
 8007170:	f7f9 ff8e 	bl	8001090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nOUT_EN1_GPIO_Port, nOUT_EN1_Pin, GPIO_PIN_RESET);
 8007174:	2200      	movs	r2, #0
 8007176:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800717a:	486b      	ldr	r0, [pc, #428]	; (8007328 <MX_GPIO_Init+0x2c0>)
 800717c:	f7f9 ff88 	bl	8001090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, SEL0_Pin|SEL1_Pin, GPIO_PIN_RESET);
 8007180:	2200      	movs	r2, #0
 8007182:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8007186:	4869      	ldr	r0, [pc, #420]	; (800732c <MX_GPIO_Init+0x2c4>)
 8007188:	f7f9 ff82 	bl	8001090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOOT_EN_GPIO_Port, BOOT_EN_Pin, GPIO_PIN_RESET);
 800718c:	2200      	movs	r2, #0
 800718e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007192:	4867      	ldr	r0, [pc, #412]	; (8007330 <MX_GPIO_Init+0x2c8>)
 8007194:	f7f9 ff7c 	bl	8001090 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = nDTCT_Pin|GP2_Pin|GP8_Pin;
 8007198:	f242 0350 	movw	r3, #8272	; 0x2050
 800719c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800719e:	2300      	movs	r3, #0
 80071a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071a2:	2300      	movs	r3, #0
 80071a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80071a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071aa:	4619      	mov	r1, r3
 80071ac:	485d      	ldr	r0, [pc, #372]	; (8007324 <MX_GPIO_Init+0x2bc>)
 80071ae:	f7f9 fdc5 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1 
                           PC2 PC3 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1 
 80071b2:	f24c 038f 	movw	r3, #49295	; 0xc08f
 80071b6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80071b8:	2303      	movs	r3, #3
 80071ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071bc:	2300      	movs	r3, #0
 80071be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80071c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071c4:	4619      	mov	r1, r3
 80071c6:	4857      	ldr	r0, [pc, #348]	; (8007324 <MX_GPIO_Init+0x2bc>)
 80071c8:	f7f9 fdb8 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF8 PF9 
                           PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
 80071cc:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80071d0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80071d2:	2303      	movs	r3, #3
 80071d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071d6:	2300      	movs	r3, #0
 80071d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80071da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071de:	4619      	mov	r1, r3
 80071e0:	4851      	ldr	r0, [pc, #324]	; (8007328 <MX_GPIO_Init+0x2c0>)
 80071e2:	f7f9 fdab 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin|LED1_Pin|LED0_Pin 
 80071e6:	f240 131f 	movw	r3, #287	; 0x11f
 80071ea:	627b      	str	r3, [r7, #36]	; 0x24
                          |nOUT_EN0_Pin|VSEL0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80071ec:	2301      	movs	r3, #1
 80071ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071f0:	2300      	movs	r3, #0
 80071f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071f4:	2300      	movs	r3, #0
 80071f6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071fc:	4619      	mov	r1, r3
 80071fe:	4848      	ldr	r0, [pc, #288]	; (8007320 <MX_GPIO_Init+0x2b8>)
 8007200:	f7f9 fd9c 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_9|GPIO_PIN_10;
 8007204:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 8007208:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800720a:	2303      	movs	r3, #3
 800720c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800720e:	2300      	movs	r3, #0
 8007210:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007212:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007216:	4619      	mov	r1, r3
 8007218:	4841      	ldr	r0, [pc, #260]	; (8007320 <MX_GPIO_Init+0x2b8>)
 800721a:	f7f9 fd8f 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GP3_Pin;
 800721e:	2320      	movs	r3, #32
 8007220:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007222:	2301      	movs	r3, #1
 8007224:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007226:	2300      	movs	r3, #0
 8007228:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800722a:	2300      	movs	r3, #0
 800722c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GP3_GPIO_Port, &GPIO_InitStruct);
 800722e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007232:	4619      	mov	r1, r3
 8007234:	483b      	ldr	r0, [pc, #236]	; (8007324 <MX_GPIO_Init+0x2bc>)
 8007236:	f7f9 fd81 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GP0_Pin|GP1_Pin|BOOT1_Pin|nSDWP_Pin;
 800723a:	f240 2307 	movw	r3, #519	; 0x207
 800723e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007240:	2300      	movs	r3, #0
 8007242:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007244:	2300      	movs	r3, #0
 8007246:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800724c:	4619      	mov	r1, r3
 800724e:	4838      	ldr	r0, [pc, #224]	; (8007330 <MX_GPIO_Init+0x2c8>)
 8007250:	f7f9 fd74 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nOUT_EN1_Pin;
 8007254:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007258:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800725a:	2301      	movs	r3, #1
 800725c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800725e:	2300      	movs	r3, #0
 8007260:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007262:	2300      	movs	r3, #0
 8007264:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(nOUT_EN1_GPIO_Port, &GPIO_InitStruct);
 8007266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800726a:	4619      	mov	r1, r3
 800726c:	482e      	ldr	r0, [pc, #184]	; (8007328 <MX_GPIO_Init+0x2c0>)
 800726e:	f7f9 fd65 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG6 PG11 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_11;
 8007272:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8007276:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007278:	2303      	movs	r3, #3
 800727a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800727c:	2300      	movs	r3, #0
 800727e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007280:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007284:	4619      	mov	r1, r3
 8007286:	4829      	ldr	r0, [pc, #164]	; (800732c <MX_GPIO_Init+0x2c4>)
 8007288:	f7f9 fd58 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = SEL0_Pin|SEL1_Pin;
 800728c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8007290:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007292:	2301      	movs	r3, #1
 8007294:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007296:	2300      	movs	r3, #0
 8007298:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800729a:	2300      	movs	r3, #0
 800729c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800729e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072a2:	4619      	mov	r1, r3
 80072a4:	4821      	ldr	r0, [pc, #132]	; (800732c <MX_GPIO_Init+0x2c4>)
 80072a6:	f7f9 fd49 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 80072aa:	2348      	movs	r3, #72	; 0x48
 80072ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80072ae:	2303      	movs	r3, #3
 80072b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072b2:	2300      	movs	r3, #0
 80072b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80072b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072ba:	4619      	mov	r1, r3
 80072bc:	481d      	ldr	r0, [pc, #116]	; (8007334 <MX_GPIO_Init+0x2cc>)
 80072be:	f7f9 fd3d 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nSDCD_Pin;
 80072c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80072c8:	2300      	movs	r3, #0
 80072ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072cc:	2300      	movs	r3, #0
 80072ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(nSDCD_GPIO_Port, &GPIO_InitStruct);
 80072d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072d4:	4619      	mov	r1, r3
 80072d6:	4815      	ldr	r0, [pc, #84]	; (800732c <MX_GPIO_Init+0x2c4>)
 80072d8:	f7f9 fd30 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80072dc:	2320      	movs	r3, #32
 80072de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80072e0:	2303      	movs	r3, #3
 80072e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072e4:	2300      	movs	r3, #0
 80072e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072ec:	4619      	mov	r1, r3
 80072ee:	4810      	ldr	r0, [pc, #64]	; (8007330 <MX_GPIO_Init+0x2c8>)
 80072f0:	f7f9 fd24 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT_EN_Pin;
 80072f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80072fa:	2301      	movs	r3, #1
 80072fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072fe:	2300      	movs	r3, #0
 8007300:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007302:	2300      	movs	r3, #0
 8007304:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BOOT_EN_GPIO_Port, &GPIO_InitStruct);
 8007306:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800730a:	4619      	mov	r1, r3
 800730c:	4808      	ldr	r0, [pc, #32]	; (8007330 <MX_GPIO_Init+0x2c8>)
 800730e:	f7f9 fd15 	bl	8000d3c <HAL_GPIO_Init>

}
 8007312:	bf00      	nop
 8007314:	3738      	adds	r7, #56	; 0x38
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	40023800 	.word	0x40023800
 8007320:	40020000 	.word	0x40020000
 8007324:	40020800 	.word	0x40020800
 8007328:	40021400 	.word	0x40021400
 800732c:	40021800 	.word	0x40021800
 8007330:	40020400 	.word	0x40020400
 8007334:	40020c00 	.word	0x40020c00

08007338 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800733c:	4b12      	ldr	r3, [pc, #72]	; (8007388 <MX_I2C1_Init+0x50>)
 800733e:	4a13      	ldr	r2, [pc, #76]	; (800738c <MX_I2C1_Init+0x54>)
 8007340:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8007342:	4b11      	ldr	r3, [pc, #68]	; (8007388 <MX_I2C1_Init+0x50>)
 8007344:	4a12      	ldr	r2, [pc, #72]	; (8007390 <MX_I2C1_Init+0x58>)
 8007346:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007348:	4b0f      	ldr	r3, [pc, #60]	; (8007388 <MX_I2C1_Init+0x50>)
 800734a:	2200      	movs	r2, #0
 800734c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800734e:	4b0e      	ldr	r3, [pc, #56]	; (8007388 <MX_I2C1_Init+0x50>)
 8007350:	2200      	movs	r2, #0
 8007352:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007354:	4b0c      	ldr	r3, [pc, #48]	; (8007388 <MX_I2C1_Init+0x50>)
 8007356:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800735a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800735c:	4b0a      	ldr	r3, [pc, #40]	; (8007388 <MX_I2C1_Init+0x50>)
 800735e:	2200      	movs	r2, #0
 8007360:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007362:	4b09      	ldr	r3, [pc, #36]	; (8007388 <MX_I2C1_Init+0x50>)
 8007364:	2200      	movs	r2, #0
 8007366:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007368:	4b07      	ldr	r3, [pc, #28]	; (8007388 <MX_I2C1_Init+0x50>)
 800736a:	2200      	movs	r2, #0
 800736c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800736e:	4b06      	ldr	r3, [pc, #24]	; (8007388 <MX_I2C1_Init+0x50>)
 8007370:	2200      	movs	r2, #0
 8007372:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007374:	4804      	ldr	r0, [pc, #16]	; (8007388 <MX_I2C1_Init+0x50>)
 8007376:	f7f9 fea5 	bl	80010c4 <HAL_I2C_Init>
 800737a:	4603      	mov	r3, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d001      	beq.n	8007384 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007380:	f000 f916 	bl	80075b0 <Error_Handler>
  }

}
 8007384:	bf00      	nop
 8007386:	bd80      	pop	{r7, pc}
 8007388:	20001020 	.word	0x20001020
 800738c:	40005400 	.word	0x40005400
 8007390:	000186a0 	.word	0x000186a0

08007394 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b08a      	sub	sp, #40	; 0x28
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800739c:	f107 0314 	add.w	r3, r7, #20
 80073a0:	2200      	movs	r2, #0
 80073a2:	601a      	str	r2, [r3, #0]
 80073a4:	605a      	str	r2, [r3, #4]
 80073a6:	609a      	str	r2, [r3, #8]
 80073a8:	60da      	str	r2, [r3, #12]
 80073aa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a19      	ldr	r2, [pc, #100]	; (8007418 <HAL_I2C_MspInit+0x84>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d12b      	bne.n	800740e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80073b6:	2300      	movs	r3, #0
 80073b8:	613b      	str	r3, [r7, #16]
 80073ba:	4b18      	ldr	r3, [pc, #96]	; (800741c <HAL_I2C_MspInit+0x88>)
 80073bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073be:	4a17      	ldr	r2, [pc, #92]	; (800741c <HAL_I2C_MspInit+0x88>)
 80073c0:	f043 0302 	orr.w	r3, r3, #2
 80073c4:	6313      	str	r3, [r2, #48]	; 0x30
 80073c6:	4b15      	ldr	r3, [pc, #84]	; (800741c <HAL_I2C_MspInit+0x88>)
 80073c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ca:	f003 0302 	and.w	r3, r3, #2
 80073ce:	613b      	str	r3, [r7, #16]
 80073d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL1_Pin|SDA1_Pin;
 80073d2:	23c0      	movs	r3, #192	; 0xc0
 80073d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80073d6:	2312      	movs	r3, #18
 80073d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80073da:	2301      	movs	r3, #1
 80073dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073de:	2303      	movs	r3, #3
 80073e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80073e2:	2304      	movs	r3, #4
 80073e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073e6:	f107 0314 	add.w	r3, r7, #20
 80073ea:	4619      	mov	r1, r3
 80073ec:	480c      	ldr	r0, [pc, #48]	; (8007420 <HAL_I2C_MspInit+0x8c>)
 80073ee:	f7f9 fca5 	bl	8000d3c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80073f2:	2300      	movs	r3, #0
 80073f4:	60fb      	str	r3, [r7, #12]
 80073f6:	4b09      	ldr	r3, [pc, #36]	; (800741c <HAL_I2C_MspInit+0x88>)
 80073f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fa:	4a08      	ldr	r2, [pc, #32]	; (800741c <HAL_I2C_MspInit+0x88>)
 80073fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007400:	6413      	str	r3, [r2, #64]	; 0x40
 8007402:	4b06      	ldr	r3, [pc, #24]	; (800741c <HAL_I2C_MspInit+0x88>)
 8007404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007406:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800740a:	60fb      	str	r3, [r7, #12]
 800740c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800740e:	bf00      	nop
 8007410:	3728      	adds	r7, #40	; 0x28
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	40005400 	.word	0x40005400
 800741c:	40023800 	.word	0x40023800
 8007420:	40020400 	.word	0x40020400

08007424 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b082      	sub	sp, #8
 8007428:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800742a:	f7f9 f87d 	bl	8000528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800742e:	f000 f81d 	bl	800746c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007432:	f7ff fe19 	bl	8007068 <MX_GPIO_Init>
  MX_ADC1_Init();
 8007436:	f7ff fa69 	bl	800690c <MX_ADC1_Init>
  MX_CRC_Init();
 800743a:	f7ff fb8f 	bl	8006b5c <MX_CRC_Init>
  MX_FSMC_Init();
 800743e:	f7ff fbeb 	bl	8006c18 <MX_FSMC_Init>
  MX_I2C1_Init();
 8007442:	f7ff ff79 	bl	8007338 <MX_I2C1_Init>
  MX_SDIO_SD_Init();
 8007446:	f000 f99f 	bl	8007788 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 800744a:	f000 fa25 	bl	8007898 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 800744e:	f000 fb7b 	bl	8007b48 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8007452:	f7ff fbb9 	bl	8006bc8 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8007456:	f000 fbe9 	bl	8007c2c <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  UMD UMDapp;
 800745a:	1d3b      	adds	r3, r7, #4
 800745c:	4618      	mov	r0, r3
 800745e:	f7ff f949 	bl	80066f4 <_ZN3UMDC1Ev>
	  UMDapp.run();
 8007462:	1d3b      	adds	r3, r7, #4
 8007464:	4618      	mov	r0, r3
 8007466:	f7ff f97b 	bl	8006760 <_ZN3UMD3runEv>
  }
 800746a:	e7f6      	b.n	800745a <main+0x36>

0800746c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b0aa      	sub	sp, #168	; 0xa8
 8007470:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007472:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007476:	2234      	movs	r2, #52	; 0x34
 8007478:	2100      	movs	r1, #0
 800747a:	4618      	mov	r0, r3
 800747c:	f001 f901 	bl	8008682 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007480:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007484:	2200      	movs	r2, #0
 8007486:	601a      	str	r2, [r3, #0]
 8007488:	605a      	str	r2, [r3, #4]
 800748a:	609a      	str	r2, [r3, #8]
 800748c:	60da      	str	r2, [r3, #12]
 800748e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007490:	f107 0308 	add.w	r3, r7, #8
 8007494:	2258      	movs	r2, #88	; 0x58
 8007496:	2100      	movs	r1, #0
 8007498:	4618      	mov	r0, r3
 800749a:	f001 f8f2 	bl	8008682 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800749e:	2300      	movs	r3, #0
 80074a0:	607b      	str	r3, [r7, #4]
 80074a2:	4b41      	ldr	r3, [pc, #260]	; (80075a8 <_Z18SystemClock_Configv+0x13c>)
 80074a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a6:	4a40      	ldr	r2, [pc, #256]	; (80075a8 <_Z18SystemClock_Configv+0x13c>)
 80074a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074ac:	6413      	str	r3, [r2, #64]	; 0x40
 80074ae:	4b3e      	ldr	r3, [pc, #248]	; (80075a8 <_Z18SystemClock_Configv+0x13c>)
 80074b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074b6:	607b      	str	r3, [r7, #4]
 80074b8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80074ba:	2300      	movs	r3, #0
 80074bc:	603b      	str	r3, [r7, #0]
 80074be:	4b3b      	ldr	r3, [pc, #236]	; (80075ac <_Z18SystemClock_Configv+0x140>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a3a      	ldr	r2, [pc, #232]	; (80075ac <_Z18SystemClock_Configv+0x140>)
 80074c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80074c8:	6013      	str	r3, [r2, #0]
 80074ca:	4b38      	ldr	r3, [pc, #224]	; (80075ac <_Z18SystemClock_Configv+0x140>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80074d2:	603b      	str	r3, [r7, #0]
 80074d4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80074d6:	2301      	movs	r3, #1
 80074d8:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80074da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80074de:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80074e0:	2302      	movs	r3, #2
 80074e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80074e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80074ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 8;
 80074ee:	2308      	movs	r3, #8
 80074f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 200;
 80074f4:	23c8      	movs	r3, #200	; 0xc8
 80074f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80074fa:	2302      	movs	r3, #2
 80074fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8007500:	2302      	movs	r3, #2
 8007502:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 8007506:	2302      	movs	r3, #2
 8007508:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800750c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007510:	4618      	mov	r0, r3
 8007512:	f7fa ff65 	bl	80023e0 <HAL_RCC_OscConfig>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	bf14      	ite	ne
 800751c:	2301      	movne	r3, #1
 800751e:	2300      	moveq	r3, #0
 8007520:	b2db      	uxtb	r3, r3
 8007522:	2b00      	cmp	r3, #0
 8007524:	d001      	beq.n	800752a <_Z18SystemClock_Configv+0xbe>
  {
    Error_Handler();
 8007526:	f000 f843 	bl	80075b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800752a:	230f      	movs	r3, #15
 800752c:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800752e:	2302      	movs	r3, #2
 8007530:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007532:	2300      	movs	r3, #0
 8007534:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007536:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800753a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800753c:	2300      	movs	r3, #0
 800753e:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8007540:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007544:	2103      	movs	r1, #3
 8007546:	4618      	mov	r0, r3
 8007548:	f7fa fad0 	bl	8001aec <HAL_RCC_ClockConfig>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	bf14      	ite	ne
 8007552:	2301      	movne	r3, #1
 8007554:	2300      	moveq	r3, #0
 8007556:	b2db      	uxtb	r3, r3
 8007558:	2b00      	cmp	r3, #0
 800755a:	d001      	beq.n	8007560 <_Z18SystemClock_Configv+0xf4>
  {
    Error_Handler();
 800755c:	f000 f828 	bl	80075b0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8007560:	2360      	movs	r3, #96	; 0x60
 8007562:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8007564:	23c0      	movs	r3, #192	; 0xc0
 8007566:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 8007568:	2308      	movs	r3, #8
 800756a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800756c:	2302      	movs	r3, #2
 800756e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 4;
 8007570:	2304      	movs	r3, #4
 8007572:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLI2SQ;
 8007574:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007578:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800757a:	2300      	movs	r3, #0
 800757c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 800757e:	2300      	movs	r3, #0
 8007580:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007582:	f107 0308 	add.w	r3, r7, #8
 8007586:	4618      	mov	r0, r3
 8007588:	f7fa fc9e 	bl	8001ec8 <HAL_RCCEx_PeriphCLKConfig>
 800758c:	4603      	mov	r3, r0
 800758e:	2b00      	cmp	r3, #0
 8007590:	bf14      	ite	ne
 8007592:	2301      	movne	r3, #1
 8007594:	2300      	moveq	r3, #0
 8007596:	b2db      	uxtb	r3, r3
 8007598:	2b00      	cmp	r3, #0
 800759a:	d001      	beq.n	80075a0 <_Z18SystemClock_Configv+0x134>
  {
    Error_Handler();
 800759c:	f000 f808 	bl	80075b0 <Error_Handler>
  }
}
 80075a0:	bf00      	nop
 80075a2:	37a8      	adds	r7, #168	; 0xa8
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	40023800 	.word	0x40023800
 80075ac:	40007000 	.word	0x40007000

080075b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80075b0:	b480      	push	{r7}
 80075b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80075b4:	bf00      	nop
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr
	...

080075c0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	4603      	mov	r3, r0
 80075c8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80075ca:	4b0b      	ldr	r3, [pc, #44]	; (80075f8 <SD_CheckStatus+0x38>)
 80075cc:	2201      	movs	r2, #1
 80075ce:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80075d0:	f7ff fa94 	bl	8006afc <BSP_SD_GetCardState>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d107      	bne.n	80075ea <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80075da:	4b07      	ldr	r3, [pc, #28]	; (80075f8 <SD_CheckStatus+0x38>)
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	f023 0301 	bic.w	r3, r3, #1
 80075e4:	b2da      	uxtb	r2, r3
 80075e6:	4b04      	ldr	r3, [pc, #16]	; (80075f8 <SD_CheckStatus+0x38>)
 80075e8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80075ea:	4b03      	ldr	r3, [pc, #12]	; (80075f8 <SD_CheckStatus+0x38>)
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	b2db      	uxtb	r3, r3
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3708      	adds	r7, #8
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	20000117 	.word	0x20000117

080075fc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	4603      	mov	r3, r0
 8007604:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 8007606:	4b0b      	ldr	r3, [pc, #44]	; (8007634 <SD_initialize+0x38>)
 8007608:	2201      	movs	r2, #1
 800760a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800760c:	f7ff fa14 	bl	8006a38 <BSP_SD_Init>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d107      	bne.n	8007626 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8007616:	79fb      	ldrb	r3, [r7, #7]
 8007618:	4618      	mov	r0, r3
 800761a:	f7ff ffd1 	bl	80075c0 <SD_CheckStatus>
 800761e:	4603      	mov	r3, r0
 8007620:	461a      	mov	r2, r3
 8007622:	4b04      	ldr	r3, [pc, #16]	; (8007634 <SD_initialize+0x38>)
 8007624:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8007626:	4b03      	ldr	r3, [pc, #12]	; (8007634 <SD_initialize+0x38>)
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	b2db      	uxtb	r3, r3
}
 800762c:	4618      	mov	r0, r3
 800762e:	3708      	adds	r7, #8
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}
 8007634:	20000117 	.word	0x20000117

08007638 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	4603      	mov	r3, r0
 8007640:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007642:	79fb      	ldrb	r3, [r7, #7]
 8007644:	4618      	mov	r0, r3
 8007646:	f7ff ffbb 	bl	80075c0 <SD_CheckStatus>
 800764a:	4603      	mov	r3, r0
}
 800764c:	4618      	mov	r0, r3
 800764e:	3708      	adds	r7, #8
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b086      	sub	sp, #24
 8007658:	af00      	add	r7, sp, #0
 800765a:	60b9      	str	r1, [r7, #8]
 800765c:	607a      	str	r2, [r7, #4]
 800765e:	603b      	str	r3, [r7, #0]
 8007660:	4603      	mov	r3, r0
 8007662:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8007668:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800766c:	683a      	ldr	r2, [r7, #0]
 800766e:	6879      	ldr	r1, [r7, #4]
 8007670:	68b8      	ldr	r0, [r7, #8]
 8007672:	f7ff fa07 	bl	8006a84 <BSP_SD_ReadBlocks>
 8007676:	4603      	mov	r3, r0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d107      	bne.n	800768c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800767c:	bf00      	nop
 800767e:	f7ff fa3d 	bl	8006afc <BSP_SD_GetCardState>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d1fa      	bne.n	800767e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8007688:	2300      	movs	r3, #0
 800768a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800768c:	7dfb      	ldrb	r3, [r7, #23]
}
 800768e:	4618      	mov	r0, r3
 8007690:	3718      	adds	r7, #24
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007696:	b580      	push	{r7, lr}
 8007698:	b086      	sub	sp, #24
 800769a:	af00      	add	r7, sp, #0
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	607a      	str	r2, [r7, #4]
 80076a0:	603b      	str	r3, [r7, #0]
 80076a2:	4603      	mov	r3, r0
 80076a4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80076aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076ae:	683a      	ldr	r2, [r7, #0]
 80076b0:	6879      	ldr	r1, [r7, #4]
 80076b2:	68b8      	ldr	r0, [r7, #8]
 80076b4:	f7ff fa04 	bl	8006ac0 <BSP_SD_WriteBlocks>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d107      	bne.n	80076ce <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80076be:	bf00      	nop
 80076c0:	f7ff fa1c 	bl	8006afc <BSP_SD_GetCardState>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d1fa      	bne.n	80076c0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80076ca:	2300      	movs	r3, #0
 80076cc:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80076ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3718      	adds	r7, #24
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b08c      	sub	sp, #48	; 0x30
 80076dc:	af00      	add	r7, sp, #0
 80076de:	4603      	mov	r3, r0
 80076e0:	603a      	str	r2, [r7, #0]
 80076e2:	71fb      	strb	r3, [r7, #7]
 80076e4:	460b      	mov	r3, r1
 80076e6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80076ee:	4b25      	ldr	r3, [pc, #148]	; (8007784 <SD_ioctl+0xac>)
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	f003 0301 	and.w	r3, r3, #1
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d001      	beq.n	8007700 <SD_ioctl+0x28>
 80076fc:	2303      	movs	r3, #3
 80076fe:	e03c      	b.n	800777a <SD_ioctl+0xa2>

  switch (cmd)
 8007700:	79bb      	ldrb	r3, [r7, #6]
 8007702:	2b03      	cmp	r3, #3
 8007704:	d834      	bhi.n	8007770 <SD_ioctl+0x98>
 8007706:	a201      	add	r2, pc, #4	; (adr r2, 800770c <SD_ioctl+0x34>)
 8007708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800770c:	0800771d 	.word	0x0800771d
 8007710:	08007725 	.word	0x08007725
 8007714:	0800773d 	.word	0x0800773d
 8007718:	08007757 	.word	0x08007757
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800771c:	2300      	movs	r3, #0
 800771e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007722:	e028      	b.n	8007776 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007724:	f107 030c 	add.w	r3, r7, #12
 8007728:	4618      	mov	r0, r3
 800772a:	f7ff f9f7 	bl	8006b1c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800772e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007734:	2300      	movs	r3, #0
 8007736:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800773a:	e01c      	b.n	8007776 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800773c:	f107 030c 	add.w	r3, r7, #12
 8007740:	4618      	mov	r0, r3
 8007742:	f7ff f9eb 	bl	8006b1c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007748:	b29a      	uxth	r2, r3
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800774e:	2300      	movs	r3, #0
 8007750:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007754:	e00f      	b.n	8007776 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007756:	f107 030c 	add.w	r3, r7, #12
 800775a:	4618      	mov	r0, r3
 800775c:	f7ff f9de 	bl	8006b1c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007762:	0a5a      	lsrs	r2, r3, #9
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007768:	2300      	movs	r3, #0
 800776a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800776e:	e002      	b.n	8007776 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007770:	2304      	movs	r3, #4
 8007772:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8007776:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800777a:	4618      	mov	r0, r3
 800777c:	3730      	adds	r7, #48	; 0x30
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	20000117 	.word	0x20000117

08007788 <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8007788:	b480      	push	{r7}
 800778a:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 800778c:	4b0c      	ldr	r3, [pc, #48]	; (80077c0 <MX_SDIO_SD_Init+0x38>)
 800778e:	4a0d      	ldr	r2, [pc, #52]	; (80077c4 <MX_SDIO_SD_Init+0x3c>)
 8007790:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8007792:	4b0b      	ldr	r3, [pc, #44]	; (80077c0 <MX_SDIO_SD_Init+0x38>)
 8007794:	2200      	movs	r2, #0
 8007796:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8007798:	4b09      	ldr	r3, [pc, #36]	; (80077c0 <MX_SDIO_SD_Init+0x38>)
 800779a:	2200      	movs	r2, #0
 800779c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800779e:	4b08      	ldr	r3, [pc, #32]	; (80077c0 <MX_SDIO_SD_Init+0x38>)
 80077a0:	2200      	movs	r2, #0
 80077a2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80077a4:	4b06      	ldr	r3, [pc, #24]	; (80077c0 <MX_SDIO_SD_Init+0x38>)
 80077a6:	2200      	movs	r2, #0
 80077a8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80077aa:	4b05      	ldr	r3, [pc, #20]	; (80077c0 <MX_SDIO_SD_Init+0x38>)
 80077ac:	2200      	movs	r2, #0
 80077ae:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80077b0:	4b03      	ldr	r3, [pc, #12]	; (80077c0 <MX_SDIO_SD_Init+0x38>)
 80077b2:	2200      	movs	r2, #0
 80077b4:	619a      	str	r2, [r3, #24]

}
 80077b6:	bf00      	nop
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr
 80077c0:	20001074 	.word	0x20001074
 80077c4:	40012c00 	.word	0x40012c00

080077c8 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b08a      	sub	sp, #40	; 0x28
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077d0:	f107 0314 	add.w	r3, r7, #20
 80077d4:	2200      	movs	r2, #0
 80077d6:	601a      	str	r2, [r3, #0]
 80077d8:	605a      	str	r2, [r3, #4]
 80077da:	609a      	str	r2, [r3, #8]
 80077dc:	60da      	str	r2, [r3, #12]
 80077de:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a28      	ldr	r2, [pc, #160]	; (8007888 <HAL_SD_MspInit+0xc0>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d14a      	bne.n	8007880 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80077ea:	2300      	movs	r3, #0
 80077ec:	613b      	str	r3, [r7, #16]
 80077ee:	4b27      	ldr	r3, [pc, #156]	; (800788c <HAL_SD_MspInit+0xc4>)
 80077f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077f2:	4a26      	ldr	r2, [pc, #152]	; (800788c <HAL_SD_MspInit+0xc4>)
 80077f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80077f8:	6453      	str	r3, [r2, #68]	; 0x44
 80077fa:	4b24      	ldr	r3, [pc, #144]	; (800788c <HAL_SD_MspInit+0xc4>)
 80077fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007802:	613b      	str	r3, [r7, #16]
 8007804:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007806:	2300      	movs	r3, #0
 8007808:	60fb      	str	r3, [r7, #12]
 800780a:	4b20      	ldr	r3, [pc, #128]	; (800788c <HAL_SD_MspInit+0xc4>)
 800780c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800780e:	4a1f      	ldr	r2, [pc, #124]	; (800788c <HAL_SD_MspInit+0xc4>)
 8007810:	f043 0304 	orr.w	r3, r3, #4
 8007814:	6313      	str	r3, [r2, #48]	; 0x30
 8007816:	4b1d      	ldr	r3, [pc, #116]	; (800788c <HAL_SD_MspInit+0xc4>)
 8007818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800781a:	f003 0304 	and.w	r3, r3, #4
 800781e:	60fb      	str	r3, [r7, #12]
 8007820:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007822:	2300      	movs	r3, #0
 8007824:	60bb      	str	r3, [r7, #8]
 8007826:	4b19      	ldr	r3, [pc, #100]	; (800788c <HAL_SD_MspInit+0xc4>)
 8007828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800782a:	4a18      	ldr	r2, [pc, #96]	; (800788c <HAL_SD_MspInit+0xc4>)
 800782c:	f043 0308 	orr.w	r3, r3, #8
 8007830:	6313      	str	r3, [r2, #48]	; 0x30
 8007832:	4b16      	ldr	r3, [pc, #88]	; (800788c <HAL_SD_MspInit+0xc4>)
 8007834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007836:	f003 0308 	and.w	r3, r3, #8
 800783a:	60bb      	str	r3, [r7, #8]
 800783c:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800783e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8007842:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007844:	2302      	movs	r3, #2
 8007846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007848:	2300      	movs	r3, #0
 800784a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800784c:	2303      	movs	r3, #3
 800784e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8007850:	230c      	movs	r3, #12
 8007852:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007854:	f107 0314 	add.w	r3, r7, #20
 8007858:	4619      	mov	r1, r3
 800785a:	480d      	ldr	r0, [pc, #52]	; (8007890 <HAL_SD_MspInit+0xc8>)
 800785c:	f7f9 fa6e 	bl	8000d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007860:	2304      	movs	r3, #4
 8007862:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007864:	2302      	movs	r3, #2
 8007866:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007868:	2300      	movs	r3, #0
 800786a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800786c:	2303      	movs	r3, #3
 800786e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8007870:	230c      	movs	r3, #12
 8007872:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007874:	f107 0314 	add.w	r3, r7, #20
 8007878:	4619      	mov	r1, r3
 800787a:	4806      	ldr	r0, [pc, #24]	; (8007894 <HAL_SD_MspInit+0xcc>)
 800787c:	f7f9 fa5e 	bl	8000d3c <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8007880:	bf00      	nop
 8007882:	3728      	adds	r7, #40	; 0x28
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}
 8007888:	40012c00 	.word	0x40012c00
 800788c:	40023800 	.word	0x40023800
 8007890:	40020800 	.word	0x40020800
 8007894:	40020c00 	.word	0x40020c00

08007898 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 800789c:	4b17      	ldr	r3, [pc, #92]	; (80078fc <MX_SPI2_Init+0x64>)
 800789e:	4a18      	ldr	r2, [pc, #96]	; (8007900 <MX_SPI2_Init+0x68>)
 80078a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80078a2:	4b16      	ldr	r3, [pc, #88]	; (80078fc <MX_SPI2_Init+0x64>)
 80078a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80078a8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80078aa:	4b14      	ldr	r3, [pc, #80]	; (80078fc <MX_SPI2_Init+0x64>)
 80078ac:	2200      	movs	r2, #0
 80078ae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80078b0:	4b12      	ldr	r3, [pc, #72]	; (80078fc <MX_SPI2_Init+0x64>)
 80078b2:	2200      	movs	r2, #0
 80078b4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80078b6:	4b11      	ldr	r3, [pc, #68]	; (80078fc <MX_SPI2_Init+0x64>)
 80078b8:	2200      	movs	r2, #0
 80078ba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80078bc:	4b0f      	ldr	r3, [pc, #60]	; (80078fc <MX_SPI2_Init+0x64>)
 80078be:	2200      	movs	r2, #0
 80078c0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80078c2:	4b0e      	ldr	r3, [pc, #56]	; (80078fc <MX_SPI2_Init+0x64>)
 80078c4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80078c8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80078ca:	4b0c      	ldr	r3, [pc, #48]	; (80078fc <MX_SPI2_Init+0x64>)
 80078cc:	2200      	movs	r2, #0
 80078ce:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80078d0:	4b0a      	ldr	r3, [pc, #40]	; (80078fc <MX_SPI2_Init+0x64>)
 80078d2:	2200      	movs	r2, #0
 80078d4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80078d6:	4b09      	ldr	r3, [pc, #36]	; (80078fc <MX_SPI2_Init+0x64>)
 80078d8:	2200      	movs	r2, #0
 80078da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80078dc:	4b07      	ldr	r3, [pc, #28]	; (80078fc <MX_SPI2_Init+0x64>)
 80078de:	2200      	movs	r2, #0
 80078e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80078e2:	4b06      	ldr	r3, [pc, #24]	; (80078fc <MX_SPI2_Init+0x64>)
 80078e4:	220a      	movs	r2, #10
 80078e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80078e8:	4804      	ldr	r0, [pc, #16]	; (80078fc <MX_SPI2_Init+0x64>)
 80078ea:	f7fc f934 	bl	8003b56 <HAL_SPI_Init>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d001      	beq.n	80078f8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80078f4:	f7ff fe5c 	bl	80075b0 <Error_Handler>
  }

}
 80078f8:	bf00      	nop
 80078fa:	bd80      	pop	{r7, pc}
 80078fc:	200010f8 	.word	0x200010f8
 8007900:	40003800 	.word	0x40003800

08007904 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b08a      	sub	sp, #40	; 0x28
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800790c:	f107 0314 	add.w	r3, r7, #20
 8007910:	2200      	movs	r2, #0
 8007912:	601a      	str	r2, [r3, #0]
 8007914:	605a      	str	r2, [r3, #4]
 8007916:	609a      	str	r2, [r3, #8]
 8007918:	60da      	str	r2, [r3, #12]
 800791a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a19      	ldr	r2, [pc, #100]	; (8007988 <HAL_SPI_MspInit+0x84>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d12c      	bne.n	8007980 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007926:	2300      	movs	r3, #0
 8007928:	613b      	str	r3, [r7, #16]
 800792a:	4b18      	ldr	r3, [pc, #96]	; (800798c <HAL_SPI_MspInit+0x88>)
 800792c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800792e:	4a17      	ldr	r2, [pc, #92]	; (800798c <HAL_SPI_MspInit+0x88>)
 8007930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007934:	6413      	str	r3, [r2, #64]	; 0x40
 8007936:	4b15      	ldr	r3, [pc, #84]	; (800798c <HAL_SPI_MspInit+0x88>)
 8007938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800793e:	613b      	str	r3, [r7, #16]
 8007940:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007942:	2300      	movs	r3, #0
 8007944:	60fb      	str	r3, [r7, #12]
 8007946:	4b11      	ldr	r3, [pc, #68]	; (800798c <HAL_SPI_MspInit+0x88>)
 8007948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800794a:	4a10      	ldr	r2, [pc, #64]	; (800798c <HAL_SPI_MspInit+0x88>)
 800794c:	f043 0302 	orr.w	r3, r3, #2
 8007950:	6313      	str	r3, [r2, #48]	; 0x30
 8007952:	4b0e      	ldr	r3, [pc, #56]	; (800798c <HAL_SPI_MspInit+0x88>)
 8007954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007956:	f003 0302 	and.w	r3, r3, #2
 800795a:	60fb      	str	r3, [r7, #12]
 800795c:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800795e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8007962:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007964:	2302      	movs	r3, #2
 8007966:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007968:	2300      	movs	r3, #0
 800796a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800796c:	2303      	movs	r3, #3
 800796e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007970:	2305      	movs	r3, #5
 8007972:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007974:	f107 0314 	add.w	r3, r7, #20
 8007978:	4619      	mov	r1, r3
 800797a:	4805      	ldr	r0, [pc, #20]	; (8007990 <HAL_SPI_MspInit+0x8c>)
 800797c:	f7f9 f9de 	bl	8000d3c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8007980:	bf00      	nop
 8007982:	3728      	adds	r7, #40	; 0x28
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	40003800 	.word	0x40003800
 800798c:	40023800 	.word	0x40023800
 8007990:	40020400 	.word	0x40020400

08007994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800799a:	2300      	movs	r3, #0
 800799c:	607b      	str	r3, [r7, #4]
 800799e:	4b10      	ldr	r3, [pc, #64]	; (80079e0 <HAL_MspInit+0x4c>)
 80079a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079a2:	4a0f      	ldr	r2, [pc, #60]	; (80079e0 <HAL_MspInit+0x4c>)
 80079a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80079a8:	6453      	str	r3, [r2, #68]	; 0x44
 80079aa:	4b0d      	ldr	r3, [pc, #52]	; (80079e0 <HAL_MspInit+0x4c>)
 80079ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079b2:	607b      	str	r3, [r7, #4]
 80079b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80079b6:	2300      	movs	r3, #0
 80079b8:	603b      	str	r3, [r7, #0]
 80079ba:	4b09      	ldr	r3, [pc, #36]	; (80079e0 <HAL_MspInit+0x4c>)
 80079bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079be:	4a08      	ldr	r2, [pc, #32]	; (80079e0 <HAL_MspInit+0x4c>)
 80079c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079c4:	6413      	str	r3, [r2, #64]	; 0x40
 80079c6:	4b06      	ldr	r3, [pc, #24]	; (80079e0 <HAL_MspInit+0x4c>)
 80079c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079ce:	603b      	str	r3, [r7, #0]
 80079d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80079d2:	bf00      	nop
 80079d4:	370c      	adds	r7, #12
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	40023800 	.word	0x40023800

080079e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80079e4:	b480      	push	{r7}
 80079e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80079e8:	bf00      	nop
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr

080079f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80079f2:	b480      	push	{r7}
 80079f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80079f6:	e7fe      	b.n	80079f6 <HardFault_Handler+0x4>

080079f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80079f8:	b480      	push	{r7}
 80079fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80079fc:	e7fe      	b.n	80079fc <MemManage_Handler+0x4>

080079fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80079fe:	b480      	push	{r7}
 8007a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007a02:	e7fe      	b.n	8007a02 <BusFault_Handler+0x4>

08007a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007a04:	b480      	push	{r7}
 8007a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007a08:	e7fe      	b.n	8007a08 <UsageFault_Handler+0x4>

08007a0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007a0a:	b480      	push	{r7}
 8007a0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007a0e:	bf00      	nop
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007a1c:	bf00      	nop
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr

08007a26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007a26:	b480      	push	{r7}
 8007a28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007a2a:	bf00      	nop
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007a38:	f7f8 fdc8 	bl	80005cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007a3c:	bf00      	nop
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007a40:	b480      	push	{r7}
 8007a42:	af00      	add	r7, sp, #0
	return 1;
 8007a44:	2301      	movs	r3, #1
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr

08007a50 <_kill>:

int _kill(int pid, int sig)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8007a5a:	f000 fdcd 	bl	80085f8 <__errno>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	2316      	movs	r3, #22
 8007a62:	6013      	str	r3, [r2, #0]
	return -1;
 8007a64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3708      	adds	r7, #8
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <_exit>:

void _exit (int status)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8007a78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f7ff ffe7 	bl	8007a50 <_kill>
	while (1) {}		/* Make sure we hang here */
 8007a82:	e7fe      	b.n	8007a82 <_exit+0x12>

08007a84 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007a8c:	4b11      	ldr	r3, [pc, #68]	; (8007ad4 <_sbrk+0x50>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d102      	bne.n	8007a9a <_sbrk+0x16>
		heap_end = &end;
 8007a94:	4b0f      	ldr	r3, [pc, #60]	; (8007ad4 <_sbrk+0x50>)
 8007a96:	4a10      	ldr	r2, [pc, #64]	; (8007ad8 <_sbrk+0x54>)
 8007a98:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007a9a:	4b0e      	ldr	r3, [pc, #56]	; (8007ad4 <_sbrk+0x50>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007aa0:	4b0c      	ldr	r3, [pc, #48]	; (8007ad4 <_sbrk+0x50>)
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	4413      	add	r3, r2
 8007aa8:	466a      	mov	r2, sp
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d907      	bls.n	8007abe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007aae:	f000 fda3 	bl	80085f8 <__errno>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	230c      	movs	r3, #12
 8007ab6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007ab8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007abc:	e006      	b.n	8007acc <_sbrk+0x48>
	}

	heap_end += incr;
 8007abe:	4b05      	ldr	r3, [pc, #20]	; (8007ad4 <_sbrk+0x50>)
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	4a03      	ldr	r2, [pc, #12]	; (8007ad4 <_sbrk+0x50>)
 8007ac8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007aca:	68fb      	ldr	r3, [r7, #12]
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3710      	adds	r7, #16
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	20000a1c 	.word	0x20000a1c
 8007ad8:	20001a38 	.word	0x20001a38

08007adc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007adc:	b480      	push	{r7}
 8007ade:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007ae0:	4b16      	ldr	r3, [pc, #88]	; (8007b3c <SystemInit+0x60>)
 8007ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ae6:	4a15      	ldr	r2, [pc, #84]	; (8007b3c <SystemInit+0x60>)
 8007ae8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007aec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007af0:	4b13      	ldr	r3, [pc, #76]	; (8007b40 <SystemInit+0x64>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a12      	ldr	r2, [pc, #72]	; (8007b40 <SystemInit+0x64>)
 8007af6:	f043 0301 	orr.w	r3, r3, #1
 8007afa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007afc:	4b10      	ldr	r3, [pc, #64]	; (8007b40 <SystemInit+0x64>)
 8007afe:	2200      	movs	r2, #0
 8007b00:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007b02:	4b0f      	ldr	r3, [pc, #60]	; (8007b40 <SystemInit+0x64>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a0e      	ldr	r2, [pc, #56]	; (8007b40 <SystemInit+0x64>)
 8007b08:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8007b0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b10:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007b12:	4b0b      	ldr	r3, [pc, #44]	; (8007b40 <SystemInit+0x64>)
 8007b14:	4a0b      	ldr	r2, [pc, #44]	; (8007b44 <SystemInit+0x68>)
 8007b16:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007b18:	4b09      	ldr	r3, [pc, #36]	; (8007b40 <SystemInit+0x64>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a08      	ldr	r2, [pc, #32]	; (8007b40 <SystemInit+0x64>)
 8007b1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b22:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007b24:	4b06      	ldr	r3, [pc, #24]	; (8007b40 <SystemInit+0x64>)
 8007b26:	2200      	movs	r2, #0
 8007b28:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007b2a:	4b04      	ldr	r3, [pc, #16]	; (8007b3c <SystemInit+0x60>)
 8007b2c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007b30:	609a      	str	r2, [r3, #8]
#endif
}
 8007b32:	bf00      	nop
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr
 8007b3c:	e000ed00 	.word	0xe000ed00
 8007b40:	40023800 	.word	0x40023800
 8007b44:	24003010 	.word	0x24003010

08007b48 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8007b4c:	4b11      	ldr	r3, [pc, #68]	; (8007b94 <MX_USART3_UART_Init+0x4c>)
 8007b4e:	4a12      	ldr	r2, [pc, #72]	; (8007b98 <MX_USART3_UART_Init+0x50>)
 8007b50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8007b52:	4b10      	ldr	r3, [pc, #64]	; (8007b94 <MX_USART3_UART_Init+0x4c>)
 8007b54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007b58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8007b5a:	4b0e      	ldr	r3, [pc, #56]	; (8007b94 <MX_USART3_UART_Init+0x4c>)
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007b60:	4b0c      	ldr	r3, [pc, #48]	; (8007b94 <MX_USART3_UART_Init+0x4c>)
 8007b62:	2200      	movs	r2, #0
 8007b64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8007b66:	4b0b      	ldr	r3, [pc, #44]	; (8007b94 <MX_USART3_UART_Init+0x4c>)
 8007b68:	2200      	movs	r2, #0
 8007b6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8007b6c:	4b09      	ldr	r3, [pc, #36]	; (8007b94 <MX_USART3_UART_Init+0x4c>)
 8007b6e:	220c      	movs	r2, #12
 8007b70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007b72:	4b08      	ldr	r3, [pc, #32]	; (8007b94 <MX_USART3_UART_Init+0x4c>)
 8007b74:	2200      	movs	r2, #0
 8007b76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007b78:	4b06      	ldr	r3, [pc, #24]	; (8007b94 <MX_USART3_UART_Init+0x4c>)
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8007b7e:	4805      	ldr	r0, [pc, #20]	; (8007b94 <MX_USART3_UART_Init+0x4c>)
 8007b80:	f7fc f891 	bl	8003ca6 <HAL_UART_Init>
 8007b84:	4603      	mov	r3, r0
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d001      	beq.n	8007b8e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8007b8a:	f7ff fd11 	bl	80075b0 <Error_Handler>
  }

}
 8007b8e:	bf00      	nop
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	20001150 	.word	0x20001150
 8007b98:	40004800 	.word	0x40004800

08007b9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b08a      	sub	sp, #40	; 0x28
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ba4:	f107 0314 	add.w	r3, r7, #20
 8007ba8:	2200      	movs	r2, #0
 8007baa:	601a      	str	r2, [r3, #0]
 8007bac:	605a      	str	r2, [r3, #4]
 8007bae:	609a      	str	r2, [r3, #8]
 8007bb0:	60da      	str	r2, [r3, #12]
 8007bb2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a19      	ldr	r2, [pc, #100]	; (8007c20 <HAL_UART_MspInit+0x84>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d12c      	bne.n	8007c18 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	613b      	str	r3, [r7, #16]
 8007bc2:	4b18      	ldr	r3, [pc, #96]	; (8007c24 <HAL_UART_MspInit+0x88>)
 8007bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc6:	4a17      	ldr	r2, [pc, #92]	; (8007c24 <HAL_UART_MspInit+0x88>)
 8007bc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8007bce:	4b15      	ldr	r3, [pc, #84]	; (8007c24 <HAL_UART_MspInit+0x88>)
 8007bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007bd6:	613b      	str	r3, [r7, #16]
 8007bd8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007bda:	2300      	movs	r3, #0
 8007bdc:	60fb      	str	r3, [r7, #12]
 8007bde:	4b11      	ldr	r3, [pc, #68]	; (8007c24 <HAL_UART_MspInit+0x88>)
 8007be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007be2:	4a10      	ldr	r2, [pc, #64]	; (8007c24 <HAL_UART_MspInit+0x88>)
 8007be4:	f043 0302 	orr.w	r3, r3, #2
 8007be8:	6313      	str	r3, [r2, #48]	; 0x30
 8007bea:	4b0e      	ldr	r3, [pc, #56]	; (8007c24 <HAL_UART_MspInit+0x88>)
 8007bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bee:	f003 0302 	and.w	r3, r3, #2
 8007bf2:	60fb      	str	r3, [r7, #12]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007bf6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bfc:	2302      	movs	r3, #2
 8007bfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007c00:	2301      	movs	r3, #1
 8007c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c04:	2303      	movs	r3, #3
 8007c06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007c08:	2307      	movs	r3, #7
 8007c0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c0c:	f107 0314 	add.w	r3, r7, #20
 8007c10:	4619      	mov	r1, r3
 8007c12:	4805      	ldr	r0, [pc, #20]	; (8007c28 <HAL_UART_MspInit+0x8c>)
 8007c14:	f7f9 f892 	bl	8000d3c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8007c18:	bf00      	nop
 8007c1a:	3728      	adds	r7, #40	; 0x28
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}
 8007c20:	40004800 	.word	0x40004800
 8007c24:	40023800 	.word	0x40023800
 8007c28:	40020400 	.word	0x40020400

08007c2c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007c30:	2200      	movs	r2, #0
 8007c32:	4912      	ldr	r1, [pc, #72]	; (8007c7c <MX_USB_DEVICE_Init+0x50>)
 8007c34:	4812      	ldr	r0, [pc, #72]	; (8007c80 <MX_USB_DEVICE_Init+0x54>)
 8007c36:	f7fe fc0b 	bl	8006450 <USBD_Init>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d001      	beq.n	8007c44 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007c40:	f7ff fcb6 	bl	80075b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007c44:	490f      	ldr	r1, [pc, #60]	; (8007c84 <MX_USB_DEVICE_Init+0x58>)
 8007c46:	480e      	ldr	r0, [pc, #56]	; (8007c80 <MX_USB_DEVICE_Init+0x54>)
 8007c48:	f7fe fc2d 	bl	80064a6 <USBD_RegisterClass>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d001      	beq.n	8007c56 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007c52:	f7ff fcad 	bl	80075b0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007c56:	490c      	ldr	r1, [pc, #48]	; (8007c88 <MX_USB_DEVICE_Init+0x5c>)
 8007c58:	4809      	ldr	r0, [pc, #36]	; (8007c80 <MX_USB_DEVICE_Init+0x54>)
 8007c5a:	f7fe fb99 	bl	8006390 <USBD_CDC_RegisterInterface>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d001      	beq.n	8007c68 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007c64:	f7ff fca4 	bl	80075b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007c68:	4805      	ldr	r0, [pc, #20]	; (8007c80 <MX_USB_DEVICE_Init+0x54>)
 8007c6a:	f7fe fc36 	bl	80064da <USBD_Start>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d001      	beq.n	8007c78 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007c74:	f7ff fc9c 	bl	80075b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007c78:	bf00      	nop
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	2000012c 	.word	0x2000012c
 8007c80:	20001190 	.word	0x20001190
 8007c84:	20000014 	.word	0x20000014
 8007c88:	2000011c 	.word	0x2000011c

08007c8c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	int i;
	for(i=0; i<(USB_BUFFER_SIZE/2); i++){
 8007c92:	2300      	movs	r3, #0
 8007c94:	607b      	str	r3, [r7, #4]
 8007c96:	e007      	b.n	8007ca8 <CDC_Init_FS+0x1c>
		usbbuf.data.word[i] = 0;
 8007c98:	4a11      	ldr	r2, [pc, #68]	; (8007ce0 <CDC_Init_FS+0x54>)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2100      	movs	r1, #0
 8007c9e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(i=0; i<(USB_BUFFER_SIZE/2); i++){
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	607b      	str	r3, [r7, #4]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cae:	dbf3      	blt.n	8007c98 <CDC_Init_FS+0xc>
	}
	usbbuf.tail = 0;
 8007cb0:	4b0b      	ldr	r3, [pc, #44]	; (8007ce0 <CDC_Init_FS+0x54>)
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
	usbbuf.head = 0;
 8007cb8:	4b09      	ldr	r3, [pc, #36]	; (8007ce0 <CDC_Init_FS+0x54>)
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f8a3 2802 	strh.w	r2, [r3, #2050]	; 0x802
	usbbuf.status = 0;
 8007cc0:	4b07      	ldr	r3, [pc, #28]	; (8007ce0 <CDC_Init_FS+0x54>)
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
	usbbuf.packets = 0;
 8007cc8:	4b05      	ldr	r3, [pc, #20]	; (8007ce0 <CDC_Init_FS+0x54>)
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808

  /* Set Application Buffers */
  //USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
  //USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
  return (USBD_OK);
 8007cd0:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	370c      	adds	r7, #12
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	2000020c 	.word	0x2000020c

08007ce4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007ce8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	6039      	str	r1, [r7, #0]
 8007cfe:	71fb      	strb	r3, [r7, #7]
 8007d00:	4613      	mov	r3, r2
 8007d02:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007d04:	79fb      	ldrb	r3, [r7, #7]
 8007d06:	2b23      	cmp	r3, #35	; 0x23
 8007d08:	d84a      	bhi.n	8007da0 <CDC_Control_FS+0xac>
 8007d0a:	a201      	add	r2, pc, #4	; (adr r2, 8007d10 <CDC_Control_FS+0x1c>)
 8007d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d10:	08007da1 	.word	0x08007da1
 8007d14:	08007da1 	.word	0x08007da1
 8007d18:	08007da1 	.word	0x08007da1
 8007d1c:	08007da1 	.word	0x08007da1
 8007d20:	08007da1 	.word	0x08007da1
 8007d24:	08007da1 	.word	0x08007da1
 8007d28:	08007da1 	.word	0x08007da1
 8007d2c:	08007da1 	.word	0x08007da1
 8007d30:	08007da1 	.word	0x08007da1
 8007d34:	08007da1 	.word	0x08007da1
 8007d38:	08007da1 	.word	0x08007da1
 8007d3c:	08007da1 	.word	0x08007da1
 8007d40:	08007da1 	.word	0x08007da1
 8007d44:	08007da1 	.word	0x08007da1
 8007d48:	08007da1 	.word	0x08007da1
 8007d4c:	08007da1 	.word	0x08007da1
 8007d50:	08007da1 	.word	0x08007da1
 8007d54:	08007da1 	.word	0x08007da1
 8007d58:	08007da1 	.word	0x08007da1
 8007d5c:	08007da1 	.word	0x08007da1
 8007d60:	08007da1 	.word	0x08007da1
 8007d64:	08007da1 	.word	0x08007da1
 8007d68:	08007da1 	.word	0x08007da1
 8007d6c:	08007da1 	.word	0x08007da1
 8007d70:	08007da1 	.word	0x08007da1
 8007d74:	08007da1 	.word	0x08007da1
 8007d78:	08007da1 	.word	0x08007da1
 8007d7c:	08007da1 	.word	0x08007da1
 8007d80:	08007da1 	.word	0x08007da1
 8007d84:	08007da1 	.word	0x08007da1
 8007d88:	08007da1 	.word	0x08007da1
 8007d8c:	08007da1 	.word	0x08007da1
 8007d90:	08007da1 	.word	0x08007da1
 8007d94:	08007da1 	.word	0x08007da1
 8007d98:	08007da1 	.word	0x08007da1
 8007d9c:	08007da1 	.word	0x08007da1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007da0:	bf00      	nop
  }

  return (USBD_OK);
 8007da2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	370c      	adds	r7, #12
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b085      	sub	sp, #20
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	int i;
	uint8_t* rxbuf = Buf;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	60bb      	str	r3, [r7, #8]

	//count total packets for application runtime
	usbbuf.packets++;
 8007dbe:	4b20      	ldr	r3, [pc, #128]	; (8007e40 <CDC_Receive_FS+0x90>)
 8007dc0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	4a1e      	ldr	r2, [pc, #120]	; (8007e40 <CDC_Receive_FS+0x90>)
 8007dc8:	f8c2 3808 	str.w	r3, [r2, #2056]	; 0x808

	// receive the data
	for(i=0; i<(*Len); i++){
 8007dcc:	2300      	movs	r3, #0
 8007dce:	60fb      	str	r3, [r7, #12]
 8007dd0:	e02a      	b.n	8007e28 <CDC_Receive_FS+0x78>

		//is the buffer full?
		if( usbbuf.head == ( usbbuf.tail % USB_BUFFER_SIZE ) + 1 ){
 8007dd2:	4b1b      	ldr	r3, [pc, #108]	; (8007e40 <CDC_Receive_FS+0x90>)
 8007dd4:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 8007dd8:	461a      	mov	r2, r3
 8007dda:	4b19      	ldr	r3, [pc, #100]	; (8007e40 <CDC_Receive_FS+0x90>)
 8007ddc:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 8007de0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007de4:	3301      	adds	r3, #1
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d104      	bne.n	8007df4 <CDC_Receive_FS+0x44>
			usbbuf.status = 1;
 8007dea:	4b15      	ldr	r3, [pc, #84]	; (8007e40 <CDC_Receive_FS+0x90>)
 8007dec:	2201      	movs	r2, #1
 8007dee:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
 8007df2:	e016      	b.n	8007e22 <CDC_Receive_FS+0x72>
		}else{
			//copy into usbbuf byte buffer
			usbbuf.data.byte[usbbuf.tail++] = *(rxbuf++);
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	1c5a      	adds	r2, r3, #1
 8007df8:	60ba      	str	r2, [r7, #8]
 8007dfa:	4a11      	ldr	r2, [pc, #68]	; (8007e40 <CDC_Receive_FS+0x90>)
 8007dfc:	f8b2 2800 	ldrh.w	r2, [r2, #2048]	; 0x800
 8007e00:	1c51      	adds	r1, r2, #1
 8007e02:	b288      	uxth	r0, r1
 8007e04:	490e      	ldr	r1, [pc, #56]	; (8007e40 <CDC_Receive_FS+0x90>)
 8007e06:	f8a1 0800 	strh.w	r0, [r1, #2048]	; 0x800
 8007e0a:	7819      	ldrb	r1, [r3, #0]
 8007e0c:	4b0c      	ldr	r3, [pc, #48]	; (8007e40 <CDC_Receive_FS+0x90>)
 8007e0e:	5499      	strb	r1, [r3, r2]
			//wrap around
			usbbuf.tail = usbbuf.tail % USB_BUFFER_SIZE;
 8007e10:	4b0b      	ldr	r3, [pc, #44]	; (8007e40 <CDC_Receive_FS+0x90>)
 8007e12:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 8007e16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e1a:	b29a      	uxth	r2, r3
 8007e1c:	4b08      	ldr	r3, [pc, #32]	; (8007e40 <CDC_Receive_FS+0x90>)
 8007e1e:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
	for(i=0; i<(*Len); i++){
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	3301      	adds	r3, #1
 8007e26:	60fb      	str	r3, [r7, #12]
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d8cf      	bhi.n	8007dd2 <CDC_Receive_FS+0x22>
		}
	}

  //USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
  //USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  return (USBD_OK);
 8007e32:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3714      	adds	r7, #20
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr
 8007e40:	2000020c 	.word	0x2000020c

08007e44 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	460b      	mov	r3, r1
 8007e4e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007e50:	2300      	movs	r3, #0
 8007e52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007e54:	4b0d      	ldr	r3, [pc, #52]	; (8007e8c <CDC_Transmit_FS+0x48>)
 8007e56:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007e5a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d001      	beq.n	8007e6a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007e66:	2301      	movs	r3, #1
 8007e68:	e00b      	b.n	8007e82 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007e6a:	887b      	ldrh	r3, [r7, #2]
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	6879      	ldr	r1, [r7, #4]
 8007e70:	4806      	ldr	r0, [pc, #24]	; (8007e8c <CDC_Transmit_FS+0x48>)
 8007e72:	f7fe faa4 	bl	80063be <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007e76:	4805      	ldr	r0, [pc, #20]	; (8007e8c <CDC_Transmit_FS+0x48>)
 8007e78:	f7fe fabb 	bl	80063f2 <USBD_CDC_TransmitPacket>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	20001190 	.word	0x20001190

08007e90 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b08a      	sub	sp, #40	; 0x28
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e98:	f107 0314 	add.w	r3, r7, #20
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	601a      	str	r2, [r3, #0]
 8007ea0:	605a      	str	r2, [r3, #4]
 8007ea2:	609a      	str	r2, [r3, #8]
 8007ea4:	60da      	str	r2, [r3, #12]
 8007ea6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007eb0:	d132      	bne.n	8007f18 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	613b      	str	r3, [r7, #16]
 8007eb6:	4b1a      	ldr	r3, [pc, #104]	; (8007f20 <HAL_PCD_MspInit+0x90>)
 8007eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eba:	4a19      	ldr	r2, [pc, #100]	; (8007f20 <HAL_PCD_MspInit+0x90>)
 8007ebc:	f043 0301 	orr.w	r3, r3, #1
 8007ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8007ec2:	4b17      	ldr	r3, [pc, #92]	; (8007f20 <HAL_PCD_MspInit+0x90>)
 8007ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec6:	f003 0301 	and.w	r3, r3, #1
 8007eca:	613b      	str	r3, [r7, #16]
 8007ecc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007ece:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007ed2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ed4:	2302      	movs	r3, #2
 8007ed6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007edc:	2303      	movs	r3, #3
 8007ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007ee0:	230a      	movs	r3, #10
 8007ee2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ee4:	f107 0314 	add.w	r3, r7, #20
 8007ee8:	4619      	mov	r1, r3
 8007eea:	480e      	ldr	r0, [pc, #56]	; (8007f24 <HAL_PCD_MspInit+0x94>)
 8007eec:	f7f8 ff26 	bl	8000d3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007ef0:	4b0b      	ldr	r3, [pc, #44]	; (8007f20 <HAL_PCD_MspInit+0x90>)
 8007ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ef4:	4a0a      	ldr	r2, [pc, #40]	; (8007f20 <HAL_PCD_MspInit+0x90>)
 8007ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007efa:	6353      	str	r3, [r2, #52]	; 0x34
 8007efc:	2300      	movs	r3, #0
 8007efe:	60fb      	str	r3, [r7, #12]
 8007f00:	4b07      	ldr	r3, [pc, #28]	; (8007f20 <HAL_PCD_MspInit+0x90>)
 8007f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f04:	4a06      	ldr	r2, [pc, #24]	; (8007f20 <HAL_PCD_MspInit+0x90>)
 8007f06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f0a:	6453      	str	r3, [r2, #68]	; 0x44
 8007f0c:	4b04      	ldr	r3, [pc, #16]	; (8007f20 <HAL_PCD_MspInit+0x90>)
 8007f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f14:	60fb      	str	r3, [r7, #12]
 8007f16:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007f18:	bf00      	nop
 8007f1a:	3728      	adds	r7, #40	; 0x28
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	40023800 	.word	0x40023800
 8007f24:	40020000 	.word	0x40020000

08007f28 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b082      	sub	sp, #8
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d13f      	bne.n	8007fb8 <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007f38:	4a22      	ldr	r2, [pc, #136]	; (8007fc4 <USBD_LL_Init+0x9c>)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	4a20      	ldr	r2, [pc, #128]	; (8007fc4 <USBD_LL_Init+0x9c>)
 8007f44:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007f48:	4b1e      	ldr	r3, [pc, #120]	; (8007fc4 <USBD_LL_Init+0x9c>)
 8007f4a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007f4e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007f50:	4b1c      	ldr	r3, [pc, #112]	; (8007fc4 <USBD_LL_Init+0x9c>)
 8007f52:	2206      	movs	r2, #6
 8007f54:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007f56:	4b1b      	ldr	r3, [pc, #108]	; (8007fc4 <USBD_LL_Init+0x9c>)
 8007f58:	2202      	movs	r2, #2
 8007f5a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007f5c:	4b19      	ldr	r3, [pc, #100]	; (8007fc4 <USBD_LL_Init+0x9c>)
 8007f5e:	2200      	movs	r2, #0
 8007f60:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007f62:	4b18      	ldr	r3, [pc, #96]	; (8007fc4 <USBD_LL_Init+0x9c>)
 8007f64:	2202      	movs	r2, #2
 8007f66:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007f68:	4b16      	ldr	r3, [pc, #88]	; (8007fc4 <USBD_LL_Init+0x9c>)
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007f6e:	4b15      	ldr	r3, [pc, #84]	; (8007fc4 <USBD_LL_Init+0x9c>)
 8007f70:	2200      	movs	r2, #0
 8007f72:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007f74:	4b13      	ldr	r3, [pc, #76]	; (8007fc4 <USBD_LL_Init+0x9c>)
 8007f76:	2200      	movs	r2, #0
 8007f78:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8007f7a:	4b12      	ldr	r3, [pc, #72]	; (8007fc4 <USBD_LL_Init+0x9c>)
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007f80:	4b10      	ldr	r3, [pc, #64]	; (8007fc4 <USBD_LL_Init+0x9c>)
 8007f82:	2200      	movs	r2, #0
 8007f84:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007f86:	4b0f      	ldr	r3, [pc, #60]	; (8007fc4 <USBD_LL_Init+0x9c>)
 8007f88:	2200      	movs	r2, #0
 8007f8a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007f8c:	480d      	ldr	r0, [pc, #52]	; (8007fc4 <USBD_LL_Init+0x9c>)
 8007f8e:	f7f9 fa17 	bl	80013c0 <HAL_PCD_Init>
 8007f92:	4603      	mov	r3, r0
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d001      	beq.n	8007f9c <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 8007f98:	f7ff fb0a 	bl	80075b0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007f9c:	2180      	movs	r1, #128	; 0x80
 8007f9e:	4809      	ldr	r0, [pc, #36]	; (8007fc4 <USBD_LL_Init+0x9c>)
 8007fa0:	f7f9 fd6f 	bl	8001a82 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007fa4:	2240      	movs	r2, #64	; 0x40
 8007fa6:	2100      	movs	r1, #0
 8007fa8:	4806      	ldr	r0, [pc, #24]	; (8007fc4 <USBD_LL_Init+0x9c>)
 8007faa:	f7f9 fd23 	bl	80019f4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007fae:	2280      	movs	r2, #128	; 0x80
 8007fb0:	2101      	movs	r1, #1
 8007fb2:	4804      	ldr	r0, [pc, #16]	; (8007fc4 <USBD_LL_Init+0x9c>)
 8007fb4:	f7f9 fd1e 	bl	80019f4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3708      	adds	r7, #8
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	2000142c 	.word	0x2000142c

08007fc8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7f9 fb12 	bl	8001608 <HAL_PCD_Start>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8007fe8:	7bfb      	ldrb	r3, [r7, #15]
 8007fea:	4618      	mov	r0, r3
 8007fec:	f000 f8c4 	bl	8008178 <USBD_Get_USB_Status>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007ff4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3710      	adds	r7, #16
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}

08007ffe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007ffe:	b580      	push	{r7, lr}
 8008000:	b084      	sub	sp, #16
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
 8008006:	4608      	mov	r0, r1
 8008008:	4611      	mov	r1, r2
 800800a:	461a      	mov	r2, r3
 800800c:	4603      	mov	r3, r0
 800800e:	70fb      	strb	r3, [r7, #3]
 8008010:	460b      	mov	r3, r1
 8008012:	70bb      	strb	r3, [r7, #2]
 8008014:	4613      	mov	r3, r2
 8008016:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008018:	2300      	movs	r3, #0
 800801a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800801c:	2300      	movs	r3, #0
 800801e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008026:	78bb      	ldrb	r3, [r7, #2]
 8008028:	883a      	ldrh	r2, [r7, #0]
 800802a:	78f9      	ldrb	r1, [r7, #3]
 800802c:	f7f9 fb1f 	bl	800166e <HAL_PCD_EP_Open>
 8008030:	4603      	mov	r3, r0
 8008032:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008034:	7bfb      	ldrb	r3, [r7, #15]
 8008036:	4618      	mov	r0, r3
 8008038:	f000 f89e 	bl	8008178 <USBD_Get_USB_Status>
 800803c:	4603      	mov	r3, r0
 800803e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008040:	7bbb      	ldrb	r3, [r7, #14]
}
 8008042:	4618      	mov	r0, r3
 8008044:	3710      	adds	r7, #16
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b084      	sub	sp, #16
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
 8008052:	460b      	mov	r3, r1
 8008054:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008056:	2300      	movs	r3, #0
 8008058:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800805a:	2300      	movs	r3, #0
 800805c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008064:	78fa      	ldrb	r2, [r7, #3]
 8008066:	4611      	mov	r1, r2
 8008068:	4618      	mov	r0, r3
 800806a:	f7f9 fb68 	bl	800173e <HAL_PCD_EP_Close>
 800806e:	4603      	mov	r3, r0
 8008070:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8008072:	7bfb      	ldrb	r3, [r7, #15]
 8008074:	4618      	mov	r0, r3
 8008076:	f000 f87f 	bl	8008178 <USBD_Get_USB_Status>
 800807a:	4603      	mov	r3, r0
 800807c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800807e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008080:	4618      	mov	r0, r3
 8008082:	3710      	adds	r7, #16
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	460b      	mov	r3, r1
 8008092:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008094:	2300      	movs	r3, #0
 8008096:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008098:	2300      	movs	r3, #0
 800809a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80080a2:	78fa      	ldrb	r2, [r7, #3]
 80080a4:	4611      	mov	r1, r2
 80080a6:	4618      	mov	r0, r3
 80080a8:	f7f9 fc40 	bl	800192c <HAL_PCD_EP_SetStall>
 80080ac:	4603      	mov	r3, r0
 80080ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080b0:	7bfb      	ldrb	r3, [r7, #15]
 80080b2:	4618      	mov	r0, r3
 80080b4:	f000 f860 	bl	8008178 <USBD_Get_USB_Status>
 80080b8:	4603      	mov	r3, r0
 80080ba:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80080bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3710      	adds	r7, #16
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80080c6:	b580      	push	{r7, lr}
 80080c8:	b086      	sub	sp, #24
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	60f8      	str	r0, [r7, #12]
 80080ce:	607a      	str	r2, [r7, #4]
 80080d0:	461a      	mov	r2, r3
 80080d2:	460b      	mov	r3, r1
 80080d4:	72fb      	strb	r3, [r7, #11]
 80080d6:	4613      	mov	r3, r2
 80080d8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080da:	2300      	movs	r3, #0
 80080dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080de:	2300      	movs	r3, #0
 80080e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80080e8:	893b      	ldrh	r3, [r7, #8]
 80080ea:	7af9      	ldrb	r1, [r7, #11]
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	f7f9 fbd3 	bl	8001898 <HAL_PCD_EP_Transmit>
 80080f2:	4603      	mov	r3, r0
 80080f4:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 80080f6:	7dfb      	ldrb	r3, [r7, #23]
 80080f8:	4618      	mov	r0, r3
 80080fa:	f000 f83d 	bl	8008178 <USBD_Get_USB_Status>
 80080fe:	4603      	mov	r3, r0
 8008100:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8008102:	7dbb      	ldrb	r3, [r7, #22]
}
 8008104:	4618      	mov	r0, r3
 8008106:	3718      	adds	r7, #24
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b086      	sub	sp, #24
 8008110:	af00      	add	r7, sp, #0
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	607a      	str	r2, [r7, #4]
 8008116:	461a      	mov	r2, r3
 8008118:	460b      	mov	r3, r1
 800811a:	72fb      	strb	r3, [r7, #11]
 800811c:	4613      	mov	r3, r2
 800811e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008120:	2300      	movs	r3, #0
 8008122:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008124:	2300      	movs	r3, #0
 8008126:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800812e:	893b      	ldrh	r3, [r7, #8]
 8008130:	7af9      	ldrb	r1, [r7, #11]
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	f7f9 fb4d 	bl	80017d2 <HAL_PCD_EP_Receive>
 8008138:	4603      	mov	r3, r0
 800813a:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800813c:	7dfb      	ldrb	r3, [r7, #23]
 800813e:	4618      	mov	r0, r3
 8008140:	f000 f81a 	bl	8008178 <USBD_Get_USB_Status>
 8008144:	4603      	mov	r3, r0
 8008146:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8008148:	7dbb      	ldrb	r3, [r7, #22]
}
 800814a:	4618      	mov	r0, r3
 800814c:	3718      	adds	r7, #24
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}

08008152 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008152:	b580      	push	{r7, lr}
 8008154:	b082      	sub	sp, #8
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
 800815a:	460b      	mov	r3, r1
 800815c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008164:	78fa      	ldrb	r2, [r7, #3]
 8008166:	4611      	mov	r1, r2
 8008168:	4618      	mov	r0, r3
 800816a:	f7f9 fb7d 	bl	8001868 <HAL_PCD_EP_GetRxCount>
 800816e:	4603      	mov	r3, r0
}
 8008170:	4618      	mov	r0, r3
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008178:	b480      	push	{r7}
 800817a:	b085      	sub	sp, #20
 800817c:	af00      	add	r7, sp, #0
 800817e:	4603      	mov	r3, r0
 8008180:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008182:	2300      	movs	r3, #0
 8008184:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008186:	79fb      	ldrb	r3, [r7, #7]
 8008188:	2b03      	cmp	r3, #3
 800818a:	d817      	bhi.n	80081bc <USBD_Get_USB_Status+0x44>
 800818c:	a201      	add	r2, pc, #4	; (adr r2, 8008194 <USBD_Get_USB_Status+0x1c>)
 800818e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008192:	bf00      	nop
 8008194:	080081a5 	.word	0x080081a5
 8008198:	080081ab 	.word	0x080081ab
 800819c:	080081b1 	.word	0x080081b1
 80081a0:	080081b7 	.word	0x080081b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80081a4:	2300      	movs	r3, #0
 80081a6:	73fb      	strb	r3, [r7, #15]
    break;
 80081a8:	e00b      	b.n	80081c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80081aa:	2302      	movs	r3, #2
 80081ac:	73fb      	strb	r3, [r7, #15]
    break;
 80081ae:	e008      	b.n	80081c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80081b0:	2301      	movs	r3, #1
 80081b2:	73fb      	strb	r3, [r7, #15]
    break;
 80081b4:	e005      	b.n	80081c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80081b6:	2302      	movs	r3, #2
 80081b8:	73fb      	strb	r3, [r7, #15]
    break;
 80081ba:	e002      	b.n	80081c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80081bc:	2302      	movs	r3, #2
 80081be:	73fb      	strb	r3, [r7, #15]
    break;
 80081c0:	bf00      	nop
  }
  return usb_status;
 80081c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3714      	adds	r7, #20
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	4603      	mov	r3, r0
 80081d8:	6039      	str	r1, [r7, #0]
 80081da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	2212      	movs	r2, #18
 80081e0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80081e2:	4b03      	ldr	r3, [pc, #12]	; (80081f0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	370c      	adds	r7, #12
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr
 80081f0:	20000148 	.word	0x20000148

080081f4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	4603      	mov	r3, r0
 80081fc:	6039      	str	r1, [r7, #0]
 80081fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	2204      	movs	r2, #4
 8008204:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008206:	4b03      	ldr	r3, [pc, #12]	; (8008214 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008208:	4618      	mov	r0, r3
 800820a:	370c      	adds	r7, #12
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr
 8008214:	2000015c 	.word	0x2000015c

08008218 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	4603      	mov	r3, r0
 8008220:	6039      	str	r1, [r7, #0]
 8008222:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008224:	79fb      	ldrb	r3, [r7, #7]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d105      	bne.n	8008236 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800822a:	683a      	ldr	r2, [r7, #0]
 800822c:	4907      	ldr	r1, [pc, #28]	; (800824c <USBD_FS_ProductStrDescriptor+0x34>)
 800822e:	4808      	ldr	r0, [pc, #32]	; (8008250 <USBD_FS_ProductStrDescriptor+0x38>)
 8008230:	f7fe f970 	bl	8006514 <USBD_GetString>
 8008234:	e004      	b.n	8008240 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008236:	683a      	ldr	r2, [r7, #0]
 8008238:	4904      	ldr	r1, [pc, #16]	; (800824c <USBD_FS_ProductStrDescriptor+0x34>)
 800823a:	4805      	ldr	r0, [pc, #20]	; (8008250 <USBD_FS_ProductStrDescriptor+0x38>)
 800823c:	f7fe f96a 	bl	8006514 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008240:	4b02      	ldr	r3, [pc, #8]	; (800824c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008242:	4618      	mov	r0, r3
 8008244:	3708      	adds	r7, #8
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	20001834 	.word	0x20001834
 8008250:	080088c4 	.word	0x080088c4

08008254 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b082      	sub	sp, #8
 8008258:	af00      	add	r7, sp, #0
 800825a:	4603      	mov	r3, r0
 800825c:	6039      	str	r1, [r7, #0]
 800825e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008260:	683a      	ldr	r2, [r7, #0]
 8008262:	4904      	ldr	r1, [pc, #16]	; (8008274 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008264:	4804      	ldr	r0, [pc, #16]	; (8008278 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008266:	f7fe f955 	bl	8006514 <USBD_GetString>
  return USBD_StrDesc;
 800826a:	4b02      	ldr	r3, [pc, #8]	; (8008274 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800826c:	4618      	mov	r0, r3
 800826e:	3708      	adds	r7, #8
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}
 8008274:	20001834 	.word	0x20001834
 8008278:	080088dc 	.word	0x080088dc

0800827c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	4603      	mov	r3, r0
 8008284:	6039      	str	r1, [r7, #0]
 8008286:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	221a      	movs	r2, #26
 800828c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800828e:	f000 f843 	bl	8008318 <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 8008292:	4b02      	ldr	r3, [pc, #8]	; (800829c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008294:	4618      	mov	r0, r3
 8008296:	3708      	adds	r7, #8
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}
 800829c:	20000160 	.word	0x20000160

080082a0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	4603      	mov	r3, r0
 80082a8:	6039      	str	r1, [r7, #0]
 80082aa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80082ac:	79fb      	ldrb	r3, [r7, #7]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d105      	bne.n	80082be <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80082b2:	683a      	ldr	r2, [r7, #0]
 80082b4:	4907      	ldr	r1, [pc, #28]	; (80082d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80082b6:	4808      	ldr	r0, [pc, #32]	; (80082d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80082b8:	f7fe f92c 	bl	8006514 <USBD_GetString>
 80082bc:	e004      	b.n	80082c8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80082be:	683a      	ldr	r2, [r7, #0]
 80082c0:	4904      	ldr	r1, [pc, #16]	; (80082d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80082c2:	4805      	ldr	r0, [pc, #20]	; (80082d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80082c4:	f7fe f926 	bl	8006514 <USBD_GetString>
  }
  return USBD_StrDesc;
 80082c8:	4b02      	ldr	r3, [pc, #8]	; (80082d4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3708      	adds	r7, #8
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	20001834 	.word	0x20001834
 80082d8:	080088f0 	.word	0x080088f0

080082dc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b082      	sub	sp, #8
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	4603      	mov	r3, r0
 80082e4:	6039      	str	r1, [r7, #0]
 80082e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80082e8:	79fb      	ldrb	r3, [r7, #7]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d105      	bne.n	80082fa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80082ee:	683a      	ldr	r2, [r7, #0]
 80082f0:	4907      	ldr	r1, [pc, #28]	; (8008310 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80082f2:	4808      	ldr	r0, [pc, #32]	; (8008314 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80082f4:	f7fe f90e 	bl	8006514 <USBD_GetString>
 80082f8:	e004      	b.n	8008304 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80082fa:	683a      	ldr	r2, [r7, #0]
 80082fc:	4904      	ldr	r1, [pc, #16]	; (8008310 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80082fe:	4805      	ldr	r0, [pc, #20]	; (8008314 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008300:	f7fe f908 	bl	8006514 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008304:	4b02      	ldr	r3, [pc, #8]	; (8008310 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008306:	4618      	mov	r0, r3
 8008308:	3708      	adds	r7, #8
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	20001834 	.word	0x20001834
 8008314:	080088fc 	.word	0x080088fc

08008318 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800831e:	4b0f      	ldr	r3, [pc, #60]	; (800835c <Get_SerialNum+0x44>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008324:	4b0e      	ldr	r3, [pc, #56]	; (8008360 <Get_SerialNum+0x48>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800832a:	4b0e      	ldr	r3, [pc, #56]	; (8008364 <Get_SerialNum+0x4c>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008330:	68fa      	ldr	r2, [r7, #12]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4413      	add	r3, r2
 8008336:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d009      	beq.n	8008352 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800833e:	2208      	movs	r2, #8
 8008340:	4909      	ldr	r1, [pc, #36]	; (8008368 <Get_SerialNum+0x50>)
 8008342:	68f8      	ldr	r0, [r7, #12]
 8008344:	f000 f814 	bl	8008370 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008348:	2204      	movs	r2, #4
 800834a:	4908      	ldr	r1, [pc, #32]	; (800836c <Get_SerialNum+0x54>)
 800834c:	68b8      	ldr	r0, [r7, #8]
 800834e:	f000 f80f 	bl	8008370 <IntToUnicode>
  }
}
 8008352:	bf00      	nop
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	1fff7a10 	.word	0x1fff7a10
 8008360:	1fff7a14 	.word	0x1fff7a14
 8008364:	1fff7a18 	.word	0x1fff7a18
 8008368:	20000162 	.word	0x20000162
 800836c:	20000172 	.word	0x20000172

08008370 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008370:	b480      	push	{r7}
 8008372:	b087      	sub	sp, #28
 8008374:	af00      	add	r7, sp, #0
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	60b9      	str	r1, [r7, #8]
 800837a:	4613      	mov	r3, r2
 800837c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800837e:	2300      	movs	r3, #0
 8008380:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008382:	2300      	movs	r3, #0
 8008384:	75fb      	strb	r3, [r7, #23]
 8008386:	e027      	b.n	80083d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	0f1b      	lsrs	r3, r3, #28
 800838c:	2b09      	cmp	r3, #9
 800838e:	d80b      	bhi.n	80083a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	0f1b      	lsrs	r3, r3, #28
 8008394:	b2da      	uxtb	r2, r3
 8008396:	7dfb      	ldrb	r3, [r7, #23]
 8008398:	005b      	lsls	r3, r3, #1
 800839a:	4619      	mov	r1, r3
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	440b      	add	r3, r1
 80083a0:	3230      	adds	r2, #48	; 0x30
 80083a2:	b2d2      	uxtb	r2, r2
 80083a4:	701a      	strb	r2, [r3, #0]
 80083a6:	e00a      	b.n	80083be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	0f1b      	lsrs	r3, r3, #28
 80083ac:	b2da      	uxtb	r2, r3
 80083ae:	7dfb      	ldrb	r3, [r7, #23]
 80083b0:	005b      	lsls	r3, r3, #1
 80083b2:	4619      	mov	r1, r3
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	440b      	add	r3, r1
 80083b8:	3237      	adds	r2, #55	; 0x37
 80083ba:	b2d2      	uxtb	r2, r2
 80083bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	011b      	lsls	r3, r3, #4
 80083c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80083c4:	7dfb      	ldrb	r3, [r7, #23]
 80083c6:	005b      	lsls	r3, r3, #1
 80083c8:	3301      	adds	r3, #1
 80083ca:	68ba      	ldr	r2, [r7, #8]
 80083cc:	4413      	add	r3, r2
 80083ce:	2200      	movs	r2, #0
 80083d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80083d2:	7dfb      	ldrb	r3, [r7, #23]
 80083d4:	3301      	adds	r3, #1
 80083d6:	75fb      	strb	r3, [r7, #23]
 80083d8:	7dfa      	ldrb	r2, [r7, #23]
 80083da:	79fb      	ldrb	r3, [r7, #7]
 80083dc:	429a      	cmp	r2, r3
 80083de:	d3d3      	bcc.n	8008388 <IntToUnicode+0x18>
  }
}
 80083e0:	bf00      	nop
 80083e2:	371c      	adds	r7, #28
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80083ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008424 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80083f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80083f2:	e003      	b.n	80083fc <LoopCopyDataInit>

080083f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80083f4:	4b0c      	ldr	r3, [pc, #48]	; (8008428 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80083f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80083f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80083fa:	3104      	adds	r1, #4

080083fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80083fc:	480b      	ldr	r0, [pc, #44]	; (800842c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80083fe:	4b0c      	ldr	r3, [pc, #48]	; (8008430 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008400:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008402:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008404:	d3f6      	bcc.n	80083f4 <CopyDataInit>
  ldr  r2, =_sbss
 8008406:	4a0b      	ldr	r2, [pc, #44]	; (8008434 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008408:	e002      	b.n	8008410 <LoopFillZerobss>

0800840a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800840a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800840c:	f842 3b04 	str.w	r3, [r2], #4

08008410 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008410:	4b09      	ldr	r3, [pc, #36]	; (8008438 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008412:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008414:	d3f9      	bcc.n	800840a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008416:	f7ff fb61 	bl	8007adc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800841a:	f000 f8f3 	bl	8008604 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800841e:	f7ff f801 	bl	8007424 <main>
  bx  lr    
 8008422:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8008424:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8008428:	0800898c 	.word	0x0800898c
  ldr  r0, =_sdata
 800842c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008430:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8008434:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8008438:	20001a38 	.word	0x20001a38

0800843c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800843c:	e7fe      	b.n	800843c <ADC_IRQHandler>

0800843e <_ZNSaIcEC1Ev>:
 800843e:	4770      	bx	lr

08008440 <_ZNSaIcED1Ev>:
 8008440:	4770      	bx	lr

08008442 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8008442:	b10a      	cbz	r2, 8008448 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8008444:	f000 b912 	b.w	800866c <memcpy>
 8008448:	4770      	bx	lr
	...

0800844c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800844c:	b508      	push	{r3, lr}
 800844e:	680b      	ldr	r3, [r1, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	da02      	bge.n	800845a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 8008454:	4809      	ldr	r0, [pc, #36]	; (800847c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 8008456:	f000 f8c4 	bl	80085e2 <_ZSt20__throw_length_errorPKc>
 800845a:	4293      	cmp	r3, r2
 800845c:	d908      	bls.n	8008470 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 800845e:	0052      	lsls	r2, r2, #1
 8008460:	4293      	cmp	r3, r2
 8008462:	d205      	bcs.n	8008470 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8008464:	2a00      	cmp	r2, #0
 8008466:	bfb6      	itet	lt
 8008468:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800846c:	600a      	strge	r2, [r1, #0]
 800846e:	600b      	strlt	r3, [r1, #0]
 8008470:	6808      	ldr	r0, [r1, #0]
 8008472:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008476:	3001      	adds	r0, #1
 8008478:	f000 b894 	b.w	80085a4 <_Znwj>
 800847c:	08008962 	.word	0x08008962

08008480 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8008480:	4603      	mov	r3, r0
 8008482:	f853 0b08 	ldr.w	r0, [r3], #8
 8008486:	4298      	cmp	r0, r3
 8008488:	d001      	beq.n	800848e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800848a:	f000 b8a5 	b.w	80085d8 <_ZdlPv>
 800848e:	4770      	bx	lr

08008490 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8008490:	2a01      	cmp	r2, #1
 8008492:	b510      	push	{r4, lr}
 8008494:	d102      	bne.n	800849c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8008496:	780a      	ldrb	r2, [r1, #0]
 8008498:	7002      	strb	r2, [r0, #0]
 800849a:	bd10      	pop	{r4, pc}
 800849c:	f7ff ffd1 	bl	8008442 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 80084a0:	e7fb      	b.n	800849a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

080084a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 80084a2:	b508      	push	{r3, lr}
 80084a4:	1a52      	subs	r2, r2, r1
 80084a6:	f7ff fff3 	bl	8008490 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80084aa:	bd08      	pop	{r3, pc}

080084ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 80084ac:	b508      	push	{r3, lr}
 80084ae:	1a52      	subs	r2, r2, r1
 80084b0:	f7ff ffee 	bl	8008490 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80084b4:	bd08      	pop	{r3, pc}

080084b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 80084b6:	b510      	push	{r4, lr}
 80084b8:	4604      	mov	r4, r0
 80084ba:	f7ff ffe1 	bl	8008480 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80084be:	4620      	mov	r0, r4
 80084c0:	bd10      	pop	{r4, pc}

080084c2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 80084c2:	6840      	ldr	r0, [r0, #4]
 80084c4:	4770      	bx	lr

080084c6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 80084c6:	6800      	ldr	r0, [r0, #0]
 80084c8:	4770      	bx	lr
	...

080084cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 80084cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80084ce:	4604      	mov	r4, r0
 80084d0:	4616      	mov	r6, r2
 80084d2:	460d      	mov	r5, r1
 80084d4:	b919      	cbnz	r1, 80084de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 80084d6:	b112      	cbz	r2, 80084de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 80084d8:	480d      	ldr	r0, [pc, #52]	; (8008510 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 80084da:	f000 f87f 	bl	80085dc <_ZSt19__throw_logic_errorPKc>
 80084de:	1b73      	subs	r3, r6, r5
 80084e0:	2b0f      	cmp	r3, #15
 80084e2:	9301      	str	r3, [sp, #4]
 80084e4:	d907      	bls.n	80084f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 80084e6:	2200      	movs	r2, #0
 80084e8:	a901      	add	r1, sp, #4
 80084ea:	4620      	mov	r0, r4
 80084ec:	f7ff ffae 	bl	800844c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80084f0:	9b01      	ldr	r3, [sp, #4]
 80084f2:	6020      	str	r0, [r4, #0]
 80084f4:	60a3      	str	r3, [r4, #8]
 80084f6:	4632      	mov	r2, r6
 80084f8:	4629      	mov	r1, r5
 80084fa:	6820      	ldr	r0, [r4, #0]
 80084fc:	f7ff ffd1 	bl	80084a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8008500:	9b01      	ldr	r3, [sp, #4]
 8008502:	6822      	ldr	r2, [r4, #0]
 8008504:	6063      	str	r3, [r4, #4]
 8008506:	2100      	movs	r1, #0
 8008508:	54d1      	strb	r1, [r2, r3]
 800850a:	b002      	add	sp, #8
 800850c:	bd70      	pop	{r4, r5, r6, pc}
 800850e:	bf00      	nop
 8008510:	08008938 	.word	0x08008938

08008514 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8008514:	b510      	push	{r4, lr}
 8008516:	f100 0208 	add.w	r2, r0, #8
 800851a:	6002      	str	r2, [r0, #0]
 800851c:	e9d1 1200 	ldrd	r1, r2, [r1]
 8008520:	4604      	mov	r4, r0
 8008522:	f04f 0300 	mov.w	r3, #0
 8008526:	440a      	add	r2, r1
 8008528:	f7ff ffd0 	bl	80084cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 800852c:	4620      	mov	r0, r4
 800852e:	bd10      	pop	{r4, pc}

08008530 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8008530:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008532:	4604      	mov	r4, r0
 8008534:	4616      	mov	r6, r2
 8008536:	460d      	mov	r5, r1
 8008538:	b919      	cbnz	r1, 8008542 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800853a:	b112      	cbz	r2, 8008542 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800853c:	480d      	ldr	r0, [pc, #52]	; (8008574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800853e:	f000 f84d 	bl	80085dc <_ZSt19__throw_logic_errorPKc>
 8008542:	1b73      	subs	r3, r6, r5
 8008544:	2b0f      	cmp	r3, #15
 8008546:	9301      	str	r3, [sp, #4]
 8008548:	d907      	bls.n	800855a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800854a:	2200      	movs	r2, #0
 800854c:	a901      	add	r1, sp, #4
 800854e:	4620      	mov	r0, r4
 8008550:	f7ff ff7c 	bl	800844c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8008554:	9b01      	ldr	r3, [sp, #4]
 8008556:	6020      	str	r0, [r4, #0]
 8008558:	60a3      	str	r3, [r4, #8]
 800855a:	4632      	mov	r2, r6
 800855c:	4629      	mov	r1, r5
 800855e:	6820      	ldr	r0, [r4, #0]
 8008560:	f7ff ffa4 	bl	80084ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8008564:	9b01      	ldr	r3, [sp, #4]
 8008566:	6822      	ldr	r2, [r4, #0]
 8008568:	6063      	str	r3, [r4, #4]
 800856a:	2100      	movs	r1, #0
 800856c:	54d1      	strb	r1, [r2, r3]
 800856e:	b002      	add	sp, #8
 8008570:	bd70      	pop	{r4, r5, r6, pc}
 8008572:	bf00      	nop
 8008574:	08008938 	.word	0x08008938

08008578 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8008578:	b538      	push	{r3, r4, r5, lr}
 800857a:	f100 0308 	add.w	r3, r0, #8
 800857e:	4604      	mov	r4, r0
 8008580:	6003      	str	r3, [r0, #0]
 8008582:	460d      	mov	r5, r1
 8008584:	b159      	cbz	r1, 800859e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8008586:	4608      	mov	r0, r1
 8008588:	f7f7 fe46 	bl	8000218 <strlen>
 800858c:	182a      	adds	r2, r5, r0
 800858e:	4620      	mov	r0, r4
 8008590:	f04f 0300 	mov.w	r3, #0
 8008594:	4629      	mov	r1, r5
 8008596:	f7ff ffcb 	bl	8008530 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800859a:	4620      	mov	r0, r4
 800859c:	bd38      	pop	{r3, r4, r5, pc}
 800859e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80085a2:	e7f4      	b.n	800858e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

080085a4 <_Znwj>:
 80085a4:	b510      	push	{r4, lr}
 80085a6:	2800      	cmp	r0, #0
 80085a8:	bf14      	ite	ne
 80085aa:	4604      	movne	r4, r0
 80085ac:	2401      	moveq	r4, #1
 80085ae:	4620      	mov	r0, r4
 80085b0:	f000 f84c 	bl	800864c <malloc>
 80085b4:	b930      	cbnz	r0, 80085c4 <_Znwj+0x20>
 80085b6:	f000 f807 	bl	80085c8 <_ZSt15get_new_handlerv>
 80085ba:	b908      	cbnz	r0, 80085c0 <_Znwj+0x1c>
 80085bc:	f000 f814 	bl	80085e8 <abort>
 80085c0:	4780      	blx	r0
 80085c2:	e7f4      	b.n	80085ae <_Znwj+0xa>
 80085c4:	bd10      	pop	{r4, pc}
	...

080085c8 <_ZSt15get_new_handlerv>:
 80085c8:	4b02      	ldr	r3, [pc, #8]	; (80085d4 <_ZSt15get_new_handlerv+0xc>)
 80085ca:	6818      	ldr	r0, [r3, #0]
 80085cc:	f3bf 8f5b 	dmb	ish
 80085d0:	4770      	bx	lr
 80085d2:	bf00      	nop
 80085d4:	20000a20 	.word	0x20000a20

080085d8 <_ZdlPv>:
 80085d8:	f000 b840 	b.w	800865c <free>

080085dc <_ZSt19__throw_logic_errorPKc>:
 80085dc:	b508      	push	{r3, lr}
 80085de:	f000 f803 	bl	80085e8 <abort>

080085e2 <_ZSt20__throw_length_errorPKc>:
 80085e2:	b508      	push	{r3, lr}
 80085e4:	f000 f800 	bl	80085e8 <abort>

080085e8 <abort>:
 80085e8:	b508      	push	{r3, lr}
 80085ea:	2006      	movs	r0, #6
 80085ec:	f000 f932 	bl	8008854 <raise>
 80085f0:	2001      	movs	r0, #1
 80085f2:	f7ff fa3d 	bl	8007a70 <_exit>
	...

080085f8 <__errno>:
 80085f8:	4b01      	ldr	r3, [pc, #4]	; (8008600 <__errno+0x8>)
 80085fa:	6818      	ldr	r0, [r3, #0]
 80085fc:	4770      	bx	lr
 80085fe:	bf00      	nop
 8008600:	2000017c 	.word	0x2000017c

08008604 <__libc_init_array>:
 8008604:	b570      	push	{r4, r5, r6, lr}
 8008606:	4e0d      	ldr	r6, [pc, #52]	; (800863c <__libc_init_array+0x38>)
 8008608:	4c0d      	ldr	r4, [pc, #52]	; (8008640 <__libc_init_array+0x3c>)
 800860a:	1ba4      	subs	r4, r4, r6
 800860c:	10a4      	asrs	r4, r4, #2
 800860e:	2500      	movs	r5, #0
 8008610:	42a5      	cmp	r5, r4
 8008612:	d109      	bne.n	8008628 <__libc_init_array+0x24>
 8008614:	4e0b      	ldr	r6, [pc, #44]	; (8008644 <__libc_init_array+0x40>)
 8008616:	4c0c      	ldr	r4, [pc, #48]	; (8008648 <__libc_init_array+0x44>)
 8008618:	f000 f93a 	bl	8008890 <_init>
 800861c:	1ba4      	subs	r4, r4, r6
 800861e:	10a4      	asrs	r4, r4, #2
 8008620:	2500      	movs	r5, #0
 8008622:	42a5      	cmp	r5, r4
 8008624:	d105      	bne.n	8008632 <__libc_init_array+0x2e>
 8008626:	bd70      	pop	{r4, r5, r6, pc}
 8008628:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800862c:	4798      	blx	r3
 800862e:	3501      	adds	r5, #1
 8008630:	e7ee      	b.n	8008610 <__libc_init_array+0xc>
 8008632:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008636:	4798      	blx	r3
 8008638:	3501      	adds	r5, #1
 800863a:	e7f2      	b.n	8008622 <__libc_init_array+0x1e>
 800863c:	08008984 	.word	0x08008984
 8008640:	08008984 	.word	0x08008984
 8008644:	08008984 	.word	0x08008984
 8008648:	08008988 	.word	0x08008988

0800864c <malloc>:
 800864c:	4b02      	ldr	r3, [pc, #8]	; (8008658 <malloc+0xc>)
 800864e:	4601      	mov	r1, r0
 8008650:	6818      	ldr	r0, [r3, #0]
 8008652:	f000 b86d 	b.w	8008730 <_malloc_r>
 8008656:	bf00      	nop
 8008658:	2000017c 	.word	0x2000017c

0800865c <free>:
 800865c:	4b02      	ldr	r3, [pc, #8]	; (8008668 <free+0xc>)
 800865e:	4601      	mov	r1, r0
 8008660:	6818      	ldr	r0, [r3, #0]
 8008662:	f000 b817 	b.w	8008694 <_free_r>
 8008666:	bf00      	nop
 8008668:	2000017c 	.word	0x2000017c

0800866c <memcpy>:
 800866c:	b510      	push	{r4, lr}
 800866e:	1e43      	subs	r3, r0, #1
 8008670:	440a      	add	r2, r1
 8008672:	4291      	cmp	r1, r2
 8008674:	d100      	bne.n	8008678 <memcpy+0xc>
 8008676:	bd10      	pop	{r4, pc}
 8008678:	f811 4b01 	ldrb.w	r4, [r1], #1
 800867c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008680:	e7f7      	b.n	8008672 <memcpy+0x6>

08008682 <memset>:
 8008682:	4402      	add	r2, r0
 8008684:	4603      	mov	r3, r0
 8008686:	4293      	cmp	r3, r2
 8008688:	d100      	bne.n	800868c <memset+0xa>
 800868a:	4770      	bx	lr
 800868c:	f803 1b01 	strb.w	r1, [r3], #1
 8008690:	e7f9      	b.n	8008686 <memset+0x4>
	...

08008694 <_free_r>:
 8008694:	b538      	push	{r3, r4, r5, lr}
 8008696:	4605      	mov	r5, r0
 8008698:	2900      	cmp	r1, #0
 800869a:	d045      	beq.n	8008728 <_free_r+0x94>
 800869c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086a0:	1f0c      	subs	r4, r1, #4
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	bfb8      	it	lt
 80086a6:	18e4      	addlt	r4, r4, r3
 80086a8:	f000 f8f0 	bl	800888c <__malloc_lock>
 80086ac:	4a1f      	ldr	r2, [pc, #124]	; (800872c <_free_r+0x98>)
 80086ae:	6813      	ldr	r3, [r2, #0]
 80086b0:	4610      	mov	r0, r2
 80086b2:	b933      	cbnz	r3, 80086c2 <_free_r+0x2e>
 80086b4:	6063      	str	r3, [r4, #4]
 80086b6:	6014      	str	r4, [r2, #0]
 80086b8:	4628      	mov	r0, r5
 80086ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086be:	f000 b8e6 	b.w	800888e <__malloc_unlock>
 80086c2:	42a3      	cmp	r3, r4
 80086c4:	d90c      	bls.n	80086e0 <_free_r+0x4c>
 80086c6:	6821      	ldr	r1, [r4, #0]
 80086c8:	1862      	adds	r2, r4, r1
 80086ca:	4293      	cmp	r3, r2
 80086cc:	bf04      	itt	eq
 80086ce:	681a      	ldreq	r2, [r3, #0]
 80086d0:	685b      	ldreq	r3, [r3, #4]
 80086d2:	6063      	str	r3, [r4, #4]
 80086d4:	bf04      	itt	eq
 80086d6:	1852      	addeq	r2, r2, r1
 80086d8:	6022      	streq	r2, [r4, #0]
 80086da:	6004      	str	r4, [r0, #0]
 80086dc:	e7ec      	b.n	80086b8 <_free_r+0x24>
 80086de:	4613      	mov	r3, r2
 80086e0:	685a      	ldr	r2, [r3, #4]
 80086e2:	b10a      	cbz	r2, 80086e8 <_free_r+0x54>
 80086e4:	42a2      	cmp	r2, r4
 80086e6:	d9fa      	bls.n	80086de <_free_r+0x4a>
 80086e8:	6819      	ldr	r1, [r3, #0]
 80086ea:	1858      	adds	r0, r3, r1
 80086ec:	42a0      	cmp	r0, r4
 80086ee:	d10b      	bne.n	8008708 <_free_r+0x74>
 80086f0:	6820      	ldr	r0, [r4, #0]
 80086f2:	4401      	add	r1, r0
 80086f4:	1858      	adds	r0, r3, r1
 80086f6:	4282      	cmp	r2, r0
 80086f8:	6019      	str	r1, [r3, #0]
 80086fa:	d1dd      	bne.n	80086b8 <_free_r+0x24>
 80086fc:	6810      	ldr	r0, [r2, #0]
 80086fe:	6852      	ldr	r2, [r2, #4]
 8008700:	605a      	str	r2, [r3, #4]
 8008702:	4401      	add	r1, r0
 8008704:	6019      	str	r1, [r3, #0]
 8008706:	e7d7      	b.n	80086b8 <_free_r+0x24>
 8008708:	d902      	bls.n	8008710 <_free_r+0x7c>
 800870a:	230c      	movs	r3, #12
 800870c:	602b      	str	r3, [r5, #0]
 800870e:	e7d3      	b.n	80086b8 <_free_r+0x24>
 8008710:	6820      	ldr	r0, [r4, #0]
 8008712:	1821      	adds	r1, r4, r0
 8008714:	428a      	cmp	r2, r1
 8008716:	bf04      	itt	eq
 8008718:	6811      	ldreq	r1, [r2, #0]
 800871a:	6852      	ldreq	r2, [r2, #4]
 800871c:	6062      	str	r2, [r4, #4]
 800871e:	bf04      	itt	eq
 8008720:	1809      	addeq	r1, r1, r0
 8008722:	6021      	streq	r1, [r4, #0]
 8008724:	605c      	str	r4, [r3, #4]
 8008726:	e7c7      	b.n	80086b8 <_free_r+0x24>
 8008728:	bd38      	pop	{r3, r4, r5, pc}
 800872a:	bf00      	nop
 800872c:	20000a24 	.word	0x20000a24

08008730 <_malloc_r>:
 8008730:	b570      	push	{r4, r5, r6, lr}
 8008732:	1ccd      	adds	r5, r1, #3
 8008734:	f025 0503 	bic.w	r5, r5, #3
 8008738:	3508      	adds	r5, #8
 800873a:	2d0c      	cmp	r5, #12
 800873c:	bf38      	it	cc
 800873e:	250c      	movcc	r5, #12
 8008740:	2d00      	cmp	r5, #0
 8008742:	4606      	mov	r6, r0
 8008744:	db01      	blt.n	800874a <_malloc_r+0x1a>
 8008746:	42a9      	cmp	r1, r5
 8008748:	d903      	bls.n	8008752 <_malloc_r+0x22>
 800874a:	230c      	movs	r3, #12
 800874c:	6033      	str	r3, [r6, #0]
 800874e:	2000      	movs	r0, #0
 8008750:	bd70      	pop	{r4, r5, r6, pc}
 8008752:	f000 f89b 	bl	800888c <__malloc_lock>
 8008756:	4a21      	ldr	r2, [pc, #132]	; (80087dc <_malloc_r+0xac>)
 8008758:	6814      	ldr	r4, [r2, #0]
 800875a:	4621      	mov	r1, r4
 800875c:	b991      	cbnz	r1, 8008784 <_malloc_r+0x54>
 800875e:	4c20      	ldr	r4, [pc, #128]	; (80087e0 <_malloc_r+0xb0>)
 8008760:	6823      	ldr	r3, [r4, #0]
 8008762:	b91b      	cbnz	r3, 800876c <_malloc_r+0x3c>
 8008764:	4630      	mov	r0, r6
 8008766:	f000 f83d 	bl	80087e4 <_sbrk_r>
 800876a:	6020      	str	r0, [r4, #0]
 800876c:	4629      	mov	r1, r5
 800876e:	4630      	mov	r0, r6
 8008770:	f000 f838 	bl	80087e4 <_sbrk_r>
 8008774:	1c43      	adds	r3, r0, #1
 8008776:	d124      	bne.n	80087c2 <_malloc_r+0x92>
 8008778:	230c      	movs	r3, #12
 800877a:	6033      	str	r3, [r6, #0]
 800877c:	4630      	mov	r0, r6
 800877e:	f000 f886 	bl	800888e <__malloc_unlock>
 8008782:	e7e4      	b.n	800874e <_malloc_r+0x1e>
 8008784:	680b      	ldr	r3, [r1, #0]
 8008786:	1b5b      	subs	r3, r3, r5
 8008788:	d418      	bmi.n	80087bc <_malloc_r+0x8c>
 800878a:	2b0b      	cmp	r3, #11
 800878c:	d90f      	bls.n	80087ae <_malloc_r+0x7e>
 800878e:	600b      	str	r3, [r1, #0]
 8008790:	50cd      	str	r5, [r1, r3]
 8008792:	18cc      	adds	r4, r1, r3
 8008794:	4630      	mov	r0, r6
 8008796:	f000 f87a 	bl	800888e <__malloc_unlock>
 800879a:	f104 000b 	add.w	r0, r4, #11
 800879e:	1d23      	adds	r3, r4, #4
 80087a0:	f020 0007 	bic.w	r0, r0, #7
 80087a4:	1ac3      	subs	r3, r0, r3
 80087a6:	d0d3      	beq.n	8008750 <_malloc_r+0x20>
 80087a8:	425a      	negs	r2, r3
 80087aa:	50e2      	str	r2, [r4, r3]
 80087ac:	e7d0      	b.n	8008750 <_malloc_r+0x20>
 80087ae:	428c      	cmp	r4, r1
 80087b0:	684b      	ldr	r3, [r1, #4]
 80087b2:	bf16      	itet	ne
 80087b4:	6063      	strne	r3, [r4, #4]
 80087b6:	6013      	streq	r3, [r2, #0]
 80087b8:	460c      	movne	r4, r1
 80087ba:	e7eb      	b.n	8008794 <_malloc_r+0x64>
 80087bc:	460c      	mov	r4, r1
 80087be:	6849      	ldr	r1, [r1, #4]
 80087c0:	e7cc      	b.n	800875c <_malloc_r+0x2c>
 80087c2:	1cc4      	adds	r4, r0, #3
 80087c4:	f024 0403 	bic.w	r4, r4, #3
 80087c8:	42a0      	cmp	r0, r4
 80087ca:	d005      	beq.n	80087d8 <_malloc_r+0xa8>
 80087cc:	1a21      	subs	r1, r4, r0
 80087ce:	4630      	mov	r0, r6
 80087d0:	f000 f808 	bl	80087e4 <_sbrk_r>
 80087d4:	3001      	adds	r0, #1
 80087d6:	d0cf      	beq.n	8008778 <_malloc_r+0x48>
 80087d8:	6025      	str	r5, [r4, #0]
 80087da:	e7db      	b.n	8008794 <_malloc_r+0x64>
 80087dc:	20000a24 	.word	0x20000a24
 80087e0:	20000a28 	.word	0x20000a28

080087e4 <_sbrk_r>:
 80087e4:	b538      	push	{r3, r4, r5, lr}
 80087e6:	4c06      	ldr	r4, [pc, #24]	; (8008800 <_sbrk_r+0x1c>)
 80087e8:	2300      	movs	r3, #0
 80087ea:	4605      	mov	r5, r0
 80087ec:	4608      	mov	r0, r1
 80087ee:	6023      	str	r3, [r4, #0]
 80087f0:	f7ff f948 	bl	8007a84 <_sbrk>
 80087f4:	1c43      	adds	r3, r0, #1
 80087f6:	d102      	bne.n	80087fe <_sbrk_r+0x1a>
 80087f8:	6823      	ldr	r3, [r4, #0]
 80087fa:	b103      	cbz	r3, 80087fe <_sbrk_r+0x1a>
 80087fc:	602b      	str	r3, [r5, #0]
 80087fe:	bd38      	pop	{r3, r4, r5, pc}
 8008800:	20001a34 	.word	0x20001a34

08008804 <_raise_r>:
 8008804:	291f      	cmp	r1, #31
 8008806:	b538      	push	{r3, r4, r5, lr}
 8008808:	4604      	mov	r4, r0
 800880a:	460d      	mov	r5, r1
 800880c:	d904      	bls.n	8008818 <_raise_r+0x14>
 800880e:	2316      	movs	r3, #22
 8008810:	6003      	str	r3, [r0, #0]
 8008812:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008816:	bd38      	pop	{r3, r4, r5, pc}
 8008818:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800881a:	b112      	cbz	r2, 8008822 <_raise_r+0x1e>
 800881c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008820:	b94b      	cbnz	r3, 8008836 <_raise_r+0x32>
 8008822:	4620      	mov	r0, r4
 8008824:	f000 f830 	bl	8008888 <_getpid_r>
 8008828:	462a      	mov	r2, r5
 800882a:	4601      	mov	r1, r0
 800882c:	4620      	mov	r0, r4
 800882e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008832:	f000 b817 	b.w	8008864 <_kill_r>
 8008836:	2b01      	cmp	r3, #1
 8008838:	d00a      	beq.n	8008850 <_raise_r+0x4c>
 800883a:	1c59      	adds	r1, r3, #1
 800883c:	d103      	bne.n	8008846 <_raise_r+0x42>
 800883e:	2316      	movs	r3, #22
 8008840:	6003      	str	r3, [r0, #0]
 8008842:	2001      	movs	r0, #1
 8008844:	e7e7      	b.n	8008816 <_raise_r+0x12>
 8008846:	2400      	movs	r4, #0
 8008848:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800884c:	4628      	mov	r0, r5
 800884e:	4798      	blx	r3
 8008850:	2000      	movs	r0, #0
 8008852:	e7e0      	b.n	8008816 <_raise_r+0x12>

08008854 <raise>:
 8008854:	4b02      	ldr	r3, [pc, #8]	; (8008860 <raise+0xc>)
 8008856:	4601      	mov	r1, r0
 8008858:	6818      	ldr	r0, [r3, #0]
 800885a:	f7ff bfd3 	b.w	8008804 <_raise_r>
 800885e:	bf00      	nop
 8008860:	2000017c 	.word	0x2000017c

08008864 <_kill_r>:
 8008864:	b538      	push	{r3, r4, r5, lr}
 8008866:	4c07      	ldr	r4, [pc, #28]	; (8008884 <_kill_r+0x20>)
 8008868:	2300      	movs	r3, #0
 800886a:	4605      	mov	r5, r0
 800886c:	4608      	mov	r0, r1
 800886e:	4611      	mov	r1, r2
 8008870:	6023      	str	r3, [r4, #0]
 8008872:	f7ff f8ed 	bl	8007a50 <_kill>
 8008876:	1c43      	adds	r3, r0, #1
 8008878:	d102      	bne.n	8008880 <_kill_r+0x1c>
 800887a:	6823      	ldr	r3, [r4, #0]
 800887c:	b103      	cbz	r3, 8008880 <_kill_r+0x1c>
 800887e:	602b      	str	r3, [r5, #0]
 8008880:	bd38      	pop	{r3, r4, r5, pc}
 8008882:	bf00      	nop
 8008884:	20001a34 	.word	0x20001a34

08008888 <_getpid_r>:
 8008888:	f7ff b8da 	b.w	8007a40 <_getpid>

0800888c <__malloc_lock>:
 800888c:	4770      	bx	lr

0800888e <__malloc_unlock>:
 800888e:	4770      	bx	lr

08008890 <_init>:
 8008890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008892:	bf00      	nop
 8008894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008896:	bc08      	pop	{r3}
 8008898:	469e      	mov	lr, r3
 800889a:	4770      	bx	lr

0800889c <_fini>:
 800889c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800889e:	bf00      	nop
 80088a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088a2:	bc08      	pop	{r3}
 80088a4:	469e      	mov	lr, r3
 80088a6:	4770      	bx	lr
