
UMDv2-stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af38  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800b110  0800b110  0001b110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b1e8  0800b1e8  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b1e8  0800b1e8  0001b1e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b1f0  0800b1f0  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b1f0  0800b1f0  0001b1f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b1f4  0800b1f4  0001b1f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800b1f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b00  200001e8  0800b3e0  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ce8  0800b3e0  00021ce8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000348d7  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000069d5  00000000  00000000  00054aef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001c38  00000000  00000000  0005b4c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001950  00000000  00000000  0005d100  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002df0a  00000000  00000000  0005ea50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00021292  00000000  00000000  0008c95a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e945a  00000000  00000000  000adbec  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00197046  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000088c4  00000000  00000000  001970c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001e8 	.word	0x200001e8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800b0f8 	.word	0x0800b0f8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001ec 	.word	0x200001ec
 8000214:	0800b0f8 	.word	0x0800b0f8

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_uldivmod>:
 8000228:	b953      	cbnz	r3, 8000240 <__aeabi_uldivmod+0x18>
 800022a:	b94a      	cbnz	r2, 8000240 <__aeabi_uldivmod+0x18>
 800022c:	2900      	cmp	r1, #0
 800022e:	bf08      	it	eq
 8000230:	2800      	cmpeq	r0, #0
 8000232:	bf1c      	itt	ne
 8000234:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000238:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800023c:	f000 b972 	b.w	8000524 <__aeabi_idiv0>
 8000240:	f1ad 0c08 	sub.w	ip, sp, #8
 8000244:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000248:	f000 f806 	bl	8000258 <__udivmoddi4>
 800024c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000254:	b004      	add	sp, #16
 8000256:	4770      	bx	lr

08000258 <__udivmoddi4>:
 8000258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800025c:	9e08      	ldr	r6, [sp, #32]
 800025e:	4604      	mov	r4, r0
 8000260:	4688      	mov	r8, r1
 8000262:	2b00      	cmp	r3, #0
 8000264:	d14b      	bne.n	80002fe <__udivmoddi4+0xa6>
 8000266:	428a      	cmp	r2, r1
 8000268:	4615      	mov	r5, r2
 800026a:	d967      	bls.n	800033c <__udivmoddi4+0xe4>
 800026c:	fab2 f282 	clz	r2, r2
 8000270:	b14a      	cbz	r2, 8000286 <__udivmoddi4+0x2e>
 8000272:	f1c2 0720 	rsb	r7, r2, #32
 8000276:	fa01 f302 	lsl.w	r3, r1, r2
 800027a:	fa20 f707 	lsr.w	r7, r0, r7
 800027e:	4095      	lsls	r5, r2
 8000280:	ea47 0803 	orr.w	r8, r7, r3
 8000284:	4094      	lsls	r4, r2
 8000286:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800028a:	0c23      	lsrs	r3, r4, #16
 800028c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000290:	fa1f fc85 	uxth.w	ip, r5
 8000294:	fb0e 8817 	mls	r8, lr, r7, r8
 8000298:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800029c:	fb07 f10c 	mul.w	r1, r7, ip
 80002a0:	4299      	cmp	r1, r3
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x60>
 80002a4:	18eb      	adds	r3, r5, r3
 80002a6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002aa:	f080 811b 	bcs.w	80004e4 <__udivmoddi4+0x28c>
 80002ae:	4299      	cmp	r1, r3
 80002b0:	f240 8118 	bls.w	80004e4 <__udivmoddi4+0x28c>
 80002b4:	3f02      	subs	r7, #2
 80002b6:	442b      	add	r3, r5
 80002b8:	1a5b      	subs	r3, r3, r1
 80002ba:	b2a4      	uxth	r4, r4
 80002bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002cc:	45a4      	cmp	ip, r4
 80002ce:	d909      	bls.n	80002e4 <__udivmoddi4+0x8c>
 80002d0:	192c      	adds	r4, r5, r4
 80002d2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002d6:	f080 8107 	bcs.w	80004e8 <__udivmoddi4+0x290>
 80002da:	45a4      	cmp	ip, r4
 80002dc:	f240 8104 	bls.w	80004e8 <__udivmoddi4+0x290>
 80002e0:	3802      	subs	r0, #2
 80002e2:	442c      	add	r4, r5
 80002e4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e8:	eba4 040c 	sub.w	r4, r4, ip
 80002ec:	2700      	movs	r7, #0
 80002ee:	b11e      	cbz	r6, 80002f8 <__udivmoddi4+0xa0>
 80002f0:	40d4      	lsrs	r4, r2
 80002f2:	2300      	movs	r3, #0
 80002f4:	e9c6 4300 	strd	r4, r3, [r6]
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	428b      	cmp	r3, r1
 8000300:	d909      	bls.n	8000316 <__udivmoddi4+0xbe>
 8000302:	2e00      	cmp	r6, #0
 8000304:	f000 80eb 	beq.w	80004de <__udivmoddi4+0x286>
 8000308:	2700      	movs	r7, #0
 800030a:	e9c6 0100 	strd	r0, r1, [r6]
 800030e:	4638      	mov	r0, r7
 8000310:	4639      	mov	r1, r7
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	fab3 f783 	clz	r7, r3
 800031a:	2f00      	cmp	r7, #0
 800031c:	d147      	bne.n	80003ae <__udivmoddi4+0x156>
 800031e:	428b      	cmp	r3, r1
 8000320:	d302      	bcc.n	8000328 <__udivmoddi4+0xd0>
 8000322:	4282      	cmp	r2, r0
 8000324:	f200 80fa 	bhi.w	800051c <__udivmoddi4+0x2c4>
 8000328:	1a84      	subs	r4, r0, r2
 800032a:	eb61 0303 	sbc.w	r3, r1, r3
 800032e:	2001      	movs	r0, #1
 8000330:	4698      	mov	r8, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d0e0      	beq.n	80002f8 <__udivmoddi4+0xa0>
 8000336:	e9c6 4800 	strd	r4, r8, [r6]
 800033a:	e7dd      	b.n	80002f8 <__udivmoddi4+0xa0>
 800033c:	b902      	cbnz	r2, 8000340 <__udivmoddi4+0xe8>
 800033e:	deff      	udf	#255	; 0xff
 8000340:	fab2 f282 	clz	r2, r2
 8000344:	2a00      	cmp	r2, #0
 8000346:	f040 808f 	bne.w	8000468 <__udivmoddi4+0x210>
 800034a:	1b49      	subs	r1, r1, r5
 800034c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000350:	fa1f f885 	uxth.w	r8, r5
 8000354:	2701      	movs	r7, #1
 8000356:	fbb1 fcfe 	udiv	ip, r1, lr
 800035a:	0c23      	lsrs	r3, r4, #16
 800035c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb08 f10c 	mul.w	r1, r8, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x124>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x122>
 8000374:	4299      	cmp	r1, r3
 8000376:	f200 80cd 	bhi.w	8000514 <__udivmoddi4+0x2bc>
 800037a:	4684      	mov	ip, r0
 800037c:	1a59      	subs	r1, r3, r1
 800037e:	b2a3      	uxth	r3, r4
 8000380:	fbb1 f0fe 	udiv	r0, r1, lr
 8000384:	fb0e 1410 	mls	r4, lr, r0, r1
 8000388:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800038c:	fb08 f800 	mul.w	r8, r8, r0
 8000390:	45a0      	cmp	r8, r4
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0x14c>
 8000394:	192c      	adds	r4, r5, r4
 8000396:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x14a>
 800039c:	45a0      	cmp	r8, r4
 800039e:	f200 80b6 	bhi.w	800050e <__udivmoddi4+0x2b6>
 80003a2:	4618      	mov	r0, r3
 80003a4:	eba4 0408 	sub.w	r4, r4, r8
 80003a8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003ac:	e79f      	b.n	80002ee <__udivmoddi4+0x96>
 80003ae:	f1c7 0c20 	rsb	ip, r7, #32
 80003b2:	40bb      	lsls	r3, r7
 80003b4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003b8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003bc:	fa01 f407 	lsl.w	r4, r1, r7
 80003c0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003c4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003c8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003cc:	4325      	orrs	r5, r4
 80003ce:	fbb3 f9f8 	udiv	r9, r3, r8
 80003d2:	0c2c      	lsrs	r4, r5, #16
 80003d4:	fb08 3319 	mls	r3, r8, r9, r3
 80003d8:	fa1f fa8e 	uxth.w	sl, lr
 80003dc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003e0:	fb09 f40a 	mul.w	r4, r9, sl
 80003e4:	429c      	cmp	r4, r3
 80003e6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ea:	fa00 f107 	lsl.w	r1, r0, r7
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b0>
 80003f0:	eb1e 0303 	adds.w	r3, lr, r3
 80003f4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003f8:	f080 8087 	bcs.w	800050a <__udivmoddi4+0x2b2>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f240 8084 	bls.w	800050a <__udivmoddi4+0x2b2>
 8000402:	f1a9 0902 	sub.w	r9, r9, #2
 8000406:	4473      	add	r3, lr
 8000408:	1b1b      	subs	r3, r3, r4
 800040a:	b2ad      	uxth	r5, r5
 800040c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000410:	fb08 3310 	mls	r3, r8, r0, r3
 8000414:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000418:	fb00 fa0a 	mul.w	sl, r0, sl
 800041c:	45a2      	cmp	sl, r4
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1da>
 8000420:	eb1e 0404 	adds.w	r4, lr, r4
 8000424:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000428:	d26b      	bcs.n	8000502 <__udivmoddi4+0x2aa>
 800042a:	45a2      	cmp	sl, r4
 800042c:	d969      	bls.n	8000502 <__udivmoddi4+0x2aa>
 800042e:	3802      	subs	r0, #2
 8000430:	4474      	add	r4, lr
 8000432:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000436:	fba0 8902 	umull	r8, r9, r0, r2
 800043a:	eba4 040a 	sub.w	r4, r4, sl
 800043e:	454c      	cmp	r4, r9
 8000440:	46c2      	mov	sl, r8
 8000442:	464b      	mov	r3, r9
 8000444:	d354      	bcc.n	80004f0 <__udivmoddi4+0x298>
 8000446:	d051      	beq.n	80004ec <__udivmoddi4+0x294>
 8000448:	2e00      	cmp	r6, #0
 800044a:	d069      	beq.n	8000520 <__udivmoddi4+0x2c8>
 800044c:	ebb1 050a 	subs.w	r5, r1, sl
 8000450:	eb64 0403 	sbc.w	r4, r4, r3
 8000454:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000458:	40fd      	lsrs	r5, r7
 800045a:	40fc      	lsrs	r4, r7
 800045c:	ea4c 0505 	orr.w	r5, ip, r5
 8000460:	e9c6 5400 	strd	r5, r4, [r6]
 8000464:	2700      	movs	r7, #0
 8000466:	e747      	b.n	80002f8 <__udivmoddi4+0xa0>
 8000468:	f1c2 0320 	rsb	r3, r2, #32
 800046c:	fa20 f703 	lsr.w	r7, r0, r3
 8000470:	4095      	lsls	r5, r2
 8000472:	fa01 f002 	lsl.w	r0, r1, r2
 8000476:	fa21 f303 	lsr.w	r3, r1, r3
 800047a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800047e:	4338      	orrs	r0, r7
 8000480:	0c01      	lsrs	r1, r0, #16
 8000482:	fbb3 f7fe 	udiv	r7, r3, lr
 8000486:	fa1f f885 	uxth.w	r8, r5
 800048a:	fb0e 3317 	mls	r3, lr, r7, r3
 800048e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000492:	fb07 f308 	mul.w	r3, r7, r8
 8000496:	428b      	cmp	r3, r1
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d907      	bls.n	80004ae <__udivmoddi4+0x256>
 800049e:	1869      	adds	r1, r5, r1
 80004a0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004a4:	d22f      	bcs.n	8000506 <__udivmoddi4+0x2ae>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d92d      	bls.n	8000506 <__udivmoddi4+0x2ae>
 80004aa:	3f02      	subs	r7, #2
 80004ac:	4429      	add	r1, r5
 80004ae:	1acb      	subs	r3, r1, r3
 80004b0:	b281      	uxth	r1, r0
 80004b2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004be:	fb00 f308 	mul.w	r3, r0, r8
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d907      	bls.n	80004d6 <__udivmoddi4+0x27e>
 80004c6:	1869      	adds	r1, r5, r1
 80004c8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004cc:	d217      	bcs.n	80004fe <__udivmoddi4+0x2a6>
 80004ce:	428b      	cmp	r3, r1
 80004d0:	d915      	bls.n	80004fe <__udivmoddi4+0x2a6>
 80004d2:	3802      	subs	r0, #2
 80004d4:	4429      	add	r1, r5
 80004d6:	1ac9      	subs	r1, r1, r3
 80004d8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004dc:	e73b      	b.n	8000356 <__udivmoddi4+0xfe>
 80004de:	4637      	mov	r7, r6
 80004e0:	4630      	mov	r0, r6
 80004e2:	e709      	b.n	80002f8 <__udivmoddi4+0xa0>
 80004e4:	4607      	mov	r7, r0
 80004e6:	e6e7      	b.n	80002b8 <__udivmoddi4+0x60>
 80004e8:	4618      	mov	r0, r3
 80004ea:	e6fb      	b.n	80002e4 <__udivmoddi4+0x8c>
 80004ec:	4541      	cmp	r1, r8
 80004ee:	d2ab      	bcs.n	8000448 <__udivmoddi4+0x1f0>
 80004f0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004f4:	eb69 020e 	sbc.w	r2, r9, lr
 80004f8:	3801      	subs	r0, #1
 80004fa:	4613      	mov	r3, r2
 80004fc:	e7a4      	b.n	8000448 <__udivmoddi4+0x1f0>
 80004fe:	4660      	mov	r0, ip
 8000500:	e7e9      	b.n	80004d6 <__udivmoddi4+0x27e>
 8000502:	4618      	mov	r0, r3
 8000504:	e795      	b.n	8000432 <__udivmoddi4+0x1da>
 8000506:	4667      	mov	r7, ip
 8000508:	e7d1      	b.n	80004ae <__udivmoddi4+0x256>
 800050a:	4681      	mov	r9, r0
 800050c:	e77c      	b.n	8000408 <__udivmoddi4+0x1b0>
 800050e:	3802      	subs	r0, #2
 8000510:	442c      	add	r4, r5
 8000512:	e747      	b.n	80003a4 <__udivmoddi4+0x14c>
 8000514:	f1ac 0c02 	sub.w	ip, ip, #2
 8000518:	442b      	add	r3, r5
 800051a:	e72f      	b.n	800037c <__udivmoddi4+0x124>
 800051c:	4638      	mov	r0, r7
 800051e:	e708      	b.n	8000332 <__udivmoddi4+0xda>
 8000520:	4637      	mov	r7, r6
 8000522:	e6e9      	b.n	80002f8 <__udivmoddi4+0xa0>

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800052c:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <HAL_Init+0x40>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a0d      	ldr	r2, [pc, #52]	; (8000568 <HAL_Init+0x40>)
 8000532:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000536:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000538:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <HAL_Init+0x40>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a0a      	ldr	r2, [pc, #40]	; (8000568 <HAL_Init+0x40>)
 800053e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000542:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000544:	4b08      	ldr	r3, [pc, #32]	; (8000568 <HAL_Init+0x40>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a07      	ldr	r2, [pc, #28]	; (8000568 <HAL_Init+0x40>)
 800054a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800054e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000550:	2003      	movs	r0, #3
 8000552:	f000 fbbf 	bl	8000cd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000556:	2000      	movs	r0, #0
 8000558:	f000 f808 	bl	800056c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800055c:	f009 fbe2 	bl	8009d24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000560:	2300      	movs	r3, #0
}
 8000562:	4618      	mov	r0, r3
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40023c00 	.word	0x40023c00

0800056c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000574:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <HAL_InitTick+0x54>)
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <HAL_InitTick+0x58>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	4619      	mov	r1, r3
 800057e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000582:	fbb3 f3f1 	udiv	r3, r3, r1
 8000586:	fbb2 f3f3 	udiv	r3, r2, r3
 800058a:	4618      	mov	r0, r3
 800058c:	f000 fbd7 	bl	8000d3e <HAL_SYSTICK_Config>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000596:	2301      	movs	r3, #1
 8000598:	e00e      	b.n	80005b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	2b0f      	cmp	r3, #15
 800059e:	d80a      	bhi.n	80005b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005a0:	2200      	movs	r2, #0
 80005a2:	6879      	ldr	r1, [r7, #4]
 80005a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005a8:	f000 fb9f 	bl	8000cea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005ac:	4a06      	ldr	r2, [pc, #24]	; (80005c8 <HAL_InitTick+0x5c>)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005b2:	2300      	movs	r3, #0
 80005b4:	e000      	b.n	80005b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005b6:	2301      	movs	r3, #1
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20000118 	.word	0x20000118
 80005c4:	20000004 	.word	0x20000004
 80005c8:	20000000 	.word	0x20000000

080005cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <HAL_IncTick+0x20>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	461a      	mov	r2, r3
 80005d6:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <HAL_IncTick+0x24>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4413      	add	r3, r2
 80005dc:	4a04      	ldr	r2, [pc, #16]	; (80005f0 <HAL_IncTick+0x24>)
 80005de:	6013      	str	r3, [r2, #0]
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	20000004 	.word	0x20000004
 80005f0:	200002d0 	.word	0x200002d0

080005f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  return uwTick;
 80005f8:	4b03      	ldr	r3, [pc, #12]	; (8000608 <HAL_GetTick+0x14>)
 80005fa:	681b      	ldr	r3, [r3, #0]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	200002d0 	.word	0x200002d0

0800060c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000614:	f7ff ffee 	bl	80005f4 <HAL_GetTick>
 8000618:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000624:	d005      	beq.n	8000632 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <HAL_Delay+0x40>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	461a      	mov	r2, r3
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	4413      	add	r3, r2
 8000630:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000632:	bf00      	nop
 8000634:	f7ff ffde 	bl	80005f4 <HAL_GetTick>
 8000638:	4602      	mov	r2, r0
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	1ad3      	subs	r3, r2, r3
 800063e:	68fa      	ldr	r2, [r7, #12]
 8000640:	429a      	cmp	r2, r3
 8000642:	d8f7      	bhi.n	8000634 <HAL_Delay+0x28>
  {
  }
}
 8000644:	bf00      	nop
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000004 	.word	0x20000004

08000650 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000658:	2300      	movs	r3, #0
 800065a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d101      	bne.n	8000666 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000662:	2301      	movs	r3, #1
 8000664:	e033      	b.n	80006ce <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066a:	2b00      	cmp	r3, #0
 800066c:	d109      	bne.n	8000682 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800066e:	6878      	ldr	r0, [r7, #4]
 8000670:	f008 fb66 	bl	8008d40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2200      	movs	r2, #0
 8000678:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2200      	movs	r2, #0
 800067e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000686:	f003 0310 	and.w	r3, r3, #16
 800068a:	2b00      	cmp	r3, #0
 800068c:	d118      	bne.n	80006c0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000692:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000696:	f023 0302 	bic.w	r3, r3, #2
 800069a:	f043 0202 	orr.w	r2, r3, #2
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80006a2:	6878      	ldr	r0, [r7, #4]
 80006a4:	f000 f94a 	bl	800093c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2200      	movs	r2, #0
 80006ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b2:	f023 0303 	bic.w	r3, r3, #3
 80006b6:	f043 0201 	orr.w	r2, r3, #1
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	641a      	str	r2, [r3, #64]	; 0x40
 80006be:	e001      	b.n	80006c4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80006c0:	2301      	movs	r3, #1
 80006c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2200      	movs	r2, #0
 80006c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80006cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3710      	adds	r7, #16
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
	...

080006d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d101      	bne.n	80006f4 <HAL_ADC_ConfigChannel+0x1c>
 80006f0:	2302      	movs	r3, #2
 80006f2:	e113      	b.n	800091c <HAL_ADC_ConfigChannel+0x244>
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2201      	movs	r2, #1
 80006f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2b09      	cmp	r3, #9
 8000702:	d925      	bls.n	8000750 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	68d9      	ldr	r1, [r3, #12]
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	b29b      	uxth	r3, r3
 8000710:	461a      	mov	r2, r3
 8000712:	4613      	mov	r3, r2
 8000714:	005b      	lsls	r3, r3, #1
 8000716:	4413      	add	r3, r2
 8000718:	3b1e      	subs	r3, #30
 800071a:	2207      	movs	r2, #7
 800071c:	fa02 f303 	lsl.w	r3, r2, r3
 8000720:	43da      	mvns	r2, r3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	400a      	ands	r2, r1
 8000728:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	68d9      	ldr	r1, [r3, #12]
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	689a      	ldr	r2, [r3, #8]
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	b29b      	uxth	r3, r3
 800073a:	4618      	mov	r0, r3
 800073c:	4603      	mov	r3, r0
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	4403      	add	r3, r0
 8000742:	3b1e      	subs	r3, #30
 8000744:	409a      	lsls	r2, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	430a      	orrs	r2, r1
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	e022      	b.n	8000796 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	6919      	ldr	r1, [r3, #16]
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	b29b      	uxth	r3, r3
 800075c:	461a      	mov	r2, r3
 800075e:	4613      	mov	r3, r2
 8000760:	005b      	lsls	r3, r3, #1
 8000762:	4413      	add	r3, r2
 8000764:	2207      	movs	r2, #7
 8000766:	fa02 f303 	lsl.w	r3, r2, r3
 800076a:	43da      	mvns	r2, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	400a      	ands	r2, r1
 8000772:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	6919      	ldr	r1, [r3, #16]
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	689a      	ldr	r2, [r3, #8]
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	b29b      	uxth	r3, r3
 8000784:	4618      	mov	r0, r3
 8000786:	4603      	mov	r3, r0
 8000788:	005b      	lsls	r3, r3, #1
 800078a:	4403      	add	r3, r0
 800078c:	409a      	lsls	r2, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	430a      	orrs	r2, r1
 8000794:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	685b      	ldr	r3, [r3, #4]
 800079a:	2b06      	cmp	r3, #6
 800079c:	d824      	bhi.n	80007e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	685a      	ldr	r2, [r3, #4]
 80007a8:	4613      	mov	r3, r2
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	4413      	add	r3, r2
 80007ae:	3b05      	subs	r3, #5
 80007b0:	221f      	movs	r2, #31
 80007b2:	fa02 f303 	lsl.w	r3, r2, r3
 80007b6:	43da      	mvns	r2, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	400a      	ands	r2, r1
 80007be:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	4618      	mov	r0, r3
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	685a      	ldr	r2, [r3, #4]
 80007d2:	4613      	mov	r3, r2
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	4413      	add	r3, r2
 80007d8:	3b05      	subs	r3, #5
 80007da:	fa00 f203 	lsl.w	r2, r0, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	430a      	orrs	r2, r1
 80007e4:	635a      	str	r2, [r3, #52]	; 0x34
 80007e6:	e04c      	b.n	8000882 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	2b0c      	cmp	r3, #12
 80007ee:	d824      	bhi.n	800083a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	685a      	ldr	r2, [r3, #4]
 80007fa:	4613      	mov	r3, r2
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	4413      	add	r3, r2
 8000800:	3b23      	subs	r3, #35	; 0x23
 8000802:	221f      	movs	r2, #31
 8000804:	fa02 f303 	lsl.w	r3, r2, r3
 8000808:	43da      	mvns	r2, r3
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	400a      	ands	r2, r1
 8000810:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	b29b      	uxth	r3, r3
 800081e:	4618      	mov	r0, r3
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	685a      	ldr	r2, [r3, #4]
 8000824:	4613      	mov	r3, r2
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	4413      	add	r3, r2
 800082a:	3b23      	subs	r3, #35	; 0x23
 800082c:	fa00 f203 	lsl.w	r2, r0, r3
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	430a      	orrs	r2, r1
 8000836:	631a      	str	r2, [r3, #48]	; 0x30
 8000838:	e023      	b.n	8000882 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	685a      	ldr	r2, [r3, #4]
 8000844:	4613      	mov	r3, r2
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	4413      	add	r3, r2
 800084a:	3b41      	subs	r3, #65	; 0x41
 800084c:	221f      	movs	r2, #31
 800084e:	fa02 f303 	lsl.w	r3, r2, r3
 8000852:	43da      	mvns	r2, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	400a      	ands	r2, r1
 800085a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	b29b      	uxth	r3, r3
 8000868:	4618      	mov	r0, r3
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	685a      	ldr	r2, [r3, #4]
 800086e:	4613      	mov	r3, r2
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	4413      	add	r3, r2
 8000874:	3b41      	subs	r3, #65	; 0x41
 8000876:	fa00 f203 	lsl.w	r2, r0, r3
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	430a      	orrs	r2, r1
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000882:	4b29      	ldr	r3, [pc, #164]	; (8000928 <HAL_ADC_ConfigChannel+0x250>)
 8000884:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a28      	ldr	r2, [pc, #160]	; (800092c <HAL_ADC_ConfigChannel+0x254>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d10f      	bne.n	80008b0 <HAL_ADC_ConfigChannel+0x1d8>
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b12      	cmp	r3, #18
 8000896:	d10b      	bne.n	80008b0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a1d      	ldr	r2, [pc, #116]	; (800092c <HAL_ADC_ConfigChannel+0x254>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d12b      	bne.n	8000912 <HAL_ADC_ConfigChannel+0x23a>
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a1c      	ldr	r2, [pc, #112]	; (8000930 <HAL_ADC_ConfigChannel+0x258>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d003      	beq.n	80008cc <HAL_ADC_ConfigChannel+0x1f4>
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2b11      	cmp	r3, #17
 80008ca:	d122      	bne.n	8000912 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a11      	ldr	r2, [pc, #68]	; (8000930 <HAL_ADC_ConfigChannel+0x258>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d111      	bne.n	8000912 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <HAL_ADC_ConfigChannel+0x25c>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a11      	ldr	r2, [pc, #68]	; (8000938 <HAL_ADC_ConfigChannel+0x260>)
 80008f4:	fba2 2303 	umull	r2, r3, r2, r3
 80008f8:	0c9a      	lsrs	r2, r3, #18
 80008fa:	4613      	mov	r3, r2
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	4413      	add	r3, r2
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000904:	e002      	b.n	800090c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	3b01      	subs	r3, #1
 800090a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d1f9      	bne.n	8000906 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2200      	movs	r2, #0
 8000916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800091a:	2300      	movs	r3, #0
}
 800091c:	4618      	mov	r0, r3
 800091e:	3714      	adds	r7, #20
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	40012300 	.word	0x40012300
 800092c:	40012000 	.word	0x40012000
 8000930:	10000012 	.word	0x10000012
 8000934:	20000118 	.word	0x20000118
 8000938:	431bde83 	.word	0x431bde83

0800093c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000944:	4b79      	ldr	r3, [pc, #484]	; (8000b2c <ADC_Init+0x1f0>)
 8000946:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	685a      	ldr	r2, [r3, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	431a      	orrs	r2, r3
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	685a      	ldr	r2, [r3, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000970:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	6859      	ldr	r1, [r3, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	691b      	ldr	r3, [r3, #16]
 800097c:	021a      	lsls	r2, r3, #8
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	430a      	orrs	r2, r1
 8000984:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	685a      	ldr	r2, [r3, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000994:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	6859      	ldr	r1, [r3, #4]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	689a      	ldr	r2, [r3, #8]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	430a      	orrs	r2, r1
 80009a6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	689a      	ldr	r2, [r3, #8]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80009b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	6899      	ldr	r1, [r3, #8]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	68da      	ldr	r2, [r3, #12]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	430a      	orrs	r2, r1
 80009c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ce:	4a58      	ldr	r2, [pc, #352]	; (8000b30 <ADC_Init+0x1f4>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d022      	beq.n	8000a1a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	689a      	ldr	r2, [r3, #8]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80009e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	6899      	ldr	r1, [r3, #8]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	430a      	orrs	r2, r1
 80009f4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	689a      	ldr	r2, [r3, #8]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000a04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	6899      	ldr	r1, [r3, #8]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	430a      	orrs	r2, r1
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	e00f      	b.n	8000a3a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	689a      	ldr	r2, [r3, #8]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000a28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	689a      	ldr	r2, [r3, #8]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000a38:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	689a      	ldr	r2, [r3, #8]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f022 0202 	bic.w	r2, r2, #2
 8000a48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	6899      	ldr	r1, [r3, #8]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	7e1b      	ldrb	r3, [r3, #24]
 8000a54:	005a      	lsls	r2, r3, #1
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d01b      	beq.n	8000aa0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	685a      	ldr	r2, [r3, #4]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000a76:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	685a      	ldr	r2, [r3, #4]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000a86:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	6859      	ldr	r1, [r3, #4]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a92:	3b01      	subs	r3, #1
 8000a94:	035a      	lsls	r2, r3, #13
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	430a      	orrs	r2, r1
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	e007      	b.n	8000ab0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	685a      	ldr	r2, [r3, #4]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000aae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000abe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	69db      	ldr	r3, [r3, #28]
 8000aca:	3b01      	subs	r3, #1
 8000acc:	051a      	lsls	r2, r3, #20
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	689a      	ldr	r2, [r3, #8]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000ae4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	6899      	ldr	r1, [r3, #8]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000af2:	025a      	lsls	r2, r3, #9
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	430a      	orrs	r2, r1
 8000afa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	689a      	ldr	r2, [r3, #8]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	6899      	ldr	r1, [r3, #8]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	695b      	ldr	r3, [r3, #20]
 8000b16:	029a      	lsls	r2, r3, #10
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	430a      	orrs	r2, r1
 8000b1e:	609a      	str	r2, [r3, #8]
}
 8000b20:	bf00      	nop
 8000b22:	3714      	adds	r7, #20
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	40012300 	.word	0x40012300
 8000b30:	0f000001 	.word	0x0f000001

08000b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <__NVIC_SetPriorityGrouping+0x44>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4a:	68ba      	ldr	r2, [r7, #8]
 8000b4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b50:	4013      	ands	r3, r2
 8000b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b66:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <__NVIC_SetPriorityGrouping+0x44>)
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	60d3      	str	r3, [r2, #12]
}
 8000b6c:	bf00      	nop
 8000b6e:	3714      	adds	r7, #20
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b80:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <__NVIC_GetPriorityGrouping+0x18>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	0a1b      	lsrs	r3, r3, #8
 8000b86:	f003 0307 	and.w	r3, r3, #7
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	db0b      	blt.n	8000bc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	f003 021f 	and.w	r2, r3, #31
 8000bb0:	4907      	ldr	r1, [pc, #28]	; (8000bd0 <__NVIC_EnableIRQ+0x38>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	095b      	lsrs	r3, r3, #5
 8000bb8:	2001      	movs	r0, #1
 8000bba:	fa00 f202 	lsl.w	r2, r0, r2
 8000bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000e100 	.word	0xe000e100

08000bd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	6039      	str	r1, [r7, #0]
 8000bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	db0a      	blt.n	8000bfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	490c      	ldr	r1, [pc, #48]	; (8000c20 <__NVIC_SetPriority+0x4c>)
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	0112      	lsls	r2, r2, #4
 8000bf4:	b2d2      	uxtb	r2, r2
 8000bf6:	440b      	add	r3, r1
 8000bf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bfc:	e00a      	b.n	8000c14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	4908      	ldr	r1, [pc, #32]	; (8000c24 <__NVIC_SetPriority+0x50>)
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	f003 030f 	and.w	r3, r3, #15
 8000c0a:	3b04      	subs	r3, #4
 8000c0c:	0112      	lsls	r2, r2, #4
 8000c0e:	b2d2      	uxtb	r2, r2
 8000c10:	440b      	add	r3, r1
 8000c12:	761a      	strb	r2, [r3, #24]
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000e100 	.word	0xe000e100
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b089      	sub	sp, #36	; 0x24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	f003 0307 	and.w	r3, r3, #7
 8000c3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	f1c3 0307 	rsb	r3, r3, #7
 8000c42:	2b04      	cmp	r3, #4
 8000c44:	bf28      	it	cs
 8000c46:	2304      	movcs	r3, #4
 8000c48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	3304      	adds	r3, #4
 8000c4e:	2b06      	cmp	r3, #6
 8000c50:	d902      	bls.n	8000c58 <NVIC_EncodePriority+0x30>
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	3b03      	subs	r3, #3
 8000c56:	e000      	b.n	8000c5a <NVIC_EncodePriority+0x32>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	43da      	mvns	r2, r3
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	401a      	ands	r2, r3
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7a:	43d9      	mvns	r1, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c80:	4313      	orrs	r3, r2
         );
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3724      	adds	r7, #36	; 0x24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
	...

08000c90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ca0:	d301      	bcc.n	8000ca6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e00f      	b.n	8000cc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ca6:	4a0a      	ldr	r2, [pc, #40]	; (8000cd0 <SysTick_Config+0x40>)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cae:	210f      	movs	r1, #15
 8000cb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cb4:	f7ff ff8e 	bl	8000bd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb8:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <SysTick_Config+0x40>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cbe:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <SysTick_Config+0x40>)
 8000cc0:	2207      	movs	r2, #7
 8000cc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	e000e010 	.word	0xe000e010

08000cd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f7ff ff29 	bl	8000b34 <__NVIC_SetPriorityGrouping>
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b086      	sub	sp, #24
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	607a      	str	r2, [r7, #4]
 8000cf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cfc:	f7ff ff3e 	bl	8000b7c <__NVIC_GetPriorityGrouping>
 8000d00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	68b9      	ldr	r1, [r7, #8]
 8000d06:	6978      	ldr	r0, [r7, #20]
 8000d08:	f7ff ff8e 	bl	8000c28 <NVIC_EncodePriority>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d12:	4611      	mov	r1, r2
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff ff5d 	bl	8000bd4 <__NVIC_SetPriority>
}
 8000d1a:	bf00      	nop
 8000d1c:	3718      	adds	r7, #24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	4603      	mov	r3, r0
 8000d2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff ff31 	bl	8000b98 <__NVIC_EnableIRQ>
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f7ff ffa2 	bl	8000c90 <SysTick_Config>
 8000d4c:	4603      	mov	r3, r0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d101      	bne.n	8000d68 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000d64:	2301      	movs	r3, #1
 8000d66:	e011      	b.n	8000d8c <HAL_CRC_Init+0x36>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	795b      	ldrb	r3, [r3, #5]
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d105      	bne.n	8000d7e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2200      	movs	r2, #0
 8000d76:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f008 f8cb 	bl	8008f14 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2202      	movs	r2, #2
 8000d82:	715a      	strb	r2, [r3, #5]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2201      	movs	r2, #1
 8000d88:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000d8a:	2300      	movs	r3, #0
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b089      	sub	sp, #36	; 0x24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000daa:	2300      	movs	r3, #0
 8000dac:	61fb      	str	r3, [r7, #28]
 8000dae:	e165      	b.n	800107c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000db0:	2201      	movs	r2, #1
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	f040 8154 	bne.w	8001076 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	2b02      	cmp	r3, #2
 8000dd4:	d003      	beq.n	8000dde <HAL_GPIO_Init+0x4a>
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	2b12      	cmp	r3, #18
 8000ddc:	d123      	bne.n	8000e26 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	08da      	lsrs	r2, r3, #3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	3208      	adds	r2, #8
 8000de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	220f      	movs	r2, #15
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	691a      	ldr	r2, [r3, #16]
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	f003 0307 	and.w	r3, r3, #7
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	08da      	lsrs	r2, r3, #3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3208      	adds	r2, #8
 8000e20:	69b9      	ldr	r1, [r7, #24]
 8000e22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	2203      	movs	r2, #3
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43db      	mvns	r3, r3
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f003 0203 	and.w	r2, r3, #3
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d00b      	beq.n	8000e7a <HAL_GPIO_Init+0xe6>
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d007      	beq.n	8000e7a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e6e:	2b11      	cmp	r3, #17
 8000e70:	d003      	beq.n	8000e7a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	2b12      	cmp	r3, #18
 8000e78:	d130      	bne.n	8000edc <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	2203      	movs	r2, #3
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	68da      	ldr	r2, [r3, #12]
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	091b      	lsrs	r3, r3, #4
 8000ec6:	f003 0201 	and.w	r2, r3, #1
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	689a      	ldr	r2, [r3, #8]
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	f000 80ae 	beq.w	8001076 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	4b5c      	ldr	r3, [pc, #368]	; (8001090 <HAL_GPIO_Init+0x2fc>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	4a5b      	ldr	r2, [pc, #364]	; (8001090 <HAL_GPIO_Init+0x2fc>)
 8000f24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f28:	6453      	str	r3, [r2, #68]	; 0x44
 8000f2a:	4b59      	ldr	r3, [pc, #356]	; (8001090 <HAL_GPIO_Init+0x2fc>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f36:	4a57      	ldr	r2, [pc, #348]	; (8001094 <HAL_GPIO_Init+0x300>)
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	089b      	lsrs	r3, r3, #2
 8000f3c:	3302      	adds	r3, #2
 8000f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	f003 0303 	and.w	r3, r3, #3
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	220f      	movs	r2, #15
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4013      	ands	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a4e      	ldr	r2, [pc, #312]	; (8001098 <HAL_GPIO_Init+0x304>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d025      	beq.n	8000fae <HAL_GPIO_Init+0x21a>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a4d      	ldr	r2, [pc, #308]	; (800109c <HAL_GPIO_Init+0x308>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d01f      	beq.n	8000faa <HAL_GPIO_Init+0x216>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a4c      	ldr	r2, [pc, #304]	; (80010a0 <HAL_GPIO_Init+0x30c>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d019      	beq.n	8000fa6 <HAL_GPIO_Init+0x212>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a4b      	ldr	r2, [pc, #300]	; (80010a4 <HAL_GPIO_Init+0x310>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d013      	beq.n	8000fa2 <HAL_GPIO_Init+0x20e>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a4a      	ldr	r2, [pc, #296]	; (80010a8 <HAL_GPIO_Init+0x314>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d00d      	beq.n	8000f9e <HAL_GPIO_Init+0x20a>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a49      	ldr	r2, [pc, #292]	; (80010ac <HAL_GPIO_Init+0x318>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d007      	beq.n	8000f9a <HAL_GPIO_Init+0x206>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a48      	ldr	r2, [pc, #288]	; (80010b0 <HAL_GPIO_Init+0x31c>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d101      	bne.n	8000f96 <HAL_GPIO_Init+0x202>
 8000f92:	2306      	movs	r3, #6
 8000f94:	e00c      	b.n	8000fb0 <HAL_GPIO_Init+0x21c>
 8000f96:	2307      	movs	r3, #7
 8000f98:	e00a      	b.n	8000fb0 <HAL_GPIO_Init+0x21c>
 8000f9a:	2305      	movs	r3, #5
 8000f9c:	e008      	b.n	8000fb0 <HAL_GPIO_Init+0x21c>
 8000f9e:	2304      	movs	r3, #4
 8000fa0:	e006      	b.n	8000fb0 <HAL_GPIO_Init+0x21c>
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e004      	b.n	8000fb0 <HAL_GPIO_Init+0x21c>
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	e002      	b.n	8000fb0 <HAL_GPIO_Init+0x21c>
 8000faa:	2301      	movs	r3, #1
 8000fac:	e000      	b.n	8000fb0 <HAL_GPIO_Init+0x21c>
 8000fae:	2300      	movs	r3, #0
 8000fb0:	69fa      	ldr	r2, [r7, #28]
 8000fb2:	f002 0203 	and.w	r2, r2, #3
 8000fb6:	0092      	lsls	r2, r2, #2
 8000fb8:	4093      	lsls	r3, r2
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fc0:	4934      	ldr	r1, [pc, #208]	; (8001094 <HAL_GPIO_Init+0x300>)
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	089b      	lsrs	r3, r3, #2
 8000fc6:	3302      	adds	r3, #2
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fce:	4b39      	ldr	r3, [pc, #228]	; (80010b4 <HAL_GPIO_Init+0x320>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ff2:	4a30      	ldr	r2, [pc, #192]	; (80010b4 <HAL_GPIO_Init+0x320>)
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ff8:	4b2e      	ldr	r3, [pc, #184]	; (80010b4 <HAL_GPIO_Init+0x320>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d003      	beq.n	800101c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	4313      	orrs	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800101c:	4a25      	ldr	r2, [pc, #148]	; (80010b4 <HAL_GPIO_Init+0x320>)
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001022:	4b24      	ldr	r3, [pc, #144]	; (80010b4 <HAL_GPIO_Init+0x320>)
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	43db      	mvns	r3, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4013      	ands	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001046:	4a1b      	ldr	r2, [pc, #108]	; (80010b4 <HAL_GPIO_Init+0x320>)
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800104c:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <HAL_GPIO_Init+0x320>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d003      	beq.n	8001070 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	4313      	orrs	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001070:	4a10      	ldr	r2, [pc, #64]	; (80010b4 <HAL_GPIO_Init+0x320>)
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3301      	adds	r3, #1
 800107a:	61fb      	str	r3, [r7, #28]
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	2b0f      	cmp	r3, #15
 8001080:	f67f ae96 	bls.w	8000db0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001084:	bf00      	nop
 8001086:	3724      	adds	r7, #36	; 0x24
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	40023800 	.word	0x40023800
 8001094:	40013800 	.word	0x40013800
 8001098:	40020000 	.word	0x40020000
 800109c:	40020400 	.word	0x40020400
 80010a0:	40020800 	.word	0x40020800
 80010a4:	40020c00 	.word	0x40020c00
 80010a8:	40021000 	.word	0x40021000
 80010ac:	40021400 	.word	0x40021400
 80010b0:	40021800 	.word	0x40021800
 80010b4:	40013c00 	.word	0x40013c00

080010b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	691a      	ldr	r2, [r3, #16]
 80010c8:	887b      	ldrh	r3, [r7, #2]
 80010ca:	4013      	ands	r3, r2
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d002      	beq.n	80010d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010d0:	2301      	movs	r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
 80010d4:	e001      	b.n	80010da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010d6:	2300      	movs	r3, #0
 80010d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010da:	7bfb      	ldrb	r3, [r7, #15]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	460b      	mov	r3, r1
 80010f2:	807b      	strh	r3, [r7, #2]
 80010f4:	4613      	mov	r3, r2
 80010f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010f8:	787b      	ldrb	r3, [r7, #1]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d003      	beq.n	8001106 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010fe:	887a      	ldrh	r2, [r7, #2]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001104:	e003      	b.n	800110e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001106:	887b      	ldrh	r3, [r7, #2]
 8001108:	041a      	lsls	r2, r3, #16
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	619a      	str	r2, [r3, #24]
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
	...

0800111c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d101      	bne.n	800112e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e10f      	b.n	800134e <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d106      	bne.n	8001148 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2200      	movs	r2, #0
 800113e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f008 faee 	bl	8009724 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2224      	movs	r2, #36	; 0x24
 800114c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f022 0201 	bic.w	r2, r2, #1
 800115e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001160:	f001 fd02 	bl	8002b68 <HAL_RCC_GetPCLK1Freq>
 8001164:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	4a7b      	ldr	r2, [pc, #492]	; (8001358 <HAL_I2C_Init+0x23c>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d807      	bhi.n	8001180 <HAL_I2C_Init+0x64>
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4a7a      	ldr	r2, [pc, #488]	; (800135c <HAL_I2C_Init+0x240>)
 8001174:	4293      	cmp	r3, r2
 8001176:	bf94      	ite	ls
 8001178:	2301      	movls	r3, #1
 800117a:	2300      	movhi	r3, #0
 800117c:	b2db      	uxtb	r3, r3
 800117e:	e006      	b.n	800118e <HAL_I2C_Init+0x72>
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4a77      	ldr	r2, [pc, #476]	; (8001360 <HAL_I2C_Init+0x244>)
 8001184:	4293      	cmp	r3, r2
 8001186:	bf94      	ite	ls
 8001188:	2301      	movls	r3, #1
 800118a:	2300      	movhi	r3, #0
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e0db      	b.n	800134e <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	4a72      	ldr	r2, [pc, #456]	; (8001364 <HAL_I2C_Init+0x248>)
 800119a:	fba2 2303 	umull	r2, r3, r2, r3
 800119e:	0c9b      	lsrs	r3, r3, #18
 80011a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	68ba      	ldr	r2, [r7, #8]
 80011b2:	430a      	orrs	r2, r1
 80011b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	6a1b      	ldr	r3, [r3, #32]
 80011bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	4a64      	ldr	r2, [pc, #400]	; (8001358 <HAL_I2C_Init+0x23c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d802      	bhi.n	80011d0 <HAL_I2C_Init+0xb4>
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	3301      	adds	r3, #1
 80011ce:	e009      	b.n	80011e4 <HAL_I2C_Init+0xc8>
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80011d6:	fb02 f303 	mul.w	r3, r2, r3
 80011da:	4a63      	ldr	r2, [pc, #396]	; (8001368 <HAL_I2C_Init+0x24c>)
 80011dc:	fba2 2303 	umull	r2, r3, r2, r3
 80011e0:	099b      	lsrs	r3, r3, #6
 80011e2:	3301      	adds	r3, #1
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	6812      	ldr	r2, [r2, #0]
 80011e8:	430b      	orrs	r3, r1
 80011ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80011f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	4956      	ldr	r1, [pc, #344]	; (8001358 <HAL_I2C_Init+0x23c>)
 8001200:	428b      	cmp	r3, r1
 8001202:	d80d      	bhi.n	8001220 <HAL_I2C_Init+0x104>
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	1e59      	subs	r1, r3, #1
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001212:	3301      	adds	r3, #1
 8001214:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001218:	2b04      	cmp	r3, #4
 800121a:	bf38      	it	cc
 800121c:	2304      	movcc	r3, #4
 800121e:	e04f      	b.n	80012c0 <HAL_I2C_Init+0x1a4>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d111      	bne.n	800124c <HAL_I2C_Init+0x130>
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	1e58      	subs	r0, r3, #1
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6859      	ldr	r1, [r3, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	440b      	add	r3, r1
 8001236:	fbb0 f3f3 	udiv	r3, r0, r3
 800123a:	3301      	adds	r3, #1
 800123c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001240:	2b00      	cmp	r3, #0
 8001242:	bf0c      	ite	eq
 8001244:	2301      	moveq	r3, #1
 8001246:	2300      	movne	r3, #0
 8001248:	b2db      	uxtb	r3, r3
 800124a:	e012      	b.n	8001272 <HAL_I2C_Init+0x156>
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	1e58      	subs	r0, r3, #1
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6859      	ldr	r1, [r3, #4]
 8001254:	460b      	mov	r3, r1
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	440b      	add	r3, r1
 800125a:	0099      	lsls	r1, r3, #2
 800125c:	440b      	add	r3, r1
 800125e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001262:	3301      	adds	r3, #1
 8001264:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001268:	2b00      	cmp	r3, #0
 800126a:	bf0c      	ite	eq
 800126c:	2301      	moveq	r3, #1
 800126e:	2300      	movne	r3, #0
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <HAL_I2C_Init+0x15e>
 8001276:	2301      	movs	r3, #1
 8001278:	e022      	b.n	80012c0 <HAL_I2C_Init+0x1a4>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d10e      	bne.n	80012a0 <HAL_I2C_Init+0x184>
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	1e58      	subs	r0, r3, #1
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6859      	ldr	r1, [r3, #4]
 800128a:	460b      	mov	r3, r1
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	440b      	add	r3, r1
 8001290:	fbb0 f3f3 	udiv	r3, r0, r3
 8001294:	3301      	adds	r3, #1
 8001296:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800129a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800129e:	e00f      	b.n	80012c0 <HAL_I2C_Init+0x1a4>
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	1e58      	subs	r0, r3, #1
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6859      	ldr	r1, [r3, #4]
 80012a8:	460b      	mov	r3, r1
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	440b      	add	r3, r1
 80012ae:	0099      	lsls	r1, r3, #2
 80012b0:	440b      	add	r3, r1
 80012b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80012b6:	3301      	adds	r3, #1
 80012b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012c0:	6879      	ldr	r1, [r7, #4]
 80012c2:	6809      	ldr	r1, [r1, #0]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69da      	ldr	r2, [r3, #28]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a1b      	ldr	r3, [r3, #32]
 80012da:	431a      	orrs	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	430a      	orrs	r2, r1
 80012e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80012ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	6911      	ldr	r1, [r2, #16]
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	68d2      	ldr	r2, [r2, #12]
 80012fa:	4311      	orrs	r1, r2
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	6812      	ldr	r2, [r2, #0]
 8001300:	430b      	orrs	r3, r1
 8001302:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	695a      	ldr	r2, [r3, #20]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	431a      	orrs	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	430a      	orrs	r2, r1
 800131e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f042 0201 	orr.w	r2, r2, #1
 800132e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2220      	movs	r2, #32
 800133a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	000186a0 	.word	0x000186a0
 800135c:	001e847f 	.word	0x001e847f
 8001360:	003d08ff 	.word	0x003d08ff
 8001364:	431bde83 	.word	0x431bde83
 8001368:	10624dd3 	.word	0x10624dd3

0800136c <HAL_NOR_Init>:
  * @param  Timing pointer to NOR control timing structure 
  * @param  ExtTiming pointer to NOR extended mode timing structure    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
  /* Check the NOR handle parameter */
  if(hnor == NULL)
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d101      	bne.n	8001382 <HAL_NOR_Init+0x16>
  {
     return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e043      	b.n	800140a <HAL_NOR_Init+0x9e>
  }
  
  if(hnor->State == HAL_NOR_STATE_RESET)
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d106      	bne.n	800139c <HAL_NOR_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 8001396:	68f8      	ldr	r0, [r7, #12]
 8001398:	f008 f81a 	bl	80093d0 <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }
  
  /* Initialize NOR control Interface */
  FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	3308      	adds	r3, #8
 80013a4:	4619      	mov	r1, r3
 80013a6:	4610      	mov	r0, r2
 80013a8:	f003 fd4c 	bl	8004e44 <FSMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank); 
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	6818      	ldr	r0, [r3, #0]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	461a      	mov	r2, r3
 80013b6:	68b9      	ldr	r1, [r7, #8]
 80013b8:	f003 fdb4 	bl	8004f24 <FSMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	6858      	ldr	r0, [r3, #4]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c8:	6879      	ldr	r1, [r7, #4]
 80013ca:	f003 fdff 	bl	8004fcc <FSMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	6892      	ldr	r2, [r2, #8]
 80013d6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	6892      	ldr	r2, [r2, #8]
 80013e2:	f041 0101 	orr.w	r1, r1, #1
 80013e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d103      	bne.n	80013fa <HAL_NOR_Init+0x8e>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 80013f2:	4b08      	ldr	r3, [pc, #32]	; (8001414 <HAL_NOR_Init+0xa8>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	e002      	b.n	8001400 <HAL_NOR_Init+0x94>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_NOR_Init+0xa8>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	601a      	str	r2, [r3, #0]
  }

  /* Check the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY; 
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2201      	movs	r2, #1
 8001404:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000204 	.word	0x20000204

08001418 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800141a:	b08f      	sub	sp, #60	; 0x3c
 800141c:	af0a      	add	r7, sp, #40	; 0x28
 800141e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e116      	b.n	8001658 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001436:	b2db      	uxtb	r3, r3
 8001438:	2b00      	cmp	r3, #0
 800143a:	d106      	bne.n	800144a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f008 ffcb 	bl	800a3e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2203      	movs	r2, #3
 800144e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800145a:	2b00      	cmp	r3, #0
 800145c:	d102      	bne.n	8001464 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f004 fc64 	bl	8005d36 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	603b      	str	r3, [r7, #0]
 8001474:	687e      	ldr	r6, [r7, #4]
 8001476:	466d      	mov	r5, sp
 8001478:	f106 0410 	add.w	r4, r6, #16
 800147c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800147e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001480:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001482:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001484:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001488:	e885 0003 	stmia.w	r5, {r0, r1}
 800148c:	1d33      	adds	r3, r6, #4
 800148e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001490:	6838      	ldr	r0, [r7, #0]
 8001492:	f004 fb3b 	bl	8005b0c <USB_CoreInit>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d005      	beq.n	80014a8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2202      	movs	r2, #2
 80014a0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e0d7      	b.n	8001658 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2100      	movs	r1, #0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f004 fc52 	bl	8005d58 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014b4:	2300      	movs	r3, #0
 80014b6:	73fb      	strb	r3, [r7, #15]
 80014b8:	e04a      	b.n	8001550 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014ba:	7bfa      	ldrb	r2, [r7, #15]
 80014bc:	6879      	ldr	r1, [r7, #4]
 80014be:	4613      	mov	r3, r2
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	1a9b      	subs	r3, r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	440b      	add	r3, r1
 80014c8:	333d      	adds	r3, #61	; 0x3d
 80014ca:	2201      	movs	r2, #1
 80014cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014ce:	7bfa      	ldrb	r2, [r7, #15]
 80014d0:	6879      	ldr	r1, [r7, #4]
 80014d2:	4613      	mov	r3, r2
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	1a9b      	subs	r3, r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	440b      	add	r3, r1
 80014dc:	333c      	adds	r3, #60	; 0x3c
 80014de:	7bfa      	ldrb	r2, [r7, #15]
 80014e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014e2:	7bfa      	ldrb	r2, [r7, #15]
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	b298      	uxth	r0, r3
 80014e8:	6879      	ldr	r1, [r7, #4]
 80014ea:	4613      	mov	r3, r2
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	1a9b      	subs	r3, r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	440b      	add	r3, r1
 80014f4:	3342      	adds	r3, #66	; 0x42
 80014f6:	4602      	mov	r2, r0
 80014f8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014fa:	7bfa      	ldrb	r2, [r7, #15]
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	4613      	mov	r3, r2
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	1a9b      	subs	r3, r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	440b      	add	r3, r1
 8001508:	333f      	adds	r3, #63	; 0x3f
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800150e:	7bfa      	ldrb	r2, [r7, #15]
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	4613      	mov	r3, r2
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	1a9b      	subs	r3, r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	440b      	add	r3, r1
 800151c:	3344      	adds	r3, #68	; 0x44
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001522:	7bfa      	ldrb	r2, [r7, #15]
 8001524:	6879      	ldr	r1, [r7, #4]
 8001526:	4613      	mov	r3, r2
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	1a9b      	subs	r3, r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	440b      	add	r3, r1
 8001530:	3348      	adds	r3, #72	; 0x48
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001536:	7bfa      	ldrb	r2, [r7, #15]
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	4613      	mov	r3, r2
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	1a9b      	subs	r3, r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	440b      	add	r3, r1
 8001544:	3350      	adds	r3, #80	; 0x50
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800154a:	7bfb      	ldrb	r3, [r7, #15]
 800154c:	3301      	adds	r3, #1
 800154e:	73fb      	strb	r3, [r7, #15]
 8001550:	7bfa      	ldrb	r2, [r7, #15]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	429a      	cmp	r2, r3
 8001558:	d3af      	bcc.n	80014ba <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800155a:	2300      	movs	r3, #0
 800155c:	73fb      	strb	r3, [r7, #15]
 800155e:	e044      	b.n	80015ea <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001560:	7bfa      	ldrb	r2, [r7, #15]
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	4613      	mov	r3, r2
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	1a9b      	subs	r3, r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	440b      	add	r3, r1
 800156e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001572:	2200      	movs	r2, #0
 8001574:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001576:	7bfa      	ldrb	r2, [r7, #15]
 8001578:	6879      	ldr	r1, [r7, #4]
 800157a:	4613      	mov	r3, r2
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	1a9b      	subs	r3, r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	440b      	add	r3, r1
 8001584:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001588:	7bfa      	ldrb	r2, [r7, #15]
 800158a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800158c:	7bfa      	ldrb	r2, [r7, #15]
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	4613      	mov	r3, r2
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	1a9b      	subs	r3, r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	440b      	add	r3, r1
 800159a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800159e:	2200      	movs	r2, #0
 80015a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015a2:	7bfa      	ldrb	r2, [r7, #15]
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	4613      	mov	r3, r2
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	1a9b      	subs	r3, r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	440b      	add	r3, r1
 80015b0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015b8:	7bfa      	ldrb	r2, [r7, #15]
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	4613      	mov	r3, r2
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	1a9b      	subs	r3, r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	440b      	add	r3, r1
 80015c6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015ce:	7bfa      	ldrb	r2, [r7, #15]
 80015d0:	6879      	ldr	r1, [r7, #4]
 80015d2:	4613      	mov	r3, r2
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	1a9b      	subs	r3, r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	440b      	add	r3, r1
 80015dc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
 80015e6:	3301      	adds	r3, #1
 80015e8:	73fb      	strb	r3, [r7, #15]
 80015ea:	7bfa      	ldrb	r2, [r7, #15]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d3b5      	bcc.n	8001560 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	603b      	str	r3, [r7, #0]
 80015fa:	687e      	ldr	r6, [r7, #4]
 80015fc:	466d      	mov	r5, sp
 80015fe:	f106 0410 	add.w	r4, r6, #16
 8001602:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001604:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001606:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001608:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800160a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800160e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001612:	1d33      	adds	r3, r6, #4
 8001614:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001616:	6838      	ldr	r0, [r7, #0]
 8001618:	f004 fbc8 	bl	8005dac <USB_DevInit>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d005      	beq.n	800162e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2202      	movs	r2, #2
 8001626:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e014      	b.n	8001658 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2201      	movs	r2, #1
 800163a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001642:	2b01      	cmp	r3, #1
 8001644:	d102      	bne.n	800164c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f001 f898 	bl	800277c <HAL_PCDEx_ActivateLPM>
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f005 fbb0 	bl	8006db6 <USB_DevDisconnect>

  return HAL_OK;
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001660 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001674:	2b01      	cmp	r3, #1
 8001676:	d101      	bne.n	800167c <HAL_PCD_Start+0x1c>
 8001678:	2302      	movs	r3, #2
 800167a:	e020      	b.n	80016be <HAL_PCD_Start+0x5e>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001688:	2b01      	cmp	r3, #1
 800168a:	d109      	bne.n	80016a0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001690:	2b01      	cmp	r3, #1
 8001692:	d005      	beq.n	80016a0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001698:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f005 fb6e 	bl	8006d86 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f004 fb30 	bl	8005d14 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80016c6:	b590      	push	{r4, r7, lr}
 80016c8:	b08d      	sub	sp, #52	; 0x34
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80016d4:	6a3b      	ldr	r3, [r7, #32]
 80016d6:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4618      	mov	r0, r3
 80016de:	f005 fc15 	bl	8006f0c <USB_GetMode>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f040 83bb 	bne.w	8001e60 <HAL_PCD_IRQHandler+0x79a>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f005 fb79 	bl	8006de6 <USB_ReadInterrupts>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f000 83b1 	beq.w	8001e5e <HAL_PCD_IRQHandler+0x798>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f005 fb70 	bl	8006de6 <USB_ReadInterrupts>
 8001706:	4603      	mov	r3, r0
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b02      	cmp	r3, #2
 800170e:	d107      	bne.n	8001720 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	695a      	ldr	r2, [r3, #20]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f002 0202 	and.w	r2, r2, #2
 800171e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f005 fb5e 	bl	8006de6 <USB_ReadInterrupts>
 800172a:	4603      	mov	r3, r0
 800172c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001730:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001734:	d17b      	bne.n	800182e <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8001736:	2300      	movs	r3, #0
 8001738:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f005 fb64 	bl	8006e0c <USB_ReadDevAllOutEpInterrupt>
 8001744:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001746:	e06f      	b.n	8001828 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	d064      	beq.n	800181c <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001758:	b2d2      	uxtb	r2, r2
 800175a:	4611      	mov	r1, r2
 800175c:	4618      	mov	r0, r3
 800175e:	f005 fb89 	bl	8006e74 <USB_ReadDevOutEPInterrupt>
 8001762:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	2b00      	cmp	r3, #0
 800176c:	d00c      	beq.n	8001788 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800176e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001770:	015a      	lsls	r2, r3, #5
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	4413      	add	r3, r2
 8001776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800177a:	461a      	mov	r2, r3
 800177c:	2301      	movs	r3, #1
 800177e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001780:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f000 fe3a 	bl	80023fc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	f003 0308 	and.w	r3, r3, #8
 800178e:	2b00      	cmp	r3, #0
 8001790:	d00c      	beq.n	80017ac <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001792:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f000 ff39 	bl	800260c <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	015a      	lsls	r2, r3, #5
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	4413      	add	r3, r2
 80017a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017a6:	461a      	mov	r2, r3
 80017a8:	2308      	movs	r3, #8
 80017aa:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	f003 0310 	and.w	r3, r3, #16
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d008      	beq.n	80017c8 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b8:	015a      	lsls	r2, r3, #5
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	4413      	add	r3, r2
 80017be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017c2:	461a      	mov	r2, r3
 80017c4:	2310      	movs	r3, #16
 80017c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	f003 0320 	and.w	r3, r3, #32
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d015      	beq.n	80017fe <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d108      	bne.n	80017ec <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6818      	ldr	r0, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80017e4:	461a      	mov	r2, r3
 80017e6:	2101      	movs	r1, #1
 80017e8:	f005 fbd4 	bl	8006f94 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80017ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ee:	015a      	lsls	r2, r3, #5
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	4413      	add	r3, r2
 80017f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017f8:	461a      	mov	r2, r3
 80017fa:	2320      	movs	r3, #32
 80017fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d009      	beq.n	800181c <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180a:	015a      	lsls	r2, r3, #5
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	4413      	add	r3, r2
 8001810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001814:	461a      	mov	r2, r3
 8001816:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800181a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181e:	3301      	adds	r3, #1
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001824:	085b      	lsrs	r3, r3, #1
 8001826:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800182a:	2b00      	cmp	r3, #0
 800182c:	d18c      	bne.n	8001748 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f005 fad7 	bl	8006de6 <USB_ReadInterrupts>
 8001838:	4603      	mov	r3, r0
 800183a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800183e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001842:	f040 80c4 	bne.w	80019ce <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f005 faf8 	bl	8006e40 <USB_ReadDevAllInEpInterrupt>
 8001850:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001852:	2300      	movs	r3, #0
 8001854:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001856:	e0b6      	b.n	80019c6 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	2b00      	cmp	r3, #0
 8001860:	f000 80ab 	beq.w	80019ba <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	4611      	mov	r1, r2
 800186e:	4618      	mov	r0, r3
 8001870:	f005 fb1e 	bl	8006eb0 <USB_ReadDevInEPInterrupt>
 8001874:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	2b00      	cmp	r3, #0
 800187e:	d05b      	beq.n	8001938 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	2201      	movs	r2, #1
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	43db      	mvns	r3, r3
 800189a:	69f9      	ldr	r1, [r7, #28]
 800189c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80018a0:	4013      	ands	r3, r2
 80018a2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a6:	015a      	lsls	r2, r3, #5
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	4413      	add	r3, r2
 80018ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018b0:	461a      	mov	r2, r3
 80018b2:	2301      	movs	r3, #1
 80018b4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d11b      	bne.n	80018f6 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018c2:	4613      	mov	r3, r2
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	1a9b      	subs	r3, r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	440b      	add	r3, r1
 80018cc:	3348      	adds	r3, #72	; 0x48
 80018ce:	6819      	ldr	r1, [r3, #0]
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018d4:	4613      	mov	r3, r2
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	1a9b      	subs	r3, r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4403      	add	r3, r0
 80018de:	3344      	adds	r3, #68	; 0x44
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4419      	add	r1, r3
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018e8:	4613      	mov	r3, r2
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	1a9b      	subs	r3, r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4403      	add	r3, r0
 80018f2:	3348      	adds	r3, #72	; 0x48
 80018f4:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	4619      	mov	r1, r3
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f008 fdf0 	bl	800a4e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	691b      	ldr	r3, [r3, #16]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d116      	bne.n	8001938 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	2b00      	cmp	r3, #0
 800190e:	d113      	bne.n	8001938 <HAL_PCD_IRQHandler+0x272>
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001914:	4613      	mov	r3, r2
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	1a9b      	subs	r3, r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	440b      	add	r3, r1
 800191e:	3350      	adds	r3, #80	; 0x50
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d108      	bne.n	8001938 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6818      	ldr	r0, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001930:	461a      	mov	r2, r3
 8001932:	2101      	movs	r1, #1
 8001934:	f005 fb2e 	bl	8006f94 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	f003 0308 	and.w	r3, r3, #8
 800193e:	2b00      	cmp	r3, #0
 8001940:	d008      	beq.n	8001954 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	015a      	lsls	r2, r3, #5
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	4413      	add	r3, r2
 800194a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800194e:	461a      	mov	r2, r3
 8001950:	2308      	movs	r3, #8
 8001952:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	f003 0310 	and.w	r3, r3, #16
 800195a:	2b00      	cmp	r3, #0
 800195c:	d008      	beq.n	8001970 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	015a      	lsls	r2, r3, #5
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	4413      	add	r3, r2
 8001966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800196a:	461a      	mov	r2, r3
 800196c:	2310      	movs	r3, #16
 800196e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001976:	2b00      	cmp	r3, #0
 8001978:	d008      	beq.n	800198c <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	015a      	lsls	r2, r3, #5
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	4413      	add	r3, r2
 8001982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001986:	461a      	mov	r2, r3
 8001988:	2340      	movs	r3, #64	; 0x40
 800198a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d008      	beq.n	80019a8 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	015a      	lsls	r2, r3, #5
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	4413      	add	r3, r2
 800199e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019a2:	461a      	mov	r2, r3
 80019a4:	2302      	movs	r3, #2
 80019a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80019b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 fc94 	bl	80022e2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	3301      	adds	r3, #1
 80019be:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80019c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c2:	085b      	lsrs	r3, r3, #1
 80019c4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80019c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f47f af45 	bne.w	8001858 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f005 fa07 	bl	8006de6 <USB_ReadInterrupts>
 80019d8:	4603      	mov	r3, r0
 80019da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80019de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80019e2:	d122      	bne.n	8001a2a <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	69fa      	ldr	r2, [r7, #28]
 80019ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019f2:	f023 0301 	bic.w	r3, r3, #1
 80019f6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d108      	bne.n	8001a14 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f000 fed9 	bl	80027c4 <HAL_PCDEx_LPM_Callback>
 8001a12:	e002      	b.n	8001a1a <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f008 fdd1 	bl	800a5bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	695a      	ldr	r2, [r3, #20]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001a28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f005 f9d9 	bl	8006de6 <USB_ReadInterrupts>
 8001a34:	4603      	mov	r3, r0
 8001a36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a3e:	d112      	bne.n	8001a66 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d102      	bne.n	8001a56 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f008 fd8d 	bl	800a570 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	695a      	ldr	r2, [r3, #20]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001a64:	615a      	str	r2, [r3, #20]
    }
    #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f005 f9bb 	bl	8006de6 <USB_ReadInterrupts>
 8001a70:	4603      	mov	r3, r0
 8001a72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001a7a:	d121      	bne.n	8001ac0 <HAL_PCD_IRQHandler+0x3fa>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	695a      	ldr	r2, [r3, #20]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001a8a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d111      	bne.n	8001aba <HAL_PCD_IRQHandler+0x3f4>
      {
        hpcd->LPM_State = LPM_L1;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aa4:	089b      	lsrs	r3, r3, #2
 8001aa6:	f003 020f 	and.w	r2, r3, #15
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 fe86 	bl	80027c4 <HAL_PCDEx_LPM_Callback>
 8001ab8:	e002      	b.n	8001ac0 <HAL_PCD_IRQHandler+0x3fa>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f008 fd58 	bl	800a570 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f005 f98e 	bl	8006de6 <USB_ReadInterrupts>
 8001aca:	4603      	mov	r3, r0
 8001acc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ad4:	f040 80a7 	bne.w	8001c26 <HAL_PCD_IRQHandler+0x560>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	69fa      	ldr	r2, [r7, #28]
 8001ae2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ae6:	f023 0301 	bic.w	r3, r3, #1
 8001aea:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2110      	movs	r1, #16
 8001af2:	4618      	mov	r0, r3
 8001af4:	f004 fac6 	bl	8006084 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001af8:	2300      	movs	r3, #0
 8001afa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001afc:	e036      	b.n	8001b6c <HAL_PCD_IRQHandler+0x4a6>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b00:	015a      	lsls	r2, r3, #5
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	4413      	add	r3, r2
 8001b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001b10:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b14:	015a      	lsls	r2, r3, #5
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	4413      	add	r3, r2
 8001b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b22:	0151      	lsls	r1, r2, #5
 8001b24:	69fa      	ldr	r2, [r7, #28]
 8001b26:	440a      	add	r2, r1
 8001b28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001b2c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b30:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b34:	015a      	lsls	r2, r3, #5
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	4413      	add	r3, r2
 8001b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b3e:	461a      	mov	r2, r3
 8001b40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001b44:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b48:	015a      	lsls	r2, r3, #5
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b56:	0151      	lsls	r1, r2, #5
 8001b58:	69fa      	ldr	r2, [r7, #28]
 8001b5a:	440a      	add	r2, r1
 8001b5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001b60:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b64:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b68:	3301      	adds	r3, #1
 8001b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d3c3      	bcc.n	8001afe <HAL_PCD_IRQHandler+0x438>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	69fa      	ldr	r2, [r7, #28]
 8001b80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b84:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001b88:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d016      	beq.n	8001bc0 <HAL_PCD_IRQHandler+0x4fa>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b9c:	69fa      	ldr	r2, [r7, #28]
 8001b9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ba2:	f043 030b 	orr.w	r3, r3, #11
 8001ba6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb2:	69fa      	ldr	r2, [r7, #28]
 8001bb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bb8:	f043 030b 	orr.w	r3, r3, #11
 8001bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bbe:	e015      	b.n	8001bec <HAL_PCD_IRQHandler+0x526>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bc6:	695b      	ldr	r3, [r3, #20]
 8001bc8:	69fa      	ldr	r2, [r7, #28]
 8001bca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001bd2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001bd6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	69fa      	ldr	r2, [r7, #28]
 8001be2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001be6:	f043 030b 	orr.w	r3, r3, #11
 8001bea:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	69fa      	ldr	r2, [r7, #28]
 8001bf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bfa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001bfe:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6818      	ldr	r0, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c10:	461a      	mov	r2, r3
 8001c12:	f005 f9bf 	bl	8006f94 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	695a      	ldr	r2, [r3, #20]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001c24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f005 f8db 	bl	8006de6 <USB_ReadInterrupts>
 8001c30:	4603      	mov	r3, r0
 8001c32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c3a:	d124      	bne.n	8001c86 <HAL_PCD_IRQHandler+0x5c0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f005 f971 	bl	8006f28 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f004 fa7b 	bl	8006146 <USB_GetDevSpeed>
 8001c50:	4603      	mov	r3, r0
 8001c52:	461a      	mov	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681c      	ldr	r4, [r3, #0]
 8001c5c:	f000 ff78 	bl	8002b50 <HAL_RCC_GetHCLKFreq>
 8001c60:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4620      	mov	r0, r4
 8001c6c:	f003 ffb0 	bl	8005bd0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f008 fc5e 	bl	800a532 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	695a      	ldr	r2, [r3, #20]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001c84:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f005 f8ab 	bl	8006de6 <USB_ReadInterrupts>
 8001c90:	4603      	mov	r3, r0
 8001c92:	f003 0310 	and.w	r3, r3, #16
 8001c96:	2b10      	cmp	r3, #16
 8001c98:	d161      	bne.n	8001d5e <HAL_PCD_IRQHandler+0x698>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	699a      	ldr	r2, [r3, #24]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 0210 	bic.w	r2, r2, #16
 8001ca8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001caa:	6a3b      	ldr	r3, [r7, #32]
 8001cac:	6a1b      	ldr	r3, [r3, #32]
 8001cae:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	f003 020f 	and.w	r2, r3, #15
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	1a9b      	subs	r3, r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	3304      	adds	r3, #4
 8001cc8:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	0c5b      	lsrs	r3, r3, #17
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d124      	bne.n	8001d20 <HAL_PCD_IRQHandler+0x65a>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001cdc:	4013      	ands	r3, r2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d035      	beq.n	8001d4e <HAL_PCD_IRQHandler+0x688>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	091b      	lsrs	r3, r3, #4
 8001cea:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001cec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	6a38      	ldr	r0, [r7, #32]
 8001cf6:	f004 ff23 	bl	8006b40 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	68da      	ldr	r2, [r3, #12]
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	091b      	lsrs	r3, r3, #4
 8001d02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d06:	441a      	add	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	699a      	ldr	r2, [r3, #24]
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	091b      	lsrs	r3, r3, #4
 8001d14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d18:	441a      	add	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	619a      	str	r2, [r3, #24]
 8001d1e:	e016      	b.n	8001d4e <HAL_PCD_IRQHandler+0x688>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	0c5b      	lsrs	r3, r3, #17
 8001d24:	f003 030f 	and.w	r3, r3, #15
 8001d28:	2b06      	cmp	r3, #6
 8001d2a:	d110      	bne.n	8001d4e <HAL_PCD_IRQHandler+0x688>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d32:	2208      	movs	r2, #8
 8001d34:	4619      	mov	r1, r3
 8001d36:	6a38      	ldr	r0, [r7, #32]
 8001d38:	f004 ff02 	bl	8006b40 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	699a      	ldr	r2, [r3, #24]
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	091b      	lsrs	r3, r3, #4
 8001d44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d48:	441a      	add	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	699a      	ldr	r2, [r3, #24]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f042 0210 	orr.w	r2, r2, #16
 8001d5c:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f005 f83f 	bl	8006de6 <USB_ReadInterrupts>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	2b08      	cmp	r3, #8
 8001d70:	d10a      	bne.n	8001d88 <HAL_PCD_IRQHandler+0x6c2>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f008 fbcf 	bl	800a516 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	695a      	ldr	r2, [r3, #20]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f002 0208 	and.w	r2, r2, #8
 8001d86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f005 f82a 	bl	8006de6 <USB_ReadInterrupts>
 8001d92:	4603      	mov	r3, r0
 8001d94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d9c:	d10f      	bne.n	8001dbe <HAL_PCD_IRQHandler+0x6f8>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	4619      	mov	r1, r3
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f008 fc27 	bl	800a5fc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	695a      	ldr	r2, [r3, #20]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001dbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f005 f80f 	bl	8006de6 <USB_ReadInterrupts>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001dd2:	d10f      	bne.n	8001df4 <HAL_PCD_IRQHandler+0x72e>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	4619      	mov	r1, r3
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f008 fbfa 	bl	800a5d8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	695a      	ldr	r2, [r3, #20]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001df2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f004 fff4 	bl	8006de6 <USB_ReadInterrupts>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e08:	d10a      	bne.n	8001e20 <HAL_PCD_IRQHandler+0x75a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f008 fc08 	bl	800a620 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	695a      	ldr	r2, [r3, #20]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001e1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f004 ffde 	bl	8006de6 <USB_ReadInterrupts>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	2b04      	cmp	r3, #4
 8001e32:	d115      	bne.n	8001e60 <HAL_PCD_IRQHandler+0x79a>
    {
      temp = hpcd->Instance->GOTGINT;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	f003 0304 	and.w	r3, r3, #4
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d002      	beq.n	8001e4c <HAL_PCD_IRQHandler+0x786>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f008 fbf8 	bl	800a63c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6859      	ldr	r1, [r3, #4]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	605a      	str	r2, [r3, #4]
 8001e5c:	e000      	b.n	8001e60 <HAL_PCD_IRQHandler+0x79a>
      return;
 8001e5e:	bf00      	nop
    }
  }
}
 8001e60:	3734      	adds	r7, #52	; 0x34
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd90      	pop	{r4, r7, pc}

08001e66 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
 8001e6e:	460b      	mov	r3, r1
 8001e70:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d101      	bne.n	8001e80 <HAL_PCD_SetAddress+0x1a>
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	e013      	b.n	8001ea8 <HAL_PCD_SetAddress+0x42>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	78fa      	ldrb	r2, [r7, #3]
 8001e8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	78fa      	ldrb	r2, [r7, #3]
 8001e96:	4611      	mov	r1, r2
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f004 ff4e 	bl	8006d3a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	4608      	mov	r0, r1
 8001eba:	4611      	mov	r1, r2
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	70fb      	strb	r3, [r7, #3]
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	803b      	strh	r3, [r7, #0]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ece:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	da0f      	bge.n	8001ef6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ed6:	78fb      	ldrb	r3, [r7, #3]
 8001ed8:	f003 020f 	and.w	r2, r3, #15
 8001edc:	4613      	mov	r3, r2
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	1a9b      	subs	r3, r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	3338      	adds	r3, #56	; 0x38
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	4413      	add	r3, r2
 8001eea:	3304      	adds	r3, #4
 8001eec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	705a      	strb	r2, [r3, #1]
 8001ef4:	e00f      	b.n	8001f16 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ef6:	78fb      	ldrb	r3, [r7, #3]
 8001ef8:	f003 020f 	and.w	r2, r3, #15
 8001efc:	4613      	mov	r3, r2
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	1a9b      	subs	r3, r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2200      	movs	r2, #0
 8001f14:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f16:	78fb      	ldrb	r3, [r7, #3]
 8001f18:	f003 030f 	and.w	r3, r3, #15
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f22:	883a      	ldrh	r2, [r7, #0]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	78ba      	ldrb	r2, [r7, #2]
 8001f2c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	785b      	ldrb	r3, [r3, #1]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d004      	beq.n	8001f40 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f40:	78bb      	ldrb	r3, [r7, #2]
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d102      	bne.n	8001f4c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d101      	bne.n	8001f5a <HAL_PCD_EP_Open+0xaa>
 8001f56:	2302      	movs	r3, #2
 8001f58:	e00e      	b.n	8001f78 <HAL_PCD_EP_Open+0xc8>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68f9      	ldr	r1, [r7, #12]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f004 f911 	bl	8006190 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001f76:	7afb      	ldrb	r3, [r7, #11]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	da0f      	bge.n	8001fb4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f94:	78fb      	ldrb	r3, [r7, #3]
 8001f96:	f003 020f 	and.w	r2, r3, #15
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	1a9b      	subs	r3, r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	3338      	adds	r3, #56	; 0x38
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	3304      	adds	r3, #4
 8001faa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	705a      	strb	r2, [r3, #1]
 8001fb2:	e00f      	b.n	8001fd4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fb4:	78fb      	ldrb	r3, [r7, #3]
 8001fb6:	f003 020f 	and.w	r2, r3, #15
 8001fba:	4613      	mov	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	1a9b      	subs	r3, r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	4413      	add	r3, r2
 8001fca:	3304      	adds	r3, #4
 8001fcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001fd4:	78fb      	ldrb	r3, [r7, #3]
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d101      	bne.n	8001fee <HAL_PCD_EP_Close+0x6e>
 8001fea:	2302      	movs	r3, #2
 8001fec:	e00e      	b.n	800200c <HAL_PCD_EP_Close+0x8c>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68f9      	ldr	r1, [r7, #12]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f004 f94f 	bl	80062a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	607a      	str	r2, [r7, #4]
 800201e:	603b      	str	r3, [r7, #0]
 8002020:	460b      	mov	r3, r1
 8002022:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002024:	7afb      	ldrb	r3, [r7, #11]
 8002026:	f003 020f 	and.w	r2, r3, #15
 800202a:	4613      	mov	r3, r2
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	1a9b      	subs	r3, r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	4413      	add	r3, r2
 800203a:	3304      	adds	r3, #4
 800203c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	2200      	movs	r2, #0
 800204e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	2200      	movs	r2, #0
 8002054:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002056:	7afb      	ldrb	r3, [r7, #11]
 8002058:	f003 030f 	and.w	r3, r3, #15
 800205c:	b2da      	uxtb	r2, r3
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d102      	bne.n	8002070 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002070:	7afb      	ldrb	r3, [r7, #11]
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	2b00      	cmp	r3, #0
 8002078:	d109      	bne.n	800208e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6818      	ldr	r0, [r3, #0]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	b2db      	uxtb	r3, r3
 8002084:	461a      	mov	r2, r3
 8002086:	6979      	ldr	r1, [r7, #20]
 8002088:	f004 fbd2 	bl	8006830 <USB_EP0StartXfer>
 800208c:	e008      	b.n	80020a0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6818      	ldr	r0, [r3, #0]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	b2db      	uxtb	r3, r3
 8002098:	461a      	mov	r2, r3
 800209a:	6979      	ldr	r1, [r7, #20]
 800209c:	f004 f984 	bl	80063a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
 80020b2:	460b      	mov	r3, r1
 80020b4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80020b6:	78fb      	ldrb	r3, [r7, #3]
 80020b8:	f003 020f 	and.w	r2, r3, #15
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	4613      	mov	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	1a9b      	subs	r3, r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	440b      	add	r3, r1
 80020c8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80020cc:	681b      	ldr	r3, [r3, #0]
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b086      	sub	sp, #24
 80020de:	af00      	add	r7, sp, #0
 80020e0:	60f8      	str	r0, [r7, #12]
 80020e2:	607a      	str	r2, [r7, #4]
 80020e4:	603b      	str	r3, [r7, #0]
 80020e6:	460b      	mov	r3, r1
 80020e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020ea:	7afb      	ldrb	r3, [r7, #11]
 80020ec:	f003 020f 	and.w	r2, r3, #15
 80020f0:	4613      	mov	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	3338      	adds	r3, #56	; 0x38
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	4413      	add	r3, r2
 80020fe:	3304      	adds	r3, #4
 8002100:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	2200      	movs	r2, #0
 8002112:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	2201      	movs	r2, #1
 8002118:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800211a:	7afb      	ldrb	r3, [r7, #11]
 800211c:	f003 030f 	and.w	r3, r3, #15
 8002120:	b2da      	uxtb	r2, r3
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d102      	bne.n	8002134 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002134:	7afb      	ldrb	r3, [r7, #11]
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	2b00      	cmp	r3, #0
 800213c:	d109      	bne.n	8002152 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6818      	ldr	r0, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	b2db      	uxtb	r3, r3
 8002148:	461a      	mov	r2, r3
 800214a:	6979      	ldr	r1, [r7, #20]
 800214c:	f004 fb70 	bl	8006830 <USB_EP0StartXfer>
 8002150:	e008      	b.n	8002164 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6818      	ldr	r0, [r3, #0]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	b2db      	uxtb	r3, r3
 800215c:	461a      	mov	r2, r3
 800215e:	6979      	ldr	r1, [r7, #20]
 8002160:	f004 f922 	bl	80063a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b084      	sub	sp, #16
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
 8002176:	460b      	mov	r3, r1
 8002178:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800217a:	78fb      	ldrb	r3, [r7, #3]
 800217c:	f003 020f 	and.w	r2, r3, #15
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	429a      	cmp	r2, r3
 8002186:	d901      	bls.n	800218c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e050      	b.n	800222e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800218c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002190:	2b00      	cmp	r3, #0
 8002192:	da0f      	bge.n	80021b4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002194:	78fb      	ldrb	r3, [r7, #3]
 8002196:	f003 020f 	and.w	r2, r3, #15
 800219a:	4613      	mov	r3, r2
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	1a9b      	subs	r3, r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	3338      	adds	r3, #56	; 0x38
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	4413      	add	r3, r2
 80021a8:	3304      	adds	r3, #4
 80021aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2201      	movs	r2, #1
 80021b0:	705a      	strb	r2, [r3, #1]
 80021b2:	e00d      	b.n	80021d0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80021b4:	78fa      	ldrb	r2, [r7, #3]
 80021b6:	4613      	mov	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	1a9b      	subs	r3, r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	4413      	add	r3, r2
 80021c6:	3304      	adds	r3, #4
 80021c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2200      	movs	r2, #0
 80021ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2201      	movs	r2, #1
 80021d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021d6:	78fb      	ldrb	r3, [r7, #3]
 80021d8:	f003 030f 	and.w	r3, r3, #15
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d101      	bne.n	80021f0 <HAL_PCD_EP_SetStall+0x82>
 80021ec:	2302      	movs	r3, #2
 80021ee:	e01e      	b.n	800222e <HAL_PCD_EP_SetStall+0xc0>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68f9      	ldr	r1, [r7, #12]
 80021fe:	4618      	mov	r0, r3
 8002200:	f004 fcc7 	bl	8006b92 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002204:	78fb      	ldrb	r3, [r7, #3]
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10a      	bne.n	8002224 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6818      	ldr	r0, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	b2d9      	uxtb	r1, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800221e:	461a      	mov	r2, r3
 8002220:	f004 feb8 	bl	8006f94 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b084      	sub	sp, #16
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
 800223e:	460b      	mov	r3, r1
 8002240:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002242:	78fb      	ldrb	r3, [r7, #3]
 8002244:	f003 020f 	and.w	r2, r3, #15
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	429a      	cmp	r2, r3
 800224e:	d901      	bls.n	8002254 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e042      	b.n	80022da <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002254:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002258:	2b00      	cmp	r3, #0
 800225a:	da0f      	bge.n	800227c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800225c:	78fb      	ldrb	r3, [r7, #3]
 800225e:	f003 020f 	and.w	r2, r3, #15
 8002262:	4613      	mov	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	1a9b      	subs	r3, r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	3338      	adds	r3, #56	; 0x38
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	4413      	add	r3, r2
 8002270:	3304      	adds	r3, #4
 8002272:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2201      	movs	r2, #1
 8002278:	705a      	strb	r2, [r3, #1]
 800227a:	e00f      	b.n	800229c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800227c:	78fb      	ldrb	r3, [r7, #3]
 800227e:	f003 020f 	and.w	r2, r3, #15
 8002282:	4613      	mov	r3, r2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	1a9b      	subs	r3, r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	4413      	add	r3, r2
 8002292:	3304      	adds	r3, #4
 8002294:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022a2:	78fb      	ldrb	r3, [r7, #3]
 80022a4:	f003 030f 	and.w	r3, r3, #15
 80022a8:	b2da      	uxtb	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d101      	bne.n	80022bc <HAL_PCD_EP_ClrStall+0x86>
 80022b8:	2302      	movs	r3, #2
 80022ba:	e00e      	b.n	80022da <HAL_PCD_EP_ClrStall+0xa4>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68f9      	ldr	r1, [r7, #12]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f004 fccf 	bl	8006c6e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b08a      	sub	sp, #40	; 0x28
 80022e6:	af02      	add	r7, sp, #8
 80022e8:	6078      	str	r0, [r7, #4]
 80022ea:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	4613      	mov	r3, r2
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	1a9b      	subs	r3, r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	3338      	adds	r3, #56	; 0x38
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	4413      	add	r3, r2
 8002306:	3304      	adds	r3, #4
 8002308:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	699a      	ldr	r2, [r3, #24]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	429a      	cmp	r2, r3
 8002314:	d901      	bls.n	800231a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e06c      	b.n	80023f4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	695a      	ldr	r2, [r3, #20]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	69fa      	ldr	r2, [r7, #28]
 800232c:	429a      	cmp	r2, r3
 800232e:	d902      	bls.n	8002336 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	3303      	adds	r3, #3
 800233a:	089b      	lsrs	r3, r3, #2
 800233c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800233e:	e02b      	b.n	8002398 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	695a      	ldr	r2, [r3, #20]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	69fa      	ldr	r2, [r7, #28]
 8002352:	429a      	cmp	r2, r3
 8002354:	d902      	bls.n	800235c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	3303      	adds	r3, #3
 8002360:	089b      	lsrs	r3, r3, #2
 8002362:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	68d9      	ldr	r1, [r3, #12]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	b2da      	uxtb	r2, r3
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002374:	b2db      	uxtb	r3, r3
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	4603      	mov	r3, r0
 800237a:	6978      	ldr	r0, [r7, #20]
 800237c:	f004 fbab 	bl	8006ad6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	68da      	ldr	r2, [r3, #12]
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	441a      	add	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	699a      	ldr	r2, [r3, #24]
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	441a      	add	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	015a      	lsls	r2, r3, #5
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	4413      	add	r3, r2
 80023a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d809      	bhi.n	80023c2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	699a      	ldr	r2, [r3, #24]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d203      	bcs.n	80023c2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1be      	bne.n	8002340 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	695a      	ldr	r2, [r3, #20]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d811      	bhi.n	80023f2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	f003 030f 	and.w	r3, r3, #15
 80023d4:	2201      	movs	r2, #1
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	43db      	mvns	r3, r3
 80023e8:	6939      	ldr	r1, [r7, #16]
 80023ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80023ee:	4013      	ands	r3, r2
 80023f0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3720      	adds	r7, #32
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	333c      	adds	r3, #60	; 0x3c
 8002414:	3304      	adds	r3, #4
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	015a      	lsls	r2, r3, #5
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	4413      	add	r3, r2
 8002422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	2b01      	cmp	r3, #1
 8002430:	f040 80b3 	bne.w	800259a <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	f003 0308 	and.w	r3, r3, #8
 800243a:	2b00      	cmp	r3, #0
 800243c:	d028      	beq.n	8002490 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	4a70      	ldr	r2, [pc, #448]	; (8002604 <PCD_EP_OutXfrComplete_int+0x208>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d90e      	bls.n	8002464 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800244c:	2b00      	cmp	r3, #0
 800244e:	d009      	beq.n	8002464 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	015a      	lsls	r2, r3, #5
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	4413      	add	r3, r2
 8002458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800245c:	461a      	mov	r2, r3
 800245e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002462:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f008 f80f 	bl	800a488 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6818      	ldr	r0, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002474:	461a      	mov	r2, r3
 8002476:	2101      	movs	r1, #1
 8002478:	f004 fd8c 	bl	8006f94 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	015a      	lsls	r2, r3, #5
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	4413      	add	r3, r2
 8002484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002488:	461a      	mov	r2, r3
 800248a:	2308      	movs	r3, #8
 800248c:	6093      	str	r3, [r2, #8]
 800248e:	e0b3      	b.n	80025f8 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	f003 0320 	and.w	r3, r3, #32
 8002496:	2b00      	cmp	r3, #0
 8002498:	d009      	beq.n	80024ae <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	015a      	lsls	r2, r3, #5
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	4413      	add	r3, r2
 80024a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024a6:	461a      	mov	r2, r3
 80024a8:	2320      	movs	r3, #32
 80024aa:	6093      	str	r3, [r2, #8]
 80024ac:	e0a4      	b.n	80025f8 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f040 809f 	bne.w	80025f8 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	4a51      	ldr	r2, [pc, #324]	; (8002604 <PCD_EP_OutXfrComplete_int+0x208>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d90f      	bls.n	80024e2 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00a      	beq.n	80024e2 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	015a      	lsls	r2, r3, #5
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	4413      	add	r3, r2
 80024d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024d8:	461a      	mov	r2, r3
 80024da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024de:	6093      	str	r3, [r2, #8]
 80024e0:	e08a      	b.n	80025f8 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	4613      	mov	r3, r2
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	1a9b      	subs	r3, r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	440b      	add	r3, r1
 80024f0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80024f4:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	0159      	lsls	r1, r3, #5
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	440b      	add	r3, r1
 80024fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002508:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	4613      	mov	r3, r2
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	1a9b      	subs	r3, r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4403      	add	r3, r0
 8002518:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800251c:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	4613      	mov	r3, r2
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	1a9b      	subs	r3, r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	440b      	add	r3, r1
 800252c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002530:	6819      	ldr	r1, [r3, #0]
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	4613      	mov	r3, r2
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	1a9b      	subs	r3, r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4403      	add	r3, r0
 8002540:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4419      	add	r1, r3
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	4613      	mov	r3, r2
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	1a9b      	subs	r3, r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4403      	add	r3, r0
 8002556:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800255a:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	b2db      	uxtb	r3, r3
 8002560:	4619      	mov	r1, r3
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f007 ffa2 	bl	800a4ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d144      	bne.n	80025f8 <PCD_EP_OutXfrComplete_int+0x1fc>
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	4613      	mov	r3, r2
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	1a9b      	subs	r3, r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	440b      	add	r3, r1
 800257c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d138      	bne.n	80025f8 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6818      	ldr	r0, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002590:	461a      	mov	r2, r3
 8002592:	2101      	movs	r1, #1
 8002594:	f004 fcfe 	bl	8006f94 <USB_EP0_OutStart>
 8002598:	e02e      	b.n	80025f8 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	4a1a      	ldr	r2, [pc, #104]	; (8002608 <PCD_EP_OutXfrComplete_int+0x20c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d124      	bne.n	80025ec <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00a      	beq.n	80025c2 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	015a      	lsls	r2, r3, #5
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	4413      	add	r3, r2
 80025b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025b8:	461a      	mov	r2, r3
 80025ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025be:	6093      	str	r3, [r2, #8]
 80025c0:	e01a      	b.n	80025f8 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	f003 0320 	and.w	r3, r3, #32
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d008      	beq.n	80025de <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	015a      	lsls	r2, r3, #5
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	4413      	add	r3, r2
 80025d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025d8:	461a      	mov	r2, r3
 80025da:	2320      	movs	r3, #32
 80025dc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	4619      	mov	r1, r3
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f007 ff61 	bl	800a4ac <HAL_PCD_DataOutStageCallback>
 80025ea:	e005      	b.n	80025f8 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	4619      	mov	r1, r3
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f007 ff5a 	bl	800a4ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3718      	adds	r7, #24
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	4f54300a 	.word	0x4f54300a
 8002608:	4f54310a 	.word	0x4f54310a

0800260c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	333c      	adds	r3, #60	; 0x3c
 8002624:	3304      	adds	r3, #4
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	015a      	lsls	r2, r3, #5
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4413      	add	r3, r2
 8002632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d113      	bne.n	800266a <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	4a1f      	ldr	r2, [pc, #124]	; (80026c4 <PCD_EP_OutSetupPacket_int+0xb8>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d922      	bls.n	8002690 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002650:	2b00      	cmp	r3, #0
 8002652:	d01d      	beq.n	8002690 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	015a      	lsls	r2, r3, #5
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	4413      	add	r3, r2
 800265c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002660:	461a      	mov	r2, r3
 8002662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002666:	6093      	str	r3, [r2, #8]
 8002668:	e012      	b.n	8002690 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	4a16      	ldr	r2, [pc, #88]	; (80026c8 <PCD_EP_OutSetupPacket_int+0xbc>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d10e      	bne.n	8002690 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8002678:	2b00      	cmp	r3, #0
 800267a:	d009      	beq.n	8002690 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	015a      	lsls	r2, r3, #5
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	4413      	add	r3, r2
 8002684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002688:	461a      	mov	r2, r3
 800268a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800268e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f007 fef9 	bl	800a488 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	4a0a      	ldr	r2, [pc, #40]	; (80026c4 <PCD_EP_OutSetupPacket_int+0xb8>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d90c      	bls.n	80026b8 <PCD_EP_OutSetupPacket_int+0xac>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d108      	bne.n	80026b8 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6818      	ldr	r0, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80026b0:	461a      	mov	r2, r3
 80026b2:	2101      	movs	r1, #1
 80026b4:	f004 fc6e 	bl	8006f94 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3718      	adds	r7, #24
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	4f54300a 	.word	0x4f54300a
 80026c8:	4f54310a 	.word	0x4f54310a

080026cc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	460b      	mov	r3, r1
 80026d6:	70fb      	strb	r3, [r7, #3]
 80026d8:	4613      	mov	r3, r2
 80026da:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80026e4:	78fb      	ldrb	r3, [r7, #3]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d107      	bne.n	80026fa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80026ea:	883b      	ldrh	r3, [r7, #0]
 80026ec:	0419      	lsls	r1, r3, #16
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	430a      	orrs	r2, r1
 80026f6:	629a      	str	r2, [r3, #40]	; 0x28
 80026f8:	e028      	b.n	800274c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002700:	0c1b      	lsrs	r3, r3, #16
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	4413      	add	r3, r2
 8002706:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002708:	2300      	movs	r3, #0
 800270a:	73fb      	strb	r3, [r7, #15]
 800270c:	e00d      	b.n	800272a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	7bfb      	ldrb	r3, [r7, #15]
 8002714:	3340      	adds	r3, #64	; 0x40
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	4413      	add	r3, r2
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	0c1b      	lsrs	r3, r3, #16
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	4413      	add	r3, r2
 8002722:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002724:	7bfb      	ldrb	r3, [r7, #15]
 8002726:	3301      	adds	r3, #1
 8002728:	73fb      	strb	r3, [r7, #15]
 800272a:	7bfa      	ldrb	r2, [r7, #15]
 800272c:	78fb      	ldrb	r3, [r7, #3]
 800272e:	3b01      	subs	r3, #1
 8002730:	429a      	cmp	r2, r3
 8002732:	d3ec      	bcc.n	800270e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002734:	883b      	ldrh	r3, [r7, #0]
 8002736:	0418      	lsls	r0, r3, #16
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6819      	ldr	r1, [r3, #0]
 800273c:	78fb      	ldrb	r3, [r7, #3]
 800273e:	3b01      	subs	r3, #1
 8002740:	68ba      	ldr	r2, [r7, #8]
 8002742:	4302      	orrs	r2, r0
 8002744:	3340      	adds	r3, #64	; 0x40
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	440b      	add	r3, r1
 800274a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
 8002762:	460b      	mov	r3, r1
 8002764:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	887a      	ldrh	r2, [r7, #2]
 800276c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ae:	f043 0303 	orr.w	r3, r3, #3
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	460b      	mov	r3, r1
 80027ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d101      	bne.n	80027f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e0ca      	b.n	8002986 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027f0:	4b67      	ldr	r3, [pc, #412]	; (8002990 <HAL_RCC_ClockConfig+0x1b4>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 030f 	and.w	r3, r3, #15
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d90c      	bls.n	8002818 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027fe:	4b64      	ldr	r3, [pc, #400]	; (8002990 <HAL_RCC_ClockConfig+0x1b4>)
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002806:	4b62      	ldr	r3, [pc, #392]	; (8002990 <HAL_RCC_ClockConfig+0x1b4>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	429a      	cmp	r2, r3
 8002812:	d001      	beq.n	8002818 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e0b6      	b.n	8002986 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d020      	beq.n	8002866 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b00      	cmp	r3, #0
 800282e:	d005      	beq.n	800283c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002830:	4b58      	ldr	r3, [pc, #352]	; (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	4a57      	ldr	r2, [pc, #348]	; (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 8002836:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800283a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0308 	and.w	r3, r3, #8
 8002844:	2b00      	cmp	r3, #0
 8002846:	d005      	beq.n	8002854 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002848:	4b52      	ldr	r3, [pc, #328]	; (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	4a51      	ldr	r2, [pc, #324]	; (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 800284e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002852:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002854:	4b4f      	ldr	r3, [pc, #316]	; (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	494c      	ldr	r1, [pc, #304]	; (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 8002862:	4313      	orrs	r3, r2
 8002864:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d044      	beq.n	80028fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d107      	bne.n	800288a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287a:	4b46      	ldr	r3, [pc, #280]	; (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d119      	bne.n	80028ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e07d      	b.n	8002986 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b02      	cmp	r3, #2
 8002890:	d003      	beq.n	800289a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002896:	2b03      	cmp	r3, #3
 8002898:	d107      	bne.n	80028aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800289a:	4b3e      	ldr	r3, [pc, #248]	; (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d109      	bne.n	80028ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e06d      	b.n	8002986 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028aa:	4b3a      	ldr	r3, [pc, #232]	; (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e065      	b.n	8002986 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ba:	4b36      	ldr	r3, [pc, #216]	; (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f023 0203 	bic.w	r2, r3, #3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	4933      	ldr	r1, [pc, #204]	; (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028cc:	f7fd fe92 	bl	80005f4 <HAL_GetTick>
 80028d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d2:	e00a      	b.n	80028ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d4:	f7fd fe8e 	bl	80005f4 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e04d      	b.n	8002986 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ea:	4b2a      	ldr	r3, [pc, #168]	; (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 020c 	and.w	r2, r3, #12
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d1eb      	bne.n	80028d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028fc:	4b24      	ldr	r3, [pc, #144]	; (8002990 <HAL_RCC_ClockConfig+0x1b4>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 030f 	and.w	r3, r3, #15
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	429a      	cmp	r2, r3
 8002908:	d20c      	bcs.n	8002924 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290a:	4b21      	ldr	r3, [pc, #132]	; (8002990 <HAL_RCC_ClockConfig+0x1b4>)
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002912:	4b1f      	ldr	r3, [pc, #124]	; (8002990 <HAL_RCC_ClockConfig+0x1b4>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 030f 	and.w	r3, r3, #15
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	429a      	cmp	r2, r3
 800291e:	d001      	beq.n	8002924 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e030      	b.n	8002986 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	d008      	beq.n	8002942 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002930:	4b18      	ldr	r3, [pc, #96]	; (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	4915      	ldr	r1, [pc, #84]	; (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 800293e:	4313      	orrs	r3, r2
 8002940:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0308 	and.w	r3, r3, #8
 800294a:	2b00      	cmp	r3, #0
 800294c:	d009      	beq.n	8002962 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800294e:	4b11      	ldr	r3, [pc, #68]	; (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	490d      	ldr	r1, [pc, #52]	; (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 800295e:	4313      	orrs	r3, r2
 8002960:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002962:	f000 f81d 	bl	80029a0 <HAL_RCC_GetSysClockFreq>
 8002966:	4601      	mov	r1, r0
 8002968:	4b0a      	ldr	r3, [pc, #40]	; (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	091b      	lsrs	r3, r3, #4
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	4a09      	ldr	r2, [pc, #36]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 8002974:	5cd3      	ldrb	r3, [r2, r3]
 8002976:	fa21 f303 	lsr.w	r3, r1, r3
 800297a:	4a08      	ldr	r2, [pc, #32]	; (800299c <HAL_RCC_ClockConfig+0x1c0>)
 800297c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800297e:	2000      	movs	r0, #0
 8002980:	f7fd fdf4 	bl	800056c <HAL_InitTick>

  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	40023c00 	.word	0x40023c00
 8002994:	40023800 	.word	0x40023800
 8002998:	0800b18c 	.word	0x0800b18c
 800299c:	20000118 	.word	0x20000118

080029a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029a6:	2300      	movs	r3, #0
 80029a8:	607b      	str	r3, [r7, #4]
 80029aa:	2300      	movs	r3, #0
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	2300      	movs	r3, #0
 80029b0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029b6:	4b63      	ldr	r3, [pc, #396]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 030c 	and.w	r3, r3, #12
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d007      	beq.n	80029d2 <HAL_RCC_GetSysClockFreq+0x32>
 80029c2:	2b08      	cmp	r3, #8
 80029c4:	d008      	beq.n	80029d8 <HAL_RCC_GetSysClockFreq+0x38>
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f040 80b4 	bne.w	8002b34 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029cc:	4b5e      	ldr	r3, [pc, #376]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80029ce:	60bb      	str	r3, [r7, #8]
       break;
 80029d0:	e0b3      	b.n	8002b3a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029d2:	4b5e      	ldr	r3, [pc, #376]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80029d4:	60bb      	str	r3, [r7, #8]
      break;
 80029d6:	e0b0      	b.n	8002b3a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029d8:	4b5a      	ldr	r3, [pc, #360]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029e0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029e2:	4b58      	ldr	r3, [pc, #352]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d04a      	beq.n	8002a84 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ee:	4b55      	ldr	r3, [pc, #340]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	099b      	lsrs	r3, r3, #6
 80029f4:	f04f 0400 	mov.w	r4, #0
 80029f8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029fc:	f04f 0200 	mov.w	r2, #0
 8002a00:	ea03 0501 	and.w	r5, r3, r1
 8002a04:	ea04 0602 	and.w	r6, r4, r2
 8002a08:	4629      	mov	r1, r5
 8002a0a:	4632      	mov	r2, r6
 8002a0c:	f04f 0300 	mov.w	r3, #0
 8002a10:	f04f 0400 	mov.w	r4, #0
 8002a14:	0154      	lsls	r4, r2, #5
 8002a16:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a1a:	014b      	lsls	r3, r1, #5
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4622      	mov	r2, r4
 8002a20:	1b49      	subs	r1, r1, r5
 8002a22:	eb62 0206 	sbc.w	r2, r2, r6
 8002a26:	f04f 0300 	mov.w	r3, #0
 8002a2a:	f04f 0400 	mov.w	r4, #0
 8002a2e:	0194      	lsls	r4, r2, #6
 8002a30:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a34:	018b      	lsls	r3, r1, #6
 8002a36:	1a5b      	subs	r3, r3, r1
 8002a38:	eb64 0402 	sbc.w	r4, r4, r2
 8002a3c:	f04f 0100 	mov.w	r1, #0
 8002a40:	f04f 0200 	mov.w	r2, #0
 8002a44:	00e2      	lsls	r2, r4, #3
 8002a46:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a4a:	00d9      	lsls	r1, r3, #3
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	4614      	mov	r4, r2
 8002a50:	195b      	adds	r3, r3, r5
 8002a52:	eb44 0406 	adc.w	r4, r4, r6
 8002a56:	f04f 0100 	mov.w	r1, #0
 8002a5a:	f04f 0200 	mov.w	r2, #0
 8002a5e:	0262      	lsls	r2, r4, #9
 8002a60:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002a64:	0259      	lsls	r1, r3, #9
 8002a66:	460b      	mov	r3, r1
 8002a68:	4614      	mov	r4, r2
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	4621      	mov	r1, r4
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f04f 0400 	mov.w	r4, #0
 8002a74:	461a      	mov	r2, r3
 8002a76:	4623      	mov	r3, r4
 8002a78:	f7fd fbd6 	bl	8000228 <__aeabi_uldivmod>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	460c      	mov	r4, r1
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	e049      	b.n	8002b18 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a84:	4b2f      	ldr	r3, [pc, #188]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	099b      	lsrs	r3, r3, #6
 8002a8a:	f04f 0400 	mov.w	r4, #0
 8002a8e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a92:	f04f 0200 	mov.w	r2, #0
 8002a96:	ea03 0501 	and.w	r5, r3, r1
 8002a9a:	ea04 0602 	and.w	r6, r4, r2
 8002a9e:	4629      	mov	r1, r5
 8002aa0:	4632      	mov	r2, r6
 8002aa2:	f04f 0300 	mov.w	r3, #0
 8002aa6:	f04f 0400 	mov.w	r4, #0
 8002aaa:	0154      	lsls	r4, r2, #5
 8002aac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ab0:	014b      	lsls	r3, r1, #5
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4622      	mov	r2, r4
 8002ab6:	1b49      	subs	r1, r1, r5
 8002ab8:	eb62 0206 	sbc.w	r2, r2, r6
 8002abc:	f04f 0300 	mov.w	r3, #0
 8002ac0:	f04f 0400 	mov.w	r4, #0
 8002ac4:	0194      	lsls	r4, r2, #6
 8002ac6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002aca:	018b      	lsls	r3, r1, #6
 8002acc:	1a5b      	subs	r3, r3, r1
 8002ace:	eb64 0402 	sbc.w	r4, r4, r2
 8002ad2:	f04f 0100 	mov.w	r1, #0
 8002ad6:	f04f 0200 	mov.w	r2, #0
 8002ada:	00e2      	lsls	r2, r4, #3
 8002adc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002ae0:	00d9      	lsls	r1, r3, #3
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	4614      	mov	r4, r2
 8002ae6:	195b      	adds	r3, r3, r5
 8002ae8:	eb44 0406 	adc.w	r4, r4, r6
 8002aec:	f04f 0100 	mov.w	r1, #0
 8002af0:	f04f 0200 	mov.w	r2, #0
 8002af4:	02a2      	lsls	r2, r4, #10
 8002af6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002afa:	0299      	lsls	r1, r3, #10
 8002afc:	460b      	mov	r3, r1
 8002afe:	4614      	mov	r4, r2
 8002b00:	4618      	mov	r0, r3
 8002b02:	4621      	mov	r1, r4
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f04f 0400 	mov.w	r4, #0
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	4623      	mov	r3, r4
 8002b0e:	f7fd fb8b 	bl	8000228 <__aeabi_uldivmod>
 8002b12:	4603      	mov	r3, r0
 8002b14:	460c      	mov	r4, r1
 8002b16:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b18:	4b0a      	ldr	r3, [pc, #40]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	0c1b      	lsrs	r3, r3, #16
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	3301      	adds	r3, #1
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b30:	60bb      	str	r3, [r7, #8]
      break;
 8002b32:	e002      	b.n	8002b3a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b34:	4b04      	ldr	r3, [pc, #16]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002b36:	60bb      	str	r3, [r7, #8]
      break;
 8002b38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b3a:	68bb      	ldr	r3, [r7, #8]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b44:	40023800 	.word	0x40023800
 8002b48:	00f42400 	.word	0x00f42400
 8002b4c:	007a1200 	.word	0x007a1200

08002b50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b54:	4b03      	ldr	r3, [pc, #12]	; (8002b64 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b56:	681b      	ldr	r3, [r3, #0]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	20000118 	.word	0x20000118

08002b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b6c:	f7ff fff0 	bl	8002b50 <HAL_RCC_GetHCLKFreq>
 8002b70:	4601      	mov	r1, r0
 8002b72:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	0a9b      	lsrs	r3, r3, #10
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	4a03      	ldr	r2, [pc, #12]	; (8002b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b7e:	5cd3      	ldrb	r3, [r2, r3]
 8002b80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	0800b19c 	.word	0x0800b19c

08002b90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b94:	f7ff ffdc 	bl	8002b50 <HAL_RCC_GetHCLKFreq>
 8002b98:	4601      	mov	r1, r0
 8002b9a:	4b05      	ldr	r3, [pc, #20]	; (8002bb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	0b5b      	lsrs	r3, r3, #13
 8002ba0:	f003 0307 	and.w	r3, r3, #7
 8002ba4:	4a03      	ldr	r2, [pc, #12]	; (8002bb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ba6:	5cd3      	ldrb	r3, [r2, r3]
 8002ba8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	0800b19c 	.word	0x0800b19c

08002bb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b088      	sub	sp, #32
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d010      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002bdc:	4b7a      	ldr	r3, [pc, #488]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002bde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002be2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	4977      	ldr	r1, [pc, #476]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d010      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002c0a:	4b6f      	ldr	r3, [pc, #444]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c10:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	496b      	ldr	r1, [pc, #428]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d022      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8002c38:	4b63      	ldr	r3, [pc, #396]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002c3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c46:	4960      	ldr	r1, [pc, #384]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8002c56:	2301      	movs	r3, #1
 8002c58:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c62:	d10c      	bne.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8002c64:	4b58      	ldr	r3, [pc, #352]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002c66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c6a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	3b01      	subs	r3, #1
 8002c74:	021b      	lsls	r3, r3, #8
 8002c76:	4954      	ldr	r1, [pc, #336]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d022      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8002c8a:	4b4f      	ldr	r3, [pc, #316]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c98:	494b      	ldr	r1, [pc, #300]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cb4:	d10c      	bne.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8002cb6:	4b44      	ldr	r3, [pc, #272]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002cb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cbc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	021b      	lsls	r3, r3, #8
 8002cc8:	493f      	ldr	r1, [pc, #252]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0308 	and.w	r3, r3, #8
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 808a 	beq.w	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60fb      	str	r3, [r7, #12]
 8002ce2:	4b39      	ldr	r3, [pc, #228]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	4a38      	ldr	r2, [pc, #224]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cec:	6413      	str	r3, [r2, #64]	; 0x40
 8002cee:	4b36      	ldr	r3, [pc, #216]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002cfa:	4b34      	ldr	r3, [pc, #208]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a33      	ldr	r2, [pc, #204]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8002d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d04:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d06:	f7fd fc75 	bl	80005f4 <HAL_GetTick>
 8002d0a:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d0c:	e008      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002d0e:	f7fd fc71 	bl	80005f4 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e1d1      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d20:	4b2a      	ldr	r3, [pc, #168]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d0f0      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d2c:	4b26      	ldr	r3, [pc, #152]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d34:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d02f      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d028      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d4a:	4b1f      	ldr	r3, [pc, #124]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d52:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d54:	4b1e      	ldr	r3, [pc, #120]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002d56:	2201      	movs	r2, #1
 8002d58:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d5a:	4b1d      	ldr	r3, [pc, #116]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002d60:	4a19      	ldr	r2, [pc, #100]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d66:	4b18      	ldr	r3, [pc, #96]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d114      	bne.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002d72:	f7fd fc3f 	bl	80005f4 <HAL_GetTick>
 8002d76:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d78:	e00a      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d7a:	f7fd fc3b 	bl	80005f4 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e199      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d90:	4b0d      	ldr	r3, [pc, #52]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d0ee      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002da4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002da8:	d114      	bne.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8002daa:	4b07      	ldr	r3, [pc, #28]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002dba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dbe:	4902      	ldr	r1, [pc, #8]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	608b      	str	r3, [r1, #8]
 8002dc4:	e00c      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8002dc6:	bf00      	nop
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	40007000 	.word	0x40007000
 8002dd0:	42470e40 	.word	0x42470e40
 8002dd4:	4b89      	ldr	r3, [pc, #548]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	4a88      	ldr	r2, [pc, #544]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002dda:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002dde:	6093      	str	r3, [r2, #8]
 8002de0:	4b86      	ldr	r3, [pc, #536]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002de2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dec:	4983      	ldr	r1, [pc, #524]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0304 	and.w	r3, r3, #4
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d004      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8002e04:	4b7e      	ldr	r3, [pc, #504]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8002e06:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0310 	and.w	r3, r3, #16
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00a      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002e14:	4b79      	ldr	r3, [pc, #484]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e1a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e22:	4976      	ldr	r1, [pc, #472]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0320 	and.w	r3, r3, #32
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d011      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002e36:	4b71      	ldr	r3, [pc, #452]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002e38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e3c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e44:	496d      	ldr	r1, [pc, #436]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e54:	d101      	bne.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8002e56:	2301      	movs	r3, #1
 8002e58:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00a      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002e66:	4b65      	ldr	r3, [pc, #404]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002e68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e6c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e74:	4961      	ldr	r1, [pc, #388]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d004      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2b80      	cmp	r3, #128	; 0x80
 8002e88:	f040 80c6 	bne.w	8003018 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e8c:	4b5d      	ldr	r3, [pc, #372]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e92:	f7fd fbaf 	bl	80005f4 <HAL_GetTick>
 8002e96:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e98:	e008      	b.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002e9a:	f7fd fbab 	bl	80005f4 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e10b      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002eac:	4b53      	ldr	r3, [pc, #332]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1f0      	bne.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8002eb8:	4a53      	ldr	r2, [pc, #332]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ebe:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d003      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	69db      	ldr	r3, [r3, #28]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d023      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d003      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d019      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d004      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002efc:	d00e      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d019      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d115      	bne.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x386>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f1a:	d110      	bne.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	019b      	lsls	r3, r3, #6
 8002f26:	431a      	orrs	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	061b      	lsls	r3, r3, #24
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	071b      	lsls	r3, r3, #28
 8002f36:	4931      	ldr	r1, [pc, #196]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d009      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d026      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d122      	bne.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f66:	4b25      	ldr	r3, [pc, #148]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002f68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f6c:	0e1b      	lsrs	r3, r3, #24
 8002f6e:	f003 030f 	and.w	r3, r3, #15
 8002f72:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	019b      	lsls	r3, r3, #6
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	061b      	lsls	r3, r3, #24
 8002f84:	431a      	orrs	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	071b      	lsls	r3, r3, #28
 8002f8c:	491b      	ldr	r1, [pc, #108]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8002f94:	4b19      	ldr	r3, [pc, #100]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f9a:	f023 021f 	bic.w	r2, r3, #31
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	4915      	ldr	r1, [pc, #84]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d010      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	019b      	lsls	r3, r3, #6
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	061b      	lsls	r3, r3, #24
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	071b      	lsls	r3, r3, #28
 8002fd2:	490a      	ldr	r1, [pc, #40]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002fda:	4b0a      	ldr	r3, [pc, #40]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8002fdc:	2201      	movs	r2, #1
 8002fde:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002fe0:	f7fd fb08 	bl	80005f4 <HAL_GetTick>
 8002fe4:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fe6:	e011      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002fe8:	f7fd fb04 	bl	80005f4 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d90a      	bls.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e064      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002ffa:	bf00      	nop
 8002ffc:	40023800 	.word	0x40023800
 8003000:	424711e0 	.word	0x424711e0
 8003004:	42470068 	.word	0x42470068
 8003008:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800300c:	4b2f      	ldr	r3, [pc, #188]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0e7      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00a      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003024:	4b29      	ldr	r3, [pc, #164]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003026:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800302a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003032:	4926      	ldr	r1, [pc, #152]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003034:	4313      	orrs	r3, r2
 8003036:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00a      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003046:	4b21      	ldr	r3, [pc, #132]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003048:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800304c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003054:	491d      	ldr	r1, [pc, #116]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003056:	4313      	orrs	r3, r2
 8003058:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00a      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003068:	4b18      	ldr	r3, [pc, #96]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800306a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800306e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003076:	4915      	ldr	r1, [pc, #84]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003078:	4313      	orrs	r3, r2
 800307a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00a      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 800308a:	4b10      	ldr	r3, [pc, #64]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800308c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003090:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003098:	490c      	ldr	r1, [pc, #48]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800309a:	4313      	orrs	r3, r2
 800309c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00a      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030ac:	4b07      	ldr	r3, [pc, #28]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80030ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030b2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ba:	4904      	ldr	r1, [pc, #16]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3720      	adds	r7, #32
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40023800 	.word	0x40023800

080030d0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030d8:	2300      	movs	r3, #0
 80030da:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d075      	beq.n	80031d4 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80030e8:	4ba2      	ldr	r3, [pc, #648]	; (8003374 <HAL_RCC_OscConfig+0x2a4>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f003 030c 	and.w	r3, r3, #12
 80030f0:	2b04      	cmp	r3, #4
 80030f2:	d00c      	beq.n	800310e <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030f4:	4b9f      	ldr	r3, [pc, #636]	; (8003374 <HAL_RCC_OscConfig+0x2a4>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80030fc:	2b08      	cmp	r3, #8
 80030fe:	d112      	bne.n	8003126 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003100:	4b9c      	ldr	r3, [pc, #624]	; (8003374 <HAL_RCC_OscConfig+0x2a4>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003108:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800310c:	d10b      	bne.n	8003126 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800310e:	4b99      	ldr	r3, [pc, #612]	; (8003374 <HAL_RCC_OscConfig+0x2a4>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d05b      	beq.n	80031d2 <HAL_RCC_OscConfig+0x102>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d157      	bne.n	80031d2 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e20b      	b.n	800353e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800312e:	d106      	bne.n	800313e <HAL_RCC_OscConfig+0x6e>
 8003130:	4b90      	ldr	r3, [pc, #576]	; (8003374 <HAL_RCC_OscConfig+0x2a4>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a8f      	ldr	r2, [pc, #572]	; (8003374 <HAL_RCC_OscConfig+0x2a4>)
 8003136:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800313a:	6013      	str	r3, [r2, #0]
 800313c:	e01d      	b.n	800317a <HAL_RCC_OscConfig+0xaa>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003146:	d10c      	bne.n	8003162 <HAL_RCC_OscConfig+0x92>
 8003148:	4b8a      	ldr	r3, [pc, #552]	; (8003374 <HAL_RCC_OscConfig+0x2a4>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a89      	ldr	r2, [pc, #548]	; (8003374 <HAL_RCC_OscConfig+0x2a4>)
 800314e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003152:	6013      	str	r3, [r2, #0]
 8003154:	4b87      	ldr	r3, [pc, #540]	; (8003374 <HAL_RCC_OscConfig+0x2a4>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a86      	ldr	r2, [pc, #536]	; (8003374 <HAL_RCC_OscConfig+0x2a4>)
 800315a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800315e:	6013      	str	r3, [r2, #0]
 8003160:	e00b      	b.n	800317a <HAL_RCC_OscConfig+0xaa>
 8003162:	4b84      	ldr	r3, [pc, #528]	; (8003374 <HAL_RCC_OscConfig+0x2a4>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a83      	ldr	r2, [pc, #524]	; (8003374 <HAL_RCC_OscConfig+0x2a4>)
 8003168:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800316c:	6013      	str	r3, [r2, #0]
 800316e:	4b81      	ldr	r3, [pc, #516]	; (8003374 <HAL_RCC_OscConfig+0x2a4>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a80      	ldr	r2, [pc, #512]	; (8003374 <HAL_RCC_OscConfig+0x2a4>)
 8003174:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003178:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d013      	beq.n	80031aa <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003182:	f7fd fa37 	bl	80005f4 <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003188:	e008      	b.n	800319c <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800318a:	f7fd fa33 	bl	80005f4 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b64      	cmp	r3, #100	; 0x64
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e1d0      	b.n	800353e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800319c:	4b75      	ldr	r3, [pc, #468]	; (8003374 <HAL_RCC_OscConfig+0x2a4>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0f0      	beq.n	800318a <HAL_RCC_OscConfig+0xba>
 80031a8:	e014      	b.n	80031d4 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031aa:	f7fd fa23 	bl	80005f4 <HAL_GetTick>
 80031ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031b0:	e008      	b.n	80031c4 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031b2:	f7fd fa1f 	bl	80005f4 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b64      	cmp	r3, #100	; 0x64
 80031be:	d901      	bls.n	80031c4 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e1bc      	b.n	800353e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031c4:	4b6b      	ldr	r3, [pc, #428]	; (8003374 <HAL_RCC_OscConfig+0x2a4>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1f0      	bne.n	80031b2 <HAL_RCC_OscConfig+0xe2>
 80031d0:	e000      	b.n	80031d4 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d063      	beq.n	80032a8 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80031e0:	4b64      	ldr	r3, [pc, #400]	; (8003374 <HAL_RCC_OscConfig+0x2a4>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f003 030c 	and.w	r3, r3, #12
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00b      	beq.n	8003204 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ec:	4b61      	ldr	r3, [pc, #388]	; (8003374 <HAL_RCC_OscConfig+0x2a4>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80031f4:	2b08      	cmp	r3, #8
 80031f6:	d11c      	bne.n	8003232 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031f8:	4b5e      	ldr	r3, [pc, #376]	; (8003374 <HAL_RCC_OscConfig+0x2a4>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d116      	bne.n	8003232 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003204:	4b5b      	ldr	r3, [pc, #364]	; (8003374 <HAL_RCC_OscConfig+0x2a4>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d005      	beq.n	800321c <HAL_RCC_OscConfig+0x14c>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d001      	beq.n	800321c <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e190      	b.n	800353e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800321c:	4b55      	ldr	r3, [pc, #340]	; (8003374 <HAL_RCC_OscConfig+0x2a4>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	4952      	ldr	r1, [pc, #328]	; (8003374 <HAL_RCC_OscConfig+0x2a4>)
 800322c:	4313      	orrs	r3, r2
 800322e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003230:	e03a      	b.n	80032a8 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d020      	beq.n	800327c <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800323a:	4b4f      	ldr	r3, [pc, #316]	; (8003378 <HAL_RCC_OscConfig+0x2a8>)
 800323c:	2201      	movs	r2, #1
 800323e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003240:	f7fd f9d8 	bl	80005f4 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003248:	f7fd f9d4 	bl	80005f4 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e171      	b.n	800353e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800325a:	4b46      	ldr	r3, [pc, #280]	; (8003374 <HAL_RCC_OscConfig+0x2a4>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0f0      	beq.n	8003248 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003266:	4b43      	ldr	r3, [pc, #268]	; (8003374 <HAL_RCC_OscConfig+0x2a4>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	493f      	ldr	r1, [pc, #252]	; (8003374 <HAL_RCC_OscConfig+0x2a4>)
 8003276:	4313      	orrs	r3, r2
 8003278:	600b      	str	r3, [r1, #0]
 800327a:	e015      	b.n	80032a8 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800327c:	4b3e      	ldr	r3, [pc, #248]	; (8003378 <HAL_RCC_OscConfig+0x2a8>)
 800327e:	2200      	movs	r2, #0
 8003280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003282:	f7fd f9b7 	bl	80005f4 <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003288:	e008      	b.n	800329c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800328a:	f7fd f9b3 	bl	80005f4 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e150      	b.n	800353e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800329c:	4b35      	ldr	r3, [pc, #212]	; (8003374 <HAL_RCC_OscConfig+0x2a4>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1f0      	bne.n	800328a <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0308 	and.w	r3, r3, #8
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d030      	beq.n	8003316 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d016      	beq.n	80032ea <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032bc:	4b2f      	ldr	r3, [pc, #188]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 80032be:	2201      	movs	r2, #1
 80032c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c2:	f7fd f997 	bl	80005f4 <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032c8:	e008      	b.n	80032dc <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032ca:	f7fd f993 	bl	80005f4 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e130      	b.n	800353e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032dc:	4b25      	ldr	r3, [pc, #148]	; (8003374 <HAL_RCC_OscConfig+0x2a4>)
 80032de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d0f0      	beq.n	80032ca <HAL_RCC_OscConfig+0x1fa>
 80032e8:	e015      	b.n	8003316 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032ea:	4b24      	ldr	r3, [pc, #144]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f0:	f7fd f980 	bl	80005f4 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032f8:	f7fd f97c 	bl	80005f4 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e119      	b.n	800353e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800330a:	4b1a      	ldr	r3, [pc, #104]	; (8003374 <HAL_RCC_OscConfig+0x2a4>)
 800330c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1f0      	bne.n	80032f8 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0304 	and.w	r3, r3, #4
 800331e:	2b00      	cmp	r3, #0
 8003320:	f000 809f 	beq.w	8003462 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003324:	2300      	movs	r3, #0
 8003326:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003328:	4b12      	ldr	r3, [pc, #72]	; (8003374 <HAL_RCC_OscConfig+0x2a4>)
 800332a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d10f      	bne.n	8003354 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003334:	2300      	movs	r3, #0
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	4b0e      	ldr	r3, [pc, #56]	; (8003374 <HAL_RCC_OscConfig+0x2a4>)
 800333a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333c:	4a0d      	ldr	r2, [pc, #52]	; (8003374 <HAL_RCC_OscConfig+0x2a4>)
 800333e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003342:	6413      	str	r3, [r2, #64]	; 0x40
 8003344:	4b0b      	ldr	r3, [pc, #44]	; (8003374 <HAL_RCC_OscConfig+0x2a4>)
 8003346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800334c:	60fb      	str	r3, [r7, #12]
 800334e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003350:	2301      	movs	r3, #1
 8003352:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003354:	4b0a      	ldr	r3, [pc, #40]	; (8003380 <HAL_RCC_OscConfig+0x2b0>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335c:	2b00      	cmp	r3, #0
 800335e:	d120      	bne.n	80033a2 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003360:	4b07      	ldr	r3, [pc, #28]	; (8003380 <HAL_RCC_OscConfig+0x2b0>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a06      	ldr	r2, [pc, #24]	; (8003380 <HAL_RCC_OscConfig+0x2b0>)
 8003366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800336a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800336c:	f7fd f942 	bl	80005f4 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003372:	e010      	b.n	8003396 <HAL_RCC_OscConfig+0x2c6>
 8003374:	40023800 	.word	0x40023800
 8003378:	42470000 	.word	0x42470000
 800337c:	42470e80 	.word	0x42470e80
 8003380:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003384:	f7fd f936 	bl	80005f4 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e0d3      	b.n	800353e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003396:	4b6c      	ldr	r3, [pc, #432]	; (8003548 <HAL_RCC_OscConfig+0x478>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0f0      	beq.n	8003384 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d106      	bne.n	80033b8 <HAL_RCC_OscConfig+0x2e8>
 80033aa:	4b68      	ldr	r3, [pc, #416]	; (800354c <HAL_RCC_OscConfig+0x47c>)
 80033ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ae:	4a67      	ldr	r2, [pc, #412]	; (800354c <HAL_RCC_OscConfig+0x47c>)
 80033b0:	f043 0301 	orr.w	r3, r3, #1
 80033b4:	6713      	str	r3, [r2, #112]	; 0x70
 80033b6:	e01c      	b.n	80033f2 <HAL_RCC_OscConfig+0x322>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	2b05      	cmp	r3, #5
 80033be:	d10c      	bne.n	80033da <HAL_RCC_OscConfig+0x30a>
 80033c0:	4b62      	ldr	r3, [pc, #392]	; (800354c <HAL_RCC_OscConfig+0x47c>)
 80033c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c4:	4a61      	ldr	r2, [pc, #388]	; (800354c <HAL_RCC_OscConfig+0x47c>)
 80033c6:	f043 0304 	orr.w	r3, r3, #4
 80033ca:	6713      	str	r3, [r2, #112]	; 0x70
 80033cc:	4b5f      	ldr	r3, [pc, #380]	; (800354c <HAL_RCC_OscConfig+0x47c>)
 80033ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d0:	4a5e      	ldr	r2, [pc, #376]	; (800354c <HAL_RCC_OscConfig+0x47c>)
 80033d2:	f043 0301 	orr.w	r3, r3, #1
 80033d6:	6713      	str	r3, [r2, #112]	; 0x70
 80033d8:	e00b      	b.n	80033f2 <HAL_RCC_OscConfig+0x322>
 80033da:	4b5c      	ldr	r3, [pc, #368]	; (800354c <HAL_RCC_OscConfig+0x47c>)
 80033dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033de:	4a5b      	ldr	r2, [pc, #364]	; (800354c <HAL_RCC_OscConfig+0x47c>)
 80033e0:	f023 0301 	bic.w	r3, r3, #1
 80033e4:	6713      	str	r3, [r2, #112]	; 0x70
 80033e6:	4b59      	ldr	r3, [pc, #356]	; (800354c <HAL_RCC_OscConfig+0x47c>)
 80033e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ea:	4a58      	ldr	r2, [pc, #352]	; (800354c <HAL_RCC_OscConfig+0x47c>)
 80033ec:	f023 0304 	bic.w	r3, r3, #4
 80033f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d015      	beq.n	8003426 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fa:	f7fd f8fb 	bl	80005f4 <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003400:	e00a      	b.n	8003418 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003402:	f7fd f8f7 	bl	80005f4 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003410:	4293      	cmp	r3, r2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e092      	b.n	800353e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003418:	4b4c      	ldr	r3, [pc, #304]	; (800354c <HAL_RCC_OscConfig+0x47c>)
 800341a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d0ee      	beq.n	8003402 <HAL_RCC_OscConfig+0x332>
 8003424:	e014      	b.n	8003450 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003426:	f7fd f8e5 	bl	80005f4 <HAL_GetTick>
 800342a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800342c:	e00a      	b.n	8003444 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800342e:	f7fd f8e1 	bl	80005f4 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	f241 3288 	movw	r2, #5000	; 0x1388
 800343c:	4293      	cmp	r3, r2
 800343e:	d901      	bls.n	8003444 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e07c      	b.n	800353e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003444:	4b41      	ldr	r3, [pc, #260]	; (800354c <HAL_RCC_OscConfig+0x47c>)
 8003446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1ee      	bne.n	800342e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003450:	7dfb      	ldrb	r3, [r7, #23]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d105      	bne.n	8003462 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003456:	4b3d      	ldr	r3, [pc, #244]	; (800354c <HAL_RCC_OscConfig+0x47c>)
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	4a3c      	ldr	r2, [pc, #240]	; (800354c <HAL_RCC_OscConfig+0x47c>)
 800345c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003460:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d068      	beq.n	800353c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800346a:	4b38      	ldr	r3, [pc, #224]	; (800354c <HAL_RCC_OscConfig+0x47c>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f003 030c 	and.w	r3, r3, #12
 8003472:	2b08      	cmp	r3, #8
 8003474:	d060      	beq.n	8003538 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	2b02      	cmp	r3, #2
 800347c:	d145      	bne.n	800350a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800347e:	4b34      	ldr	r3, [pc, #208]	; (8003550 <HAL_RCC_OscConfig+0x480>)
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003484:	f7fd f8b6 	bl	80005f4 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800348c:	f7fd f8b2 	bl	80005f4 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e04f      	b.n	800353e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800349e:	4b2b      	ldr	r3, [pc, #172]	; (800354c <HAL_RCC_OscConfig+0x47c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f0      	bne.n	800348c <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69da      	ldr	r2, [r3, #28]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	019b      	lsls	r3, r3, #6
 80034ba:	431a      	orrs	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c0:	085b      	lsrs	r3, r3, #1
 80034c2:	3b01      	subs	r3, #1
 80034c4:	041b      	lsls	r3, r3, #16
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034cc:	061b      	lsls	r3, r3, #24
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d4:	071b      	lsls	r3, r3, #28
 80034d6:	491d      	ldr	r1, [pc, #116]	; (800354c <HAL_RCC_OscConfig+0x47c>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034dc:	4b1c      	ldr	r3, [pc, #112]	; (8003550 <HAL_RCC_OscConfig+0x480>)
 80034de:	2201      	movs	r2, #1
 80034e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e2:	f7fd f887 	bl	80005f4 <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034e8:	e008      	b.n	80034fc <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ea:	f7fd f883 	bl	80005f4 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e020      	b.n	800353e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034fc:	4b13      	ldr	r3, [pc, #76]	; (800354c <HAL_RCC_OscConfig+0x47c>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0f0      	beq.n	80034ea <HAL_RCC_OscConfig+0x41a>
 8003508:	e018      	b.n	800353c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800350a:	4b11      	ldr	r3, [pc, #68]	; (8003550 <HAL_RCC_OscConfig+0x480>)
 800350c:	2200      	movs	r2, #0
 800350e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003510:	f7fd f870 	bl	80005f4 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003518:	f7fd f86c 	bl	80005f4 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e009      	b.n	800353e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800352a:	4b08      	ldr	r3, [pc, #32]	; (800354c <HAL_RCC_OscConfig+0x47c>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1f0      	bne.n	8003518 <HAL_RCC_OscConfig+0x448>
 8003536:	e001      	b.n	800353c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e000      	b.n	800353e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3718      	adds	r7, #24
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	40007000 	.word	0x40007000
 800354c:	40023800 	.word	0x40023800
 8003550:	42470060 	.word	0x42470060

08003554 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e01d      	b.n	80035a2 <HAL_SD_Init+0x4e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d105      	bne.n	800357e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f006 faed 	bl	8009b58 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2203      	movs	r2, #3
 8003582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f810 	bl	80035ac <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
	...

080035ac <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80035ac:	b5b0      	push	{r4, r5, r7, lr}
 80035ae:	b08e      	sub	sp, #56	; 0x38
 80035b0:	af04      	add	r7, sp, #16
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80035b4:	2300      	movs	r3, #0
 80035b6:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80035b8:	2300      	movs	r3, #0
 80035ba:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80035bc:	2300      	movs	r3, #0
 80035be:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80035c0:	2300      	movs	r3, #0
 80035c2:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80035c4:	2300      	movs	r3, #0
 80035c6:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80035c8:	2300      	movs	r3, #0
 80035ca:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80035cc:	2376      	movs	r3, #118	; 0x76
 80035ce:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681d      	ldr	r5, [r3, #0]
 80035d4:	466c      	mov	r4, sp
 80035d6:	f107 0318 	add.w	r3, r7, #24
 80035da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80035de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80035e2:	f107 030c 	add.w	r3, r7, #12
 80035e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035e8:	4628      	mov	r0, r5
 80035ea:	f001 fd2f 	bl	800504c <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd); 
 80035ee:	4b1c      	ldr	r3, [pc, #112]	; (8003660 <HAL_SD_InitCard+0xb4>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f001 fd70 	bl	80050de <SDIO_PowerState_ON>
  
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80035fe:	4b18      	ldr	r3, [pc, #96]	; (8003660 <HAL_SD_InitCard+0xb4>)
 8003600:	2201      	movs	r2, #1
 8003602:	601a      	str	r2, [r3, #0]
  
  /* Required power up waiting time before starting the SD initialization 
  sequence */
  HAL_Delay(2U);
 8003604:	2002      	movs	r0, #2
 8003606:	f7fd f801 	bl	800060c <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 fee6 	bl	80043dc <SD_PowerON>
 8003610:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00b      	beq.n	8003630 <HAL_SD_InitCard+0x84>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003626:	431a      	orrs	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e013      	b.n	8003658 <HAL_SD_InitCard+0xac>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 fe0a 	bl	800424a <SD_InitCard>
 8003636:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00b      	beq.n	8003656 <HAL_SD_InitCard+0xaa>
  {
    hsd->State = HAL_SD_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	431a      	orrs	r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e000      	b.n	8003658 <HAL_SD_InitCard+0xac>
  }

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3728      	adds	r7, #40	; 0x28
 800365c:	46bd      	mov	sp, r7
 800365e:	bdb0      	pop	{r4, r5, r7, pc}
 8003660:	422580a0 	.word	0x422580a0

08003664 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003664:	b590      	push	{r4, r7, lr}
 8003666:	b08f      	sub	sp, #60	; 0x3c
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
 8003670:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003672:	2300      	movs	r3, #0
 8003674:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 8003676:	f7fc ffbd 	bl	80005f4 <HAL_GetTick>
 800367a:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0U, *tempbuff = (uint32_t *)pData;
 800367c:	2300      	movs	r3, #0
 800367e:	633b      	str	r3, [r7, #48]	; 0x30
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d107      	bne.n	800369a <HAL_SD_ReadBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e176      	b.n	8003988 <HAL_SD_ReadBlocks+0x324>
  }
 
  if(hsd->State == HAL_SD_STATE_READY)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	f040 8169 	bne.w	800397a <HAL_SD_ReadBlocks+0x316>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	441a      	add	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d907      	bls.n	80036cc <HAL_SD_ReadBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e15d      	b.n	8003988 <HAL_SD_ReadBlocks+0x324>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2203      	movs	r2, #3
 80036d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2200      	movs	r2, #0
 80036da:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d002      	beq.n	80036ea <HAL_SD_ReadBlocks+0x86>
    {
      BlockAdd *= 512U;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	025b      	lsls	r3, r3, #9
 80036e8:	607b      	str	r3, [r7, #4]
    }
      
    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80036f2:	4618      	mov	r0, r3
 80036f4:	f001 fd87 	bl	8005206 <SDMMC_CmdBlockLength>
 80036f8:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 80036fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d010      	beq.n	8003722 <HAL_SD_ReadBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);      
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003708:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800370e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003710:	431a      	orrs	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e132      	b.n	8003988 <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003726:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	025b      	lsls	r3, r3, #9
 800372c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800372e:	2390      	movs	r3, #144	; 0x90
 8003730:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003732:	2302      	movs	r3, #2
 8003734:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003736:	2300      	movs	r3, #0
 8003738:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 800373a:	2301      	movs	r3, #1
 800373c:	627b      	str	r3, [r7, #36]	; 0x24
    SDIO_ConfigData(hsd->Instance, &config);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f107 0210 	add.w	r2, r7, #16
 8003746:	4611      	mov	r1, r2
 8003748:	4618      	mov	r0, r3
 800374a:	f001 fd30 	bl	80051ae <SDIO_ConfigData>
    
    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d90a      	bls.n	800376a <HAL_SD_ReadBlocks+0x106>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2202      	movs	r2, #2
 8003758:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6879      	ldr	r1, [r7, #4]
 8003760:	4618      	mov	r0, r3
 8003762:	f001 fd98 	bl	8005296 <SDMMC_CmdReadMultiBlock>
 8003766:	6378      	str	r0, [r7, #52]	; 0x34
 8003768:	e009      	b.n	800377e <HAL_SD_ReadBlocks+0x11a>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2201      	movs	r2, #1
 800376e:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6879      	ldr	r1, [r7, #4]
 8003776:	4618      	mov	r0, r3
 8003778:	f001 fd69 	bl	800524e <SDMMC_CmdReadSingleBlock>
 800377c:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800377e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003780:	2b00      	cmp	r3, #0
 8003782:	d04a      	beq.n	800381a <HAL_SD_ReadBlocks+0x1b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800378c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003794:	431a      	orrs	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e0f0      	b.n	8003988 <HAL_SD_ReadBlocks+0x324>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d016      	beq.n	80037e2 <HAL_SD_ReadBlocks+0x17e>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80037b4:	2300      	movs	r3, #0
 80037b6:	633b      	str	r3, [r7, #48]	; 0x30
 80037b8:	e00d      	b.n	80037d6 <HAL_SD_ReadBlocks+0x172>
        {
          *(tempbuff + count) = SDIO_ReadFIFO(hsd->Instance);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6819      	ldr	r1, [r3, #0]
 80037be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037c4:	18d4      	adds	r4, r2, r3
 80037c6:	4608      	mov	r0, r1
 80037c8:	f001 fc6b 	bl	80050a2 <SDIO_ReadFIFO>
 80037cc:	4603      	mov	r3, r0
 80037ce:	6023      	str	r3, [r4, #0]
        for(count = 0U; count < 8U; count++)
 80037d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d2:	3301      	adds	r3, #1
 80037d4:	633b      	str	r3, [r7, #48]	; 0x30
 80037d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d8:	2b07      	cmp	r3, #7
 80037da:	d9ee      	bls.n	80037ba <HAL_SD_ReadBlocks+0x156>
        }
        tempbuff += 8U;
 80037dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037de:	3320      	adds	r3, #32
 80037e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 80037e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d007      	beq.n	80037f8 <HAL_SD_ReadBlocks+0x194>
 80037e8:	f7fc ff04 	bl	80005f4 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d810      	bhi.n	800381a <HAL_SD_ReadBlocks+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003800:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003806:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e0b6      	b.n	8003988 <HAL_SD_ReadBlocks+0x324>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003820:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8003824:	2b00      	cmp	r3, #0
 8003826:	d0be      	beq.n	80037a6 <HAL_SD_ReadBlocks+0x142>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800382e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003832:	2b00      	cmp	r3, #0
 8003834:	d020      	beq.n	8003878 <HAL_SD_ReadBlocks+0x214>
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d91d      	bls.n	8003878 <HAL_SD_ReadBlocks+0x214>
    {    
      if(hsd->SdCard.CardType != CARD_SECURED)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003840:	2b03      	cmp	r3, #3
 8003842:	d019      	beq.n	8003878 <HAL_SD_ReadBlocks+0x214>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4618      	mov	r0, r3
 800384a:	f001 fd91 	bl	8005370 <SDMMC_CmdStopTransfer>
 800384e:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8003850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003852:	2b00      	cmp	r3, #0
 8003854:	d010      	beq.n	8003878 <HAL_SD_ReadBlocks+0x214>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800385e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003866:	431a      	orrs	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e087      	b.n	8003988 <HAL_SD_ReadBlocks+0x324>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800387e:	f003 0308 	and.w	r3, r3, #8
 8003882:	2b00      	cmp	r3, #0
 8003884:	d010      	beq.n	80038a8 <HAL_SD_ReadBlocks+0x244>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800388e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003894:	f043 0208 	orr.w	r2, r3, #8
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e06f      	b.n	8003988 <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d010      	beq.n	80038d8 <HAL_SD_ReadBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80038be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c4:	f043 0202 	orr.w	r2, r3, #2
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e057      	b.n	8003988 <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038de:	f003 0320 	and.w	r3, r3, #32
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d037      	beq.n	8003956 <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80038ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f4:	f043 0220 	orr.w	r2, r3, #32
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e03f      	b.n	8003988 <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
    {
      *tempbuff = SDIO_ReadFIFO(hsd->Instance);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4618      	mov	r0, r3
 800390e:	f001 fbc8 	bl	80050a2 <SDIO_ReadFIFO>
 8003912:	4602      	mov	r2, r0
 8003914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003916:	601a      	str	r2, [r3, #0]
      tempbuff++;
 8003918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800391a:	3304      	adds	r3, #4
 800391c:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 800391e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003920:	2b00      	cmp	r3, #0
 8003922:	d007      	beq.n	8003934 <HAL_SD_ReadBlocks+0x2d0>
 8003924:	f7fc fe66 	bl	80005f4 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003930:	429a      	cmp	r2, r3
 8003932:	d810      	bhi.n	8003956 <HAL_SD_ReadBlocks+0x2f2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);        
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800393c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003942:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e018      	b.n	8003988 <HAL_SD_ReadBlocks+0x324>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800395c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1d1      	bne.n	8003908 <HAL_SD_ReadBlocks+0x2a4>
      }
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800396c:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8003976:	2300      	movs	r3, #0
 8003978:	e006      	b.n	8003988 <HAL_SD_ReadBlocks+0x324>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
  }
}
 8003988:	4618      	mov	r0, r3
 800398a:	373c      	adds	r7, #60	; 0x3c
 800398c:	46bd      	mov	sp, r7
 800398e:	bd90      	pop	{r4, r7, pc}

08003990 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b08e      	sub	sp, #56	; 0x38
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
 800399c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800399e:	2300      	movs	r3, #0
 80039a0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 80039a2:	f7fc fe27 	bl	80005f4 <HAL_GetTick>
 80039a6:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t *tempbuff = (uint32_t *)pData;
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d107      	bne.n	80039c6 <HAL_SD_WriteBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e147      	b.n	8003c56 <HAL_SD_WriteBlocks+0x2c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	f040 813a 	bne.w	8003c48 <HAL_SD_WriteBlocks+0x2b8>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	441a      	add	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d907      	bls.n	80039f8 <HAL_SD_WriteBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ec:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e12e      	b.n	8003c56 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2203      	movs	r2, #3
 80039fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2200      	movs	r2, #0
 8003a06:	62da      	str	r2, [r3, #44]	; 0x2c
     
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d002      	beq.n	8003a16 <HAL_SD_WriteBlocks+0x86>
    {
      BlockAdd *= 512U;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	025b      	lsls	r3, r3, #9
 8003a14:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f001 fbf1 	bl	8005206 <SDMMC_CmdBlockLength>
 8003a24:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d010      	beq.n	8003a4e <HAL_SD_WriteBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003a34:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a3c:	431a      	orrs	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e103      	b.n	8003c56 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d90a      	bls.n	8003a6a <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2220      	movs	r2, #32
 8003a58:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6879      	ldr	r1, [r7, #4]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f001 fc60 	bl	8005326 <SDMMC_CmdWriteMultiBlock>
 8003a66:	6378      	str	r0, [r7, #52]	; 0x34
 8003a68:	e009      	b.n	8003a7e <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2210      	movs	r2, #16
 8003a6e:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6879      	ldr	r1, [r7, #4]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f001 fc31 	bl	80052de <SDMMC_CmdWriteSingleBlock>
 8003a7c:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d010      	beq.n	8003aa6 <HAL_SD_WriteBlocks+0x116>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003a8c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a94:	431a      	orrs	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e0d7      	b.n	8003c56 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003aa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003aaa:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	025b      	lsls	r3, r3, #9
 8003ab0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003ab2:	2390      	movs	r3, #144	; 0x90
 8003ab4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003aba:	2300      	movs	r3, #0
 8003abc:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	627b      	str	r3, [r7, #36]	; 0x24
    SDIO_ConfigData(hsd->Instance, &config);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f107 0210 	add.w	r2, r7, #16
 8003aca:	4611      	mov	r1, r2
 8003acc:	4618      	mov	r0, r3
 8003ace:	f001 fb6e 	bl	80051ae <SDIO_ConfigData>
    
    /* Write block(s) in polling mode */
#ifdef SDIO_STA_STBITERR
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003ad2:	e037      	b.n	8003b44 <HAL_SD_WriteBlocks+0x1b4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d014      	beq.n	8003b0c <HAL_SD_WriteBlocks+0x17c>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ae6:	e00b      	b.n	8003b00 <HAL_SD_WriteBlocks+0x170>
        {
          SDIO_WriteFIFO(hsd->Instance, (tempbuff + count));
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6818      	ldr	r0, [r3, #0]
 8003aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003af2:	4413      	add	r3, r2
 8003af4:	4619      	mov	r1, r3
 8003af6:	f001 fae1 	bl	80050bc <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afc:	3301      	adds	r3, #1
 8003afe:	633b      	str	r3, [r7, #48]	; 0x30
 8003b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b02:	2b07      	cmp	r3, #7
 8003b04:	d9f0      	bls.n	8003ae8 <HAL_SD_WriteBlocks+0x158>
        }
        tempbuff += 8U;
 8003b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b08:	3320      	adds	r3, #32
 8003b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8003b0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d007      	beq.n	8003b22 <HAL_SD_WriteBlocks+0x192>
 8003b12:	f7fc fd6f 	bl	80005f4 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d810      	bhi.n	8003b44 <HAL_SD_WriteBlocks+0x1b4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003b2a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b32:	431a      	orrs	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e088      	b.n	8003c56 <HAL_SD_WriteBlocks+0x2c6>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b4a:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0c0      	beq.n	8003ad4 <HAL_SD_WriteBlocks+0x144>
      }
    }
    
    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d020      	beq.n	8003ba2 <HAL_SD_WriteBlocks+0x212>
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d91d      	bls.n	8003ba2 <HAL_SD_WriteBlocks+0x212>
    { 
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6a:	2b03      	cmp	r3, #3
 8003b6c:	d019      	beq.n	8003ba2 <HAL_SD_WriteBlocks+0x212>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f001 fbfc 	bl	8005370 <SDMMC_CmdStopTransfer>
 8003b78:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8003b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d010      	beq.n	8003ba2 <HAL_SD_WriteBlocks+0x212>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003b88:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b90:	431a      	orrs	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e059      	b.n	8003c56 <HAL_SD_WriteBlocks+0x2c6>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba8:	f003 0308 	and.w	r3, r3, #8
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d010      	beq.n	8003bd2 <HAL_SD_WriteBlocks+0x242>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003bb8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bbe:	f043 0208 	orr.w	r2, r3, #8
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e041      	b.n	8003c56 <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d010      	beq.n	8003c02 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003be8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bee:	f043 0202 	orr.w	r2, r3, #2
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e029      	b.n	8003c56 <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c08:	f003 0310 	and.w	r3, r3, #16
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d010      	beq.n	8003c32 <HAL_SD_WriteBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003c18:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1e:	f043 0210 	orr.w	r2, r3, #16
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e011      	b.n	8003c56 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003c3a:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8003c44:	2300      	movs	r3, #0
 8003c46:	e006      	b.n	8003c56 <HAL_SD_WriteBlocks+0x2c6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
  }
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3738      	adds	r7, #56	; 0x38
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b085      	sub	sp, #20
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
 8003c66:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c70:	0e1b      	lsrs	r3, r3, #24
 8003c72:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	099b      	lsrs	r3, r3, #6
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	f003 0303 	and.w	r3, r3, #3
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	089b      	lsrs	r3, r3, #2
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	f003 030f 	and.w	r3, r3, #15
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	f003 0303 	and.w	r3, r3, #3
 8003c9c:	b2da      	uxtb	r2, r3
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ca6:	0c1b      	lsrs	r3, r3, #16
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	b2da      	uxtb	r2, r3
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cb8:	0a1b      	lsrs	r3, r3, #8
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	b2da      	uxtb	r2, r3
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cda:	0e1b      	lsrs	r3, r3, #24
 8003cdc:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	011b      	lsls	r3, r3, #4
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cee:	0c1b      	lsrs	r3, r3, #16
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	88db      	ldrh	r3, [r3, #6]
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	091b      	lsrs	r3, r3, #4
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	f003 030f 	and.w	r3, r3, #15
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	4313      	orrs	r3, r2
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	f003 030f 	and.w	r3, r3, #15
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d20:	0a1b      	lsrs	r3, r3, #8
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	09db      	lsrs	r3, r3, #7
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	b2da      	uxtb	r2, r3
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	099b      	lsrs	r3, r3, #6
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	095b      	lsrs	r3, r3, #5
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	b2da      	uxtb	r2, r3
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	091b      	lsrs	r3, r3, #4
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f040 8087 	bne.w	8003e84 <HAL_SD_GetCardCSD+0x226>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	029b      	lsls	r3, r3, #10
 8003d7a:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2U;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	691a      	ldr	r2, [r3, #16]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	431a      	orrs	r2, r3
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d9c:	0e1b      	lsrs	r3, r3, #24
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	691a      	ldr	r2, [r3, #16]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	099b      	lsrs	r3, r3, #6
 8003daa:	f003 0303 	and.w	r3, r3, #3
 8003dae:	431a      	orrs	r2, r3
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	08db      	lsrs	r3, r3, #3
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	f003 0307 	and.w	r3, r3, #7
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	f003 0307 	and.w	r3, r3, #7
 8003dcc:	b2da      	uxtb	r2, r3
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dd6:	0c1b      	lsrs	r3, r3, #16
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	095b      	lsrs	r3, r3, #5
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	f003 0307 	and.w	r3, r3, #7
 8003de6:	b2da      	uxtb	r2, r3
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	089b      	lsrs	r3, r3, #2
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	f003 0307 	and.w	r3, r3, #7
 8003df6:	b2da      	uxtb	r2, r3
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	f003 0306 	and.w	r3, r3, #6
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e12:	0a1b      	lsrs	r3, r3, #8
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	7e1b      	ldrb	r3, [r3, #24]
 8003e1c:	b2da      	uxtb	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	09db      	lsrs	r3, r3, #7
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	b2da      	uxtb	r2, r3
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	1c5a      	adds	r2, r3, #1
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	7e1b      	ldrb	r3, [r3, #24]
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	3302      	adds	r3, #2
 8003e44:	2201      	movs	r2, #1
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003e4e:	fb02 f203 	mul.w	r2, r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	7a1b      	ldrb	r3, [r3, #8]
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	2301      	movs	r3, #1
 8003e60:	fa03 f202 	lsl.w	r2, r3, r2
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003e70:	0a52      	lsrs	r2, r2, #9
 8003e72:	fb02 f203 	mul.w	r2, r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e80:	661a      	str	r2, [r3, #96]	; 0x60
 8003e82:	e04d      	b.n	8003f20 <HAL_SD_GetCardCSD+0x2c2>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d138      	bne.n	8003efe <HAL_SD_GetCardCSD+0x2a0>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	041b      	lsls	r3, r3, #16
 8003e98:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ea4:	0e1b      	lsrs	r3, r3, #24
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8U);
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	691a      	ldr	r2, [r3, #16]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	021b      	lsls	r3, r3, #8
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ebc:	0c1b      	lsrs	r3, r3, #16
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	691a      	ldr	r2, [r3, #16]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ed2:	0a1b      	lsrs	r3, r3, #8
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	3301      	adds	r3, #1
 8003ede:	029a      	lsls	r2, r3, #10
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	655a      	str	r2, [r3, #84]	; 0x54
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ef2:	659a      	str	r2, [r3, #88]	; 0x58
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	661a      	str	r2, [r3, #96]	; 0x60
 8003efc:	e010      	b.n	8003f20 <HAL_SD_GetCardCSD+0x2c2>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003f06:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e0c1      	b.n	80040a4 <HAL_SD_GetCardCSD+0x446>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	099b      	lsrs	r3, r3, #6
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	b2da      	uxtb	r2, r3
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	7e9b      	ldrb	r3, [r3, #26]
 8003f4e:	b2da      	uxtb	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	09db      	lsrs	r3, r3, #7
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	b2da      	uxtb	r2, r3
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f6c:	b2da      	uxtb	r2, r3
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f76:	0e1b      	lsrs	r3, r3, #24
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	09db      	lsrs	r3, r3, #7
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	b2da      	uxtb	r2, r3
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	095b      	lsrs	r3, r3, #5
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	f003 0303 	and.w	r3, r3, #3
 8003f96:	b2da      	uxtb	r2, r3
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	089b      	lsrs	r3, r3, #2
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	f003 0307 	and.w	r3, r3, #7
 8003fa6:	b2da      	uxtb	r2, r3
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	f003 030c 	and.w	r3, r3, #12
 8003fb8:	b2da      	uxtb	r2, r3
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc2:	0c1b      	lsrs	r3, r3, #16
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	7fdb      	ldrb	r3, [r3, #31]
 8003fcc:	b2da      	uxtb	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	099b      	lsrs	r3, r3, #6
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	f003 0303 	and.w	r3, r3, #3
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	b2da      	uxtb	r2, r3
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	095b      	lsrs	r3, r3, #5
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	b2da      	uxtb	r2, r3
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0U;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	b2da      	uxtb	r2, r3
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004010:	0a1b      	lsrs	r3, r3, #8
 8004012:	b2db      	uxtb	r3, r3
 8004014:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	09db      	lsrs	r3, r3, #7
 800401a:	b2db      	uxtb	r3, r3
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	b2da      	uxtb	r2, r3
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	099b      	lsrs	r3, r3, #6
 800402c:	b2db      	uxtb	r3, r3
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	b2da      	uxtb	r2, r3
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	095b      	lsrs	r3, r3, #5
 800403e:	b2db      	uxtb	r3, r3
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	b2da      	uxtb	r2, r3
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	091b      	lsrs	r3, r3, #4
 8004050:	b2db      	uxtb	r3, r3
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	b2da      	uxtb	r2, r3
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	089b      	lsrs	r3, r3, #2
 8004062:	b2db      	uxtb	r3, r3
 8004064:	f003 0303 	and.w	r3, r3, #3
 8004068:	b2da      	uxtb	r2, r3
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	b2db      	uxtb	r3, r3
 8004074:	f003 0303 	and.w	r3, r3, #3
 8004078:	b2da      	uxtb	r2, r3
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004084:	b2db      	uxtb	r3, r3
 8004086:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	085b      	lsrs	r3, r3, #1
 800408c:	b2db      	uxtb	r3, r3
 800408e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004092:	b2da      	uxtb	r2, r3
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3714      	adds	r7, #20
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004108:	b5b0      	push	{r4, r5, r7, lr}
 800410a:	b08e      	sub	sp, #56	; 0x38
 800410c:	af04      	add	r7, sp, #16
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004112:	2300      	movs	r3, #0
 8004114:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2203      	movs	r2, #3
 800411a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004122:	2b03      	cmp	r3, #3
 8004124:	d02e      	beq.n	8004184 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800412c:	d106      	bne.n	800413c <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004132:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	639a      	str	r2, [r3, #56]	; 0x38
 800413a:	e029      	b.n	8004190 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004142:	d10a      	bne.n	800415a <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 fa1b 	bl	8004580 <SD_WideBus_Enable>
 800414a:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	639a      	str	r2, [r3, #56]	; 0x38
 8004158:	e01a      	b.n	8004190 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10a      	bne.n	8004176 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 fa5a 	bl	800461a <SD_WideBus_Disable>
 8004166:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416e:	431a      	orrs	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	639a      	str	r2, [r3, #56]	; 0x38
 8004174:	e00c      	b.n	8004190 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	639a      	str	r2, [r3, #56]	; 0x38
 8004182:	e005      	b.n	8004190 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004188:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00a      	beq.n	80041ae <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80041a0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e024      	b.n	80041f8 <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	623b      	str	r3, [r7, #32]
    SDIO_Init(hsd->Instance, Init);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681d      	ldr	r5, [r3, #0]
 80041d4:	466c      	mov	r4, sp
 80041d6:	f107 0318 	add.w	r3, r7, #24
 80041da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80041de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80041e2:	f107 030c 	add.w	r3, r7, #12
 80041e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041e8:	4628      	mov	r0, r5
 80041ea:	f000 ff2f 	bl	800504c <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3728      	adds	r7, #40	; 0x28
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bdb0      	pop	{r4, r5, r7, pc}

08004200 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 8004208:	2304      	movs	r3, #4
 800420a:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800420c:	2300      	movs	r3, #0
 800420e:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 8004210:	2300      	movs	r3, #0
 8004212:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 8004214:	f107 030c 	add.w	r3, r7, #12
 8004218:	4619      	mov	r1, r3
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 f986 	bl	800452c <SD_SendStatus>
 8004220:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d005      	beq.n	8004234 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	431a      	orrs	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9U) & 0x0FU);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	0a5b      	lsrs	r3, r3, #9
 8004238:	b2db      	uxtb	r3, r3
 800423a:	f003 030f 	and.w	r3, r3, #15
 800423e:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 8004240:	7dfb      	ldrb	r3, [r7, #23]
}
 8004242:	4618      	mov	r0, r3
 8004244:	3718      	adds	r7, #24
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800424a:	b5b0      	push	{r4, r5, r7, lr}
 800424c:	b094      	sub	sp, #80	; 0x50
 800424e:	af04      	add	r7, sp, #16
 8004250:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004252:	2300      	movs	r3, #0
 8004254:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1U;
 8004256:	2301      	movs	r3, #1
 8004258:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4618      	mov	r0, r3
 8004260:	f000 ff4b 	bl	80050fa <SDIO_GetPowerState>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d102      	bne.n	8004270 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800426a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800426e:	e0b1      	b.n	80043d4 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004274:	2b03      	cmp	r3, #3
 8004276:	d02f      	beq.n	80042d8 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4618      	mov	r0, r3
 800427e:	f001 f991 	bl	80055a4 <SDMMC_CmdSendCID>
 8004282:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <SD_InitCard+0x44>
    {
      return errorstate;
 800428a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800428c:	e0a2      	b.n	80043d4 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2100      	movs	r1, #0
 8004294:	4618      	mov	r0, r3
 8004296:	f000 ff75 	bl	8005184 <SDIO_GetResponse>
 800429a:	4602      	mov	r2, r0
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2104      	movs	r1, #4
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 ff6c 	bl	8005184 <SDIO_GetResponse>
 80042ac:	4602      	mov	r2, r0
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2108      	movs	r1, #8
 80042b8:	4618      	mov	r0, r3
 80042ba:	f000 ff63 	bl	8005184 <SDIO_GetResponse>
 80042be:	4602      	mov	r2, r0
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	210c      	movs	r1, #12
 80042ca:	4618      	mov	r0, r3
 80042cc:	f000 ff5a 	bl	8005184 <SDIO_GetResponse>
 80042d0:	4602      	mov	r2, r0
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042dc:	2b03      	cmp	r3, #3
 80042de:	d00d      	beq.n	80042fc <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f107 020e 	add.w	r2, r7, #14
 80042e8:	4611      	mov	r1, r2
 80042ea:	4618      	mov	r0, r3
 80042ec:	f001 f99b 	bl	8005626 <SDMMC_CmdSetRelAdd>
 80042f0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80042f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <SD_InitCard+0xb2>
    {
      return errorstate;
 80042f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042fa:	e06b      	b.n	80043d4 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004300:	2b03      	cmp	r3, #3
 8004302:	d036      	beq.n	8004372 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004304:	89fb      	ldrh	r3, [r7, #14]
 8004306:	461a      	mov	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004314:	041b      	lsls	r3, r3, #16
 8004316:	4619      	mov	r1, r3
 8004318:	4610      	mov	r0, r2
 800431a:	f001 f963 	bl	80055e4 <SDMMC_CmdSendCSD>
 800431e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <SD_InitCard+0xe0>
    {
      return errorstate;
 8004326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004328:	e054      	b.n	80043d4 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2100      	movs	r1, #0
 8004330:	4618      	mov	r0, r3
 8004332:	f000 ff27 	bl	8005184 <SDIO_GetResponse>
 8004336:	4602      	mov	r2, r0
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2104      	movs	r1, #4
 8004342:	4618      	mov	r0, r3
 8004344:	f000 ff1e 	bl	8005184 <SDIO_GetResponse>
 8004348:	4602      	mov	r2, r0
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2108      	movs	r1, #8
 8004354:	4618      	mov	r0, r3
 8004356:	f000 ff15 	bl	8005184 <SDIO_GetResponse>
 800435a:	4602      	mov	r2, r0
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	210c      	movs	r1, #12
 8004366:	4618      	mov	r0, r3
 8004368:	f000 ff0c 	bl	8005184 <SDIO_GetResponse>
 800436c:	4602      	mov	r2, r0
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2104      	movs	r1, #4
 8004378:	4618      	mov	r0, r3
 800437a:	f000 ff03 	bl	8005184 <SDIO_GetResponse>
 800437e:	4603      	mov	r3, r0
 8004380:	0d1a      	lsrs	r2, r3, #20
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 8004386:	f107 0310 	add.w	r3, r7, #16
 800438a:	4619      	mov	r1, r3
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f7ff fc66 	bl	8003c5e <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6819      	ldr	r1, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800439a:	041b      	lsls	r3, r3, #16
 800439c:	f04f 0400 	mov.w	r4, #0
 80043a0:	461a      	mov	r2, r3
 80043a2:	4623      	mov	r3, r4
 80043a4:	4608      	mov	r0, r1
 80043a6:	f001 f807 	bl	80053b8 <SDMMC_CmdSelDesel>
 80043aa:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80043ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <SD_InitCard+0x16c>
  {
    return errorstate;
 80043b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043b4:	e00e      	b.n	80043d4 <SD_InitCard+0x18a>
  }

  /* Configure SDIO peripheral interface */     
  SDIO_Init(hsd->Instance, hsd->Init);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681d      	ldr	r5, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	466c      	mov	r4, sp
 80043be:	f103 0210 	add.w	r2, r3, #16
 80043c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80043c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80043c8:	3304      	adds	r3, #4
 80043ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043cc:	4628      	mov	r0, r5
 80043ce:	f000 fe3d 	bl	800504c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3740      	adds	r7, #64	; 0x40
 80043d8:	46bd      	mov	sp, r7
 80043da:	bdb0      	pop	{r4, r5, r7, pc}

080043dc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80043e4:	2300      	movs	r3, #0
 80043e6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	617b      	str	r3, [r7, #20]
 80043ec:	2300      	movs	r3, #0
 80043ee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80043f0:	2300      	movs	r3, #0
 80043f2:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f001 f802 	bl	8005402 <SDMMC_CmdGoIdleState>
 80043fe:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <SD_PowerON+0x2e>
  {
    return errorstate;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	e08c      	b.n	8004524 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4618      	mov	r0, r3
 8004410:	f001 f817 	bl	8005442 <SDMMC_CmdOperCond>
 8004414:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d03d      	beq.n	8004498 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 8004422:	e032      	b.n	800448a <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	1c5a      	adds	r2, r3, #1
 8004428:	60ba      	str	r2, [r7, #8]
 800442a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800442e:	4293      	cmp	r3, r2
 8004430:	d102      	bne.n	8004438 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004432:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004436:	e075      	b.n	8004524 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2100      	movs	r1, #0
 800443e:	4618      	mov	r0, r3
 8004440:	f001 f820 	bl	8005484 <SDMMC_CmdAppCommand>
 8004444:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d002      	beq.n	8004452 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800444c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004450:	e068      	b.n	8004524 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2100      	movs	r1, #0
 8004458:	4618      	mov	r0, r3
 800445a:	f001 f837 	bl	80054cc <SDMMC_CmdAppOperCommand>
 800445e:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d002      	beq.n	800446c <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004466:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800446a:	e05b      	b.n	8004524 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2100      	movs	r1, #0
 8004472:	4618      	mov	r0, r3
 8004474:	f000 fe86 	bl	8005184 <SDIO_GetResponse>
 8004478:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	0fdb      	lsrs	r3, r3, #31
 800447e:	2b01      	cmp	r3, #1
 8004480:	d101      	bne.n	8004486 <SD_PowerON+0xaa>
 8004482:	2301      	movs	r3, #1
 8004484:	e000      	b.n	8004488 <SD_PowerON+0xac>
 8004486:	2300      	movs	r3, #0
 8004488:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d0c9      	beq.n	8004424 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	645a      	str	r2, [r3, #68]	; 0x44
 8004496:	e044      	b.n	8004522 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 800449e:	e031      	b.n	8004504 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	1c5a      	adds	r2, r3, #1
 80044a4:	60ba      	str	r2, [r7, #8]
 80044a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d102      	bne.n	80044b4 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80044ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044b2:	e037      	b.n	8004524 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2100      	movs	r1, #0
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 ffe2 	bl	8005484 <SDMMC_CmdAppCommand>
 80044c0:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d001      	beq.n	80044cc <SD_PowerON+0xf0>
      {
        return errorstate;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	e02b      	b.n	8004524 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80044d4:	4618      	mov	r0, r3
 80044d6:	f000 fff9 	bl	80054cc <SDMMC_CmdAppOperCommand>
 80044da:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <SD_PowerON+0x10a>
      {
        return errorstate;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	e01e      	b.n	8004524 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2100      	movs	r1, #0
 80044ec:	4618      	mov	r0, r3
 80044ee:	f000 fe49 	bl	8005184 <SDIO_GetResponse>
 80044f2:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	0fdb      	lsrs	r3, r3, #31
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d101      	bne.n	8004500 <SD_PowerON+0x124>
 80044fc:	2301      	movs	r3, #1
 80044fe:	e000      	b.n	8004502 <SD_PowerON+0x126>
 8004500:	2300      	movs	r3, #0
 8004502:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0ca      	beq.n	80044a0 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d003      	beq.n	800451c <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	645a      	str	r2, [r3, #68]	; 0x44
 800451a:	e002      	b.n	8004522 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3718      	adds	r7, #24
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004536:	2300      	movs	r3, #0
 8004538:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d102      	bne.n	8004546 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 8004540:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004544:	e018      	b.n	8004578 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800454e:	041b      	lsls	r3, r3, #16
 8004550:	4619      	mov	r1, r3
 8004552:	4610      	mov	r0, r2
 8004554:	f001 f88a 	bl	800566c <SDMMC_CmdSendStatus>
 8004558:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <SD_SendStatus+0x38>
  {
    return errorstate;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	e009      	b.n	8004578 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2100      	movs	r1, #0
 800456a:	4618      	mov	r0, r3
 800456c:	f000 fe0a 	bl	8005184 <SDIO_GetResponse>
 8004570:	4602      	mov	r2, r0
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004588:	2300      	movs	r3, #0
 800458a:	60fb      	str	r3, [r7, #12]
 800458c:	2300      	movs	r3, #0
 800458e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004590:	2300      	movs	r3, #0
 8004592:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2100      	movs	r1, #0
 800459a:	4618      	mov	r0, r3
 800459c:	f000 fdf2 	bl	8005184 <SDIO_GetResponse>
 80045a0:	4603      	mov	r3, r0
 80045a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045aa:	d102      	bne.n	80045b2 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80045ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80045b0:	e02f      	b.n	8004612 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80045b2:	f107 030c 	add.w	r3, r7, #12
 80045b6:	4619      	mov	r1, r3
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 f87b 	bl	80046b4 <SD_FindSCR>
 80045be:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	e023      	b.n	8004612 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d01c      	beq.n	800460e <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045dc:	041b      	lsls	r3, r3, #16
 80045de:	4619      	mov	r1, r3
 80045e0:	4610      	mov	r0, r2
 80045e2:	f000 ff4f 	bl	8005484 <SDMMC_CmdAppCommand>
 80045e6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	e00f      	b.n	8004612 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2102      	movs	r1, #2
 80045f8:	4618      	mov	r0, r3
 80045fa:	f000 ff8c 	bl	8005516 <SDMMC_CmdBusWidth>
 80045fe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	e003      	b.n	8004612 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 800460a:	2300      	movs	r3, #0
 800460c:	e001      	b.n	8004612 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800460e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004612:	4618      	mov	r0, r3
 8004614:	3718      	adds	r7, #24
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b086      	sub	sp, #24
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004622:	2300      	movs	r3, #0
 8004624:	60fb      	str	r3, [r7, #12]
 8004626:	2300      	movs	r3, #0
 8004628:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800462a:	2300      	movs	r3, #0
 800462c:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2100      	movs	r1, #0
 8004634:	4618      	mov	r0, r3
 8004636:	f000 fda5 	bl	8005184 <SDIO_GetResponse>
 800463a:	4603      	mov	r3, r0
 800463c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004640:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004644:	d102      	bne.n	800464c <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004646:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800464a:	e02f      	b.n	80046ac <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800464c:	f107 030c 	add.w	r3, r7, #12
 8004650:	4619      	mov	r1, r3
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f82e 	bl	80046b4 <SD_FindSCR>
 8004658:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d001      	beq.n	8004664 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	e023      	b.n	80046ac <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d01c      	beq.n	80046a8 <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004676:	041b      	lsls	r3, r3, #16
 8004678:	4619      	mov	r1, r3
 800467a:	4610      	mov	r0, r2
 800467c:	f000 ff02 	bl	8005484 <SDMMC_CmdAppCommand>
 8004680:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d001      	beq.n	800468c <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	e00f      	b.n	80046ac <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2100      	movs	r1, #0
 8004692:	4618      	mov	r0, r3
 8004694:	f000 ff3f 	bl	8005516 <SDMMC_CmdBusWidth>
 8004698:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d001      	beq.n	80046a4 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	e003      	b.n	80046ac <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 80046a4:	2300      	movs	r3, #0
 80046a6:	e001      	b.n	80046ac <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80046a8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3718      	adds	r7, #24
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80046b4:	b590      	push	{r4, r7, lr}
 80046b6:	b08f      	sub	sp, #60	; 0x3c
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80046be:	2300      	movs	r3, #0
 80046c0:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80046c2:	f7fb ff97 	bl	80005f4 <HAL_GetTick>
 80046c6:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80046cc:	2300      	movs	r3, #0
 80046ce:	60fb      	str	r3, [r7, #12]
 80046d0:	2300      	movs	r3, #0
 80046d2:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2108      	movs	r1, #8
 80046da:	4618      	mov	r0, r3
 80046dc:	f000 fd93 	bl	8005206 <SDMMC_CmdBlockLength>
 80046e0:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 80046e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <SD_FindSCR+0x38>
  {
    return errorstate;
 80046e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ea:	e0a8      	b.n	800483e <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046f4:	041b      	lsls	r3, r3, #16
 80046f6:	4619      	mov	r1, r3
 80046f8:	4610      	mov	r0, r2
 80046fa:	f000 fec3 	bl	8005484 <SDMMC_CmdAppCommand>
 80046fe:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8004700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <SD_FindSCR+0x56>
  {
    return errorstate;
 8004706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004708:	e099      	b.n	800483e <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800470a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800470e:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8U;
 8004710:	2308      	movs	r3, #8
 8004712:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004714:	2330      	movs	r3, #48	; 0x30
 8004716:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004718:	2302      	movs	r3, #2
 800471a:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800471c:	2300      	movs	r3, #0
 800471e:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004720:	2301      	movs	r3, #1
 8004722:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_ConfigData(hsd->Instance, &config);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f107 0214 	add.w	r2, r7, #20
 800472c:	4611      	mov	r1, r2
 800472e:	4618      	mov	r0, r3
 8004730:	f000 fd3d 	bl	80051ae <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4618      	mov	r0, r3
 800473a:	f000 ff10 	bl	800555e <SDMMC_CmdSendSCR>
 800473e:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8004740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004742:	2b00      	cmp	r3, #0
 8004744:	d022      	beq.n	800478c <SD_FindSCR+0xd8>
  {
    return errorstate;
 8004746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004748:	e079      	b.n	800483e <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004750:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00e      	beq.n	8004776 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6819      	ldr	r1, [r3, #0]
 800475c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	f107 020c 	add.w	r2, r7, #12
 8004764:	18d4      	adds	r4, r2, r3
 8004766:	4608      	mov	r0, r1
 8004768:	f000 fc9b 	bl	80050a2 <SDIO_ReadFIFO>
 800476c:	4603      	mov	r3, r0
 800476e:	6023      	str	r3, [r4, #0]
      index++;
 8004770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004772:	3301      	adds	r3, #1
 8004774:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004776:	f7fb ff3d 	bl	80005f4 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004784:	d102      	bne.n	800478c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004786:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800478a:	e058      	b.n	800483e <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004792:	f240 432a 	movw	r3, #1066	; 0x42a
 8004796:	4013      	ands	r3, r2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d0d6      	beq.n	800474a <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a2:	f003 0308 	and.w	r3, r3, #8
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d005      	beq.n	80047b6 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2208      	movs	r2, #8
 80047b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80047b2:	2308      	movs	r3, #8
 80047b4:	e043      	b.n	800483e <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047bc:	f003 0302 	and.w	r3, r3, #2
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d005      	beq.n	80047d0 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2202      	movs	r2, #2
 80047ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80047cc:	2302      	movs	r3, #2
 80047ce:	e036      	b.n	800483e <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d6:	f003 0320 	and.w	r3, r3, #32
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d005      	beq.n	80047ea <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2220      	movs	r2, #32
 80047e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 80047e6:	2320      	movs	r3, #32
 80047e8:	e029      	b.n	800483e <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80047f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	061a      	lsls	r2, r3, #24
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	021b      	lsls	r3, r3, #8
 80047fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004800:	431a      	orrs	r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	0a1b      	lsrs	r3, r3, #8
 8004806:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800480a:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	3304      	adds	r3, #4
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8004816:	430a      	orrs	r2, r1
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8004818:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	061a      	lsls	r2, r3, #24
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	021b      	lsls	r3, r3, #8
 8004822:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004826:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	0a1b      	lsrs	r3, r3, #8
 800482c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8004830:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	0e1b      	lsrs	r3, r3, #24
 8004836:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	373c      	adds	r7, #60	; 0x3c
 8004842:	46bd      	mov	sp, r7
 8004844:	bd90      	pop	{r4, r7, pc}

08004846 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b082      	sub	sp, #8
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d101      	bne.n	8004858 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e056      	b.n	8004906 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d106      	bne.n	8004878 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f005 fa0e 	bl	8009c94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2202      	movs	r2, #2
 800487c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800488e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685a      	ldr	r2, [r3, #4]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	431a      	orrs	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	431a      	orrs	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	431a      	orrs	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	431a      	orrs	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048b4:	431a      	orrs	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a1b      	ldr	r3, [r3, #32]
 80048c0:	ea42 0103 	orr.w	r1, r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	430a      	orrs	r2, r1
 80048ce:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	0c1b      	lsrs	r3, r3, #16
 80048d6:	f003 0104 	and.w	r1, r3, #4
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	69da      	ldr	r2, [r3, #28]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 800490e:	b580      	push	{r7, lr}
 8004910:	b084      	sub	sp, #16
 8004912:	af00      	add	r7, sp, #0
 8004914:	60f8      	str	r0, [r7, #12]
 8004916:	60b9      	str	r1, [r7, #8]
 8004918:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d101      	bne.n	8004924 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e034      	b.n	800498e <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800492a:	b2db      	uxtb	r3, r3
 800492c:	2b00      	cmp	r3, #0
 800492e:	d106      	bne.n	800493e <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	f004 fd53 	bl	80093e4 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	3308      	adds	r3, #8
 8004946:	4619      	mov	r1, r3
 8004948:	4610      	mov	r0, r2
 800494a:	f000 fa7b 	bl	8004e44 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6818      	ldr	r0, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	461a      	mov	r2, r3
 8004958:	68b9      	ldr	r1, [r7, #8]
 800495a:	f000 fae3 	bl	8004f24 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6858      	ldr	r0, [r3, #4]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	689a      	ldr	r2, [r3, #8]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496a:	6879      	ldr	r1, [r7, #4]
 800496c:	f000 fb2e 	bl	8004fcc <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	6892      	ldr	r2, [r2, #8]
 8004978:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	6892      	ldr	r2, [r2, #8]
 8004984:	f041 0101 	orr.w	r1, r1, #1
 8004988:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004996:	b580      	push	{r7, lr}
 8004998:	b082      	sub	sp, #8
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d101      	bne.n	80049a8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e03f      	b.n	8004a28 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d106      	bne.n	80049c2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f005 fabf 	bl	8009f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2224      	movs	r2, #36	; 0x24
 80049c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68da      	ldr	r2, [r3, #12]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049d8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f828 	bl	8004a30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	691a      	ldr	r2, [r3, #16]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049ee:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	695a      	ldr	r2, [r3, #20]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049fe:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68da      	ldr	r2, [r3, #12]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a0e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2220      	movs	r2, #32
 8004a22:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3708      	adds	r7, #8
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a30:	b5b0      	push	{r4, r5, r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68da      	ldr	r2, [r3, #12]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	689a      	ldr	r2, [r3, #8]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	431a      	orrs	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	69db      	ldr	r3, [r3, #28]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004a70:	f023 030c 	bic.w	r3, r3, #12
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	6812      	ldr	r2, [r2, #0]
 8004a78:	68f9      	ldr	r1, [r7, #12]
 8004a7a:	430b      	orrs	r3, r1
 8004a7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	695b      	ldr	r3, [r3, #20]
 8004a84:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	699a      	ldr	r2, [r3, #24]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	430a      	orrs	r2, r1
 8004a92:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	69db      	ldr	r3, [r3, #28]
 8004a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a9c:	f040 80e4 	bne.w	8004c68 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4aab      	ldr	r2, [pc, #684]	; (8004d54 <UART_SetConfig+0x324>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d004      	beq.n	8004ab4 <UART_SetConfig+0x84>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4aaa      	ldr	r2, [pc, #680]	; (8004d58 <UART_SetConfig+0x328>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d16c      	bne.n	8004b8e <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004ab4:	f7fe f86c 	bl	8002b90 <HAL_RCC_GetPCLK2Freq>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	4613      	mov	r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	4413      	add	r3, r2
 8004ac0:	009a      	lsls	r2, r3, #2
 8004ac2:	441a      	add	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	005b      	lsls	r3, r3, #1
 8004aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ace:	4aa3      	ldr	r2, [pc, #652]	; (8004d5c <UART_SetConfig+0x32c>)
 8004ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad4:	095b      	lsrs	r3, r3, #5
 8004ad6:	011c      	lsls	r4, r3, #4
 8004ad8:	f7fe f85a 	bl	8002b90 <HAL_RCC_GetPCLK2Freq>
 8004adc:	4602      	mov	r2, r0
 8004ade:	4613      	mov	r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4413      	add	r3, r2
 8004ae4:	009a      	lsls	r2, r3, #2
 8004ae6:	441a      	add	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	005b      	lsls	r3, r3, #1
 8004aee:	fbb2 f5f3 	udiv	r5, r2, r3
 8004af2:	f7fe f84d 	bl	8002b90 <HAL_RCC_GetPCLK2Freq>
 8004af6:	4602      	mov	r2, r0
 8004af8:	4613      	mov	r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	4413      	add	r3, r2
 8004afe:	009a      	lsls	r2, r3, #2
 8004b00:	441a      	add	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	005b      	lsls	r3, r3, #1
 8004b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b0c:	4a93      	ldr	r2, [pc, #588]	; (8004d5c <UART_SetConfig+0x32c>)
 8004b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b12:	095b      	lsrs	r3, r3, #5
 8004b14:	2264      	movs	r2, #100	; 0x64
 8004b16:	fb02 f303 	mul.w	r3, r2, r3
 8004b1a:	1aeb      	subs	r3, r5, r3
 8004b1c:	00db      	lsls	r3, r3, #3
 8004b1e:	3332      	adds	r3, #50	; 0x32
 8004b20:	4a8e      	ldr	r2, [pc, #568]	; (8004d5c <UART_SetConfig+0x32c>)
 8004b22:	fba2 2303 	umull	r2, r3, r2, r3
 8004b26:	095b      	lsrs	r3, r3, #5
 8004b28:	005b      	lsls	r3, r3, #1
 8004b2a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b2e:	441c      	add	r4, r3
 8004b30:	f7fe f82e 	bl	8002b90 <HAL_RCC_GetPCLK2Freq>
 8004b34:	4602      	mov	r2, r0
 8004b36:	4613      	mov	r3, r2
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	4413      	add	r3, r2
 8004b3c:	009a      	lsls	r2, r3, #2
 8004b3e:	441a      	add	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	fbb2 f5f3 	udiv	r5, r2, r3
 8004b4a:	f7fe f821 	bl	8002b90 <HAL_RCC_GetPCLK2Freq>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	4613      	mov	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	009a      	lsls	r2, r3, #2
 8004b58:	441a      	add	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	005b      	lsls	r3, r3, #1
 8004b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b64:	4a7d      	ldr	r2, [pc, #500]	; (8004d5c <UART_SetConfig+0x32c>)
 8004b66:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6a:	095b      	lsrs	r3, r3, #5
 8004b6c:	2264      	movs	r2, #100	; 0x64
 8004b6e:	fb02 f303 	mul.w	r3, r2, r3
 8004b72:	1aeb      	subs	r3, r5, r3
 8004b74:	00db      	lsls	r3, r3, #3
 8004b76:	3332      	adds	r3, #50	; 0x32
 8004b78:	4a78      	ldr	r2, [pc, #480]	; (8004d5c <UART_SetConfig+0x32c>)
 8004b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b7e:	095b      	lsrs	r3, r3, #5
 8004b80:	f003 0207 	and.w	r2, r3, #7
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4422      	add	r2, r4
 8004b8a:	609a      	str	r2, [r3, #8]
 8004b8c:	e154      	b.n	8004e38 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004b8e:	f7fd ffeb 	bl	8002b68 <HAL_RCC_GetPCLK1Freq>
 8004b92:	4602      	mov	r2, r0
 8004b94:	4613      	mov	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4413      	add	r3, r2
 8004b9a:	009a      	lsls	r2, r3, #2
 8004b9c:	441a      	add	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	005b      	lsls	r3, r3, #1
 8004ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba8:	4a6c      	ldr	r2, [pc, #432]	; (8004d5c <UART_SetConfig+0x32c>)
 8004baa:	fba2 2303 	umull	r2, r3, r2, r3
 8004bae:	095b      	lsrs	r3, r3, #5
 8004bb0:	011c      	lsls	r4, r3, #4
 8004bb2:	f7fd ffd9 	bl	8002b68 <HAL_RCC_GetPCLK1Freq>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	4613      	mov	r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4413      	add	r3, r2
 8004bbe:	009a      	lsls	r2, r3, #2
 8004bc0:	441a      	add	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	005b      	lsls	r3, r3, #1
 8004bc8:	fbb2 f5f3 	udiv	r5, r2, r3
 8004bcc:	f7fd ffcc 	bl	8002b68 <HAL_RCC_GetPCLK1Freq>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4413      	add	r3, r2
 8004bd8:	009a      	lsls	r2, r3, #2
 8004bda:	441a      	add	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	005b      	lsls	r3, r3, #1
 8004be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be6:	4a5d      	ldr	r2, [pc, #372]	; (8004d5c <UART_SetConfig+0x32c>)
 8004be8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bec:	095b      	lsrs	r3, r3, #5
 8004bee:	2264      	movs	r2, #100	; 0x64
 8004bf0:	fb02 f303 	mul.w	r3, r2, r3
 8004bf4:	1aeb      	subs	r3, r5, r3
 8004bf6:	00db      	lsls	r3, r3, #3
 8004bf8:	3332      	adds	r3, #50	; 0x32
 8004bfa:	4a58      	ldr	r2, [pc, #352]	; (8004d5c <UART_SetConfig+0x32c>)
 8004bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8004c00:	095b      	lsrs	r3, r3, #5
 8004c02:	005b      	lsls	r3, r3, #1
 8004c04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c08:	441c      	add	r4, r3
 8004c0a:	f7fd ffad 	bl	8002b68 <HAL_RCC_GetPCLK1Freq>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	4613      	mov	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4413      	add	r3, r2
 8004c16:	009a      	lsls	r2, r3, #2
 8004c18:	441a      	add	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	005b      	lsls	r3, r3, #1
 8004c20:	fbb2 f5f3 	udiv	r5, r2, r3
 8004c24:	f7fd ffa0 	bl	8002b68 <HAL_RCC_GetPCLK1Freq>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	4413      	add	r3, r2
 8004c30:	009a      	lsls	r2, r3, #2
 8004c32:	441a      	add	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	005b      	lsls	r3, r3, #1
 8004c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c3e:	4a47      	ldr	r2, [pc, #284]	; (8004d5c <UART_SetConfig+0x32c>)
 8004c40:	fba2 2303 	umull	r2, r3, r2, r3
 8004c44:	095b      	lsrs	r3, r3, #5
 8004c46:	2264      	movs	r2, #100	; 0x64
 8004c48:	fb02 f303 	mul.w	r3, r2, r3
 8004c4c:	1aeb      	subs	r3, r5, r3
 8004c4e:	00db      	lsls	r3, r3, #3
 8004c50:	3332      	adds	r3, #50	; 0x32
 8004c52:	4a42      	ldr	r2, [pc, #264]	; (8004d5c <UART_SetConfig+0x32c>)
 8004c54:	fba2 2303 	umull	r2, r3, r2, r3
 8004c58:	095b      	lsrs	r3, r3, #5
 8004c5a:	f003 0207 	and.w	r2, r3, #7
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4422      	add	r2, r4
 8004c64:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8004c66:	e0e7      	b.n	8004e38 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a39      	ldr	r2, [pc, #228]	; (8004d54 <UART_SetConfig+0x324>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d004      	beq.n	8004c7c <UART_SetConfig+0x24c>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a38      	ldr	r2, [pc, #224]	; (8004d58 <UART_SetConfig+0x328>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d171      	bne.n	8004d60 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004c7c:	f7fd ff88 	bl	8002b90 <HAL_RCC_GetPCLK2Freq>
 8004c80:	4602      	mov	r2, r0
 8004c82:	4613      	mov	r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	4413      	add	r3, r2
 8004c88:	009a      	lsls	r2, r3, #2
 8004c8a:	441a      	add	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c96:	4a31      	ldr	r2, [pc, #196]	; (8004d5c <UART_SetConfig+0x32c>)
 8004c98:	fba2 2303 	umull	r2, r3, r2, r3
 8004c9c:	095b      	lsrs	r3, r3, #5
 8004c9e:	011c      	lsls	r4, r3, #4
 8004ca0:	f7fd ff76 	bl	8002b90 <HAL_RCC_GetPCLK2Freq>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	4413      	add	r3, r2
 8004cac:	009a      	lsls	r2, r3, #2
 8004cae:	441a      	add	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	fbb2 f5f3 	udiv	r5, r2, r3
 8004cba:	f7fd ff69 	bl	8002b90 <HAL_RCC_GetPCLK2Freq>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4413      	add	r3, r2
 8004cc6:	009a      	lsls	r2, r3, #2
 8004cc8:	441a      	add	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd4:	4a21      	ldr	r2, [pc, #132]	; (8004d5c <UART_SetConfig+0x32c>)
 8004cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cda:	095b      	lsrs	r3, r3, #5
 8004cdc:	2264      	movs	r2, #100	; 0x64
 8004cde:	fb02 f303 	mul.w	r3, r2, r3
 8004ce2:	1aeb      	subs	r3, r5, r3
 8004ce4:	011b      	lsls	r3, r3, #4
 8004ce6:	3332      	adds	r3, #50	; 0x32
 8004ce8:	4a1c      	ldr	r2, [pc, #112]	; (8004d5c <UART_SetConfig+0x32c>)
 8004cea:	fba2 2303 	umull	r2, r3, r2, r3
 8004cee:	095b      	lsrs	r3, r3, #5
 8004cf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cf4:	441c      	add	r4, r3
 8004cf6:	f7fd ff4b 	bl	8002b90 <HAL_RCC_GetPCLK2Freq>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	4413      	add	r3, r2
 8004d02:	009a      	lsls	r2, r3, #2
 8004d04:	441a      	add	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	fbb2 f5f3 	udiv	r5, r2, r3
 8004d10:	f7fd ff3e 	bl	8002b90 <HAL_RCC_GetPCLK2Freq>
 8004d14:	4602      	mov	r2, r0
 8004d16:	4613      	mov	r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	4413      	add	r3, r2
 8004d1c:	009a      	lsls	r2, r3, #2
 8004d1e:	441a      	add	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d2a:	4a0c      	ldr	r2, [pc, #48]	; (8004d5c <UART_SetConfig+0x32c>)
 8004d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d30:	095b      	lsrs	r3, r3, #5
 8004d32:	2264      	movs	r2, #100	; 0x64
 8004d34:	fb02 f303 	mul.w	r3, r2, r3
 8004d38:	1aeb      	subs	r3, r5, r3
 8004d3a:	011b      	lsls	r3, r3, #4
 8004d3c:	3332      	adds	r3, #50	; 0x32
 8004d3e:	4a07      	ldr	r2, [pc, #28]	; (8004d5c <UART_SetConfig+0x32c>)
 8004d40:	fba2 2303 	umull	r2, r3, r2, r3
 8004d44:	095b      	lsrs	r3, r3, #5
 8004d46:	f003 020f 	and.w	r2, r3, #15
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4422      	add	r2, r4
 8004d50:	609a      	str	r2, [r3, #8]
 8004d52:	e071      	b.n	8004e38 <UART_SetConfig+0x408>
 8004d54:	40011000 	.word	0x40011000
 8004d58:	40011400 	.word	0x40011400
 8004d5c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004d60:	f7fd ff02 	bl	8002b68 <HAL_RCC_GetPCLK1Freq>
 8004d64:	4602      	mov	r2, r0
 8004d66:	4613      	mov	r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	4413      	add	r3, r2
 8004d6c:	009a      	lsls	r2, r3, #2
 8004d6e:	441a      	add	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d7a:	4a31      	ldr	r2, [pc, #196]	; (8004e40 <UART_SetConfig+0x410>)
 8004d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d80:	095b      	lsrs	r3, r3, #5
 8004d82:	011c      	lsls	r4, r3, #4
 8004d84:	f7fd fef0 	bl	8002b68 <HAL_RCC_GetPCLK1Freq>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	4413      	add	r3, r2
 8004d90:	009a      	lsls	r2, r3, #2
 8004d92:	441a      	add	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	fbb2 f5f3 	udiv	r5, r2, r3
 8004d9e:	f7fd fee3 	bl	8002b68 <HAL_RCC_GetPCLK1Freq>
 8004da2:	4602      	mov	r2, r0
 8004da4:	4613      	mov	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4413      	add	r3, r2
 8004daa:	009a      	lsls	r2, r3, #2
 8004dac:	441a      	add	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db8:	4a21      	ldr	r2, [pc, #132]	; (8004e40 <UART_SetConfig+0x410>)
 8004dba:	fba2 2303 	umull	r2, r3, r2, r3
 8004dbe:	095b      	lsrs	r3, r3, #5
 8004dc0:	2264      	movs	r2, #100	; 0x64
 8004dc2:	fb02 f303 	mul.w	r3, r2, r3
 8004dc6:	1aeb      	subs	r3, r5, r3
 8004dc8:	011b      	lsls	r3, r3, #4
 8004dca:	3332      	adds	r3, #50	; 0x32
 8004dcc:	4a1c      	ldr	r2, [pc, #112]	; (8004e40 <UART_SetConfig+0x410>)
 8004dce:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd2:	095b      	lsrs	r3, r3, #5
 8004dd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dd8:	441c      	add	r4, r3
 8004dda:	f7fd fec5 	bl	8002b68 <HAL_RCC_GetPCLK1Freq>
 8004dde:	4602      	mov	r2, r0
 8004de0:	4613      	mov	r3, r2
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	4413      	add	r3, r2
 8004de6:	009a      	lsls	r2, r3, #2
 8004de8:	441a      	add	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	fbb2 f5f3 	udiv	r5, r2, r3
 8004df4:	f7fd feb8 	bl	8002b68 <HAL_RCC_GetPCLK1Freq>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	4413      	add	r3, r2
 8004e00:	009a      	lsls	r2, r3, #2
 8004e02:	441a      	add	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e0e:	4a0c      	ldr	r2, [pc, #48]	; (8004e40 <UART_SetConfig+0x410>)
 8004e10:	fba2 2303 	umull	r2, r3, r2, r3
 8004e14:	095b      	lsrs	r3, r3, #5
 8004e16:	2264      	movs	r2, #100	; 0x64
 8004e18:	fb02 f303 	mul.w	r3, r2, r3
 8004e1c:	1aeb      	subs	r3, r5, r3
 8004e1e:	011b      	lsls	r3, r3, #4
 8004e20:	3332      	adds	r3, #50	; 0x32
 8004e22:	4a07      	ldr	r2, [pc, #28]	; (8004e40 <UART_SetConfig+0x410>)
 8004e24:	fba2 2303 	umull	r2, r3, r2, r3
 8004e28:	095b      	lsrs	r3, r3, #5
 8004e2a:	f003 020f 	and.w	r2, r3, #15
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4422      	add	r2, r4
 8004e34:	609a      	str	r2, [r3, #8]
}
 8004e36:	e7ff      	b.n	8004e38 <UART_SetConfig+0x408>
 8004e38:	bf00      	nop
 8004e3a:	3710      	adds	r7, #16
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bdb0      	pop	{r4, r5, r7, pc}
 8004e40:	51eb851f 	.word	0x51eb851f

08004e44 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e5c:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	4b2f      	ldr	r3, [pc, #188]	; (8004f20 <FSMC_NORSRAM_Init+0xdc>)
 8004e62:	4013      	ands	r3, r2
 8004e64:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004e6e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8004e74:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8004e7a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8004e80:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 8004e86:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8004e8c:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8004e92:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8004e98:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8004e9e:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 8004ea4:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 8004eaa:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 8004eb0:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 8004eb6:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	2b08      	cmp	r3, #8
 8004ec4:	d103      	bne.n	8004ece <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ecc:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68f9      	ldr	r1, [r7, #12]
 8004ed6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ede:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ee2:	d10a      	bne.n	8004efa <FSMC_NORSRAM_Init+0xb6>
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d006      	beq.n	8004efa <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d006      	beq.n	8004f10 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	ffc00480 	.word	0xffc00480

08004f24 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b087      	sub	sp, #28
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8004f30:	2300      	movs	r3, #0
 8004f32:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	1c5a      	adds	r2, r3, #1
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f3e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004f46:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004f52:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8004f5a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8004f62:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004f6c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	3b02      	subs	r3, #2
 8004f74:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004f76:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	1c5a      	adds	r2, r3, #1
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6979      	ldr	r1, [r7, #20]
 8004f8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f9c:	d10e      	bne.n	8004fbc <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004fa6:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	3b01      	subs	r3, #1
 8004fae:	051b      	lsls	r3, r3, #20
 8004fb0:	697a      	ldr	r2, [r7, #20]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	371c      	adds	r7, #28
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
	...

08004fcc <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b087      	sub	sp, #28
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
 8004fd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fe4:	d122      	bne.n	800502c <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fee:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	4b15      	ldr	r3, [pc, #84]	; (8005048 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005002:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800500a:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8005012:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005018:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	4313      	orrs	r3, r2
 800501e:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	6979      	ldr	r1, [r7, #20]
 8005026:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800502a:	e005      	b.n	8005038 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005034:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	371c      	adds	r7, #28
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	cff00000 	.word	0xcff00000

0800504c <SDIO_Init>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800504c:	b084      	sub	sp, #16
 800504e:	b480      	push	{r7}
 8005050:	b085      	sub	sp, #20
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
 8005056:	f107 001c 	add.w	r0, r7, #28
 800505a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U;
 800505e:	2300      	movs	r3, #0
 8005060:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005062:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005064:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005066:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800506a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800506c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800506e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005072:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005076:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	4313      	orrs	r3, r2
 800507c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005086:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	431a      	orrs	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3714      	adds	r7, #20
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	b004      	add	sp, #16
 80050a0:	4770      	bx	lr

080050a2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80050a2:	b480      	push	{r7}
 80050a4:	b083      	sub	sp, #12
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <SDIO_WriteFIFO>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	370c      	adds	r7, #12
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80050de:	b480      	push	{r7}
 80050e0:	b083      	sub	sp, #12
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2203      	movs	r2, #3
 80050ea:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80050fa:	b480      	push	{r7}
 80050fc:	b083      	sub	sp, #12
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0303 	and.w	r3, r3, #3
}
 800510a:	4618      	mov	r0, r3
 800510c:	370c      	adds	r7, #12
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr

08005116 <SDIO_SendCommand>:
  * @param  Command pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005116:	b480      	push	{r7}
 8005118:	b085      	sub	sp, #20
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
 800511e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005120:	2300      	movs	r3, #0
 8005122:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005134:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800513a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005140:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	4313      	orrs	r3, r2
 8005146:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005150:	f023 030f 	bic.w	r3, r3, #15
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	431a      	orrs	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3714      	adds	r7, #20
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr

0800516a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800516a:	b480      	push	{r7}
 800516c:	b083      	sub	sp, #12
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	b2db      	uxtb	r3, r3
}
 8005178:	4618      	mov	r0, r3
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <SDIO_GetResponse>:
  *            @arg SDIO_RESP1: Response Register 3
  *            @arg SDIO_RESP1: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 800518e:	2300      	movs	r3, #0
 8005190:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	3314      	adds	r3, #20
 8005196:	461a      	mov	r2, r3
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	4413      	add	r3, r2
 800519c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
}  
 80051a2:	4618      	mov	r0, r3
 80051a4:	3714      	adds	r7, #20
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr

080051ae <SDIO_ConfigData>:
  * @param  Data  pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b085      	sub	sp, #20
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
 80051b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80051b8:	2300      	movs	r3, #0
 80051ba:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	685a      	ldr	r2, [r3, #4]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80051d4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80051da:	431a      	orrs	r2, r3
                       Data->DPSM);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80051e0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ec:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	431a      	orrs	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0

}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3714      	adds	r7, #20
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr

08005206 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b088      	sub	sp, #32
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
 800520e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005210:	2300      	movs	r3, #0
 8005212:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005218:	2310      	movs	r3, #16
 800521a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800521c:	2340      	movs	r3, #64	; 0x40
 800521e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005220:	2300      	movs	r3, #0
 8005222:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005224:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005228:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800522a:	f107 0308 	add.w	r3, r7, #8
 800522e:	4619      	mov	r1, r3
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f7ff ff70 	bl	8005116 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005236:	f241 3288 	movw	r2, #5000	; 0x1388
 800523a:	2110      	movs	r1, #16
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 fa63 	bl	8005708 <SDMMC_GetCmdResp1>
 8005242:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005244:	69fb      	ldr	r3, [r7, #28]
}
 8005246:	4618      	mov	r0, r3
 8005248:	3720      	adds	r7, #32
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b088      	sub	sp, #32
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
 8005256:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005258:	2300      	movs	r3, #0
 800525a:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005260:	2311      	movs	r3, #17
 8005262:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005264:	2340      	movs	r3, #64	; 0x40
 8005266:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005268:	2300      	movs	r3, #0
 800526a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800526c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005270:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005272:	f107 0308 	add.w	r3, r7, #8
 8005276:	4619      	mov	r1, r3
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f7ff ff4c 	bl	8005116 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800527e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005282:	2111      	movs	r1, #17
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 fa3f 	bl	8005708 <SDMMC_GetCmdResp1>
 800528a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800528c:	69fb      	ldr	r3, [r7, #28]
}
 800528e:	4618      	mov	r0, r3
 8005290:	3720      	adds	r7, #32
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}

08005296 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005296:	b580      	push	{r7, lr}
 8005298:	b088      	sub	sp, #32
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
 800529e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80052a0:	2300      	movs	r3, #0
 80052a2:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80052a8:	2312      	movs	r3, #18
 80052aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80052ac:	2340      	movs	r3, #64	; 0x40
 80052ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80052b0:	2300      	movs	r3, #0
 80052b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80052b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052b8:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80052ba:	f107 0308 	add.w	r3, r7, #8
 80052be:	4619      	mov	r1, r3
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f7ff ff28 	bl	8005116 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80052c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ca:	2112      	movs	r1, #18
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 fa1b 	bl	8005708 <SDMMC_GetCmdResp1>
 80052d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052d4:	69fb      	ldr	r3, [r7, #28]
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3720      	adds	r7, #32
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}

080052de <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80052de:	b580      	push	{r7, lr}
 80052e0:	b088      	sub	sp, #32
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
 80052e6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80052e8:	2300      	movs	r3, #0
 80052ea:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80052f0:	2318      	movs	r3, #24
 80052f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80052f4:	2340      	movs	r3, #64	; 0x40
 80052f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80052f8:	2300      	movs	r3, #0
 80052fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80052fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005300:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005302:	f107 0308 	add.w	r3, r7, #8
 8005306:	4619      	mov	r1, r3
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f7ff ff04 	bl	8005116 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800530e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005312:	2118      	movs	r1, #24
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 f9f7 	bl	8005708 <SDMMC_GetCmdResp1>
 800531a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800531c:	69fb      	ldr	r3, [r7, #28]
}
 800531e:	4618      	mov	r0, r3
 8005320:	3720      	adds	r7, #32
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b088      	sub	sp, #32
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
 800532e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005330:	2300      	movs	r3, #0
 8005332:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005338:	2319      	movs	r3, #25
 800533a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800533c:	2340      	movs	r3, #64	; 0x40
 800533e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005340:	2300      	movs	r3, #0
 8005342:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005344:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005348:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800534a:	f107 0308 	add.w	r3, r7, #8
 800534e:	4619      	mov	r1, r3
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f7ff fee0 	bl	8005116 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005356:	f241 3288 	movw	r2, #5000	; 0x1388
 800535a:	2119      	movs	r1, #25
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 f9d3 	bl	8005708 <SDMMC_GetCmdResp1>
 8005362:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005364:	69fb      	ldr	r3, [r7, #28]
}
 8005366:	4618      	mov	r0, r3
 8005368:	3720      	adds	r7, #32
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
	...

08005370 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b088      	sub	sp, #32
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005378:	2300      	movs	r3, #0
 800537a:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800537c:	2300      	movs	r3, #0
 800537e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005380:	230c      	movs	r3, #12
 8005382:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005384:	2340      	movs	r3, #64	; 0x40
 8005386:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005388:	2300      	movs	r3, #0
 800538a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800538c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005390:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005392:	f107 0308 	add.w	r3, r7, #8
 8005396:	4619      	mov	r1, r3
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f7ff febc 	bl	8005116 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 800539e:	4a05      	ldr	r2, [pc, #20]	; (80053b4 <SDMMC_CmdStopTransfer+0x44>)
 80053a0:	210c      	movs	r1, #12
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f9b0 	bl	8005708 <SDMMC_GetCmdResp1>
 80053a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053aa:	69fb      	ldr	r3, [r7, #28]
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3720      	adds	r7, #32
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	05f5e100 	.word	0x05f5e100

080053b8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx Pointer to SDIO register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b08a      	sub	sp, #40	; 0x28
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80053c4:	2300      	movs	r3, #0
 80053c6:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80053cc:	2307      	movs	r3, #7
 80053ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80053d0:	2340      	movs	r3, #64	; 0x40
 80053d2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80053d4:	2300      	movs	r3, #0
 80053d6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80053d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053dc:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80053de:	f107 0310 	add.w	r3, r7, #16
 80053e2:	4619      	mov	r1, r3
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f7ff fe96 	bl	8005116 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80053ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ee:	2107      	movs	r1, #7
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	f000 f989 	bl	8005708 <SDMMC_GetCmdResp1>
 80053f6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80053f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3728      	adds	r7, #40	; 0x28
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b088      	sub	sp, #32
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800540a:	2300      	movs	r3, #0
 800540c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0U;
 800540e:	2300      	movs	r3, #0
 8005410:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005412:	2300      	movs	r3, #0
 8005414:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005416:	2300      	movs	r3, #0
 8005418:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800541a:	2300      	movs	r3, #0
 800541c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800541e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005422:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005424:	f107 0308 	add.w	r3, r7, #8
 8005428:	4619      	mov	r1, r3
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f7ff fe73 	bl	8005116 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 f93f 	bl	80056b4 <SDMMC_GetCmdError>
 8005436:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005438:	69fb      	ldr	r3, [r7, #28]
}
 800543a:	4618      	mov	r0, r3
 800543c:	3720      	adds	r7, #32
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b088      	sub	sp, #32
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800544a:	2300      	movs	r3, #0
 800544c:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800544e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005452:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005454:	2308      	movs	r3, #8
 8005456:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005458:	2340      	movs	r3, #64	; 0x40
 800545a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800545c:	2300      	movs	r3, #0
 800545e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005460:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005464:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005466:	f107 0308 	add.w	r3, r7, #8
 800546a:	4619      	mov	r1, r3
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f7ff fe52 	bl	8005116 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 fb10 	bl	8005a98 <SDMMC_GetCmdResp7>
 8005478:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800547a:	69fb      	ldr	r3, [r7, #28]
}
 800547c:	4618      	mov	r0, r3
 800547e:	3720      	adds	r7, #32
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b088      	sub	sp, #32
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800548e:	2300      	movs	r3, #0
 8005490:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005496:	2337      	movs	r3, #55	; 0x37
 8005498:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800549a:	2340      	movs	r3, #64	; 0x40
 800549c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800549e:	2300      	movs	r3, #0
 80054a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80054a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054a6:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80054a8:	f107 0308 	add.w	r3, r7, #8
 80054ac:	4619      	mov	r1, r3
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f7ff fe31 	bl	8005116 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80054b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80054b8:	2137      	movs	r1, #55	; 0x37
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f924 	bl	8005708 <SDMMC_GetCmdResp1>
 80054c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054c2:	69fb      	ldr	r3, [r7, #28]
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3720      	adds	r7, #32
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b088      	sub	sp, #32
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80054d6:	2300      	movs	r3, #0
 80054d8:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80054e6:	2329      	movs	r3, #41	; 0x29
 80054e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80054ea:	2340      	movs	r3, #64	; 0x40
 80054ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80054ee:	2300      	movs	r3, #0
 80054f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80054f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054f6:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80054f8:	f107 0308 	add.w	r3, r7, #8
 80054fc:	4619      	mov	r1, r3
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f7ff fe09 	bl	8005116 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 fa25 	bl	8005954 <SDMMC_GetCmdResp3>
 800550a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800550c:	69fb      	ldr	r3, [r7, #28]
}
 800550e:	4618      	mov	r0, r3
 8005510:	3720      	adds	r7, #32
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}

08005516 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8005516:	b580      	push	{r7, lr}
 8005518:	b088      	sub	sp, #32
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
 800551e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005520:	2300      	movs	r3, #0
 8005522:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005528:	2306      	movs	r3, #6
 800552a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800552c:	2340      	movs	r3, #64	; 0x40
 800552e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005530:	2300      	movs	r3, #0
 8005532:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005534:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005538:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800553a:	f107 0308 	add.w	r3, r7, #8
 800553e:	4619      	mov	r1, r3
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f7ff fde8 	bl	8005116 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8005546:	f241 3288 	movw	r2, #5000	; 0x1388
 800554a:	2106      	movs	r1, #6
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 f8db 	bl	8005708 <SDMMC_GetCmdResp1>
 8005552:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005554:	69fb      	ldr	r3, [r7, #28]
}
 8005556:	4618      	mov	r0, r3
 8005558:	3720      	adds	r7, #32
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b088      	sub	sp, #32
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005566:	2300      	movs	r3, #0
 8005568:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800556a:	2300      	movs	r3, #0
 800556c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800556e:	2333      	movs	r3, #51	; 0x33
 8005570:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005572:	2340      	movs	r3, #64	; 0x40
 8005574:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005576:	2300      	movs	r3, #0
 8005578:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800557a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800557e:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005580:	f107 0308 	add.w	r3, r7, #8
 8005584:	4619      	mov	r1, r3
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f7ff fdc5 	bl	8005116 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800558c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005590:	2133      	movs	r1, #51	; 0x33
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f8b8 	bl	8005708 <SDMMC_GetCmdResp1>
 8005598:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800559a:	69fb      	ldr	r3, [r7, #28]
}
 800559c:	4618      	mov	r0, r3
 800559e:	3720      	adds	r7, #32
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b088      	sub	sp, #32
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80055ac:	2300      	movs	r3, #0
 80055ae:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80055b0:	2300      	movs	r3, #0
 80055b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80055b4:	2302      	movs	r3, #2
 80055b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80055b8:	23c0      	movs	r3, #192	; 0xc0
 80055ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80055bc:	2300      	movs	r3, #0
 80055be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80055c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055c4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80055c6:	f107 0308 	add.w	r3, r7, #8
 80055ca:	4619      	mov	r1, r3
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f7ff fda2 	bl	8005116 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f97e 	bl	80058d4 <SDMMC_GetCmdResp2>
 80055d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055da:	69fb      	ldr	r3, [r7, #28]
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3720      	adds	r7, #32
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b088      	sub	sp, #32
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80055ee:	2300      	movs	r3, #0
 80055f0:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80055f6:	2309      	movs	r3, #9
 80055f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80055fa:	23c0      	movs	r3, #192	; 0xc0
 80055fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80055fe:	2300      	movs	r3, #0
 8005600:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005602:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005606:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005608:	f107 0308 	add.w	r3, r7, #8
 800560c:	4619      	mov	r1, r3
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f7ff fd81 	bl	8005116 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 f95d 	bl	80058d4 <SDMMC_GetCmdResp2>
 800561a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800561c:	69fb      	ldr	r3, [r7, #28]
}
 800561e:	4618      	mov	r0, r3
 8005620:	3720      	adds	r7, #32
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005626:	b580      	push	{r7, lr}
 8005628:	b088      	sub	sp, #32
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
 800562e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005630:	2300      	movs	r3, #0
 8005632:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005634:	2300      	movs	r3, #0
 8005636:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005638:	2303      	movs	r3, #3
 800563a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800563c:	2340      	movs	r3, #64	; 0x40
 800563e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005640:	2300      	movs	r3, #0
 8005642:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005644:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005648:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800564a:	f107 0308 	add.w	r3, r7, #8
 800564e:	4619      	mov	r1, r3
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f7ff fd60 	bl	8005116 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005656:	683a      	ldr	r2, [r7, #0]
 8005658:	2103      	movs	r1, #3
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f9ae 	bl	80059bc <SDMMC_GetCmdResp6>
 8005660:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005662:	69fb      	ldr	r3, [r7, #28]
}
 8005664:	4618      	mov	r0, r3
 8005666:	3720      	adds	r7, #32
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b088      	sub	sp, #32
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005676:	2300      	movs	r3, #0
 8005678:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800567e:	230d      	movs	r3, #13
 8005680:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005682:	2340      	movs	r3, #64	; 0x40
 8005684:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005686:	2300      	movs	r3, #0
 8005688:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800568a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800568e:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005690:	f107 0308 	add.w	r3, r7, #8
 8005694:	4619      	mov	r1, r3
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f7ff fd3d 	bl	8005116 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800569c:	f241 3288 	movw	r2, #5000	; 0x1388
 80056a0:	210d      	movs	r1, #13
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f830 	bl	8005708 <SDMMC_GetCmdResp1>
 80056a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056aa:	69fb      	ldr	r3, [r7, #28]
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3720      	adds	r7, #32
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80056b4:	b490      	push	{r4, r7}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80056bc:	4b10      	ldr	r3, [pc, #64]	; (8005700 <SDMMC_GetCmdError+0x4c>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a10      	ldr	r2, [pc, #64]	; (8005704 <SDMMC_GetCmdError+0x50>)
 80056c2:	fba2 2303 	umull	r2, r3, r2, r3
 80056c6:	0a5b      	lsrs	r3, r3, #9
 80056c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056cc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80056d0:	4623      	mov	r3, r4
 80056d2:	1e5c      	subs	r4, r3, #1
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d102      	bne.n	80056de <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80056d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80056dc:	e00a      	b.n	80056f4 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d0f2      	beq.n	80056d0 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80056f0:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3708      	adds	r7, #8
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bc90      	pop	{r4, r7}
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop
 8005700:	20000118 	.word	0x20000118
 8005704:	10624dd3 	.word	0x10624dd3

08005708 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005708:	b590      	push	{r4, r7, lr}
 800570a:	b087      	sub	sp, #28
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	460b      	mov	r3, r1
 8005712:	607a      	str	r2, [r7, #4]
 8005714:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005716:	4b6c      	ldr	r3, [pc, #432]	; (80058c8 <SDMMC_GetCmdResp1+0x1c0>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a6c      	ldr	r2, [pc, #432]	; (80058cc <SDMMC_GetCmdResp1+0x1c4>)
 800571c:	fba2 2303 	umull	r2, r3, r2, r3
 8005720:	0a5b      	lsrs	r3, r3, #9
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005728:	4623      	mov	r3, r4
 800572a:	1e5c      	subs	r4, r3, #1
 800572c:	2b00      	cmp	r3, #0
 800572e:	d102      	bne.n	8005736 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005730:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005734:	e0c3      	b.n	80058be <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800573a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800573e:	2b00      	cmp	r3, #0
 8005740:	d0f2      	beq.n	8005728 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005746:	f003 0304 	and.w	r3, r3, #4
 800574a:	2b00      	cmp	r3, #0
 800574c:	d004      	beq.n	8005758 <SDMMC_GetCmdResp1+0x50>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2204      	movs	r2, #4
 8005752:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005754:	2304      	movs	r3, #4
 8005756:	e0b2      	b.n	80058be <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800575c:	f003 0301 	and.w	r3, r3, #1
 8005760:	2b00      	cmp	r3, #0
 8005762:	d004      	beq.n	800576e <SDMMC_GetCmdResp1+0x66>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2201      	movs	r2, #1
 8005768:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800576a:	2301      	movs	r3, #1
 800576c:	e0a7      	b.n	80058be <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f7ff fcfb 	bl	800516a <SDIO_GetCommandResponse>
 8005774:	4603      	mov	r3, r0
 8005776:	461a      	mov	r2, r3
 8005778:	7afb      	ldrb	r3, [r7, #11]
 800577a:	4293      	cmp	r3, r2
 800577c:	d001      	beq.n	8005782 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800577e:	2301      	movs	r3, #1
 8005780:	e09d      	b.n	80058be <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005788:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800578a:	2100      	movs	r1, #0
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f7ff fcf9 	bl	8005184 <SDIO_GetResponse>
 8005792:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	4b4e      	ldr	r3, [pc, #312]	; (80058d0 <SDMMC_GetCmdResp1+0x1c8>)
 8005798:	4013      	ands	r3, r2
 800579a:	2b00      	cmp	r3, #0
 800579c:	d101      	bne.n	80057a2 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 800579e:	2300      	movs	r3, #0
 80057a0:	e08d      	b.n	80058be <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	da02      	bge.n	80057ae <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80057a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057ac:	e087      	b.n	80058be <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d001      	beq.n	80057bc <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80057b8:	2340      	movs	r3, #64	; 0x40
 80057ba:	e080      	b.n	80058be <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d001      	beq.n	80057ca <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80057c6:	2380      	movs	r3, #128	; 0x80
 80057c8:	e079      	b.n	80058be <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d002      	beq.n	80057da <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80057d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057d8:	e071      	b.n	80058be <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d002      	beq.n	80057ea <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80057e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057e8:	e069      	b.n	80058be <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d002      	beq.n	80057fa <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80057f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057f8:	e061      	b.n	80058be <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d002      	beq.n	800580a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005804:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005808:	e059      	b.n	80058be <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d002      	beq.n	800581a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005818:	e051      	b.n	80058be <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d002      	beq.n	800582a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005824:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005828:	e049      	b.n	80058be <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d002      	beq.n	800583a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005834:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005838:	e041      	b.n	80058be <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d002      	beq.n	800584a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 8005844:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005848:	e039      	b.n	80058be <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d002      	beq.n	800585a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005854:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005858:	e031      	b.n	80058be <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d002      	beq.n	800586a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005864:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005868:	e029      	b.n	80058be <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005870:	2b00      	cmp	r3, #0
 8005872:	d002      	beq.n	800587a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005874:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005878:	e021      	b.n	80058be <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d002      	beq.n	800588a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005884:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005888:	e019      	b.n	80058be <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d002      	beq.n	800589a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005894:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005898:	e011      	b.n	80058be <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d002      	beq.n	80058aa <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80058a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80058a8:	e009      	b.n	80058be <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	f003 0308 	and.w	r3, r3, #8
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d002      	beq.n	80058ba <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80058b4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80058b8:	e001      	b.n	80058be <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80058ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80058be:	4618      	mov	r0, r3
 80058c0:	371c      	adds	r7, #28
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd90      	pop	{r4, r7, pc}
 80058c6:	bf00      	nop
 80058c8:	20000118 	.word	0x20000118
 80058cc:	10624dd3 	.word	0x10624dd3
 80058d0:	fdffe008 	.word	0xfdffe008

080058d4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80058d4:	b490      	push	{r4, r7}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80058dc:	4b1b      	ldr	r3, [pc, #108]	; (800594c <SDMMC_GetCmdResp2+0x78>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a1b      	ldr	r2, [pc, #108]	; (8005950 <SDMMC_GetCmdResp2+0x7c>)
 80058e2:	fba2 2303 	umull	r2, r3, r2, r3
 80058e6:	0a5b      	lsrs	r3, r3, #9
 80058e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ec:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80058f0:	4623      	mov	r3, r4
 80058f2:	1e5c      	subs	r4, r3, #1
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d102      	bne.n	80058fe <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80058f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80058fc:	e020      	b.n	8005940 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005902:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005906:	2b00      	cmp	r3, #0
 8005908:	d0f2      	beq.n	80058f0 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800590e:	f003 0304 	and.w	r3, r3, #4
 8005912:	2b00      	cmp	r3, #0
 8005914:	d004      	beq.n	8005920 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2204      	movs	r2, #4
 800591a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800591c:	2304      	movs	r3, #4
 800591e:	e00f      	b.n	8005940 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005924:	f003 0301 	and.w	r3, r3, #1
 8005928:	2b00      	cmp	r3, #0
 800592a:	d004      	beq.n	8005936 <SDMMC_GetCmdResp2+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005932:	2301      	movs	r3, #1
 8005934:	e004      	b.n	8005940 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800593c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3708      	adds	r7, #8
 8005944:	46bd      	mov	sp, r7
 8005946:	bc90      	pop	{r4, r7}
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	20000118 	.word	0x20000118
 8005950:	10624dd3 	.word	0x10624dd3

08005954 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005954:	b490      	push	{r4, r7}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800595c:	4b15      	ldr	r3, [pc, #84]	; (80059b4 <SDMMC_GetCmdResp3+0x60>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a15      	ldr	r2, [pc, #84]	; (80059b8 <SDMMC_GetCmdResp3+0x64>)
 8005962:	fba2 2303 	umull	r2, r3, r2, r3
 8005966:	0a5b      	lsrs	r3, r3, #9
 8005968:	f241 3288 	movw	r2, #5000	; 0x1388
 800596c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005970:	4623      	mov	r3, r4
 8005972:	1e5c      	subs	r4, r3, #1
 8005974:	2b00      	cmp	r3, #0
 8005976:	d102      	bne.n	800597e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005978:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800597c:	e015      	b.n	80059aa <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005982:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005986:	2b00      	cmp	r3, #0
 8005988:	d0f2      	beq.n	8005970 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800598e:	f003 0304 	and.w	r3, r3, #4
 8005992:	2b00      	cmp	r3, #0
 8005994:	d004      	beq.n	80059a0 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2204      	movs	r2, #4
 800599a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800599c:	2304      	movs	r3, #4
 800599e:	e004      	b.n	80059aa <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80059a6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3708      	adds	r7, #8
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bc90      	pop	{r4, r7}
 80059b2:	4770      	bx	lr
 80059b4:	20000118 	.word	0x20000118
 80059b8:	10624dd3 	.word	0x10624dd3

080059bc <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80059bc:	b590      	push	{r4, r7, lr}
 80059be:	b087      	sub	sp, #28
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	460b      	mov	r3, r1
 80059c6:	607a      	str	r2, [r7, #4]
 80059c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80059ca:	4b31      	ldr	r3, [pc, #196]	; (8005a90 <SDMMC_GetCmdResp6+0xd4>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a31      	ldr	r2, [pc, #196]	; (8005a94 <SDMMC_GetCmdResp6+0xd8>)
 80059d0:	fba2 2303 	umull	r2, r3, r2, r3
 80059d4:	0a5b      	lsrs	r3, r3, #9
 80059d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80059da:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80059de:	4623      	mov	r3, r4
 80059e0:	1e5c      	subs	r4, r3, #1
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d102      	bne.n	80059ec <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80059e6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80059ea:	e04c      	b.n	8005a86 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f0:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d0f2      	beq.n	80059de <SDMMC_GetCmdResp6+0x22>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059fc:	f003 0304 	and.w	r3, r3, #4
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d004      	beq.n	8005a0e <SDMMC_GetCmdResp6+0x52>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2204      	movs	r2, #4
 8005a08:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005a0a:	2304      	movs	r3, #4
 8005a0c:	e03b      	b.n	8005a86 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d004      	beq.n	8005a24 <SDMMC_GetCmdResp6+0x68>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e030      	b.n	8005a86 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005a24:	68f8      	ldr	r0, [r7, #12]
 8005a26:	f7ff fba0 	bl	800516a <SDIO_GetCommandResponse>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	7afb      	ldrb	r3, [r7, #11]
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d001      	beq.n	8005a38 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e026      	b.n	8005a86 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005a3e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005a40:	2100      	movs	r1, #0
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	f7ff fb9e 	bl	8005184 <SDIO_GetResponse>
 8005a48:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d106      	bne.n	8005a62 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	0c1b      	lsrs	r3, r3, #16
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	e011      	b.n	8005a86 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d002      	beq.n	8005a72 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005a6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a70:	e009      	b.n	8005a86 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d002      	beq.n	8005a82 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005a7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a80:	e001      	b.n	8005a86 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005a82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	371c      	adds	r7, #28
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd90      	pop	{r4, r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	20000118 	.word	0x20000118
 8005a94:	10624dd3 	.word	0x10624dd3

08005a98 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005a98:	b490      	push	{r4, r7}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005aa0:	4b18      	ldr	r3, [pc, #96]	; (8005b04 <SDMMC_GetCmdResp7+0x6c>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a18      	ldr	r2, [pc, #96]	; (8005b08 <SDMMC_GetCmdResp7+0x70>)
 8005aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8005aaa:	0a5b      	lsrs	r3, r3, #9
 8005aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ab0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005ab4:	4623      	mov	r3, r4
 8005ab6:	1e5c      	subs	r4, r3, #1
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d102      	bne.n	8005ac2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005abc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005ac0:	e01a      	b.n	8005af8 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d0f2      	beq.n	8005ab4 <SDMMC_GetCmdResp7+0x1c>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad2:	f003 0304 	and.w	r3, r3, #4
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d004      	beq.n	8005ae4 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2240      	movs	r2, #64	; 0x40
 8005ade:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005ae0:	2304      	movs	r3, #4
 8005ae2:	e009      	b.n	8005af8 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d002      	beq.n	8005af6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2240      	movs	r2, #64	; 0x40
 8005af4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005af6:	2300      	movs	r3, #0
  
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3708      	adds	r7, #8
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bc90      	pop	{r4, r7}
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	20000118 	.word	0x20000118
 8005b08:	10624dd3 	.word	0x10624dd3

08005b0c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b0c:	b084      	sub	sp, #16
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b084      	sub	sp, #16
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
 8005b16:	f107 001c 	add.w	r0, r7, #28
 8005b1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d122      	bne.n	8005b6a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005b38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005b4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d105      	bne.n	8005b5e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f001 fa76 	bl	8007050 <USB_CoreReset>
 8005b64:	4603      	mov	r3, r0
 8005b66:	73fb      	strb	r3, [r7, #15]
 8005b68:	e01a      	b.n	8005ba0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f001 fa6a 	bl	8007050 <USB_CoreReset>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005b80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d106      	bne.n	8005b94 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	639a      	str	r2, [r3, #56]	; 0x38
 8005b92:	e005      	b.n	8005ba0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d10b      	bne.n	8005bbe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f043 0206 	orr.w	r2, r3, #6
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f043 0220 	orr.w	r2, r3, #32
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3710      	adds	r7, #16
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bca:	b004      	add	sp, #16
 8005bcc:	4770      	bx	lr
	...

08005bd0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	4613      	mov	r3, r2
 8005bdc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005bde:	79fb      	ldrb	r3, [r7, #7]
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d165      	bne.n	8005cb0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	4a41      	ldr	r2, [pc, #260]	; (8005cec <USB_SetTurnaroundTime+0x11c>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d906      	bls.n	8005bfa <USB_SetTurnaroundTime+0x2a>
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	4a40      	ldr	r2, [pc, #256]	; (8005cf0 <USB_SetTurnaroundTime+0x120>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d802      	bhi.n	8005bfa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005bf4:	230f      	movs	r3, #15
 8005bf6:	617b      	str	r3, [r7, #20]
 8005bf8:	e062      	b.n	8005cc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	4a3c      	ldr	r2, [pc, #240]	; (8005cf0 <USB_SetTurnaroundTime+0x120>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d906      	bls.n	8005c10 <USB_SetTurnaroundTime+0x40>
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	4a3b      	ldr	r2, [pc, #236]	; (8005cf4 <USB_SetTurnaroundTime+0x124>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d802      	bhi.n	8005c10 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005c0a:	230e      	movs	r3, #14
 8005c0c:	617b      	str	r3, [r7, #20]
 8005c0e:	e057      	b.n	8005cc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	4a38      	ldr	r2, [pc, #224]	; (8005cf4 <USB_SetTurnaroundTime+0x124>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d906      	bls.n	8005c26 <USB_SetTurnaroundTime+0x56>
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	4a37      	ldr	r2, [pc, #220]	; (8005cf8 <USB_SetTurnaroundTime+0x128>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d802      	bhi.n	8005c26 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005c20:	230d      	movs	r3, #13
 8005c22:	617b      	str	r3, [r7, #20]
 8005c24:	e04c      	b.n	8005cc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	4a33      	ldr	r2, [pc, #204]	; (8005cf8 <USB_SetTurnaroundTime+0x128>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d906      	bls.n	8005c3c <USB_SetTurnaroundTime+0x6c>
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	4a32      	ldr	r2, [pc, #200]	; (8005cfc <USB_SetTurnaroundTime+0x12c>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d802      	bhi.n	8005c3c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005c36:	230c      	movs	r3, #12
 8005c38:	617b      	str	r3, [r7, #20]
 8005c3a:	e041      	b.n	8005cc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	4a2f      	ldr	r2, [pc, #188]	; (8005cfc <USB_SetTurnaroundTime+0x12c>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d906      	bls.n	8005c52 <USB_SetTurnaroundTime+0x82>
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	4a2e      	ldr	r2, [pc, #184]	; (8005d00 <USB_SetTurnaroundTime+0x130>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d802      	bhi.n	8005c52 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005c4c:	230b      	movs	r3, #11
 8005c4e:	617b      	str	r3, [r7, #20]
 8005c50:	e036      	b.n	8005cc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	4a2a      	ldr	r2, [pc, #168]	; (8005d00 <USB_SetTurnaroundTime+0x130>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d906      	bls.n	8005c68 <USB_SetTurnaroundTime+0x98>
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	4a29      	ldr	r2, [pc, #164]	; (8005d04 <USB_SetTurnaroundTime+0x134>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d802      	bhi.n	8005c68 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005c62:	230a      	movs	r3, #10
 8005c64:	617b      	str	r3, [r7, #20]
 8005c66:	e02b      	b.n	8005cc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	4a26      	ldr	r2, [pc, #152]	; (8005d04 <USB_SetTurnaroundTime+0x134>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d906      	bls.n	8005c7e <USB_SetTurnaroundTime+0xae>
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	4a25      	ldr	r2, [pc, #148]	; (8005d08 <USB_SetTurnaroundTime+0x138>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d802      	bhi.n	8005c7e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005c78:	2309      	movs	r3, #9
 8005c7a:	617b      	str	r3, [r7, #20]
 8005c7c:	e020      	b.n	8005cc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	4a21      	ldr	r2, [pc, #132]	; (8005d08 <USB_SetTurnaroundTime+0x138>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d906      	bls.n	8005c94 <USB_SetTurnaroundTime+0xc4>
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	4a20      	ldr	r2, [pc, #128]	; (8005d0c <USB_SetTurnaroundTime+0x13c>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d802      	bhi.n	8005c94 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005c8e:	2308      	movs	r3, #8
 8005c90:	617b      	str	r3, [r7, #20]
 8005c92:	e015      	b.n	8005cc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	4a1d      	ldr	r2, [pc, #116]	; (8005d0c <USB_SetTurnaroundTime+0x13c>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d906      	bls.n	8005caa <USB_SetTurnaroundTime+0xda>
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	4a1c      	ldr	r2, [pc, #112]	; (8005d10 <USB_SetTurnaroundTime+0x140>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d802      	bhi.n	8005caa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005ca4:	2307      	movs	r3, #7
 8005ca6:	617b      	str	r3, [r7, #20]
 8005ca8:	e00a      	b.n	8005cc0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005caa:	2306      	movs	r3, #6
 8005cac:	617b      	str	r3, [r7, #20]
 8005cae:	e007      	b.n	8005cc0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005cb0:	79fb      	ldrb	r3, [r7, #7]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d102      	bne.n	8005cbc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005cb6:	2309      	movs	r3, #9
 8005cb8:	617b      	str	r3, [r7, #20]
 8005cba:	e001      	b.n	8005cc0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005cbc:	2309      	movs	r3, #9
 8005cbe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	68da      	ldr	r2, [r3, #12]
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	029b      	lsls	r3, r3, #10
 8005cd4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005cd8:	431a      	orrs	r2, r3
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	371c      	adds	r7, #28
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr
 8005cec:	00d8acbf 	.word	0x00d8acbf
 8005cf0:	00e4e1bf 	.word	0x00e4e1bf
 8005cf4:	00f423ff 	.word	0x00f423ff
 8005cf8:	0106737f 	.word	0x0106737f
 8005cfc:	011a499f 	.word	0x011a499f
 8005d00:	01312cff 	.word	0x01312cff
 8005d04:	014ca43f 	.word	0x014ca43f
 8005d08:	016e35ff 	.word	0x016e35ff
 8005d0c:	01a6ab1f 	.word	0x01a6ab1f
 8005d10:	01e847ff 	.word	0x01e847ff

08005d14 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f043 0201 	orr.w	r2, r3, #1
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	370c      	adds	r7, #12
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr

08005d36 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d36:	b480      	push	{r7}
 8005d38:	b083      	sub	sp, #12
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	f023 0201 	bic.w	r2, r3, #1
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	460b      	mov	r3, r1
 8005d62:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005d70:	78fb      	ldrb	r3, [r7, #3]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d106      	bne.n	8005d84 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	60da      	str	r2, [r3, #12]
 8005d82:	e00b      	b.n	8005d9c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005d84:	78fb      	ldrb	r3, [r7, #3]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d106      	bne.n	8005d98 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	60da      	str	r2, [r3, #12]
 8005d96:	e001      	b.n	8005d9c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e003      	b.n	8005da4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005d9c:	2032      	movs	r0, #50	; 0x32
 8005d9e:	f7fa fc35 	bl	800060c <HAL_Delay>

  return HAL_OK;
 8005da2:	2300      	movs	r3, #0
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3708      	adds	r7, #8
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005dac:	b084      	sub	sp, #16
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b086      	sub	sp, #24
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
 8005db6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005dba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	613b      	str	r3, [r7, #16]
 8005dca:	e009      	b.n	8005de0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	3340      	adds	r3, #64	; 0x40
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	4413      	add	r3, r2
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	3301      	adds	r3, #1
 8005dde:	613b      	str	r3, [r7, #16]
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	2b0e      	cmp	r3, #14
 8005de4:	d9f2      	bls.n	8005dcc <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005de6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d112      	bne.n	8005e12 <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	601a      	str	r2, [r3, #0]
 8005e10:	e005      	b.n	8005e1e <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e16:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e24:	461a      	mov	r2, r3
 8005e26:	2300      	movs	r3, #0
 8005e28:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e30:	4619      	mov	r1, r3
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e38:	461a      	mov	r2, r3
 8005e3a:	680b      	ldr	r3, [r1, #0]
 8005e3c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d10c      	bne.n	8005e5e <USB_DevInit+0xb2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d104      	bne.n	8005e54 <USB_DevInit+0xa8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005e4a:	2100      	movs	r1, #0
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 f961 	bl	8006114 <USB_SetDevSpeed>
 8005e52:	e008      	b.n	8005e66 <USB_DevInit+0xba>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005e54:	2101      	movs	r1, #1
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 f95c 	bl	8006114 <USB_SetDevSpeed>
 8005e5c:	e003      	b.n	8005e66 <USB_DevInit+0xba>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005e5e:	2103      	movs	r1, #3
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 f957 	bl	8006114 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005e66:	2110      	movs	r1, #16
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 f90b 	bl	8006084 <USB_FlushTxFifo>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d001      	beq.n	8005e78 <USB_DevInit+0xcc>
  {
    ret = HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 f929 	bl	80060d0 <USB_FlushRxFifo>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d001      	beq.n	8005e88 <USB_DevInit+0xdc>
  {
    ret = HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e8e:	461a      	mov	r2, r3
 8005e90:	2300      	movs	r3, #0
 8005e92:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005eac:	2300      	movs	r3, #0
 8005eae:	613b      	str	r3, [r7, #16]
 8005eb0:	e043      	b.n	8005f3a <USB_DevInit+0x18e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	015a      	lsls	r2, r3, #5
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	4413      	add	r3, r2
 8005eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ec4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ec8:	d118      	bne.n	8005efc <USB_DevInit+0x150>
    {
      if (i == 0U)
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d10a      	bne.n	8005ee6 <USB_DevInit+0x13a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	015a      	lsls	r2, r3, #5
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005edc:	461a      	mov	r2, r3
 8005ede:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005ee2:	6013      	str	r3, [r2, #0]
 8005ee4:	e013      	b.n	8005f0e <USB_DevInit+0x162>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	015a      	lsls	r2, r3, #5
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	4413      	add	r3, r2
 8005eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005ef8:	6013      	str	r3, [r2, #0]
 8005efa:	e008      	b.n	8005f0e <USB_DevInit+0x162>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	015a      	lsls	r2, r3, #5
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	4413      	add	r3, r2
 8005f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f08:	461a      	mov	r2, r3
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	015a      	lsls	r2, r3, #5
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	4413      	add	r3, r2
 8005f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	015a      	lsls	r2, r3, #5
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	4413      	add	r3, r2
 8005f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f32:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	3301      	adds	r3, #1
 8005f38:	613b      	str	r3, [r7, #16]
 8005f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d3b7      	bcc.n	8005eb2 <USB_DevInit+0x106>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f42:	2300      	movs	r3, #0
 8005f44:	613b      	str	r3, [r7, #16]
 8005f46:	e043      	b.n	8005fd0 <USB_DevInit+0x224>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	015a      	lsls	r2, r3, #5
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f5e:	d118      	bne.n	8005f92 <USB_DevInit+0x1e6>
    {
      if (i == 0U)
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10a      	bne.n	8005f7c <USB_DevInit+0x1d0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	015a      	lsls	r2, r3, #5
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f72:	461a      	mov	r2, r3
 8005f74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005f78:	6013      	str	r3, [r2, #0]
 8005f7a:	e013      	b.n	8005fa4 <USB_DevInit+0x1f8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	015a      	lsls	r2, r3, #5
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	4413      	add	r3, r2
 8005f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f88:	461a      	mov	r2, r3
 8005f8a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005f8e:	6013      	str	r3, [r2, #0]
 8005f90:	e008      	b.n	8005fa4 <USB_DevInit+0x1f8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	015a      	lsls	r2, r3, #5
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	4413      	add	r3, r2
 8005fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	015a      	lsls	r2, r3, #5
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005fc8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	613b      	str	r3, [r7, #16]
 8005fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd2:	693a      	ldr	r2, [r7, #16]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d3b7      	bcc.n	8005f48 <USB_DevInit+0x19c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fe6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fea:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8005fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d111      	bne.n	8006016 <USB_DevInit+0x26a>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	4b20      	ldr	r3, [pc, #128]	; (800607c <USB_DevInit+0x2d0>)
 8005ffc:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800600c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006010:	f043 0303 	orr.w	r3, r3, #3
 8006014:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006022:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006026:	2b00      	cmp	r3, #0
 8006028:	d105      	bne.n	8006036 <USB_DevInit+0x28a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	f043 0210 	orr.w	r2, r3, #16
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	699a      	ldr	r2, [r3, #24]
 800603a:	4b11      	ldr	r3, [pc, #68]	; (8006080 <USB_DevInit+0x2d4>)
 800603c:	4313      	orrs	r3, r2
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006044:	2b00      	cmp	r3, #0
 8006046:	d005      	beq.n	8006054 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	f043 0208 	orr.w	r2, r3, #8
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006056:	2b01      	cmp	r3, #1
 8006058:	d107      	bne.n	800606a <USB_DevInit+0x2be>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006062:	f043 0304 	orr.w	r3, r3, #4
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800606a:	7dfb      	ldrb	r3, [r7, #23]
}
 800606c:	4618      	mov	r0, r3
 800606e:	3718      	adds	r7, #24
 8006070:	46bd      	mov	sp, r7
 8006072:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006076:	b004      	add	sp, #16
 8006078:	4770      	bx	lr
 800607a:	bf00      	nop
 800607c:	00800100 	.word	0x00800100
 8006080:	803c3800 	.word	0x803c3800

08006084 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800608e:	2300      	movs	r3, #0
 8006090:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	019b      	lsls	r3, r3, #6
 8006096:	f043 0220 	orr.w	r2, r3, #32
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	3301      	adds	r3, #1
 80060a2:	60fb      	str	r3, [r7, #12]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	4a09      	ldr	r2, [pc, #36]	; (80060cc <USB_FlushTxFifo+0x48>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d901      	bls.n	80060b0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80060ac:	2303      	movs	r3, #3
 80060ae:	e006      	b.n	80060be <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	f003 0320 	and.w	r3, r3, #32
 80060b8:	2b20      	cmp	r3, #32
 80060ba:	d0f0      	beq.n	800609e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3714      	adds	r7, #20
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	00030d40 	.word	0x00030d40

080060d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80060d8:	2300      	movs	r3, #0
 80060da:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2210      	movs	r2, #16
 80060e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	3301      	adds	r3, #1
 80060e6:	60fb      	str	r3, [r7, #12]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	4a09      	ldr	r2, [pc, #36]	; (8006110 <USB_FlushRxFifo+0x40>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d901      	bls.n	80060f4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e006      	b.n	8006102 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	f003 0310 	and.w	r3, r3, #16
 80060fc:	2b10      	cmp	r3, #16
 80060fe:	d0f0      	beq.n	80060e2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3714      	adds	r7, #20
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	00030d40 	.word	0x00030d40

08006114 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	460b      	mov	r3, r1
 800611e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	78fb      	ldrb	r3, [r7, #3]
 800612e:	68f9      	ldr	r1, [r7, #12]
 8006130:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006134:	4313      	orrs	r3, r2
 8006136:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3714      	adds	r7, #20
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr

08006146 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006146:	b480      	push	{r7}
 8006148:	b087      	sub	sp, #28
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f003 0306 	and.w	r3, r3, #6
 800615e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d102      	bne.n	800616c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006166:	2300      	movs	r3, #0
 8006168:	75fb      	strb	r3, [r7, #23]
 800616a:	e00a      	b.n	8006182 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2b02      	cmp	r3, #2
 8006170:	d002      	beq.n	8006178 <USB_GetDevSpeed+0x32>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2b06      	cmp	r3, #6
 8006176:	d102      	bne.n	800617e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006178:	2302      	movs	r3, #2
 800617a:	75fb      	strb	r3, [r7, #23]
 800617c:	e001      	b.n	8006182 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800617e:	230f      	movs	r3, #15
 8006180:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006182:	7dfb      	ldrb	r3, [r7, #23]
}
 8006184:	4618      	mov	r0, r3
 8006186:	371c      	adds	r7, #28
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006190:	b480      	push	{r7}
 8006192:	b085      	sub	sp, #20
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	785b      	ldrb	r3, [r3, #1]
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d13a      	bne.n	8006222 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061b2:	69da      	ldr	r2, [r3, #28]
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	f003 030f 	and.w	r3, r3, #15
 80061bc:	2101      	movs	r1, #1
 80061be:	fa01 f303 	lsl.w	r3, r1, r3
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	68f9      	ldr	r1, [r7, #12]
 80061c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061ca:	4313      	orrs	r3, r2
 80061cc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	015a      	lsls	r2, r3, #5
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	4413      	add	r3, r2
 80061d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d155      	bne.n	8006290 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	015a      	lsls	r2, r3, #5
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	4413      	add	r3, r2
 80061ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	78db      	ldrb	r3, [r3, #3]
 80061fe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006200:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	059b      	lsls	r3, r3, #22
 8006206:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006208:	4313      	orrs	r3, r2
 800620a:	68ba      	ldr	r2, [r7, #8]
 800620c:	0151      	lsls	r1, r2, #5
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	440a      	add	r2, r1
 8006212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800621a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800621e:	6013      	str	r3, [r2, #0]
 8006220:	e036      	b.n	8006290 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006228:	69da      	ldr	r2, [r3, #28]
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	f003 030f 	and.w	r3, r3, #15
 8006232:	2101      	movs	r1, #1
 8006234:	fa01 f303 	lsl.w	r3, r1, r3
 8006238:	041b      	lsls	r3, r3, #16
 800623a:	68f9      	ldr	r1, [r7, #12]
 800623c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006240:	4313      	orrs	r3, r2
 8006242:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	015a      	lsls	r2, r3, #5
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	4413      	add	r3, r2
 800624c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006256:	2b00      	cmp	r3, #0
 8006258:	d11a      	bne.n	8006290 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	015a      	lsls	r2, r3, #5
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	4413      	add	r3, r2
 8006262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	78db      	ldrb	r3, [r3, #3]
 8006274:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006276:	430b      	orrs	r3, r1
 8006278:	4313      	orrs	r3, r2
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	0151      	lsls	r1, r2, #5
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	440a      	add	r2, r1
 8006282:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800628a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800628e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3714      	adds	r7, #20
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
	...

080062a0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	785b      	ldrb	r3, [r3, #1]
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d135      	bne.n	8006328 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	f003 030f 	and.w	r3, r3, #15
 80062cc:	2101      	movs	r1, #1
 80062ce:	fa01 f303 	lsl.w	r3, r1, r3
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	43db      	mvns	r3, r3
 80062d6:	68f9      	ldr	r1, [r7, #12]
 80062d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062dc:	4013      	ands	r3, r2
 80062de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062e6:	69da      	ldr	r2, [r3, #28]
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	f003 030f 	and.w	r3, r3, #15
 80062f0:	2101      	movs	r1, #1
 80062f2:	fa01 f303 	lsl.w	r3, r1, r3
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	43db      	mvns	r3, r3
 80062fa:	68f9      	ldr	r1, [r7, #12]
 80062fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006300:	4013      	ands	r3, r2
 8006302:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	015a      	lsls	r2, r3, #5
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	4413      	add	r3, r2
 800630c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	0159      	lsls	r1, r3, #5
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	440b      	add	r3, r1
 800631a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800631e:	4619      	mov	r1, r3
 8006320:	4b1f      	ldr	r3, [pc, #124]	; (80063a0 <USB_DeactivateEndpoint+0x100>)
 8006322:	4013      	ands	r3, r2
 8006324:	600b      	str	r3, [r1, #0]
 8006326:	e034      	b.n	8006392 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800632e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	f003 030f 	and.w	r3, r3, #15
 8006338:	2101      	movs	r1, #1
 800633a:	fa01 f303 	lsl.w	r3, r1, r3
 800633e:	041b      	lsls	r3, r3, #16
 8006340:	43db      	mvns	r3, r3
 8006342:	68f9      	ldr	r1, [r7, #12]
 8006344:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006348:	4013      	ands	r3, r2
 800634a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006352:	69da      	ldr	r2, [r3, #28]
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	f003 030f 	and.w	r3, r3, #15
 800635c:	2101      	movs	r1, #1
 800635e:	fa01 f303 	lsl.w	r3, r1, r3
 8006362:	041b      	lsls	r3, r3, #16
 8006364:	43db      	mvns	r3, r3
 8006366:	68f9      	ldr	r1, [r7, #12]
 8006368:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800636c:	4013      	ands	r3, r2
 800636e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	015a      	lsls	r2, r3, #5
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	4413      	add	r3, r2
 8006378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	0159      	lsls	r1, r3, #5
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	440b      	add	r3, r1
 8006386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800638a:	4619      	mov	r1, r3
 800638c:	4b05      	ldr	r3, [pc, #20]	; (80063a4 <USB_DeactivateEndpoint+0x104>)
 800638e:	4013      	ands	r3, r2
 8006390:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	3714      	adds	r7, #20
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr
 80063a0:	ec337800 	.word	0xec337800
 80063a4:	eff37800 	.word	0xeff37800

080063a8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b08a      	sub	sp, #40	; 0x28
 80063ac:	af02      	add	r7, sp, #8
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	4613      	mov	r3, r2
 80063b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	785b      	ldrb	r3, [r3, #1]
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	f040 815c 	bne.w	8006682 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	695b      	ldr	r3, [r3, #20]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d132      	bne.n	8006438 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	015a      	lsls	r2, r3, #5
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	4413      	add	r3, r2
 80063da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	69ba      	ldr	r2, [r7, #24]
 80063e2:	0151      	lsls	r1, r2, #5
 80063e4:	69fa      	ldr	r2, [r7, #28]
 80063e6:	440a      	add	r2, r1
 80063e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80063f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80063f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	015a      	lsls	r2, r3, #5
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	4413      	add	r3, r2
 80063fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	69ba      	ldr	r2, [r7, #24]
 8006406:	0151      	lsls	r1, r2, #5
 8006408:	69fa      	ldr	r2, [r7, #28]
 800640a:	440a      	add	r2, r1
 800640c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006410:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006414:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	015a      	lsls	r2, r3, #5
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	4413      	add	r3, r2
 800641e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	69ba      	ldr	r2, [r7, #24]
 8006426:	0151      	lsls	r1, r2, #5
 8006428:	69fa      	ldr	r2, [r7, #28]
 800642a:	440a      	add	r2, r1
 800642c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006430:	0cdb      	lsrs	r3, r3, #19
 8006432:	04db      	lsls	r3, r3, #19
 8006434:	6113      	str	r3, [r2, #16]
 8006436:	e074      	b.n	8006522 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	015a      	lsls	r2, r3, #5
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	4413      	add	r3, r2
 8006440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	69ba      	ldr	r2, [r7, #24]
 8006448:	0151      	lsls	r1, r2, #5
 800644a:	69fa      	ldr	r2, [r7, #28]
 800644c:	440a      	add	r2, r1
 800644e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006452:	0cdb      	lsrs	r3, r3, #19
 8006454:	04db      	lsls	r3, r3, #19
 8006456:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	015a      	lsls	r2, r3, #5
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	4413      	add	r3, r2
 8006460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	69ba      	ldr	r2, [r7, #24]
 8006468:	0151      	lsls	r1, r2, #5
 800646a:	69fa      	ldr	r2, [r7, #28]
 800646c:	440a      	add	r2, r1
 800646e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006472:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006476:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800647a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	015a      	lsls	r2, r3, #5
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	4413      	add	r3, r2
 8006484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006488:	691a      	ldr	r2, [r3, #16]
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	6959      	ldr	r1, [r3, #20]
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	440b      	add	r3, r1
 8006494:	1e59      	subs	r1, r3, #1
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	fbb1 f3f3 	udiv	r3, r1, r3
 800649e:	04d9      	lsls	r1, r3, #19
 80064a0:	4b9d      	ldr	r3, [pc, #628]	; (8006718 <USB_EPStartXfer+0x370>)
 80064a2:	400b      	ands	r3, r1
 80064a4:	69b9      	ldr	r1, [r7, #24]
 80064a6:	0148      	lsls	r0, r1, #5
 80064a8:	69f9      	ldr	r1, [r7, #28]
 80064aa:	4401      	add	r1, r0
 80064ac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80064b0:	4313      	orrs	r3, r2
 80064b2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	015a      	lsls	r2, r3, #5
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	4413      	add	r3, r2
 80064bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064c0:	691a      	ldr	r2, [r3, #16]
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064ca:	69b9      	ldr	r1, [r7, #24]
 80064cc:	0148      	lsls	r0, r1, #5
 80064ce:	69f9      	ldr	r1, [r7, #28]
 80064d0:	4401      	add	r1, r0
 80064d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80064d6:	4313      	orrs	r3, r2
 80064d8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	78db      	ldrb	r3, [r3, #3]
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d11f      	bne.n	8006522 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	015a      	lsls	r2, r3, #5
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	4413      	add	r3, r2
 80064ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	69ba      	ldr	r2, [r7, #24]
 80064f2:	0151      	lsls	r1, r2, #5
 80064f4:	69fa      	ldr	r2, [r7, #28]
 80064f6:	440a      	add	r2, r1
 80064f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064fc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006500:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	015a      	lsls	r2, r3, #5
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	4413      	add	r3, r2
 800650a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	69ba      	ldr	r2, [r7, #24]
 8006512:	0151      	lsls	r1, r2, #5
 8006514:	69fa      	ldr	r2, [r7, #28]
 8006516:	440a      	add	r2, r1
 8006518:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800651c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006520:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006522:	79fb      	ldrb	r3, [r7, #7]
 8006524:	2b01      	cmp	r3, #1
 8006526:	d14b      	bne.n	80065c0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d009      	beq.n	8006544 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	015a      	lsls	r2, r3, #5
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	4413      	add	r3, r2
 8006538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800653c:	461a      	mov	r2, r3
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	78db      	ldrb	r3, [r3, #3]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d128      	bne.n	800659e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006558:	2b00      	cmp	r3, #0
 800655a:	d110      	bne.n	800657e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	015a      	lsls	r2, r3, #5
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	4413      	add	r3, r2
 8006564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	69ba      	ldr	r2, [r7, #24]
 800656c:	0151      	lsls	r1, r2, #5
 800656e:	69fa      	ldr	r2, [r7, #28]
 8006570:	440a      	add	r2, r1
 8006572:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006576:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800657a:	6013      	str	r3, [r2, #0]
 800657c:	e00f      	b.n	800659e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	015a      	lsls	r2, r3, #5
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	4413      	add	r3, r2
 8006586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	69ba      	ldr	r2, [r7, #24]
 800658e:	0151      	lsls	r1, r2, #5
 8006590:	69fa      	ldr	r2, [r7, #28]
 8006592:	440a      	add	r2, r1
 8006594:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800659c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	015a      	lsls	r2, r3, #5
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	4413      	add	r3, r2
 80065a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	69ba      	ldr	r2, [r7, #24]
 80065ae:	0151      	lsls	r1, r2, #5
 80065b0:	69fa      	ldr	r2, [r7, #28]
 80065b2:	440a      	add	r2, r1
 80065b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80065bc:	6013      	str	r3, [r2, #0]
 80065be:	e12f      	b.n	8006820 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	015a      	lsls	r2, r3, #5
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	4413      	add	r3, r2
 80065c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	69ba      	ldr	r2, [r7, #24]
 80065d0:	0151      	lsls	r1, r2, #5
 80065d2:	69fa      	ldr	r2, [r7, #28]
 80065d4:	440a      	add	r2, r1
 80065d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80065de:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	78db      	ldrb	r3, [r3, #3]
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d015      	beq.n	8006614 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	695b      	ldr	r3, [r3, #20]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f000 8117 	beq.w	8006820 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	f003 030f 	and.w	r3, r3, #15
 8006602:	2101      	movs	r1, #1
 8006604:	fa01 f303 	lsl.w	r3, r1, r3
 8006608:	69f9      	ldr	r1, [r7, #28]
 800660a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800660e:	4313      	orrs	r3, r2
 8006610:	634b      	str	r3, [r1, #52]	; 0x34
 8006612:	e105      	b.n	8006820 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006620:	2b00      	cmp	r3, #0
 8006622:	d110      	bne.n	8006646 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	015a      	lsls	r2, r3, #5
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	4413      	add	r3, r2
 800662c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	69ba      	ldr	r2, [r7, #24]
 8006634:	0151      	lsls	r1, r2, #5
 8006636:	69fa      	ldr	r2, [r7, #28]
 8006638:	440a      	add	r2, r1
 800663a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800663e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006642:	6013      	str	r3, [r2, #0]
 8006644:	e00f      	b.n	8006666 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	015a      	lsls	r2, r3, #5
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	4413      	add	r3, r2
 800664e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	69ba      	ldr	r2, [r7, #24]
 8006656:	0151      	lsls	r1, r2, #5
 8006658:	69fa      	ldr	r2, [r7, #28]
 800665a:	440a      	add	r2, r1
 800665c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006664:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	68d9      	ldr	r1, [r3, #12]
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	781a      	ldrb	r2, [r3, #0]
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	b298      	uxth	r0, r3
 8006674:	79fb      	ldrb	r3, [r7, #7]
 8006676:	9300      	str	r3, [sp, #0]
 8006678:	4603      	mov	r3, r0
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f000 fa2b 	bl	8006ad6 <USB_WritePacket>
 8006680:	e0ce      	b.n	8006820 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	015a      	lsls	r2, r3, #5
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	4413      	add	r3, r2
 800668a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	69ba      	ldr	r2, [r7, #24]
 8006692:	0151      	lsls	r1, r2, #5
 8006694:	69fa      	ldr	r2, [r7, #28]
 8006696:	440a      	add	r2, r1
 8006698:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800669c:	0cdb      	lsrs	r3, r3, #19
 800669e:	04db      	lsls	r3, r3, #19
 80066a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	015a      	lsls	r2, r3, #5
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	4413      	add	r3, r2
 80066aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	69ba      	ldr	r2, [r7, #24]
 80066b2:	0151      	lsls	r1, r2, #5
 80066b4:	69fa      	ldr	r2, [r7, #28]
 80066b6:	440a      	add	r2, r1
 80066b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80066c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80066c4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	695b      	ldr	r3, [r3, #20]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d126      	bne.n	800671c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	015a      	lsls	r2, r3, #5
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	4413      	add	r3, r2
 80066d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066da:	691a      	ldr	r2, [r3, #16]
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066e4:	69b9      	ldr	r1, [r7, #24]
 80066e6:	0148      	lsls	r0, r1, #5
 80066e8:	69f9      	ldr	r1, [r7, #28]
 80066ea:	4401      	add	r1, r0
 80066ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80066f0:	4313      	orrs	r3, r2
 80066f2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	015a      	lsls	r2, r3, #5
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	4413      	add	r3, r2
 80066fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	69ba      	ldr	r2, [r7, #24]
 8006704:	0151      	lsls	r1, r2, #5
 8006706:	69fa      	ldr	r2, [r7, #28]
 8006708:	440a      	add	r2, r1
 800670a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800670e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006712:	6113      	str	r3, [r2, #16]
 8006714:	e036      	b.n	8006784 <USB_EPStartXfer+0x3dc>
 8006716:	bf00      	nop
 8006718:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	695a      	ldr	r2, [r3, #20]
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	4413      	add	r3, r2
 8006726:	1e5a      	subs	r2, r3, #1
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006730:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	015a      	lsls	r2, r3, #5
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	4413      	add	r3, r2
 800673a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800673e:	691a      	ldr	r2, [r3, #16]
 8006740:	8afb      	ldrh	r3, [r7, #22]
 8006742:	04d9      	lsls	r1, r3, #19
 8006744:	4b39      	ldr	r3, [pc, #228]	; (800682c <USB_EPStartXfer+0x484>)
 8006746:	400b      	ands	r3, r1
 8006748:	69b9      	ldr	r1, [r7, #24]
 800674a:	0148      	lsls	r0, r1, #5
 800674c:	69f9      	ldr	r1, [r7, #28]
 800674e:	4401      	add	r1, r0
 8006750:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006754:	4313      	orrs	r3, r2
 8006756:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	015a      	lsls	r2, r3, #5
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	4413      	add	r3, r2
 8006760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006764:	691a      	ldr	r2, [r3, #16]
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	8af9      	ldrh	r1, [r7, #22]
 800676c:	fb01 f303 	mul.w	r3, r1, r3
 8006770:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006774:	69b9      	ldr	r1, [r7, #24]
 8006776:	0148      	lsls	r0, r1, #5
 8006778:	69f9      	ldr	r1, [r7, #28]
 800677a:	4401      	add	r1, r0
 800677c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006780:	4313      	orrs	r3, r2
 8006782:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006784:	79fb      	ldrb	r3, [r7, #7]
 8006786:	2b01      	cmp	r3, #1
 8006788:	d10d      	bne.n	80067a6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d009      	beq.n	80067a6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	68d9      	ldr	r1, [r3, #12]
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	015a      	lsls	r2, r3, #5
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	4413      	add	r3, r2
 800679e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a2:	460a      	mov	r2, r1
 80067a4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	78db      	ldrb	r3, [r3, #3]
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d128      	bne.n	8006800 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d110      	bne.n	80067e0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	015a      	lsls	r2, r3, #5
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	4413      	add	r3, r2
 80067c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	69ba      	ldr	r2, [r7, #24]
 80067ce:	0151      	lsls	r1, r2, #5
 80067d0:	69fa      	ldr	r2, [r7, #28]
 80067d2:	440a      	add	r2, r1
 80067d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80067dc:	6013      	str	r3, [r2, #0]
 80067de:	e00f      	b.n	8006800 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	015a      	lsls	r2, r3, #5
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	4413      	add	r3, r2
 80067e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	69ba      	ldr	r2, [r7, #24]
 80067f0:	0151      	lsls	r1, r2, #5
 80067f2:	69fa      	ldr	r2, [r7, #28]
 80067f4:	440a      	add	r2, r1
 80067f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067fe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	015a      	lsls	r2, r3, #5
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	4413      	add	r3, r2
 8006808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	69ba      	ldr	r2, [r7, #24]
 8006810:	0151      	lsls	r1, r2, #5
 8006812:	69fa      	ldr	r2, [r7, #28]
 8006814:	440a      	add	r2, r1
 8006816:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800681a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800681e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3720      	adds	r7, #32
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	1ff80000 	.word	0x1ff80000

08006830 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006830:	b480      	push	{r7}
 8006832:	b087      	sub	sp, #28
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	4613      	mov	r3, r2
 800683c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	785b      	ldrb	r3, [r3, #1]
 800684c:	2b01      	cmp	r3, #1
 800684e:	f040 80cd 	bne.w	80069ec <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d132      	bne.n	80068c0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	015a      	lsls	r2, r3, #5
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	4413      	add	r3, r2
 8006862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	0151      	lsls	r1, r2, #5
 800686c:	697a      	ldr	r2, [r7, #20]
 800686e:	440a      	add	r2, r1
 8006870:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006874:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006878:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800687c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	015a      	lsls	r2, r3, #5
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	4413      	add	r3, r2
 8006886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	693a      	ldr	r2, [r7, #16]
 800688e:	0151      	lsls	r1, r2, #5
 8006890:	697a      	ldr	r2, [r7, #20]
 8006892:	440a      	add	r2, r1
 8006894:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006898:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800689c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	015a      	lsls	r2, r3, #5
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	4413      	add	r3, r2
 80068a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	693a      	ldr	r2, [r7, #16]
 80068ae:	0151      	lsls	r1, r2, #5
 80068b0:	697a      	ldr	r2, [r7, #20]
 80068b2:	440a      	add	r2, r1
 80068b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068b8:	0cdb      	lsrs	r3, r3, #19
 80068ba:	04db      	lsls	r3, r3, #19
 80068bc:	6113      	str	r3, [r2, #16]
 80068be:	e04e      	b.n	800695e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	015a      	lsls	r2, r3, #5
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	4413      	add	r3, r2
 80068c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068cc:	691b      	ldr	r3, [r3, #16]
 80068ce:	693a      	ldr	r2, [r7, #16]
 80068d0:	0151      	lsls	r1, r2, #5
 80068d2:	697a      	ldr	r2, [r7, #20]
 80068d4:	440a      	add	r2, r1
 80068d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068da:	0cdb      	lsrs	r3, r3, #19
 80068dc:	04db      	lsls	r3, r3, #19
 80068de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	015a      	lsls	r2, r3, #5
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	4413      	add	r3, r2
 80068e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	693a      	ldr	r2, [r7, #16]
 80068f0:	0151      	lsls	r1, r2, #5
 80068f2:	697a      	ldr	r2, [r7, #20]
 80068f4:	440a      	add	r2, r1
 80068f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80068fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006902:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	695a      	ldr	r2, [r3, #20]
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	429a      	cmp	r2, r3
 800690e:	d903      	bls.n	8006918 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	689a      	ldr	r2, [r3, #8]
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	015a      	lsls	r2, r3, #5
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	4413      	add	r3, r2
 8006920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	693a      	ldr	r2, [r7, #16]
 8006928:	0151      	lsls	r1, r2, #5
 800692a:	697a      	ldr	r2, [r7, #20]
 800692c:	440a      	add	r2, r1
 800692e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006932:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006936:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	015a      	lsls	r2, r3, #5
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	4413      	add	r3, r2
 8006940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006944:	691a      	ldr	r2, [r3, #16]
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	695b      	ldr	r3, [r3, #20]
 800694a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800694e:	6939      	ldr	r1, [r7, #16]
 8006950:	0148      	lsls	r0, r1, #5
 8006952:	6979      	ldr	r1, [r7, #20]
 8006954:	4401      	add	r1, r0
 8006956:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800695a:	4313      	orrs	r3, r2
 800695c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800695e:	79fb      	ldrb	r3, [r7, #7]
 8006960:	2b01      	cmp	r3, #1
 8006962:	d11e      	bne.n	80069a2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d009      	beq.n	8006980 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	015a      	lsls	r2, r3, #5
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	4413      	add	r3, r2
 8006974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006978:	461a      	mov	r2, r3
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	015a      	lsls	r2, r3, #5
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	4413      	add	r3, r2
 8006988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	693a      	ldr	r2, [r7, #16]
 8006990:	0151      	lsls	r1, r2, #5
 8006992:	697a      	ldr	r2, [r7, #20]
 8006994:	440a      	add	r2, r1
 8006996:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800699a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800699e:	6013      	str	r3, [r2, #0]
 80069a0:	e092      	b.n	8006ac8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	015a      	lsls	r2, r3, #5
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	4413      	add	r3, r2
 80069aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	0151      	lsls	r1, r2, #5
 80069b4:	697a      	ldr	r2, [r7, #20]
 80069b6:	440a      	add	r2, r1
 80069b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80069c0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d07e      	beq.n	8006ac8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	f003 030f 	and.w	r3, r3, #15
 80069da:	2101      	movs	r1, #1
 80069dc:	fa01 f303 	lsl.w	r3, r1, r3
 80069e0:	6979      	ldr	r1, [r7, #20]
 80069e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069e6:	4313      	orrs	r3, r2
 80069e8:	634b      	str	r3, [r1, #52]	; 0x34
 80069ea:	e06d      	b.n	8006ac8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	015a      	lsls	r2, r3, #5
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	4413      	add	r3, r2
 80069f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	693a      	ldr	r2, [r7, #16]
 80069fc:	0151      	lsls	r1, r2, #5
 80069fe:	697a      	ldr	r2, [r7, #20]
 8006a00:	440a      	add	r2, r1
 8006a02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a06:	0cdb      	lsrs	r3, r3, #19
 8006a08:	04db      	lsls	r3, r3, #19
 8006a0a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	015a      	lsls	r2, r3, #5
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	4413      	add	r3, r2
 8006a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	693a      	ldr	r2, [r7, #16]
 8006a1c:	0151      	lsls	r1, r2, #5
 8006a1e:	697a      	ldr	r2, [r7, #20]
 8006a20:	440a      	add	r2, r1
 8006a22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a26:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006a2a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006a2e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	695b      	ldr	r3, [r3, #20]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d003      	beq.n	8006a40 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	689a      	ldr	r2, [r3, #8]
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	015a      	lsls	r2, r3, #5
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	4413      	add	r3, r2
 8006a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	0151      	lsls	r1, r2, #5
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	440a      	add	r2, r1
 8006a56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a5e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	015a      	lsls	r2, r3, #5
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	4413      	add	r3, r2
 8006a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a6c:	691a      	ldr	r2, [r3, #16]
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a76:	6939      	ldr	r1, [r7, #16]
 8006a78:	0148      	lsls	r0, r1, #5
 8006a7a:	6979      	ldr	r1, [r7, #20]
 8006a7c:	4401      	add	r1, r0
 8006a7e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a82:	4313      	orrs	r3, r2
 8006a84:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006a86:	79fb      	ldrb	r3, [r7, #7]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d10d      	bne.n	8006aa8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d009      	beq.n	8006aa8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	68d9      	ldr	r1, [r3, #12]
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	015a      	lsls	r2, r3, #5
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa4:	460a      	mov	r2, r1
 8006aa6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	015a      	lsls	r2, r3, #5
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	4413      	add	r3, r2
 8006ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	0151      	lsls	r1, r2, #5
 8006aba:	697a      	ldr	r2, [r7, #20]
 8006abc:	440a      	add	r2, r1
 8006abe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ac2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ac6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	371c      	adds	r7, #28
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr

08006ad6 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006ad6:	b480      	push	{r7}
 8006ad8:	b089      	sub	sp, #36	; 0x24
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	60f8      	str	r0, [r7, #12]
 8006ade:	60b9      	str	r1, [r7, #8]
 8006ae0:	4611      	mov	r1, r2
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	71fb      	strb	r3, [r7, #7]
 8006ae8:	4613      	mov	r3, r2
 8006aea:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006af4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d11a      	bne.n	8006b32 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006afc:	88bb      	ldrh	r3, [r7, #4]
 8006afe:	3303      	adds	r3, #3
 8006b00:	089b      	lsrs	r3, r3, #2
 8006b02:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006b04:	2300      	movs	r3, #0
 8006b06:	61bb      	str	r3, [r7, #24]
 8006b08:	e00f      	b.n	8006b2a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006b0a:	79fb      	ldrb	r3, [r7, #7]
 8006b0c:	031a      	lsls	r2, r3, #12
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	4413      	add	r3, r2
 8006b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b16:	461a      	mov	r2, r3
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	3304      	adds	r3, #4
 8006b22:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	3301      	adds	r3, #1
 8006b28:	61bb      	str	r3, [r7, #24]
 8006b2a:	69ba      	ldr	r2, [r7, #24]
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d3eb      	bcc.n	8006b0a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3724      	adds	r7, #36	; 0x24
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b089      	sub	sp, #36	; 0x24
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006b56:	88fb      	ldrh	r3, [r7, #6]
 8006b58:	3303      	adds	r3, #3
 8006b5a:	089b      	lsrs	r3, r3, #2
 8006b5c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006b5e:	2300      	movs	r3, #0
 8006b60:	61bb      	str	r3, [r7, #24]
 8006b62:	e00b      	b.n	8006b7c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	3304      	adds	r3, #4
 8006b74:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	3301      	adds	r3, #1
 8006b7a:	61bb      	str	r3, [r7, #24]
 8006b7c:	69ba      	ldr	r2, [r7, #24]
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d3ef      	bcc.n	8006b64 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006b84:	69fb      	ldr	r3, [r7, #28]
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3724      	adds	r7, #36	; 0x24
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr

08006b92 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b92:	b480      	push	{r7}
 8006b94:	b085      	sub	sp, #20
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
 8006b9a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	785b      	ldrb	r3, [r3, #1]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d12c      	bne.n	8006c08 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	015a      	lsls	r2, r3, #5
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	db12      	blt.n	8006be6 <USB_EPSetStall+0x54>
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00f      	beq.n	8006be6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	015a      	lsls	r2, r3, #5
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	4413      	add	r3, r2
 8006bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68ba      	ldr	r2, [r7, #8]
 8006bd6:	0151      	lsls	r1, r2, #5
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	440a      	add	r2, r1
 8006bdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006be0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006be4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	015a      	lsls	r2, r3, #5
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	4413      	add	r3, r2
 8006bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68ba      	ldr	r2, [r7, #8]
 8006bf6:	0151      	lsls	r1, r2, #5
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	440a      	add	r2, r1
 8006bfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c04:	6013      	str	r3, [r2, #0]
 8006c06:	e02b      	b.n	8006c60 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	015a      	lsls	r2, r3, #5
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	4413      	add	r3, r2
 8006c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	db12      	blt.n	8006c40 <USB_EPSetStall+0xae>
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d00f      	beq.n	8006c40 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	015a      	lsls	r2, r3, #5
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	4413      	add	r3, r2
 8006c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	68ba      	ldr	r2, [r7, #8]
 8006c30:	0151      	lsls	r1, r2, #5
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	440a      	add	r2, r1
 8006c36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c3a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c3e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	015a      	lsls	r2, r3, #5
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	4413      	add	r3, r2
 8006c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68ba      	ldr	r2, [r7, #8]
 8006c50:	0151      	lsls	r1, r2, #5
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	440a      	add	r2, r1
 8006c56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c5e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3714      	adds	r7, #20
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr

08006c6e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c6e:	b480      	push	{r7}
 8006c70:	b085      	sub	sp, #20
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
 8006c76:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	785b      	ldrb	r3, [r3, #1]
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d128      	bne.n	8006cdc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	015a      	lsls	r2, r3, #5
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	4413      	add	r3, r2
 8006c92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68ba      	ldr	r2, [r7, #8]
 8006c9a:	0151      	lsls	r1, r2, #5
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	440a      	add	r2, r1
 8006ca0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ca4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ca8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	78db      	ldrb	r3, [r3, #3]
 8006cae:	2b03      	cmp	r3, #3
 8006cb0:	d003      	beq.n	8006cba <USB_EPClearStall+0x4c>
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	78db      	ldrb	r3, [r3, #3]
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	d138      	bne.n	8006d2c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	015a      	lsls	r2, r3, #5
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68ba      	ldr	r2, [r7, #8]
 8006cca:	0151      	lsls	r1, r2, #5
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	440a      	add	r2, r1
 8006cd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cd8:	6013      	str	r3, [r2, #0]
 8006cda:	e027      	b.n	8006d2c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	015a      	lsls	r2, r3, #5
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68ba      	ldr	r2, [r7, #8]
 8006cec:	0151      	lsls	r1, r2, #5
 8006cee:	68fa      	ldr	r2, [r7, #12]
 8006cf0:	440a      	add	r2, r1
 8006cf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cf6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006cfa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	78db      	ldrb	r3, [r3, #3]
 8006d00:	2b03      	cmp	r3, #3
 8006d02:	d003      	beq.n	8006d0c <USB_EPClearStall+0x9e>
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	78db      	ldrb	r3, [r3, #3]
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d10f      	bne.n	8006d2c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	015a      	lsls	r2, r3, #5
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	4413      	add	r3, r2
 8006d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68ba      	ldr	r2, [r7, #8]
 8006d1c:	0151      	lsls	r1, r2, #5
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	440a      	add	r2, r1
 8006d22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d2a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3714      	adds	r7, #20
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	b085      	sub	sp, #20
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
 8006d42:	460b      	mov	r3, r1
 8006d44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d58:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006d5c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	78fb      	ldrb	r3, [r7, #3]
 8006d68:	011b      	lsls	r3, r3, #4
 8006d6a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006d6e:	68f9      	ldr	r1, [r7, #12]
 8006d70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d74:	4313      	orrs	r3, r2
 8006d76:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3714      	adds	r7, #20
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr

08006d86 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b084      	sub	sp, #16
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006da0:	f023 0302 	bic.w	r3, r3, #2
 8006da4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006da6:	2003      	movs	r0, #3
 8006da8:	f7f9 fc30 	bl	800060c <HAL_Delay>

  return HAL_OK;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b084      	sub	sp, #16
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006dd0:	f043 0302 	orr.w	r3, r3, #2
 8006dd4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006dd6:	2003      	movs	r0, #3
 8006dd8:	f7f9 fc18 	bl	800060c <HAL_Delay>

  return HAL_OK;
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3710      	adds	r7, #16
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006de6:	b480      	push	{r7}
 8006de8:	b085      	sub	sp, #20
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	695b      	ldr	r3, [r3, #20]
 8006df2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	699b      	ldr	r3, [r3, #24]
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3714      	adds	r7, #20
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b085      	sub	sp, #20
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e1e:	699b      	ldr	r3, [r3, #24]
 8006e20:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e28:	69db      	ldr	r3, [r3, #28]
 8006e2a:	68ba      	ldr	r2, [r7, #8]
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	0c1b      	lsrs	r3, r3, #16
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3714      	adds	r7, #20
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b085      	sub	sp, #20
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e5c:	69db      	ldr	r3, [r3, #28]
 8006e5e:	68ba      	ldr	r2, [r7, #8]
 8006e60:	4013      	ands	r3, r2
 8006e62:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	b29b      	uxth	r3, r3
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3714      	adds	r7, #20
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006e84:	78fb      	ldrb	r3, [r7, #3]
 8006e86:	015a      	lsls	r2, r3, #5
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e9a:	695b      	ldr	r3, [r3, #20]
 8006e9c:	68ba      	ldr	r2, [r7, #8]
 8006e9e:	4013      	ands	r3, r2
 8006ea0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006ea2:	68bb      	ldr	r3, [r7, #8]
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3714      	adds	r7, #20
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b087      	sub	sp, #28
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	460b      	mov	r3, r1
 8006eba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ed2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006ed4:	78fb      	ldrb	r3, [r7, #3]
 8006ed6:	f003 030f 	and.w	r3, r3, #15
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	fa22 f303 	lsr.w	r3, r2, r3
 8006ee0:	01db      	lsls	r3, r3, #7
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	693a      	ldr	r2, [r7, #16]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006eea:	78fb      	ldrb	r3, [r7, #3]
 8006eec:	015a      	lsls	r2, r3, #5
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	693a      	ldr	r2, [r7, #16]
 8006efa:	4013      	ands	r3, r2
 8006efc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006efe:	68bb      	ldr	r3, [r7, #8]
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	371c      	adds	r7, #28
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	695b      	ldr	r3, [r3, #20]
 8006f18:	f003 0301 	and.w	r3, r3, #1
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f42:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006f46:	f023 0307 	bic.w	r3, r3, #7
 8006f4a:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	f003 0306 	and.w	r3, r3, #6
 8006f58:	2b04      	cmp	r3, #4
 8006f5a:	d109      	bne.n	8006f70 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	68fa      	ldr	r2, [r7, #12]
 8006f66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f6a:	f043 0303 	orr.w	r3, r3, #3
 8006f6e:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f82:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3714      	adds	r7, #20
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
	...

08006f94 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b087      	sub	sp, #28
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	607a      	str	r2, [r7, #4]
 8006fa0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	333c      	adds	r3, #60	; 0x3c
 8006faa:	3304      	adds	r3, #4
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	4a26      	ldr	r2, [pc, #152]	; (800704c <USB_EP0_OutStart+0xb8>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d90a      	bls.n	8006fce <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fc8:	d101      	bne.n	8006fce <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	e037      	b.n	800703e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	697a      	ldr	r2, [r7, #20]
 8006fe4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fe8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006fec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	697a      	ldr	r2, [r7, #20]
 8006ff8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ffc:	f043 0318 	orr.w	r3, r3, #24
 8007000:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	697a      	ldr	r2, [r7, #20]
 800700c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007010:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007014:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007016:	7afb      	ldrb	r3, [r7, #11]
 8007018:	2b01      	cmp	r3, #1
 800701a:	d10f      	bne.n	800703c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007022:	461a      	mov	r2, r3
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	697a      	ldr	r2, [r7, #20]
 8007032:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007036:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800703a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	371c      	adds	r7, #28
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	4f54300a 	.word	0x4f54300a

08007050 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007050:	b480      	push	{r7}
 8007052:	b085      	sub	sp, #20
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007058:	2300      	movs	r3, #0
 800705a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	3301      	adds	r3, #1
 8007060:	60fb      	str	r3, [r7, #12]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	4a13      	ldr	r2, [pc, #76]	; (80070b4 <USB_CoreReset+0x64>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d901      	bls.n	800706e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800706a:	2303      	movs	r3, #3
 800706c:	e01b      	b.n	80070a6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	2b00      	cmp	r3, #0
 8007074:	daf2      	bge.n	800705c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007076:	2300      	movs	r3, #0
 8007078:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	f043 0201 	orr.w	r2, r3, #1
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	3301      	adds	r3, #1
 800708a:	60fb      	str	r3, [r7, #12]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	4a09      	ldr	r2, [pc, #36]	; (80070b4 <USB_CoreReset+0x64>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d901      	bls.n	8007098 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007094:	2303      	movs	r3, #3
 8007096:	e006      	b.n	80070a6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	f003 0301 	and.w	r3, r3, #1
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d0f0      	beq.n	8007086 <USB_CoreReset+0x36>

  return HAL_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3714      	adds	r7, #20
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	00030d40 	.word	0x00030d40

080070b8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	460b      	mov	r3, r1
 80070c2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80070c4:	2300      	movs	r3, #0
 80070c6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	7c1b      	ldrb	r3, [r3, #16]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d115      	bne.n	80070fc <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80070d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070d4:	2202      	movs	r2, #2
 80070d6:	2181      	movs	r1, #129	; 0x81
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f003 fb28 	bl	800a72e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2201      	movs	r2, #1
 80070e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80070e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070e8:	2202      	movs	r2, #2
 80070ea:	2101      	movs	r1, #1
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f003 fb1e 	bl	800a72e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2201      	movs	r2, #1
 80070f6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 80070fa:	e012      	b.n	8007122 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80070fc:	2340      	movs	r3, #64	; 0x40
 80070fe:	2202      	movs	r2, #2
 8007100:	2181      	movs	r1, #129	; 0x81
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f003 fb13 	bl	800a72e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800710e:	2340      	movs	r3, #64	; 0x40
 8007110:	2202      	movs	r2, #2
 8007112:	2101      	movs	r1, #1
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f003 fb0a 	bl	800a72e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2201      	movs	r2, #1
 800711e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007122:	2308      	movs	r3, #8
 8007124:	2203      	movs	r2, #3
 8007126:	2182      	movs	r1, #130	; 0x82
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f003 fb00 	bl	800a72e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2201      	movs	r2, #1
 8007132:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8007134:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007138:	f003 fe58 	bl	800adec <malloc>
 800713c:	4603      	mov	r3, r0
 800713e:	461a      	mov	r2, r3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800714c:	2b00      	cmp	r3, #0
 800714e:	d102      	bne.n	8007156 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8007150:	2301      	movs	r3, #1
 8007152:	73fb      	strb	r3, [r7, #15]
 8007154:	e026      	b.n	80071a4 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800715c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	2200      	movs	r2, #0
 800716c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	2200      	movs	r2, #0
 8007174:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	7c1b      	ldrb	r3, [r3, #16]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d109      	bne.n	8007194 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007186:	f44f 7300 	mov.w	r3, #512	; 0x200
 800718a:	2101      	movs	r1, #1
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f003 fbbf 	bl	800a910 <USBD_LL_PrepareReceive>
 8007192:	e007      	b.n	80071a4 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800719a:	2340      	movs	r3, #64	; 0x40
 800719c:	2101      	movs	r1, #1
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f003 fbb6 	bl	800a910 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80071a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3710      	adds	r7, #16
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}

080071ae <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071ae:	b580      	push	{r7, lr}
 80071b0:	b084      	sub	sp, #16
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
 80071b6:	460b      	mov	r3, r1
 80071b8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80071ba:	2300      	movs	r3, #0
 80071bc:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80071be:	2181      	movs	r1, #129	; 0x81
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f003 fada 	bl	800a77a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80071cc:	2101      	movs	r1, #1
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f003 fad3 	bl	800a77a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80071dc:	2182      	movs	r1, #130	; 0x82
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f003 facb 	bl	800a77a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d00e      	beq.n	8007212 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007204:	4618      	mov	r0, r3
 8007206:	f003 fdf9 	bl	800adfc <free>
    pdev->pClassData = NULL;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8007212:	7bfb      	ldrb	r3, [r7, #15]
}
 8007214:	4618      	mov	r0, r3
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b086      	sub	sp, #24
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800722c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800722e:	2300      	movs	r3, #0
 8007230:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007232:	2300      	movs	r3, #0
 8007234:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007236:	2300      	movs	r3, #0
 8007238:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007242:	2b00      	cmp	r3, #0
 8007244:	d039      	beq.n	80072ba <USBD_CDC_Setup+0x9e>
 8007246:	2b20      	cmp	r3, #32
 8007248:	d17c      	bne.n	8007344 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	88db      	ldrh	r3, [r3, #6]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d029      	beq.n	80072a6 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	b25b      	sxtb	r3, r3
 8007258:	2b00      	cmp	r3, #0
 800725a:	da11      	bge.n	8007280 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	683a      	ldr	r2, [r7, #0]
 8007266:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8007268:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800726a:	683a      	ldr	r2, [r7, #0]
 800726c:	88d2      	ldrh	r2, [r2, #6]
 800726e:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007270:	6939      	ldr	r1, [r7, #16]
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	88db      	ldrh	r3, [r3, #6]
 8007276:	461a      	mov	r2, r3
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f001 f9c9 	bl	8008610 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800727e:	e068      	b.n	8007352 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	785a      	ldrb	r2, [r3, #1]
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	88db      	ldrh	r3, [r3, #6]
 800728e:	b2da      	uxtb	r2, r3
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007296:	6939      	ldr	r1, [r7, #16]
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	88db      	ldrh	r3, [r3, #6]
 800729c:	461a      	mov	r2, r3
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f001 f9e4 	bl	800866c <USBD_CtlPrepareRx>
    break;
 80072a4:	e055      	b.n	8007352 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	683a      	ldr	r2, [r7, #0]
 80072b0:	7850      	ldrb	r0, [r2, #1]
 80072b2:	2200      	movs	r2, #0
 80072b4:	6839      	ldr	r1, [r7, #0]
 80072b6:	4798      	blx	r3
    break;
 80072b8:	e04b      	b.n	8007352 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	785b      	ldrb	r3, [r3, #1]
 80072be:	2b0a      	cmp	r3, #10
 80072c0:	d017      	beq.n	80072f2 <USBD_CDC_Setup+0xd6>
 80072c2:	2b0b      	cmp	r3, #11
 80072c4:	d029      	beq.n	800731a <USBD_CDC_Setup+0xfe>
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d133      	bne.n	8007332 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80072d0:	2b03      	cmp	r3, #3
 80072d2:	d107      	bne.n	80072e4 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80072d4:	f107 030c 	add.w	r3, r7, #12
 80072d8:	2202      	movs	r2, #2
 80072da:	4619      	mov	r1, r3
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f001 f997 	bl	8008610 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80072e2:	e02e      	b.n	8007342 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80072e4:	6839      	ldr	r1, [r7, #0]
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f001 f927 	bl	800853a <USBD_CtlError>
			  ret = USBD_FAIL;
 80072ec:	2302      	movs	r3, #2
 80072ee:	75fb      	strb	r3, [r7, #23]
      break;
 80072f0:	e027      	b.n	8007342 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80072f8:	2b03      	cmp	r3, #3
 80072fa:	d107      	bne.n	800730c <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 80072fc:	f107 030f 	add.w	r3, r7, #15
 8007300:	2201      	movs	r2, #1
 8007302:	4619      	mov	r1, r3
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f001 f983 	bl	8008610 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800730a:	e01a      	b.n	8007342 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800730c:	6839      	ldr	r1, [r7, #0]
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f001 f913 	bl	800853a <USBD_CtlError>
			  ret = USBD_FAIL;
 8007314:	2302      	movs	r3, #2
 8007316:	75fb      	strb	r3, [r7, #23]
      break;
 8007318:	e013      	b.n	8007342 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007320:	2b03      	cmp	r3, #3
 8007322:	d00d      	beq.n	8007340 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8007324:	6839      	ldr	r1, [r7, #0]
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f001 f907 	bl	800853a <USBD_CtlError>
			  ret = USBD_FAIL;
 800732c:	2302      	movs	r3, #2
 800732e:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007330:	e006      	b.n	8007340 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 8007332:	6839      	ldr	r1, [r7, #0]
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f001 f900 	bl	800853a <USBD_CtlError>
      ret = USBD_FAIL;
 800733a:	2302      	movs	r3, #2
 800733c:	75fb      	strb	r3, [r7, #23]
      break;
 800733e:	e000      	b.n	8007342 <USBD_CDC_Setup+0x126>
      break;
 8007340:	bf00      	nop
    }
    break;
 8007342:	e006      	b.n	8007352 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8007344:	6839      	ldr	r1, [r7, #0]
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f001 f8f7 	bl	800853a <USBD_CtlError>
    ret = USBD_FAIL;
 800734c:	2302      	movs	r3, #2
 800734e:	75fb      	strb	r3, [r7, #23]
    break;
 8007350:	bf00      	nop
  }

  return ret;
 8007352:	7dfb      	ldrb	r3, [r7, #23]
}
 8007354:	4618      	mov	r0, r3
 8007356:	3718      	adds	r7, #24
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	460b      	mov	r3, r1
 8007366:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800736e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007376:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800737e:	2b00      	cmp	r3, #0
 8007380:	d03a      	beq.n	80073f8 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007382:	78fa      	ldrb	r2, [r7, #3]
 8007384:	6879      	ldr	r1, [r7, #4]
 8007386:	4613      	mov	r3, r2
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	4413      	add	r3, r2
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	440b      	add	r3, r1
 8007390:	331c      	adds	r3, #28
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d029      	beq.n	80073ec <USBD_CDC_DataIn+0x90>
 8007398:	78fa      	ldrb	r2, [r7, #3]
 800739a:	6879      	ldr	r1, [r7, #4]
 800739c:	4613      	mov	r3, r2
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	4413      	add	r3, r2
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	440b      	add	r3, r1
 80073a6:	331c      	adds	r3, #28
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	78f9      	ldrb	r1, [r7, #3]
 80073ac:	68b8      	ldr	r0, [r7, #8]
 80073ae:	460b      	mov	r3, r1
 80073b0:	00db      	lsls	r3, r3, #3
 80073b2:	1a5b      	subs	r3, r3, r1
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	4403      	add	r3, r0
 80073b8:	3344      	adds	r3, #68	; 0x44
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	fbb2 f1f3 	udiv	r1, r2, r3
 80073c0:	fb03 f301 	mul.w	r3, r3, r1
 80073c4:	1ad3      	subs	r3, r2, r3
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d110      	bne.n	80073ec <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80073ca:	78fa      	ldrb	r2, [r7, #3]
 80073cc:	6879      	ldr	r1, [r7, #4]
 80073ce:	4613      	mov	r3, r2
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	4413      	add	r3, r2
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	440b      	add	r3, r1
 80073d8:	331c      	adds	r3, #28
 80073da:	2200      	movs	r2, #0
 80073dc:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 80073de:	78f9      	ldrb	r1, [r7, #3]
 80073e0:	2300      	movs	r3, #0
 80073e2:	2200      	movs	r2, #0
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f003 fa70 	bl	800a8ca <USBD_LL_Transmit>
 80073ea:	e003      	b.n	80073f4 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80073f4:	2300      	movs	r3, #0
 80073f6:	e000      	b.n	80073fa <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80073f8:	2302      	movs	r3, #2
  }
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3710      	adds	r7, #16
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}

08007402 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007402:	b580      	push	{r7, lr}
 8007404:	b084      	sub	sp, #16
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
 800740a:	460b      	mov	r3, r1
 800740c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007414:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8007416:	78fb      	ldrb	r3, [r7, #3]
 8007418:	4619      	mov	r1, r3
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f003 fa9b 	bl	800a956 <USBD_LL_GetRxDataSize>
 8007420:	4602      	mov	r2, r0
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800742e:	2b00      	cmp	r3, #0
 8007430:	d00d      	beq.n	800744e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007446:	4611      	mov	r1, r2
 8007448:	4798      	blx	r3

    return USBD_OK;
 800744a:	2300      	movs	r3, #0
 800744c:	e000      	b.n	8007450 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800744e:	2302      	movs	r3, #2
  }
}
 8007450:	4618      	mov	r0, r3
 8007452:	3710      	adds	r7, #16
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007466:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800746e:	2b00      	cmp	r3, #0
 8007470:	d015      	beq.n	800749e <USBD_CDC_EP0_RxReady+0x46>
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007478:	2bff      	cmp	r3, #255	; 0xff
 800747a:	d010      	beq.n	800749e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800748a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800748c:	68fa      	ldr	r2, [r7, #12]
 800748e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007492:	b292      	uxth	r2, r2
 8007494:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	22ff      	movs	r2, #255	; 0xff
 800749a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3710      	adds	r7, #16
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2243      	movs	r2, #67	; 0x43
 80074b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80074b6:	4b03      	ldr	r3, [pc, #12]	; (80074c4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	370c      	adds	r7, #12
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr
 80074c4:	20000090 	.word	0x20000090

080074c8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b083      	sub	sp, #12
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2243      	movs	r2, #67	; 0x43
 80074d4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80074d6:	4b03      	ldr	r3, [pc, #12]	; (80074e4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80074d8:	4618      	mov	r0, r3
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr
 80074e4:	2000004c 	.word	0x2000004c

080074e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2243      	movs	r2, #67	; 0x43
 80074f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80074f6:	4b03      	ldr	r3, [pc, #12]	; (8007504 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	370c      	adds	r7, #12
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr
 8007504:	200000d4 	.word	0x200000d4

08007508 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	220a      	movs	r2, #10
 8007514:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007516:	4b03      	ldr	r3, [pc, #12]	; (8007524 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007518:	4618      	mov	r0, r3
 800751a:	370c      	adds	r7, #12
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr
 8007524:	20000008 	.word	0x20000008

08007528 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8007528:	b480      	push	{r7}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007532:	2302      	movs	r3, #2
 8007534:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d005      	beq.n	8007548 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	683a      	ldr	r2, [r7, #0]
 8007540:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8007544:	2300      	movs	r3, #0
 8007546:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007548:	7bfb      	ldrb	r3, [r7, #15]
}
 800754a:	4618      	mov	r0, r3
 800754c:	3714      	adds	r7, #20
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr

08007556 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8007556:	b480      	push	{r7}
 8007558:	b087      	sub	sp, #28
 800755a:	af00      	add	r7, sp, #0
 800755c:	60f8      	str	r0, [r7, #12]
 800755e:	60b9      	str	r1, [r7, #8]
 8007560:	4613      	mov	r3, r2
 8007562:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800756a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	68ba      	ldr	r2, [r7, #8]
 8007570:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007574:	88fa      	ldrh	r2, [r7, #6]
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	371c      	adds	r7, #28
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr

0800758a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800758a:	b480      	push	{r7}
 800758c:	b085      	sub	sp, #20
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
 8007592:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800759a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	683a      	ldr	r2, [r7, #0]
 80075a0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3714      	adds	r7, #20
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr

080075b2 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b084      	sub	sp, #16
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80075c0:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d01c      	beq.n	8007606 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d115      	bne.n	8007602 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2201      	movs	r2, #1
 80075da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	2181      	movs	r1, #129	; 0x81
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f003 f966 	bl	800a8ca <USBD_LL_Transmit>

      return USBD_OK;
 80075fe:	2300      	movs	r3, #0
 8007600:	e002      	b.n	8007608 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007602:	2301      	movs	r3, #1
 8007604:	e000      	b.n	8007608 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007606:	2302      	movs	r3, #2
  }
}
 8007608:	4618      	mov	r0, r3
 800760a:	3710      	adds	r7, #16
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800761e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007626:	2b00      	cmp	r3, #0
 8007628:	d017      	beq.n	800765a <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	7c1b      	ldrb	r3, [r3, #16]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d109      	bne.n	8007646 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007638:	f44f 7300 	mov.w	r3, #512	; 0x200
 800763c:	2101      	movs	r1, #1
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f003 f966 	bl	800a910 <USBD_LL_PrepareReceive>
 8007644:	e007      	b.n	8007656 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800764c:	2340      	movs	r3, #64	; 0x40
 800764e:	2101      	movs	r1, #1
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f003 f95d 	bl	800a910 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007656:	2300      	movs	r3, #0
 8007658:	e000      	b.n	800765c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800765a:	2302      	movs	r3, #2
  }
}
 800765c:	4618      	mov	r0, r3
 800765e:	3710      	adds	r7, #16
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	4613      	mov	r3, r2
 8007670:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d101      	bne.n	800767c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007678:	2302      	movs	r3, #2
 800767a:	e01a      	b.n	80076b2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007682:	2b00      	cmp	r3, #0
 8007684:	d003      	beq.n	800768e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2200      	movs	r2, #0
 800768a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d003      	beq.n	800769c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	68ba      	ldr	r2, [r7, #8]
 8007698:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	79fa      	ldrb	r2, [r7, #7]
 80076a8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80076aa:	68f8      	ldr	r0, [r7, #12]
 80076ac:	f002 ffd4 	bl	800a658 <USBD_LL_Init>

  return USBD_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3710      	adds	r7, #16
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80076ba:	b480      	push	{r7}
 80076bc:	b085      	sub	sp, #20
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
 80076c2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80076c4:	2300      	movs	r3, #0
 80076c6:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d006      	beq.n	80076dc <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	683a      	ldr	r2, [r7, #0]
 80076d2:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 80076d6:	2300      	movs	r3, #0
 80076d8:	73fb      	strb	r3, [r7, #15]
 80076da:	e001      	b.n	80076e0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80076dc:	2302      	movs	r3, #2
 80076de:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80076e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3714      	adds	r7, #20
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr

080076ee <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80076ee:	b580      	push	{r7, lr}
 80076f0:	b082      	sub	sp, #8
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f002 fffe 	bl	800a6f8 <USBD_LL_Start>

  return USBD_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8007706:	b480      	push	{r7}
 8007708:	b083      	sub	sp, #12
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800770e:	2300      	movs	r3, #0
}
 8007710:	4618      	mov	r0, r3
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	460b      	mov	r3, r1
 8007726:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8007728:	2302      	movs	r3, #2
 800772a:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00c      	beq.n	8007750 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	78fa      	ldrb	r2, [r7, #3]
 8007740:	4611      	mov	r1, r2
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	4798      	blx	r3
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d101      	bne.n	8007750 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800774c:	2300      	movs	r3, #0
 800774e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007750:	7bfb      	ldrb	r3, [r7, #15]
}
 8007752:	4618      	mov	r0, r3
 8007754:	3710      	adds	r7, #16
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800775a:	b580      	push	{r7, lr}
 800775c:	b082      	sub	sp, #8
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
 8007762:	460b      	mov	r3, r1
 8007764:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	78fa      	ldrb	r2, [r7, #3]
 8007770:	4611      	mov	r1, r2
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	4798      	blx	r3
  return USBD_OK;
 8007776:	2300      	movs	r3, #0
}
 8007778:	4618      	mov	r0, r3
 800777a:	3708      	adds	r7, #8
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007790:	6839      	ldr	r1, [r7, #0]
 8007792:	4618      	mov	r0, r3
 8007794:	f000 fe94 	bl	80084c0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 80077a6:	461a      	mov	r2, r3
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80077b4:	f003 031f 	and.w	r3, r3, #31
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d00c      	beq.n	80077d6 <USBD_LL_SetupStage+0x56>
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d302      	bcc.n	80077c6 <USBD_LL_SetupStage+0x46>
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d010      	beq.n	80077e6 <USBD_LL_SetupStage+0x66>
 80077c4:	e017      	b.n	80077f6 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80077cc:	4619      	mov	r1, r3
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 fa04 	bl	8007bdc <USBD_StdDevReq>
    break;
 80077d4:	e01a      	b.n	800780c <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80077dc:	4619      	mov	r1, r3
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 fa66 	bl	8007cb0 <USBD_StdItfReq>
    break;
 80077e4:	e012      	b.n	800780c <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80077ec:	4619      	mov	r1, r3
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 faa4 	bl	8007d3c <USBD_StdEPReq>
    break;
 80077f4:	e00a      	b.n	800780c <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80077fc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007800:	b2db      	uxtb	r3, r3
 8007802:	4619      	mov	r1, r3
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f002 ffd7 	bl	800a7b8 <USBD_LL_StallEP>
    break;
 800780a:	bf00      	nop
  }

  return USBD_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	3708      	adds	r7, #8
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}

08007816 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007816:	b580      	push	{r7, lr}
 8007818:	b086      	sub	sp, #24
 800781a:	af00      	add	r7, sp, #0
 800781c:	60f8      	str	r0, [r7, #12]
 800781e:	460b      	mov	r3, r1
 8007820:	607a      	str	r2, [r7, #4]
 8007822:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8007824:	7afb      	ldrb	r3, [r7, #11]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d14b      	bne.n	80078c2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007830:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007838:	2b03      	cmp	r3, #3
 800783a:	d134      	bne.n	80078a6 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	68da      	ldr	r2, [r3, #12]
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	691b      	ldr	r3, [r3, #16]
 8007844:	429a      	cmp	r2, r3
 8007846:	d919      	bls.n	800787c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	68da      	ldr	r2, [r3, #12]
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	1ad2      	subs	r2, r2, r3
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	68da      	ldr	r2, [r3, #12]
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800785e:	429a      	cmp	r2, r3
 8007860:	d203      	bcs.n	800786a <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8007866:	b29b      	uxth	r3, r3
 8007868:	e002      	b.n	8007870 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800786e:	b29b      	uxth	r3, r3
 8007870:	461a      	mov	r2, r3
 8007872:	6879      	ldr	r1, [r7, #4]
 8007874:	68f8      	ldr	r0, [r7, #12]
 8007876:	f000 ff17 	bl	80086a8 <USBD_CtlContinueRx>
 800787a:	e038      	b.n	80078ee <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007882:	691b      	ldr	r3, [r3, #16]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d00a      	beq.n	800789e <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800788e:	2b03      	cmp	r3, #3
 8007890:	d105      	bne.n	800789e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007898:	691b      	ldr	r3, [r3, #16]
 800789a:	68f8      	ldr	r0, [r7, #12]
 800789c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800789e:	68f8      	ldr	r0, [r7, #12]
 80078a0:	f000 ff14 	bl	80086cc <USBD_CtlSendStatus>
 80078a4:	e023      	b.n	80078ee <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80078ac:	2b05      	cmp	r3, #5
 80078ae:	d11e      	bne.n	80078ee <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2200      	movs	r2, #0
 80078b4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80078b8:	2100      	movs	r1, #0
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	f002 ff7c 	bl	800a7b8 <USBD_LL_StallEP>
 80078c0:	e015      	b.n	80078ee <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80078c8:	699b      	ldr	r3, [r3, #24]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d00d      	beq.n	80078ea <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 80078d4:	2b03      	cmp	r3, #3
 80078d6:	d108      	bne.n	80078ea <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80078de:	699b      	ldr	r3, [r3, #24]
 80078e0:	7afa      	ldrb	r2, [r7, #11]
 80078e2:	4611      	mov	r1, r2
 80078e4:	68f8      	ldr	r0, [r7, #12]
 80078e6:	4798      	blx	r3
 80078e8:	e001      	b.n	80078ee <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80078ea:	2302      	movs	r3, #2
 80078ec:	e000      	b.n	80078f0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80078ee:	2300      	movs	r3, #0
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3718      	adds	r7, #24
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b086      	sub	sp, #24
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	460b      	mov	r3, r1
 8007902:	607a      	str	r2, [r7, #4]
 8007904:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8007906:	7afb      	ldrb	r3, [r7, #11]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d17f      	bne.n	8007a0c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	3314      	adds	r3, #20
 8007910:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007918:	2b02      	cmp	r3, #2
 800791a:	d15c      	bne.n	80079d6 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	68da      	ldr	r2, [r3, #12]
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	691b      	ldr	r3, [r3, #16]
 8007924:	429a      	cmp	r2, r3
 8007926:	d915      	bls.n	8007954 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	68da      	ldr	r2, [r3, #12]
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	1ad2      	subs	r2, r2, r3
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	b29b      	uxth	r3, r3
 800793c:	461a      	mov	r2, r3
 800793e:	6879      	ldr	r1, [r7, #4]
 8007940:	68f8      	ldr	r0, [r7, #12]
 8007942:	f000 fe81 	bl	8008648 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007946:	2300      	movs	r3, #0
 8007948:	2200      	movs	r2, #0
 800794a:	2100      	movs	r1, #0
 800794c:	68f8      	ldr	r0, [r7, #12]
 800794e:	f002 ffdf 	bl	800a910 <USBD_LL_PrepareReceive>
 8007952:	e04e      	b.n	80079f2 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	697a      	ldr	r2, [r7, #20]
 800795a:	6912      	ldr	r2, [r2, #16]
 800795c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007960:	fb02 f201 	mul.w	r2, r2, r1
 8007964:	1a9b      	subs	r3, r3, r2
 8007966:	2b00      	cmp	r3, #0
 8007968:	d11c      	bne.n	80079a4 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	689a      	ldr	r2, [r3, #8]
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007972:	429a      	cmp	r2, r3
 8007974:	d316      	bcc.n	80079a4 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	689a      	ldr	r2, [r3, #8]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8007980:	429a      	cmp	r2, r3
 8007982:	d20f      	bcs.n	80079a4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007984:	2200      	movs	r2, #0
 8007986:	2100      	movs	r1, #0
 8007988:	68f8      	ldr	r0, [r7, #12]
 800798a:	f000 fe5d 	bl	8008648 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2200      	movs	r2, #0
 8007992:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007996:	2300      	movs	r3, #0
 8007998:	2200      	movs	r2, #0
 800799a:	2100      	movs	r1, #0
 800799c:	68f8      	ldr	r0, [r7, #12]
 800799e:	f002 ffb7 	bl	800a910 <USBD_LL_PrepareReceive>
 80079a2:	e026      	b.n	80079f2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00a      	beq.n	80079c6 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80079b6:	2b03      	cmp	r3, #3
 80079b8:	d105      	bne.n	80079c6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	68f8      	ldr	r0, [r7, #12]
 80079c4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80079c6:	2180      	movs	r1, #128	; 0x80
 80079c8:	68f8      	ldr	r0, [r7, #12]
 80079ca:	f002 fef5 	bl	800a7b8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80079ce:	68f8      	ldr	r0, [r7, #12]
 80079d0:	f000 fe8f 	bl	80086f2 <USBD_CtlReceiveStatus>
 80079d4:	e00d      	b.n	80079f2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80079dc:	2b04      	cmp	r3, #4
 80079de:	d004      	beq.n	80079ea <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d103      	bne.n	80079f2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80079ea:	2180      	movs	r1, #128	; 0x80
 80079ec:	68f8      	ldr	r0, [r7, #12]
 80079ee:	f002 fee3 	bl	800a7b8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d11d      	bne.n	8007a38 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80079fc:	68f8      	ldr	r0, [r7, #12]
 80079fe:	f7ff fe82 	bl	8007706 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2200      	movs	r2, #0
 8007a06:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8007a0a:	e015      	b.n	8007a38 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007a12:	695b      	ldr	r3, [r3, #20]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00d      	beq.n	8007a34 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8007a1e:	2b03      	cmp	r3, #3
 8007a20:	d108      	bne.n	8007a34 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007a28:	695b      	ldr	r3, [r3, #20]
 8007a2a:	7afa      	ldrb	r2, [r7, #11]
 8007a2c:	4611      	mov	r1, r2
 8007a2e:	68f8      	ldr	r0, [r7, #12]
 8007a30:	4798      	blx	r3
 8007a32:	e001      	b.n	8007a38 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007a34:	2302      	movs	r3, #2
 8007a36:	e000      	b.n	8007a3a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007a38:	2300      	movs	r3, #0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3718      	adds	r7, #24
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}

08007a42 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b082      	sub	sp, #8
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a4a:	2340      	movs	r3, #64	; 0x40
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	2100      	movs	r1, #0
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f002 fe6c 	bl	800a72e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2240      	movs	r2, #64	; 0x40
 8007a62:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a66:	2340      	movs	r3, #64	; 0x40
 8007a68:	2200      	movs	r2, #0
 8007a6a:	2180      	movs	r1, #128	; 0x80
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f002 fe5e 	bl	800a72e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2201      	movs	r2, #1
 8007a76:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2240      	movs	r2, #64	; 0x40
 8007a7c:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d009      	beq.n	8007aba <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	6852      	ldr	r2, [r2, #4]
 8007ab2:	b2d2      	uxtb	r2, r2
 8007ab4:	4611      	mov	r1, r2
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	4798      	blx	r3
  }

  return USBD_OK;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3708      	adds	r7, #8
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	460b      	mov	r3, r1
 8007ace:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	78fa      	ldrb	r2, [r7, #3]
 8007ad4:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8007ad6:	2300      	movs	r3, #0
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2204      	movs	r2, #4
 8007afc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8007b00:	2300      	movs	r3, #0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	370c      	adds	r7, #12
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr

08007b0e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8007b0e:	b480      	push	{r7}
 8007b10:	b083      	sub	sp, #12
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8007b22:	2300      	movs	r3, #0
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007b3e:	2b03      	cmp	r3, #3
 8007b40:	d10b      	bne.n	8007b5a <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007b48:	69db      	ldr	r3, [r3, #28]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d005      	beq.n	8007b5a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007b54:	69db      	ldr	r3, [r3, #28]
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8007b5a:	2300      	movs	r3, #0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3708      	adds	r7, #8
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	460b      	mov	r3, r1
 8007b6e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	370c      	adds	r7, #12
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr

08007b7e <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8007b7e:	b480      	push	{r7}
 8007b80:	b083      	sub	sp, #12
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
 8007b86:	460b      	mov	r3, r1
 8007b88:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007b8a:	2300      	movs	r3, #0
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	370c      	adds	r7, #12
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b083      	sub	sp, #12
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	370c      	adds	r7, #12
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr

08007bae <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b082      	sub	sp, #8
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	6852      	ldr	r2, [r2, #4]
 8007bca:	b2d2      	uxtb	r2, r2
 8007bcc:	4611      	mov	r1, r2
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	4798      	blx	r3

  return USBD_OK;
 8007bd2:	2300      	movs	r3, #0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3708      	adds	r7, #8
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007be6:	2300      	movs	r3, #0
 8007be8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007bf2:	2b20      	cmp	r3, #32
 8007bf4:	d004      	beq.n	8007c00 <USBD_StdDevReq+0x24>
 8007bf6:	2b40      	cmp	r3, #64	; 0x40
 8007bf8:	d002      	beq.n	8007c00 <USBD_StdDevReq+0x24>
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d008      	beq.n	8007c10 <USBD_StdDevReq+0x34>
 8007bfe:	e04c      	b.n	8007c9a <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	6839      	ldr	r1, [r7, #0]
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	4798      	blx	r3
    break;
 8007c0e:	e049      	b.n	8007ca4 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	785b      	ldrb	r3, [r3, #1]
 8007c14:	2b09      	cmp	r3, #9
 8007c16:	d83a      	bhi.n	8007c8e <USBD_StdDevReq+0xb2>
 8007c18:	a201      	add	r2, pc, #4	; (adr r2, 8007c20 <USBD_StdDevReq+0x44>)
 8007c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c1e:	bf00      	nop
 8007c20:	08007c71 	.word	0x08007c71
 8007c24:	08007c85 	.word	0x08007c85
 8007c28:	08007c8f 	.word	0x08007c8f
 8007c2c:	08007c7b 	.word	0x08007c7b
 8007c30:	08007c8f 	.word	0x08007c8f
 8007c34:	08007c53 	.word	0x08007c53
 8007c38:	08007c49 	.word	0x08007c49
 8007c3c:	08007c8f 	.word	0x08007c8f
 8007c40:	08007c67 	.word	0x08007c67
 8007c44:	08007c5d 	.word	0x08007c5d
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8007c48:	6839      	ldr	r1, [r7, #0]
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 f9d2 	bl	8007ff4 <USBD_GetDescriptor>
      break;
 8007c50:	e022      	b.n	8007c98 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8007c52:	6839      	ldr	r1, [r7, #0]
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 fac7 	bl	80081e8 <USBD_SetAddress>
      break;
 8007c5a:	e01d      	b.n	8007c98 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8007c5c:	6839      	ldr	r1, [r7, #0]
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 fb04 	bl	800826c <USBD_SetConfig>
      break;
 8007c64:	e018      	b.n	8007c98 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8007c66:	6839      	ldr	r1, [r7, #0]
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 fb8d 	bl	8008388 <USBD_GetConfig>
      break;
 8007c6e:	e013      	b.n	8007c98 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8007c70:	6839      	ldr	r1, [r7, #0]
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 fbbc 	bl	80083f0 <USBD_GetStatus>
      break;
 8007c78:	e00e      	b.n	8007c98 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8007c7a:	6839      	ldr	r1, [r7, #0]
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 fbea 	bl	8008456 <USBD_SetFeature>
      break;
 8007c82:	e009      	b.n	8007c98 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8007c84:	6839      	ldr	r1, [r7, #0]
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 fbf9 	bl	800847e <USBD_ClrFeature>
      break;
 8007c8c:	e004      	b.n	8007c98 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8007c8e:	6839      	ldr	r1, [r7, #0]
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 fc52 	bl	800853a <USBD_CtlError>
      break;
 8007c96:	bf00      	nop
    }
    break;
 8007c98:	e004      	b.n	8007ca4 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8007c9a:	6839      	ldr	r1, [r7, #0]
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 fc4c 	bl	800853a <USBD_CtlError>
    break;
 8007ca2:	bf00      	nop
  }

  return ret;
 8007ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3710      	adds	r7, #16
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop

08007cb0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007cc6:	2b20      	cmp	r3, #32
 8007cc8:	d003      	beq.n	8007cd2 <USBD_StdItfReq+0x22>
 8007cca:	2b40      	cmp	r3, #64	; 0x40
 8007ccc:	d001      	beq.n	8007cd2 <USBD_StdItfReq+0x22>
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d12a      	bne.n	8007d28 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	2b02      	cmp	r3, #2
 8007cdc:	d81d      	bhi.n	8007d1a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	889b      	ldrh	r3, [r3, #4]
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d813      	bhi.n	8007d10 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	6839      	ldr	r1, [r7, #0]
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	4798      	blx	r3
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	88db      	ldrh	r3, [r3, #6]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d110      	bne.n	8007d24 <USBD_StdItfReq+0x74>
 8007d02:	7bfb      	ldrb	r3, [r7, #15]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d10d      	bne.n	8007d24 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 fcdf 	bl	80086cc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007d0e:	e009      	b.n	8007d24 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8007d10:	6839      	ldr	r1, [r7, #0]
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 fc11 	bl	800853a <USBD_CtlError>
      break;
 8007d18:	e004      	b.n	8007d24 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8007d1a:	6839      	ldr	r1, [r7, #0]
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 fc0c 	bl	800853a <USBD_CtlError>
      break;
 8007d22:	e000      	b.n	8007d26 <USBD_StdItfReq+0x76>
      break;
 8007d24:	bf00      	nop
    }
    break;
 8007d26:	e004      	b.n	8007d32 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007d28:	6839      	ldr	r1, [r7, #0]
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 fc05 	bl	800853a <USBD_CtlError>
    break;
 8007d30:	bf00      	nop
  }

  return USBD_OK;
 8007d32:	2300      	movs	r3, #0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3710      	adds	r7, #16
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007d46:	2300      	movs	r3, #0
 8007d48:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	889b      	ldrh	r3, [r3, #4]
 8007d4e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d58:	2b20      	cmp	r3, #32
 8007d5a:	d004      	beq.n	8007d66 <USBD_StdEPReq+0x2a>
 8007d5c:	2b40      	cmp	r3, #64	; 0x40
 8007d5e:	d002      	beq.n	8007d66 <USBD_StdEPReq+0x2a>
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d008      	beq.n	8007d76 <USBD_StdEPReq+0x3a>
 8007d64:	e13b      	b.n	8007fde <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	6839      	ldr	r1, [r7, #0]
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	4798      	blx	r3
    break;
 8007d74:	e138      	b.n	8007fe8 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d7e:	2b20      	cmp	r3, #32
 8007d80:	d10a      	bne.n	8007d98 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	6839      	ldr	r1, [r7, #0]
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	4798      	blx	r3
 8007d90:	4603      	mov	r3, r0
 8007d92:	73fb      	strb	r3, [r7, #15]

      return ret;
 8007d94:	7bfb      	ldrb	r3, [r7, #15]
 8007d96:	e128      	b.n	8007fea <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	785b      	ldrb	r3, [r3, #1]
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d03e      	beq.n	8007e1e <USBD_StdEPReq+0xe2>
 8007da0:	2b03      	cmp	r3, #3
 8007da2:	d002      	beq.n	8007daa <USBD_StdEPReq+0x6e>
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d070      	beq.n	8007e8a <USBD_StdEPReq+0x14e>
 8007da8:	e113      	b.n	8007fd2 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007db0:	2b02      	cmp	r3, #2
 8007db2:	d002      	beq.n	8007dba <USBD_StdEPReq+0x7e>
 8007db4:	2b03      	cmp	r3, #3
 8007db6:	d015      	beq.n	8007de4 <USBD_StdEPReq+0xa8>
 8007db8:	e02b      	b.n	8007e12 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007dba:	7bbb      	ldrb	r3, [r7, #14]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d00c      	beq.n	8007dda <USBD_StdEPReq+0x9e>
 8007dc0:	7bbb      	ldrb	r3, [r7, #14]
 8007dc2:	2b80      	cmp	r3, #128	; 0x80
 8007dc4:	d009      	beq.n	8007dda <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8007dc6:	7bbb      	ldrb	r3, [r7, #14]
 8007dc8:	4619      	mov	r1, r3
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f002 fcf4 	bl	800a7b8 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007dd0:	2180      	movs	r1, #128	; 0x80
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f002 fcf0 	bl	800a7b8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007dd8:	e020      	b.n	8007e1c <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8007dda:	6839      	ldr	r1, [r7, #0]
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 fbac 	bl	800853a <USBD_CtlError>
        break;
 8007de2:	e01b      	b.n	8007e1c <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	885b      	ldrh	r3, [r3, #2]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d10e      	bne.n	8007e0a <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007dec:	7bbb      	ldrb	r3, [r7, #14]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d00b      	beq.n	8007e0a <USBD_StdEPReq+0xce>
 8007df2:	7bbb      	ldrb	r3, [r7, #14]
 8007df4:	2b80      	cmp	r3, #128	; 0x80
 8007df6:	d008      	beq.n	8007e0a <USBD_StdEPReq+0xce>
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	88db      	ldrh	r3, [r3, #6]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d104      	bne.n	8007e0a <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8007e00:	7bbb      	ldrb	r3, [r7, #14]
 8007e02:	4619      	mov	r1, r3
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f002 fcd7 	bl	800a7b8 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 fc5e 	bl	80086cc <USBD_CtlSendStatus>

        break;
 8007e10:	e004      	b.n	8007e1c <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8007e12:	6839      	ldr	r1, [r7, #0]
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 fb90 	bl	800853a <USBD_CtlError>
        break;
 8007e1a:	bf00      	nop
      }
      break;
 8007e1c:	e0de      	b.n	8007fdc <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007e24:	2b02      	cmp	r3, #2
 8007e26:	d002      	beq.n	8007e2e <USBD_StdEPReq+0xf2>
 8007e28:	2b03      	cmp	r3, #3
 8007e2a:	d015      	beq.n	8007e58 <USBD_StdEPReq+0x11c>
 8007e2c:	e026      	b.n	8007e7c <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e2e:	7bbb      	ldrb	r3, [r7, #14]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d00c      	beq.n	8007e4e <USBD_StdEPReq+0x112>
 8007e34:	7bbb      	ldrb	r3, [r7, #14]
 8007e36:	2b80      	cmp	r3, #128	; 0x80
 8007e38:	d009      	beq.n	8007e4e <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8007e3a:	7bbb      	ldrb	r3, [r7, #14]
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f002 fcba 	bl	800a7b8 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007e44:	2180      	movs	r1, #128	; 0x80
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f002 fcb6 	bl	800a7b8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007e4c:	e01c      	b.n	8007e88 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8007e4e:	6839      	ldr	r1, [r7, #0]
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 fb72 	bl	800853a <USBD_CtlError>
        break;
 8007e56:	e017      	b.n	8007e88 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	885b      	ldrh	r3, [r3, #2]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d112      	bne.n	8007e86 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007e60:	7bbb      	ldrb	r3, [r7, #14]
 8007e62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d004      	beq.n	8007e74 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8007e6a:	7bbb      	ldrb	r3, [r7, #14]
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f002 fcc1 	bl	800a7f6 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 fc29 	bl	80086cc <USBD_CtlSendStatus>
        }
        break;
 8007e7a:	e004      	b.n	8007e86 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8007e7c:	6839      	ldr	r1, [r7, #0]
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 fb5b 	bl	800853a <USBD_CtlError>
        break;
 8007e84:	e000      	b.n	8007e88 <USBD_StdEPReq+0x14c>
        break;
 8007e86:	bf00      	nop
      }
      break;
 8007e88:	e0a8      	b.n	8007fdc <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007e90:	2b02      	cmp	r3, #2
 8007e92:	d002      	beq.n	8007e9a <USBD_StdEPReq+0x15e>
 8007e94:	2b03      	cmp	r3, #3
 8007e96:	d031      	beq.n	8007efc <USBD_StdEPReq+0x1c0>
 8007e98:	e095      	b.n	8007fc6 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e9a:	7bbb      	ldrb	r3, [r7, #14]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d007      	beq.n	8007eb0 <USBD_StdEPReq+0x174>
 8007ea0:	7bbb      	ldrb	r3, [r7, #14]
 8007ea2:	2b80      	cmp	r3, #128	; 0x80
 8007ea4:	d004      	beq.n	8007eb0 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8007ea6:	6839      	ldr	r1, [r7, #0]
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 fb46 	bl	800853a <USBD_CtlError>
          break;
 8007eae:	e08f      	b.n	8007fd0 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007eb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	da0b      	bge.n	8007ed0 <USBD_StdEPReq+0x194>
 8007eb8:	7bbb      	ldrb	r3, [r7, #14]
 8007eba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ebe:	4613      	mov	r3, r2
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	4413      	add	r3, r2
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	3310      	adds	r3, #16
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	4413      	add	r3, r2
 8007ecc:	3304      	adds	r3, #4
 8007ece:	e00a      	b.n	8007ee6 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007ed0:	7bbb      	ldrb	r3, [r7, #14]
 8007ed2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007ed6:	4613      	mov	r3, r2
 8007ed8:	009b      	lsls	r3, r3, #2
 8007eda:	4413      	add	r3, r2
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	2200      	movs	r2, #0
 8007eec:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	2202      	movs	r2, #2
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 fb8b 	bl	8008610 <USBD_CtlSendData>
          break;
 8007efa:	e069      	b.n	8007fd0 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8007efc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	da11      	bge.n	8007f28 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007f04:	7bbb      	ldrb	r3, [r7, #14]
 8007f06:	f003 020f 	and.w	r2, r3, #15
 8007f0a:	6879      	ldr	r1, [r7, #4]
 8007f0c:	4613      	mov	r3, r2
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	4413      	add	r3, r2
 8007f12:	009b      	lsls	r3, r3, #2
 8007f14:	440b      	add	r3, r1
 8007f16:	3318      	adds	r3, #24
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d117      	bne.n	8007f4e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8007f1e:	6839      	ldr	r1, [r7, #0]
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 fb0a 	bl	800853a <USBD_CtlError>
            break;
 8007f26:	e053      	b.n	8007fd0 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007f28:	7bbb      	ldrb	r3, [r7, #14]
 8007f2a:	f003 020f 	and.w	r2, r3, #15
 8007f2e:	6879      	ldr	r1, [r7, #4]
 8007f30:	4613      	mov	r3, r2
 8007f32:	009b      	lsls	r3, r3, #2
 8007f34:	4413      	add	r3, r2
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	440b      	add	r3, r1
 8007f3a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d104      	bne.n	8007f4e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8007f44:	6839      	ldr	r1, [r7, #0]
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 faf7 	bl	800853a <USBD_CtlError>
            break;
 8007f4c:	e040      	b.n	8007fd0 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007f4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	da0b      	bge.n	8007f6e <USBD_StdEPReq+0x232>
 8007f56:	7bbb      	ldrb	r3, [r7, #14]
 8007f58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f5c:	4613      	mov	r3, r2
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	4413      	add	r3, r2
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	3310      	adds	r3, #16
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	4413      	add	r3, r2
 8007f6a:	3304      	adds	r3, #4
 8007f6c:	e00a      	b.n	8007f84 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007f6e:	7bbb      	ldrb	r3, [r7, #14]
 8007f70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007f74:	4613      	mov	r3, r2
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	4413      	add	r3, r2
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	4413      	add	r3, r2
 8007f84:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007f86:	7bbb      	ldrb	r3, [r7, #14]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d002      	beq.n	8007f92 <USBD_StdEPReq+0x256>
 8007f8c:	7bbb      	ldrb	r3, [r7, #14]
 8007f8e:	2b80      	cmp	r3, #128	; 0x80
 8007f90:	d103      	bne.n	8007f9a <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	2200      	movs	r2, #0
 8007f96:	601a      	str	r2, [r3, #0]
 8007f98:	e00e      	b.n	8007fb8 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8007f9a:	7bbb      	ldrb	r3, [r7, #14]
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f002 fc48 	bl	800a834 <USBD_LL_IsStallEP>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d003      	beq.n	8007fb2 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	2201      	movs	r2, #1
 8007fae:	601a      	str	r2, [r3, #0]
 8007fb0:	e002      	b.n	8007fb8 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	2202      	movs	r2, #2
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 fb26 	bl	8008610 <USBD_CtlSendData>
          break;
 8007fc4:	e004      	b.n	8007fd0 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 8007fc6:	6839      	ldr	r1, [r7, #0]
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 fab6 	bl	800853a <USBD_CtlError>
        break;
 8007fce:	bf00      	nop
      }
      break;
 8007fd0:	e004      	b.n	8007fdc <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 8007fd2:	6839      	ldr	r1, [r7, #0]
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 fab0 	bl	800853a <USBD_CtlError>
      break;
 8007fda:	bf00      	nop
    }
    break;
 8007fdc:	e004      	b.n	8007fe8 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8007fde:	6839      	ldr	r1, [r7, #0]
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 faaa 	bl	800853a <USBD_CtlError>
    break;
 8007fe6:	bf00      	nop
  }

  return ret;
 8007fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3710      	adds	r7, #16
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
	...

08007ff4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	885b      	ldrh	r3, [r3, #2]
 8008002:	0a1b      	lsrs	r3, r3, #8
 8008004:	b29b      	uxth	r3, r3
 8008006:	3b01      	subs	r3, #1
 8008008:	2b06      	cmp	r3, #6
 800800a:	f200 80c9 	bhi.w	80081a0 <USBD_GetDescriptor+0x1ac>
 800800e:	a201      	add	r2, pc, #4	; (adr r2, 8008014 <USBD_GetDescriptor+0x20>)
 8008010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008014:	08008031 	.word	0x08008031
 8008018:	08008049 	.word	0x08008049
 800801c:	08008089 	.word	0x08008089
 8008020:	080081a1 	.word	0x080081a1
 8008024:	080081a1 	.word	0x080081a1
 8008028:	0800814d 	.word	0x0800814d
 800802c:	08008173 	.word	0x08008173
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	7c12      	ldrb	r2, [r2, #16]
 800803c:	f107 010a 	add.w	r1, r7, #10
 8008040:	4610      	mov	r0, r2
 8008042:	4798      	blx	r3
 8008044:	60f8      	str	r0, [r7, #12]
    break;
 8008046:	e0b0      	b.n	80081aa <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	7c1b      	ldrb	r3, [r3, #16]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d10d      	bne.n	800806c <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008058:	f107 020a 	add.w	r2, r7, #10
 800805c:	4610      	mov	r0, r2
 800805e:	4798      	blx	r3
 8008060:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	3301      	adds	r3, #1
 8008066:	2202      	movs	r2, #2
 8008068:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800806a:	e09e      	b.n	80081aa <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008074:	f107 020a 	add.w	r2, r7, #10
 8008078:	4610      	mov	r0, r2
 800807a:	4798      	blx	r3
 800807c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	3301      	adds	r3, #1
 8008082:	2202      	movs	r2, #2
 8008084:	701a      	strb	r2, [r3, #0]
    break;
 8008086:	e090      	b.n	80081aa <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	885b      	ldrh	r3, [r3, #2]
 800808c:	b2db      	uxtb	r3, r3
 800808e:	2b05      	cmp	r3, #5
 8008090:	d856      	bhi.n	8008140 <USBD_GetDescriptor+0x14c>
 8008092:	a201      	add	r2, pc, #4	; (adr r2, 8008098 <USBD_GetDescriptor+0xa4>)
 8008094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008098:	080080b1 	.word	0x080080b1
 800809c:	080080c9 	.word	0x080080c9
 80080a0:	080080e1 	.word	0x080080e1
 80080a4:	080080f9 	.word	0x080080f9
 80080a8:	08008111 	.word	0x08008111
 80080ac:	08008129 	.word	0x08008129
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	7c12      	ldrb	r2, [r2, #16]
 80080bc:	f107 010a 	add.w	r1, r7, #10
 80080c0:	4610      	mov	r0, r2
 80080c2:	4798      	blx	r3
 80080c4:	60f8      	str	r0, [r7, #12]
      break;
 80080c6:	e040      	b.n	800814a <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	7c12      	ldrb	r2, [r2, #16]
 80080d4:	f107 010a 	add.w	r1, r7, #10
 80080d8:	4610      	mov	r0, r2
 80080da:	4798      	blx	r3
 80080dc:	60f8      	str	r0, [r7, #12]
      break;
 80080de:	e034      	b.n	800814a <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	7c12      	ldrb	r2, [r2, #16]
 80080ec:	f107 010a 	add.w	r1, r7, #10
 80080f0:	4610      	mov	r0, r2
 80080f2:	4798      	blx	r3
 80080f4:	60f8      	str	r0, [r7, #12]
      break;
 80080f6:	e028      	b.n	800814a <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80080fe:	691b      	ldr	r3, [r3, #16]
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	7c12      	ldrb	r2, [r2, #16]
 8008104:	f107 010a 	add.w	r1, r7, #10
 8008108:	4610      	mov	r0, r2
 800810a:	4798      	blx	r3
 800810c:	60f8      	str	r0, [r7, #12]
      break;
 800810e:	e01c      	b.n	800814a <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008116:	695b      	ldr	r3, [r3, #20]
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	7c12      	ldrb	r2, [r2, #16]
 800811c:	f107 010a 	add.w	r1, r7, #10
 8008120:	4610      	mov	r0, r2
 8008122:	4798      	blx	r3
 8008124:	60f8      	str	r0, [r7, #12]
      break;
 8008126:	e010      	b.n	800814a <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800812e:	699b      	ldr	r3, [r3, #24]
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	7c12      	ldrb	r2, [r2, #16]
 8008134:	f107 010a 	add.w	r1, r7, #10
 8008138:	4610      	mov	r0, r2
 800813a:	4798      	blx	r3
 800813c:	60f8      	str	r0, [r7, #12]
      break;
 800813e:	e004      	b.n	800814a <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8008140:	6839      	ldr	r1, [r7, #0]
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 f9f9 	bl	800853a <USBD_CtlError>
      return;
 8008148:	e04b      	b.n	80081e2 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800814a:	e02e      	b.n	80081aa <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	7c1b      	ldrb	r3, [r3, #16]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d109      	bne.n	8008168 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800815a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800815c:	f107 020a 	add.w	r2, r7, #10
 8008160:	4610      	mov	r0, r2
 8008162:	4798      	blx	r3
 8008164:	60f8      	str	r0, [r7, #12]
      break;
 8008166:	e020      	b.n	80081aa <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8008168:	6839      	ldr	r1, [r7, #0]
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 f9e5 	bl	800853a <USBD_CtlError>
      return;
 8008170:	e037      	b.n	80081e2 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	7c1b      	ldrb	r3, [r3, #16]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d10d      	bne.n	8008196 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008182:	f107 020a 	add.w	r2, r7, #10
 8008186:	4610      	mov	r0, r2
 8008188:	4798      	blx	r3
 800818a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	3301      	adds	r3, #1
 8008190:	2207      	movs	r2, #7
 8008192:	701a      	strb	r2, [r3, #0]
      break;
 8008194:	e009      	b.n	80081aa <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8008196:	6839      	ldr	r1, [r7, #0]
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 f9ce 	bl	800853a <USBD_CtlError>
      return;
 800819e:	e020      	b.n	80081e2 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 80081a0:	6839      	ldr	r1, [r7, #0]
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 f9c9 	bl	800853a <USBD_CtlError>
    return;
 80081a8:	e01b      	b.n	80081e2 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 80081aa:	897b      	ldrh	r3, [r7, #10]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d011      	beq.n	80081d4 <USBD_GetDescriptor+0x1e0>
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	88db      	ldrh	r3, [r3, #6]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d00d      	beq.n	80081d4 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	88da      	ldrh	r2, [r3, #6]
 80081bc:	897b      	ldrh	r3, [r7, #10]
 80081be:	4293      	cmp	r3, r2
 80081c0:	bf28      	it	cs
 80081c2:	4613      	movcs	r3, r2
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 80081c8:	897b      	ldrh	r3, [r7, #10]
 80081ca:	461a      	mov	r2, r3
 80081cc:	68f9      	ldr	r1, [r7, #12]
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 fa1e 	bl	8008610 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	88db      	ldrh	r3, [r3, #6]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d102      	bne.n	80081e2 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 fa75 	bl	80086cc <USBD_CtlSendStatus>
  }
}
 80081e2:	3710      	adds	r7, #16
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	889b      	ldrh	r3, [r3, #4]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d130      	bne.n	800825c <USBD_SetAddress+0x74>
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	88db      	ldrh	r3, [r3, #6]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d12c      	bne.n	800825c <USBD_SetAddress+0x74>
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	885b      	ldrh	r3, [r3, #2]
 8008206:	2b7f      	cmp	r3, #127	; 0x7f
 8008208:	d828      	bhi.n	800825c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	885b      	ldrh	r3, [r3, #2]
 800820e:	b2db      	uxtb	r3, r3
 8008210:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008214:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800821c:	2b03      	cmp	r3, #3
 800821e:	d104      	bne.n	800822a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8008220:	6839      	ldr	r1, [r7, #0]
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 f989 	bl	800853a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008228:	e01c      	b.n	8008264 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	7bfa      	ldrb	r2, [r7, #15]
 800822e:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008232:	7bfb      	ldrb	r3, [r7, #15]
 8008234:	4619      	mov	r1, r3
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f002 fb28 	bl	800a88c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 fa45 	bl	80086cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008242:	7bfb      	ldrb	r3, [r7, #15]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d004      	beq.n	8008252 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2202      	movs	r2, #2
 800824c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008250:	e008      	b.n	8008264 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2201      	movs	r2, #1
 8008256:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800825a:	e003      	b.n	8008264 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800825c:	6839      	ldr	r1, [r7, #0]
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 f96b 	bl	800853a <USBD_CtlError>
  }
}
 8008264:	bf00      	nop
 8008266:	3710      	adds	r7, #16
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	885b      	ldrh	r3, [r3, #2]
 800827a:	b2da      	uxtb	r2, r3
 800827c:	4b41      	ldr	r3, [pc, #260]	; (8008384 <USBD_SetConfig+0x118>)
 800827e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008280:	4b40      	ldr	r3, [pc, #256]	; (8008384 <USBD_SetConfig+0x118>)
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	2b01      	cmp	r3, #1
 8008286:	d904      	bls.n	8008292 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008288:	6839      	ldr	r1, [r7, #0]
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 f955 	bl	800853a <USBD_CtlError>
 8008290:	e075      	b.n	800837e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008298:	2b02      	cmp	r3, #2
 800829a:	d002      	beq.n	80082a2 <USBD_SetConfig+0x36>
 800829c:	2b03      	cmp	r3, #3
 800829e:	d023      	beq.n	80082e8 <USBD_SetConfig+0x7c>
 80082a0:	e062      	b.n	8008368 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 80082a2:	4b38      	ldr	r3, [pc, #224]	; (8008384 <USBD_SetConfig+0x118>)
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d01a      	beq.n	80082e0 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 80082aa:	4b36      	ldr	r3, [pc, #216]	; (8008384 <USBD_SetConfig+0x118>)
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	461a      	mov	r2, r3
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2203      	movs	r2, #3
 80082b8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80082bc:	4b31      	ldr	r3, [pc, #196]	; (8008384 <USBD_SetConfig+0x118>)
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	4619      	mov	r1, r3
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f7ff fa2a 	bl	800771c <USBD_SetClassConfig>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b02      	cmp	r3, #2
 80082cc:	d104      	bne.n	80082d8 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 80082ce:	6839      	ldr	r1, [r7, #0]
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 f932 	bl	800853a <USBD_CtlError>
          return;
 80082d6:	e052      	b.n	800837e <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 f9f7 	bl	80086cc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80082de:	e04e      	b.n	800837e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 f9f3 	bl	80086cc <USBD_CtlSendStatus>
      break;
 80082e6:	e04a      	b.n	800837e <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80082e8:	4b26      	ldr	r3, [pc, #152]	; (8008384 <USBD_SetConfig+0x118>)
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d112      	bne.n	8008316 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2202      	movs	r2, #2
 80082f4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 80082f8:	4b22      	ldr	r3, [pc, #136]	; (8008384 <USBD_SetConfig+0x118>)
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	461a      	mov	r2, r3
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8008302:	4b20      	ldr	r3, [pc, #128]	; (8008384 <USBD_SetConfig+0x118>)
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	4619      	mov	r1, r3
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f7ff fa26 	bl	800775a <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 f9dc 	bl	80086cc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8008314:	e033      	b.n	800837e <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8008316:	4b1b      	ldr	r3, [pc, #108]	; (8008384 <USBD_SetConfig+0x118>)
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	461a      	mov	r2, r3
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	429a      	cmp	r2, r3
 8008322:	d01d      	beq.n	8008360 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	b2db      	uxtb	r3, r3
 800832a:	4619      	mov	r1, r3
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f7ff fa14 	bl	800775a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008332:	4b14      	ldr	r3, [pc, #80]	; (8008384 <USBD_SetConfig+0x118>)
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	461a      	mov	r2, r3
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800833c:	4b11      	ldr	r3, [pc, #68]	; (8008384 <USBD_SetConfig+0x118>)
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	4619      	mov	r1, r3
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f7ff f9ea 	bl	800771c <USBD_SetClassConfig>
 8008348:	4603      	mov	r3, r0
 800834a:	2b02      	cmp	r3, #2
 800834c:	d104      	bne.n	8008358 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800834e:	6839      	ldr	r1, [r7, #0]
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 f8f2 	bl	800853a <USBD_CtlError>
          return;
 8008356:	e012      	b.n	800837e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 f9b7 	bl	80086cc <USBD_CtlSendStatus>
      break;
 800835e:	e00e      	b.n	800837e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 f9b3 	bl	80086cc <USBD_CtlSendStatus>
      break;
 8008366:	e00a      	b.n	800837e <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8008368:	6839      	ldr	r1, [r7, #0]
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 f8e5 	bl	800853a <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8008370:	4b04      	ldr	r3, [pc, #16]	; (8008384 <USBD_SetConfig+0x118>)
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	4619      	mov	r1, r3
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f7ff f9ef 	bl	800775a <USBD_ClrClassConfig>
      break;
 800837c:	bf00      	nop
    }
  }
}
 800837e:	3708      	adds	r7, #8
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}
 8008384:	20000208 	.word	0x20000208

08008388 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	88db      	ldrh	r3, [r3, #6]
 8008396:	2b01      	cmp	r3, #1
 8008398:	d004      	beq.n	80083a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800839a:	6839      	ldr	r1, [r7, #0]
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 f8cc 	bl	800853a <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80083a2:	e021      	b.n	80083e8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	db17      	blt.n	80083de <USBD_GetConfig+0x56>
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	dd02      	ble.n	80083b8 <USBD_GetConfig+0x30>
 80083b2:	2b03      	cmp	r3, #3
 80083b4:	d00b      	beq.n	80083ce <USBD_GetConfig+0x46>
 80083b6:	e012      	b.n	80083de <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2200      	movs	r2, #0
 80083bc:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	3308      	adds	r3, #8
 80083c2:	2201      	movs	r2, #1
 80083c4:	4619      	mov	r1, r3
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 f922 	bl	8008610 <USBD_CtlSendData>
      break;
 80083cc:	e00c      	b.n	80083e8 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	3304      	adds	r3, #4
 80083d2:	2201      	movs	r2, #1
 80083d4:	4619      	mov	r1, r3
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 f91a 	bl	8008610 <USBD_CtlSendData>
      break;
 80083dc:	e004      	b.n	80083e8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 80083de:	6839      	ldr	r1, [r7, #0]
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 f8aa 	bl	800853a <USBD_CtlError>
      break;
 80083e6:	bf00      	nop
}
 80083e8:	bf00      	nop
 80083ea:	3708      	adds	r7, #8
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008400:	3b01      	subs	r3, #1
 8008402:	2b02      	cmp	r3, #2
 8008404:	d81e      	bhi.n	8008444 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	88db      	ldrh	r3, [r3, #6]
 800840a:	2b02      	cmp	r3, #2
 800840c:	d004      	beq.n	8008418 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800840e:	6839      	ldr	r1, [r7, #0]
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 f892 	bl	800853a <USBD_CtlError>
      break;
 8008416:	e01a      	b.n	800844e <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2201      	movs	r2, #1
 800841c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8008424:	2b00      	cmp	r3, #0
 8008426:	d005      	beq.n	8008434 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	68db      	ldr	r3, [r3, #12]
 800842c:	f043 0202 	orr.w	r2, r3, #2
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	330c      	adds	r3, #12
 8008438:	2202      	movs	r2, #2
 800843a:	4619      	mov	r1, r3
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 f8e7 	bl	8008610 <USBD_CtlSendData>
    break;
 8008442:	e004      	b.n	800844e <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8008444:	6839      	ldr	r1, [r7, #0]
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 f877 	bl	800853a <USBD_CtlError>
    break;
 800844c:	bf00      	nop
  }
}
 800844e:	bf00      	nop
 8008450:	3708      	adds	r7, #8
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}

08008456 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008456:	b580      	push	{r7, lr}
 8008458:	b082      	sub	sp, #8
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]
 800845e:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	885b      	ldrh	r3, [r3, #2]
 8008464:	2b01      	cmp	r3, #1
 8008466:	d106      	bne.n	8008476 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2201      	movs	r2, #1
 800846c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 f92b 	bl	80086cc <USBD_CtlSendStatus>
  }

}
 8008476:	bf00      	nop
 8008478:	3708      	adds	r7, #8
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}

0800847e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800847e:	b580      	push	{r7, lr}
 8008480:	b082      	sub	sp, #8
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
 8008486:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800848e:	3b01      	subs	r3, #1
 8008490:	2b02      	cmp	r3, #2
 8008492:	d80b      	bhi.n	80084ac <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	885b      	ldrh	r3, [r3, #2]
 8008498:	2b01      	cmp	r3, #1
 800849a:	d10c      	bne.n	80084b6 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 f911 	bl	80086cc <USBD_CtlSendStatus>
    }
    break;
 80084aa:	e004      	b.n	80084b6 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 80084ac:	6839      	ldr	r1, [r7, #0]
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 f843 	bl	800853a <USBD_CtlError>
    break;
 80084b4:	e000      	b.n	80084b8 <USBD_ClrFeature+0x3a>
    break;
 80084b6:	bf00      	nop
  }
}
 80084b8:	bf00      	nop
 80084ba:	3708      	adds	r7, #8
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	781a      	ldrb	r2, [r3, #0]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	785a      	ldrb	r2, [r3, #1]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	3302      	adds	r3, #2
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	b29a      	uxth	r2, r3
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	3303      	adds	r3, #3
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	021b      	lsls	r3, r3, #8
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	4413      	add	r3, r2
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	3304      	adds	r3, #4
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	b29a      	uxth	r2, r3
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	3305      	adds	r3, #5
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	b29b      	uxth	r3, r3
 8008506:	021b      	lsls	r3, r3, #8
 8008508:	b29b      	uxth	r3, r3
 800850a:	4413      	add	r3, r2
 800850c:	b29a      	uxth	r2, r3
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	3306      	adds	r3, #6
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	b29a      	uxth	r2, r3
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	3307      	adds	r3, #7
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	b29b      	uxth	r3, r3
 8008522:	021b      	lsls	r3, r3, #8
 8008524:	b29b      	uxth	r3, r3
 8008526:	4413      	add	r3, r2
 8008528:	b29a      	uxth	r2, r3
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	80da      	strh	r2, [r3, #6]

}
 800852e:	bf00      	nop
 8008530:	370c      	adds	r7, #12
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr

0800853a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800853a:	b580      	push	{r7, lr}
 800853c:	b082      	sub	sp, #8
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
 8008542:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8008544:	2180      	movs	r1, #128	; 0x80
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f002 f936 	bl	800a7b8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800854c:	2100      	movs	r1, #0
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f002 f932 	bl	800a7b8 <USBD_LL_StallEP>
}
 8008554:	bf00      	nop
 8008556:	3708      	adds	r7, #8
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b086      	sub	sp, #24
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008568:	2300      	movs	r3, #0
 800856a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d032      	beq.n	80085d8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f000 f834 	bl	80085e0 <USBD_GetLen>
 8008578:	4603      	mov	r3, r0
 800857a:	3301      	adds	r3, #1
 800857c:	b29b      	uxth	r3, r3
 800857e:	005b      	lsls	r3, r3, #1
 8008580:	b29a      	uxth	r2, r3
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008586:	7dfb      	ldrb	r3, [r7, #23]
 8008588:	1c5a      	adds	r2, r3, #1
 800858a:	75fa      	strb	r2, [r7, #23]
 800858c:	461a      	mov	r2, r3
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	4413      	add	r3, r2
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	7812      	ldrb	r2, [r2, #0]
 8008596:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008598:	7dfb      	ldrb	r3, [r7, #23]
 800859a:	1c5a      	adds	r2, r3, #1
 800859c:	75fa      	strb	r2, [r7, #23]
 800859e:	461a      	mov	r2, r3
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	4413      	add	r3, r2
 80085a4:	2203      	movs	r2, #3
 80085a6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80085a8:	e012      	b.n	80085d0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	1c5a      	adds	r2, r3, #1
 80085ae:	60fa      	str	r2, [r7, #12]
 80085b0:	7dfa      	ldrb	r2, [r7, #23]
 80085b2:	1c51      	adds	r1, r2, #1
 80085b4:	75f9      	strb	r1, [r7, #23]
 80085b6:	4611      	mov	r1, r2
 80085b8:	68ba      	ldr	r2, [r7, #8]
 80085ba:	440a      	add	r2, r1
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80085c0:	7dfb      	ldrb	r3, [r7, #23]
 80085c2:	1c5a      	adds	r2, r3, #1
 80085c4:	75fa      	strb	r2, [r7, #23]
 80085c6:	461a      	mov	r2, r3
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	4413      	add	r3, r2
 80085cc:	2200      	movs	r2, #0
 80085ce:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d1e8      	bne.n	80085aa <USBD_GetString+0x4e>
    }
  }
}
 80085d8:	bf00      	nop
 80085da:	3718      	adds	r7, #24
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b085      	sub	sp, #20
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80085e8:	2300      	movs	r3, #0
 80085ea:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 80085ec:	e005      	b.n	80085fa <USBD_GetLen+0x1a>
    {
        len++;
 80085ee:	7bfb      	ldrb	r3, [r7, #15]
 80085f0:	3301      	adds	r3, #1
 80085f2:	73fb      	strb	r3, [r7, #15]
        buf++;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	3301      	adds	r3, #1
 80085f8:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d1f5      	bne.n	80085ee <USBD_GetLen+0xe>
    }

    return len;
 8008602:	7bfb      	ldrb	r3, [r7, #15]
}
 8008604:	4618      	mov	r0, r3
 8008606:	3714      	adds	r7, #20
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr

08008610 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b084      	sub	sp, #16
 8008614:	af00      	add	r7, sp, #0
 8008616:	60f8      	str	r0, [r7, #12]
 8008618:	60b9      	str	r1, [r7, #8]
 800861a:	4613      	mov	r3, r2
 800861c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2202      	movs	r2, #2
 8008622:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8008626:	88fa      	ldrh	r2, [r7, #6]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800862c:	88fa      	ldrh	r2, [r7, #6]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008632:	88fb      	ldrh	r3, [r7, #6]
 8008634:	68ba      	ldr	r2, [r7, #8]
 8008636:	2100      	movs	r1, #0
 8008638:	68f8      	ldr	r0, [r7, #12]
 800863a:	f002 f946 	bl	800a8ca <USBD_LL_Transmit>

  return USBD_OK;
 800863e:	2300      	movs	r3, #0
}
 8008640:	4618      	mov	r0, r3
 8008642:	3710      	adds	r7, #16
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	60b9      	str	r1, [r7, #8]
 8008652:	4613      	mov	r3, r2
 8008654:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008656:	88fb      	ldrh	r3, [r7, #6]
 8008658:	68ba      	ldr	r2, [r7, #8]
 800865a:	2100      	movs	r1, #0
 800865c:	68f8      	ldr	r0, [r7, #12]
 800865e:	f002 f934 	bl	800a8ca <USBD_LL_Transmit>

  return USBD_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3710      	adds	r7, #16
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	4613      	mov	r3, r2
 8008678:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2203      	movs	r2, #3
 800867e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8008682:	88fa      	ldrh	r2, [r7, #6]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800868a:	88fa      	ldrh	r2, [r7, #6]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8008692:	88fb      	ldrh	r3, [r7, #6]
 8008694:	68ba      	ldr	r2, [r7, #8]
 8008696:	2100      	movs	r1, #0
 8008698:	68f8      	ldr	r0, [r7, #12]
 800869a:	f002 f939 	bl	800a910 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800869e:	2300      	movs	r3, #0
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3710      	adds	r7, #16
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	4613      	mov	r3, r2
 80086b4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80086b6:	88fb      	ldrh	r3, [r7, #6]
 80086b8:	68ba      	ldr	r2, [r7, #8]
 80086ba:	2100      	movs	r1, #0
 80086bc:	68f8      	ldr	r0, [r7, #12]
 80086be:	f002 f927 	bl	800a910 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80086c2:	2300      	movs	r3, #0
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3710      	adds	r7, #16
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2204      	movs	r2, #4
 80086d8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80086dc:	2300      	movs	r3, #0
 80086de:	2200      	movs	r2, #0
 80086e0:	2100      	movs	r1, #0
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f002 f8f1 	bl	800a8ca <USBD_LL_Transmit>

  return USBD_OK;
 80086e8:	2300      	movs	r3, #0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3708      	adds	r7, #8
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}

080086f2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80086f2:	b580      	push	{r7, lr}
 80086f4:	b082      	sub	sp, #8
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2205      	movs	r2, #5
 80086fe:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008702:	2300      	movs	r3, #0
 8008704:	2200      	movs	r2, #0
 8008706:	2100      	movs	r1, #0
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f002 f901 	bl	800a910 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	3708      	adds	r7, #8
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008718:	b480      	push	{r7}
 800871a:	b087      	sub	sp, #28
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	4613      	mov	r3, r2
 8008724:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008726:	2301      	movs	r3, #1
 8008728:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800872a:	2300      	movs	r3, #0
 800872c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800872e:	4b1f      	ldr	r3, [pc, #124]	; (80087ac <FATFS_LinkDriverEx+0x94>)
 8008730:	7a5b      	ldrb	r3, [r3, #9]
 8008732:	b2db      	uxtb	r3, r3
 8008734:	2b00      	cmp	r3, #0
 8008736:	d131      	bne.n	800879c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008738:	4b1c      	ldr	r3, [pc, #112]	; (80087ac <FATFS_LinkDriverEx+0x94>)
 800873a:	7a5b      	ldrb	r3, [r3, #9]
 800873c:	b2db      	uxtb	r3, r3
 800873e:	461a      	mov	r2, r3
 8008740:	4b1a      	ldr	r3, [pc, #104]	; (80087ac <FATFS_LinkDriverEx+0x94>)
 8008742:	2100      	movs	r1, #0
 8008744:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008746:	4b19      	ldr	r3, [pc, #100]	; (80087ac <FATFS_LinkDriverEx+0x94>)
 8008748:	7a5b      	ldrb	r3, [r3, #9]
 800874a:	b2db      	uxtb	r3, r3
 800874c:	4a17      	ldr	r2, [pc, #92]	; (80087ac <FATFS_LinkDriverEx+0x94>)
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	4413      	add	r3, r2
 8008752:	68fa      	ldr	r2, [r7, #12]
 8008754:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008756:	4b15      	ldr	r3, [pc, #84]	; (80087ac <FATFS_LinkDriverEx+0x94>)
 8008758:	7a5b      	ldrb	r3, [r3, #9]
 800875a:	b2db      	uxtb	r3, r3
 800875c:	461a      	mov	r2, r3
 800875e:	4b13      	ldr	r3, [pc, #76]	; (80087ac <FATFS_LinkDriverEx+0x94>)
 8008760:	4413      	add	r3, r2
 8008762:	79fa      	ldrb	r2, [r7, #7]
 8008764:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008766:	4b11      	ldr	r3, [pc, #68]	; (80087ac <FATFS_LinkDriverEx+0x94>)
 8008768:	7a5b      	ldrb	r3, [r3, #9]
 800876a:	b2db      	uxtb	r3, r3
 800876c:	1c5a      	adds	r2, r3, #1
 800876e:	b2d1      	uxtb	r1, r2
 8008770:	4a0e      	ldr	r2, [pc, #56]	; (80087ac <FATFS_LinkDriverEx+0x94>)
 8008772:	7251      	strb	r1, [r2, #9]
 8008774:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008776:	7dbb      	ldrb	r3, [r7, #22]
 8008778:	3330      	adds	r3, #48	; 0x30
 800877a:	b2da      	uxtb	r2, r3
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	3301      	adds	r3, #1
 8008784:	223a      	movs	r2, #58	; 0x3a
 8008786:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	3302      	adds	r3, #2
 800878c:	222f      	movs	r2, #47	; 0x2f
 800878e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	3303      	adds	r3, #3
 8008794:	2200      	movs	r2, #0
 8008796:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008798:	2300      	movs	r3, #0
 800879a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800879c:	7dfb      	ldrb	r3, [r7, #23]
}
 800879e:	4618      	mov	r0, r3
 80087a0:	371c      	adds	r7, #28
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop
 80087ac:	2000020c 	.word	0x2000020c

080087b0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80087ba:	2200      	movs	r2, #0
 80087bc:	6839      	ldr	r1, [r7, #0]
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f7ff ffaa 	bl	8008718 <FATFS_LinkDriverEx>
 80087c4:	4603      	mov	r3, r0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3708      	adds	r7, #8
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}

080087ce <_ZN9Cartridge4initEv>:

Cartridge::~Cartridge() {
	// TODO Auto-generated destructor stub
}

void Cartridge::init(void){
 80087ce:	b480      	push	{r7}
 80087d0:	af00      	add	r7, sp, #0

}
 80087d2:	bf00      	nop
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <_ZN3UMDC1Ev>:


/*******************************************************************//**
 *
 **********************************************************************/
UMD::UMD(){
 80087dc:	b480      	push	{r7}
 80087de:	b083      	sub	sp, #12
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2264      	movs	r2, #100	; 0x64
 80087e8:	601a      	str	r2, [r3, #0]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	22fa      	movs	r2, #250	; 0xfa
 80087ee:	605a      	str	r2, [r3, #4]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80087f6:	60da      	str	r2, [r3, #12]

}
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	4618      	mov	r0, r3
 80087fc:	370c      	adds	r7, #12
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr
	...

08008808 <_ZN3UMD4initEv>:

/*******************************************************************//**
 *
 **********************************************************************/
void UMD::init(void){
 8008808:	b580      	push	{r7, lr}
 800880a:	b08a      	sub	sp, #40	; 0x28
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]

	int i;
	//uint8_t read_data;

	// std::string str = "UMDv2 initializing...\n\r";
	send_usb(std::string("UMDv2 initializing...\n\r"));
 8008810:	f107 0320 	add.w	r3, r7, #32
 8008814:	4618      	mov	r0, r3
 8008816:	f002 fa16 	bl	800ac46 <_ZNSaIcEC1Ev>
 800881a:	f107 0220 	add.w	r2, r7, #32
 800881e:	f107 0308 	add.w	r3, r7, #8
 8008822:	4920      	ldr	r1, [pc, #128]	; (80088a4 <_ZN3UMD4initEv+0x9c>)
 8008824:	4618      	mov	r0, r3
 8008826:	f002 fa73 	bl	800ad10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800882a:	f107 0308 	add.w	r3, r7, #8
 800882e:	4619      	mov	r1, r3
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 f937 	bl	8008aa4 <_ZN3UMD8send_usbENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8008836:	f107 0308 	add.w	r3, r7, #8
 800883a:	4618      	mov	r0, r3
 800883c:	f002 fa3a 	bl	800acb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008840:	f107 0320 	add.w	r3, r7, #32
 8008844:	4618      	mov	r0, r3
 8008846:	f002 f9ff 	bl	800ac48 <_ZNSaIcED1Ev>
	// HAL_USART_Transmit();

	// turn off cartridge voltage source
	set_cartridge_voltage(vcart_off);
 800884a:	2100      	movs	r1, #0
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 f957 	bl	8008b00 <_ZN3UMD21set_cartridge_voltageENS_9cartv_typE>
	// can write directly to the FMSC memory space
	/* NOR memory device read/write start address */
	// read_data = *(__IO uint8_t *)ce0_8b_ptr;e

	// configure outputs
	disable_output_translators();
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 f93c 	bl	8008ad0 <_ZN3UMD26disable_output_translatorsEv>
	HAL_GPIO_WritePin(BOOT_EN_GPIO_Port, BOOT_EN_Pin, GPIO_PIN_RESET);
 8008858:	2200      	movs	r2, #0
 800885a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800885e:	4812      	ldr	r0, [pc, #72]	; (80088a8 <_ZN3UMD4initEv+0xa0>)
 8008860:	f7f8 fc42 	bl	80010e8 <HAL_GPIO_WritePin>

	// flash to show we're alive
	for(i=0;i<4;i++){
 8008864:	2300      	movs	r3, #0
 8008866:	627b      	str	r3, [r7, #36]	; 0x24
 8008868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886a:	2b03      	cmp	r3, #3
 800886c:	dc11      	bgt.n	8008892 <_ZN3UMD4initEv+0x8a>
		set_leds(0x05);
 800886e:	2105      	movs	r1, #5
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 f97d 	bl	8008b70 <_ZN3UMD8set_ledsEh>
		HAL_Delay(250);
 8008876:	20fa      	movs	r0, #250	; 0xfa
 8008878:	f7f7 fec8 	bl	800060c <HAL_Delay>
		set_leds(0x0A);
 800887c:	210a      	movs	r1, #10
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 f976 	bl	8008b70 <_ZN3UMD8set_ledsEh>
		HAL_Delay(250);
 8008884:	20fa      	movs	r0, #250	; 0xfa
 8008886:	f7f7 fec1 	bl	800060c <HAL_Delay>
	for(i=0;i<4;i++){
 800888a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888c:	3301      	adds	r3, #1
 800888e:	627b      	str	r3, [r7, #36]	; 0x24
 8008890:	e7ea      	b.n	8008868 <_ZN3UMD4initEv+0x60>
	}
	set_leds(0x00);
 8008892:	2100      	movs	r1, #0
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 f96b 	bl	8008b70 <_ZN3UMD8set_ledsEh>
}
 800889a:	bf00      	nop
 800889c:	3728      	adds	r7, #40	; 0x28
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	bf00      	nop
 80088a4:	0800b110 	.word	0x0800b110
 80088a8:	40020400 	.word	0x40020400

080088ac <_ZN3UMD3runEv>:

/*******************************************************************//**
 *
 **********************************************************************/
void UMD::run(void){
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]

	uint32_t umd_millis;
	init();
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f7ff ffa7 	bl	8008808 <_ZN3UMD4initEv>

	// We need a cart factory but only one, and this function is the only one that needs to update
	// the cart ptr.  So we can use the static keyword to keep this across calls to the function
	set_cartridge_type(0);
 80088ba:	2100      	movs	r1, #0
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 f8c9 	bl	8008a54 <_ZN3UMD18set_cartridge_typeEh>

	cart->init();
 80088c2:	f7ff ff84 	bl	80087ce <_ZN9Cartridge4initEv>


	while(1){
		umd_millis = HAL_GetTick();
 80088c6:	f7f7 fe95 	bl	80005f4 <HAL_GetTick>
 80088ca:	60f8      	str	r0, [r7, #12]
		listen();
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 f80f 	bl	80088f0 <_ZN3UMD6listenEv>

		// what a bit
		while( (HAL_GetTick() - umd_millis) < listen_interval );
 80088d2:	f7f7 fe8f 	bl	80005f4 <HAL_GetTick>
 80088d6:	4602      	mov	r2, r0
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	1ad2      	subs	r2, r2, r3
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	bf34      	ite	cc
 80088e4:	2301      	movcc	r3, #1
 80088e6:	2300      	movcs	r3, #0
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d0eb      	beq.n	80088c6 <_ZN3UMD3runEv+0x1a>
 80088ee:	e7f0      	b.n	80088d2 <_ZN3UMD3runEv+0x26>

080088f0 <_ZN3UMD6listenEv>:
}

/*******************************************************************//**
 *
 **********************************************************************/
void UMD::listen(void){
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b08a      	sub	sp, #40	; 0x28
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]

	uint8_t data;

	if( CDC_BytesAvailable() ){
 80088f8:	f001 fd32 	bl	800a360 <CDC_BytesAvailable>
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b00      	cmp	r3, #0
 8008900:	bf14      	ite	ne
 8008902:	2301      	movne	r3, #1
 8008904:	2300      	moveq	r3, #0
 8008906:	b2db      	uxtb	r3, r3
 8008908:	2b00      	cmp	r3, #0
 800890a:	d076      	beq.n	80089fa <_ZN3UMD6listenEv+0x10a>

		cmd_current[0] = CDC_ReadBuffer_Single();
 800890c:	f001 fcfa 	bl	800a304 <CDC_ReadBuffer_Single>
 8008910:	4603      	mov	r3, r0
 8008912:	461a      	mov	r2, r3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	741a      	strb	r2, [r3, #16]
		switch(cmd_current[0]){
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	7c1b      	ldrb	r3, [r3, #16]
 800891c:	2b02      	cmp	r3, #2
 800891e:	d021      	beq.n	8008964 <_ZN3UMD6listenEv+0x74>
 8008920:	2b03      	cmp	r3, #3
 8008922:	d042      	beq.n	80089aa <_ZN3UMD6listenEv+0xba>
 8008924:	2b01      	cmp	r3, #1
 8008926:	d163      	bne.n	80089f0 <_ZN3UMD6listenEv+0x100>

		// COMMAND 0x01 - ID
		case 0x01:
			send_usb(std::string("UMDv2\n\r"));
 8008928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800892c:	4618      	mov	r0, r3
 800892e:	f002 f98a 	bl	800ac46 <_ZNSaIcEC1Ev>
 8008932:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008936:	f107 030c 	add.w	r3, r7, #12
 800893a:	4932      	ldr	r1, [pc, #200]	; (8008a04 <_ZN3UMD6listenEv+0x114>)
 800893c:	4618      	mov	r0, r3
 800893e:	f002 f9e7 	bl	800ad10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008942:	f107 030c 	add.w	r3, r7, #12
 8008946:	4619      	mov	r1, r3
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f000 f8ab 	bl	8008aa4 <_ZN3UMD8send_usbENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800894e:	f107 030c 	add.w	r3, r7, #12
 8008952:	4618      	mov	r0, r3
 8008954:	f002 f9ae 	bl	800acb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800895c:	4618      	mov	r0, r3
 800895e:	f002 f973 	bl	800ac48 <_ZNSaIcED1Ev>
			break;
 8008962:	e04a      	b.n	80089fa <_ZN3UMD6listenEv+0x10a>

		// COMMAND 0x02 - SET LEDs
		case 0x02:
			// next byte contains the LED value
			if( CDC_BytesAvailableTimeout(cmd_timeout, 1) ){
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	2101      	movs	r1, #1
 800896a:	4618      	mov	r0, r3
 800896c:	f001 fd0c 	bl	800a388 <CDC_BytesAvailableTimeout>
 8008970:	4603      	mov	r3, r0
 8008972:	2b00      	cmp	r3, #0
 8008974:	bf14      	ite	ne
 8008976:	2301      	movne	r3, #1
 8008978:	2300      	moveq	r3, #0
 800897a:	b2db      	uxtb	r3, r3
 800897c:	2b00      	cmp	r3, #0
 800897e:	d00f      	beq.n	80089a0 <_ZN3UMD6listenEv+0xb0>
				data = CDC_ReadBuffer_Single();
 8008980:	f001 fcc0 	bl	800a304 <CDC_ReadBuffer_Single>
 8008984:	4603      	mov	r3, r0
 8008986:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				set_leds(data);
 800898a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800898e:	4619      	mov	r1, r3
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 f8ed 	bl	8008b70 <_ZN3UMD8set_ledsEh>
				ack_cmd(true);
 8008996:	2101      	movs	r1, #1
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 f835 	bl	8008a08 <_ZN3UMD7ack_cmdEb>
			}else{
				ack_cmd(false);
			}
			break;
 800899e:	e02c      	b.n	80089fa <_ZN3UMD6listenEv+0x10a>
				ack_cmd(false);
 80089a0:	2100      	movs	r1, #0
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 f830 	bl	8008a08 <_ZN3UMD7ack_cmdEb>
			break;
 80089a8:	e027      	b.n	80089fa <_ZN3UMD6listenEv+0x10a>

		// COMMAND 0x03 - SET CARTRIDGE VOLTAGE
		case 0x03:
			// next byte contains the LED value
			if( CDC_BytesAvailableTimeout(cmd_timeout, 1) ){
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	2101      	movs	r1, #1
 80089b0:	4618      	mov	r0, r3
 80089b2:	f001 fce9 	bl	800a388 <CDC_BytesAvailableTimeout>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	bf14      	ite	ne
 80089bc:	2301      	movne	r3, #1
 80089be:	2300      	moveq	r3, #0
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d00f      	beq.n	80089e6 <_ZN3UMD6listenEv+0xf6>
				data = CDC_ReadBuffer_Single();
 80089c6:	f001 fc9d 	bl	800a304 <CDC_ReadBuffer_Single>
 80089ca:	4603      	mov	r3, r0
 80089cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				set_cartridge_voltage(static_cast<cartv_typ>(data));
 80089d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80089d4:	4619      	mov	r1, r3
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 f892 	bl	8008b00 <_ZN3UMD21set_cartridge_voltageENS_9cartv_typE>
				ack_cmd(true);
 80089dc:	2101      	movs	r1, #1
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 f812 	bl	8008a08 <_ZN3UMD7ack_cmdEb>
			}else{
				ack_cmd(false);
			}
			break;
 80089e4:	e009      	b.n	80089fa <_ZN3UMD6listenEv+0x10a>
				ack_cmd(false);
 80089e6:	2100      	movs	r1, #0
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 f80d 	bl	8008a08 <_ZN3UMD7ack_cmdEb>
			break;
 80089ee:	e004      	b.n	80089fa <_ZN3UMD6listenEv+0x10a>

		// DEFAULT REPLY
		default:
			ack_cmd(false);
 80089f0:	2100      	movs	r1, #0
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 f808 	bl	8008a08 <_ZN3UMD7ack_cmdEb>
			break;
 80089f8:	bf00      	nop
		}
	}
}
 80089fa:	bf00      	nop
 80089fc:	3728      	adds	r7, #40	; 0x28
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	0800b128 	.word	0x0800b128

08008a08 <_ZN3UMD7ack_cmdEb>:


/*******************************************************************//**
 *
 **********************************************************************/
void UMD::ack_cmd(bool success){
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	460b      	mov	r3, r1
 8008a12:	70fb      	strb	r3, [r7, #3]
	if(success){
 8008a14:	78fb      	ldrb	r3, [r7, #3]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d006      	beq.n	8008a28 <_ZN3UMD7ack_cmdEb+0x20>
		cmd_current[1] = -cmd_current[0];
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	7c1b      	ldrb	r3, [r3, #16]
 8008a1e:	425b      	negs	r3, r3
 8008a20:	b2da      	uxtb	r2, r3
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	745a      	strb	r2, [r3, #17]
 8008a26:	e002      	b.n	8008a2e <_ZN3UMD7ack_cmdEb+0x26>
	}else{
		cmd_current[1] = 0xFF;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	22ff      	movs	r2, #255	; 0xff
 8008a2c:	745a      	strb	r2, [r3, #17]
	}
	CDC_Transmit_FS(cmd_current, 2);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	3310      	adds	r3, #16
 8008a32:	2102      	movs	r1, #2
 8008a34:	4618      	mov	r0, r3
 8008a36:	f001 fc3f 	bl	800a2b8 <CDC_Transmit_FS>
}
 8008a3a:	bf00      	nop
 8008a3c:	3708      	adds	r7, #8
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
	...

08008a44 <__tcf_0>:

/*******************************************************************//**
 *
 **********************************************************************/
void UMD::set_cartridge_type(uint8_t mode){
	static CartFactory cf;
 8008a44:	b580      	push	{r7, lr}
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	4801      	ldr	r0, [pc, #4]	; (8008a50 <__tcf_0+0xc>)
 8008a4a:	f000 f8e8 	bl	8008c1e <_ZN11CartFactoryD1Ev>
 8008a4e:	bd80      	pop	{r7, pc}
 8008a50:	20000218 	.word	0x20000218

08008a54 <_ZN3UMD18set_cartridge_typeEh>:
void UMD::set_cartridge_type(uint8_t mode){
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b082      	sub	sp, #8
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	460b      	mov	r3, r1
 8008a5e:	70fb      	strb	r3, [r7, #3]
	static CartFactory cf;
 8008a60:	4b0d      	ldr	r3, [pc, #52]	; (8008a98 <_ZN3UMD18set_cartridge_typeEh+0x44>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f003 0301 	and.w	r3, r3, #1
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d108      	bne.n	8008a7e <_ZN3UMD18set_cartridge_typeEh+0x2a>
 8008a6c:	480b      	ldr	r0, [pc, #44]	; (8008a9c <_ZN3UMD18set_cartridge_typeEh+0x48>)
 8008a6e:	f000 f8cb 	bl	8008c08 <_ZN11CartFactoryC1Ev>
 8008a72:	4b09      	ldr	r3, [pc, #36]	; (8008a98 <_ZN3UMD18set_cartridge_typeEh+0x44>)
 8008a74:	2201      	movs	r2, #1
 8008a76:	601a      	str	r2, [r3, #0]
 8008a78:	4809      	ldr	r0, [pc, #36]	; (8008aa0 <_ZN3UMD18set_cartridge_typeEh+0x4c>)
 8008a7a:	f002 f986 	bl	800ad8a <atexit>
	cart = cf.getCart(static_cast<CartFactory::Mode>(mode));
 8008a7e:	78fb      	ldrb	r3, [r7, #3]
 8008a80:	4619      	mov	r1, r3
 8008a82:	4806      	ldr	r0, [pc, #24]	; (8008a9c <_ZN3UMD18set_cartridge_typeEh+0x48>)
 8008a84:	f000 f8f0 	bl	8008c68 <_ZN11CartFactory7getCartENS_4ModeE>
 8008a88:	4602      	mov	r2, r0
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	609a      	str	r2, [r3, #8]
}
 8008a8e:	bf00      	nop
 8008a90:	3708      	adds	r7, #8
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
 8008a96:	bf00      	nop
 8008a98:	20000228 	.word	0x20000228
 8008a9c:	20000218 	.word	0x20000218
 8008aa0:	08008a45 	.word	0x08008a45

08008aa4 <_ZN3UMD8send_usbENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

/*******************************************************************//**
 *
 **********************************************************************/
void UMD::send_usb(std::string str){
 8008aa4:	b590      	push	{r4, r7, lr}
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
	CDC_Transmit_FS( (uint8_t*)str.c_str(), str.length() );
 8008aae:	6838      	ldr	r0, [r7, #0]
 8008ab0:	f002 f908 	bl	800acc4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8008ab4:	4604      	mov	r4, r0
 8008ab6:	6838      	ldr	r0, [r7, #0]
 8008ab8:	f002 f902 	bl	800acc0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8008abc:	4603      	mov	r3, r0
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	4620      	mov	r0, r4
 8008ac4:	f001 fbf8 	bl	800a2b8 <CDC_Transmit_FS>
}
 8008ac8:	bf00      	nop
 8008aca:	370c      	adds	r7, #12
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd90      	pop	{r4, r7, pc}

08008ad0 <_ZN3UMD26disable_output_translatorsEv>:
}

/*******************************************************************//**
 *
 **********************************************************************/
void UMD::disable_output_translators(void){
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b082      	sub	sp, #8
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nOUT_EN0_GPIO_Port, nOUT_EN0_Pin, GPIO_PIN_SET);
 8008ad8:	2201      	movs	r2, #1
 8008ada:	2110      	movs	r1, #16
 8008adc:	4806      	ldr	r0, [pc, #24]	; (8008af8 <_ZN3UMD26disable_output_translatorsEv+0x28>)
 8008ade:	f7f8 fb03 	bl	80010e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(nOUT_EN1_GPIO_Port, nOUT_EN1_Pin, GPIO_PIN_SET);
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008ae8:	4804      	ldr	r0, [pc, #16]	; (8008afc <_ZN3UMD26disable_output_translatorsEv+0x2c>)
 8008aea:	f7f8 fafd 	bl	80010e8 <HAL_GPIO_WritePin>
}
 8008aee:	bf00      	nop
 8008af0:	3708      	adds	r7, #8
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	40020000 	.word	0x40020000
 8008afc:	40021400 	.word	0x40021400

08008b00 <_ZN3UMD21set_cartridge_voltageENS_9cartv_typE>:

/*******************************************************************//**
 *
 **********************************************************************/
void UMD::set_cartridge_voltage(cartv_typ voltage){
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b082      	sub	sp, #8
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	460b      	mov	r3, r1
 8008b0a:	70fb      	strb	r3, [r7, #3]
	switch(voltage){
 8008b0c:	78fb      	ldrb	r3, [r7, #3]
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d002      	beq.n	8008b18 <_ZN3UMD21set_cartridge_voltageENS_9cartv_typE+0x18>
 8008b12:	2b02      	cmp	r3, #2
 8008b14:	d00c      	beq.n	8008b30 <_ZN3UMD21set_cartridge_voltageENS_9cartv_typE+0x30>
 8008b16:	e017      	b.n	8008b48 <_ZN3UMD21set_cartridge_voltageENS_9cartv_typE+0x48>
	case vcart_3v3:
		HAL_GPIO_WritePin(VSEL0_GPIO_Port, VSEL0_Pin, GPIO_PIN_RESET);
 8008b18:	2200      	movs	r2, #0
 8008b1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008b1e:	4812      	ldr	r0, [pc, #72]	; (8008b68 <_ZN3UMD21set_cartridge_voltageENS_9cartv_typE+0x68>)
 8008b20:	f7f8 fae2 	bl	80010e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VSEL1_GPIO_Port, VSEL1_Pin, GPIO_PIN_RESET);
 8008b24:	2200      	movs	r2, #0
 8008b26:	2180      	movs	r1, #128	; 0x80
 8008b28:	4810      	ldr	r0, [pc, #64]	; (8008b6c <_ZN3UMD21set_cartridge_voltageENS_9cartv_typE+0x6c>)
 8008b2a:	f7f8 fadd 	bl	80010e8 <HAL_GPIO_WritePin>
		break;
 8008b2e:	e017      	b.n	8008b60 <_ZN3UMD21set_cartridge_voltageENS_9cartv_typE+0x60>
	case vcart_5v:
		HAL_GPIO_WritePin(VSEL0_GPIO_Port, VSEL0_Pin, GPIO_PIN_SET);
 8008b30:	2201      	movs	r2, #1
 8008b32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008b36:	480c      	ldr	r0, [pc, #48]	; (8008b68 <_ZN3UMD21set_cartridge_voltageENS_9cartv_typE+0x68>)
 8008b38:	f7f8 fad6 	bl	80010e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VSEL1_GPIO_Port, VSEL1_Pin, GPIO_PIN_RESET);
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	2180      	movs	r1, #128	; 0x80
 8008b40:	480a      	ldr	r0, [pc, #40]	; (8008b6c <_ZN3UMD21set_cartridge_voltageENS_9cartv_typE+0x6c>)
 8008b42:	f7f8 fad1 	bl	80010e8 <HAL_GPIO_WritePin>
		break;
 8008b46:	e00b      	b.n	8008b60 <_ZN3UMD21set_cartridge_voltageENS_9cartv_typE+0x60>
	case vcart_off:
	default:
		HAL_GPIO_WritePin(VSEL0_GPIO_Port, VSEL0_Pin, GPIO_PIN_SET);
 8008b48:	2201      	movs	r2, #1
 8008b4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008b4e:	4806      	ldr	r0, [pc, #24]	; (8008b68 <_ZN3UMD21set_cartridge_voltageENS_9cartv_typE+0x68>)
 8008b50:	f7f8 faca 	bl	80010e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VSEL1_GPIO_Port, VSEL1_Pin, GPIO_PIN_SET);
 8008b54:	2201      	movs	r2, #1
 8008b56:	2180      	movs	r1, #128	; 0x80
 8008b58:	4804      	ldr	r0, [pc, #16]	; (8008b6c <_ZN3UMD21set_cartridge_voltageENS_9cartv_typE+0x6c>)
 8008b5a:	f7f8 fac5 	bl	80010e8 <HAL_GPIO_WritePin>
		break;
 8008b5e:	bf00      	nop
	}
}
 8008b60:	bf00      	nop
 8008b62:	3708      	adds	r7, #8
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	40020000 	.word	0x40020000
 8008b6c:	40020800 	.word	0x40020800

08008b70 <_ZN3UMD8set_ledsEh>:


/*******************************************************************//**
 *
 **********************************************************************/
void UMD::set_leds(uint8_t leds){
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b082      	sub	sp, #8
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	460b      	mov	r3, r1
 8008b7a:	70fb      	strb	r3, [r7, #3]

	(leds & 0x01) ? HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET) : HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8008b7c:	78fb      	ldrb	r3, [r7, #3]
 8008b7e:	f003 0301 	and.w	r3, r3, #1
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d005      	beq.n	8008b92 <_ZN3UMD8set_ledsEh+0x22>
 8008b86:	2201      	movs	r2, #1
 8008b88:	2108      	movs	r1, #8
 8008b8a:	481e      	ldr	r0, [pc, #120]	; (8008c04 <_ZN3UMD8set_ledsEh+0x94>)
 8008b8c:	f7f8 faac 	bl	80010e8 <HAL_GPIO_WritePin>
 8008b90:	e004      	b.n	8008b9c <_ZN3UMD8set_ledsEh+0x2c>
 8008b92:	2200      	movs	r2, #0
 8008b94:	2108      	movs	r1, #8
 8008b96:	481b      	ldr	r0, [pc, #108]	; (8008c04 <_ZN3UMD8set_ledsEh+0x94>)
 8008b98:	f7f8 faa6 	bl	80010e8 <HAL_GPIO_WritePin>
	(leds & 0x02) ? HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET) : HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8008b9c:	78fb      	ldrb	r3, [r7, #3]
 8008b9e:	f003 0302 	and.w	r3, r3, #2
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d005      	beq.n	8008bb2 <_ZN3UMD8set_ledsEh+0x42>
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	2104      	movs	r1, #4
 8008baa:	4816      	ldr	r0, [pc, #88]	; (8008c04 <_ZN3UMD8set_ledsEh+0x94>)
 8008bac:	f7f8 fa9c 	bl	80010e8 <HAL_GPIO_WritePin>
 8008bb0:	e004      	b.n	8008bbc <_ZN3UMD8set_ledsEh+0x4c>
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	2104      	movs	r1, #4
 8008bb6:	4813      	ldr	r0, [pc, #76]	; (8008c04 <_ZN3UMD8set_ledsEh+0x94>)
 8008bb8:	f7f8 fa96 	bl	80010e8 <HAL_GPIO_WritePin>
	(leds & 0x04) ? HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET) : HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8008bbc:	78fb      	ldrb	r3, [r7, #3]
 8008bbe:	f003 0304 	and.w	r3, r3, #4
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d005      	beq.n	8008bd2 <_ZN3UMD8set_ledsEh+0x62>
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	2102      	movs	r1, #2
 8008bca:	480e      	ldr	r0, [pc, #56]	; (8008c04 <_ZN3UMD8set_ledsEh+0x94>)
 8008bcc:	f7f8 fa8c 	bl	80010e8 <HAL_GPIO_WritePin>
 8008bd0:	e004      	b.n	8008bdc <_ZN3UMD8set_ledsEh+0x6c>
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	2102      	movs	r1, #2
 8008bd6:	480b      	ldr	r0, [pc, #44]	; (8008c04 <_ZN3UMD8set_ledsEh+0x94>)
 8008bd8:	f7f8 fa86 	bl	80010e8 <HAL_GPIO_WritePin>
	(leds & 0x08) ? HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET) : HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8008bdc:	78fb      	ldrb	r3, [r7, #3]
 8008bde:	f003 0308 	and.w	r3, r3, #8
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d005      	beq.n	8008bf2 <_ZN3UMD8set_ledsEh+0x82>
 8008be6:	2201      	movs	r2, #1
 8008be8:	2101      	movs	r1, #1
 8008bea:	4806      	ldr	r0, [pc, #24]	; (8008c04 <_ZN3UMD8set_ledsEh+0x94>)
 8008bec:	f7f8 fa7c 	bl	80010e8 <HAL_GPIO_WritePin>
}
 8008bf0:	e004      	b.n	8008bfc <_ZN3UMD8set_ledsEh+0x8c>
	(leds & 0x08) ? HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET) : HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	2101      	movs	r1, #1
 8008bf6:	4803      	ldr	r0, [pc, #12]	; (8008c04 <_ZN3UMD8set_ledsEh+0x94>)
 8008bf8:	f7f8 fa76 	bl	80010e8 <HAL_GPIO_WritePin>
}
 8008bfc:	bf00      	nop
 8008bfe:	3708      	adds	r7, #8
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}
 8008c04:	40020000 	.word	0x40020000

08008c08 <_ZN11CartFactoryC1Ev>:
 
#include <stdint.h>
#include "Cartridges/Cartridge.h"
#include "cartfactory.h"

CartFactory::CartFactory()
 8008c08:	b480      	push	{r7}
 8008c0a:	b083      	sub	sp, #12
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
    //carts[CartFactory::SMS]    = new sms();
    //carts[CartFactory::PCE]    = new GenericCart();
    //carts[CartFactory::TG16]   = new GenericCart();
    //carts[CartFactory::SNES]   = new GenericCart();
    //carts[CartFactory::SNESLO] = new GenericCart();
}
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	4618      	mov	r0, r3
 8008c14:	370c      	adds	r7, #12
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr

08008c1e <_ZN11CartFactoryD1Ev>:

CartFactory::~CartFactory()
 8008c1e:	b580      	push	{r7, lr}
 8008c20:	b084      	sub	sp, #16
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
{
    for (int i=0; i < CARTS_LEN; i++){
 8008c26:	2300      	movs	r3, #0
 8008c28:	60fb      	str	r3, [r7, #12]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	dc16      	bgt.n	8008c5e <_ZN11CartFactoryD1Ev+0x40>
    	delete carts[i];
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	68fa      	ldr	r2, [r7, #12]
 8008c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d00c      	beq.n	8008c56 <_ZN11CartFactoryD1Ev+0x38>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	68fa      	ldr	r2, [r7, #12]
 8008c40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	68fa      	ldr	r2, [r7, #12]
 8008c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	3304      	adds	r3, #4
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4608      	mov	r0, r1
 8008c54:	4798      	blx	r3
    for (int i=0; i < CARTS_LEN; i++){
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	3301      	adds	r3, #1
 8008c5a:	60fb      	str	r3, [r7, #12]
 8008c5c:	e7e5      	b.n	8008c2a <_ZN11CartFactoryD1Ev+0xc>
    }
}
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	4618      	mov	r0, r3
 8008c62:	3710      	adds	r7, #16
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <_ZN11CartFactory7getCartENS_4ModeE>:

Cartridge* CartFactory::getCart(CartFactory::Mode mode)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	460b      	mov	r3, r1
 8008c72:	70fb      	strb	r3, [r7, #3]
    if (mode < CARTS_LEN && mode > CartFactory::UNDEFINED)
 8008c74:	78fb      	ldrb	r3, [r7, #3]
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d807      	bhi.n	8008c8a <_ZN11CartFactory7getCartENS_4ModeE+0x22>
 8008c7a:	78fb      	ldrb	r3, [r7, #3]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d004      	beq.n	8008c8a <_ZN11CartFactory7getCartENS_4ModeE+0x22>
    {
        return carts[mode];
 8008c80:	78fa      	ldrb	r2, [r7, #3]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c88:	e001      	b.n	8008c8e <_ZN11CartFactory7getCartENS_4ModeE+0x26>
    }
    return carts[CartFactory::UNDEFINED];
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	370c      	adds	r7, #12
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr
	...

08008c9c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8008ca2:	463b      	mov	r3, r7
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	601a      	str	r2, [r3, #0]
 8008ca8:	605a      	str	r2, [r3, #4]
 8008caa:	609a      	str	r2, [r3, #8]
 8008cac:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8008cae:	4b21      	ldr	r3, [pc, #132]	; (8008d34 <MX_ADC1_Init+0x98>)
 8008cb0:	4a21      	ldr	r2, [pc, #132]	; (8008d38 <MX_ADC1_Init+0x9c>)
 8008cb2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008cb4:	4b1f      	ldr	r3, [pc, #124]	; (8008d34 <MX_ADC1_Init+0x98>)
 8008cb6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008cba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008cbc:	4b1d      	ldr	r3, [pc, #116]	; (8008d34 <MX_ADC1_Init+0x98>)
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8008cc2:	4b1c      	ldr	r3, [pc, #112]	; (8008d34 <MX_ADC1_Init+0x98>)
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8008cc8:	4b1a      	ldr	r3, [pc, #104]	; (8008d34 <MX_ADC1_Init+0x98>)
 8008cca:	2200      	movs	r2, #0
 8008ccc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008cce:	4b19      	ldr	r3, [pc, #100]	; (8008d34 <MX_ADC1_Init+0x98>)
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008cd6:	4b17      	ldr	r3, [pc, #92]	; (8008d34 <MX_ADC1_Init+0x98>)
 8008cd8:	2200      	movs	r2, #0
 8008cda:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008cdc:	4b15      	ldr	r3, [pc, #84]	; (8008d34 <MX_ADC1_Init+0x98>)
 8008cde:	4a17      	ldr	r2, [pc, #92]	; (8008d3c <MX_ADC1_Init+0xa0>)
 8008ce0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008ce2:	4b14      	ldr	r3, [pc, #80]	; (8008d34 <MX_ADC1_Init+0x98>)
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8008ce8:	4b12      	ldr	r3, [pc, #72]	; (8008d34 <MX_ADC1_Init+0x98>)
 8008cea:	2201      	movs	r2, #1
 8008cec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8008cee:	4b11      	ldr	r3, [pc, #68]	; (8008d34 <MX_ADC1_Init+0x98>)
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008cf6:	4b0f      	ldr	r3, [pc, #60]	; (8008d34 <MX_ADC1_Init+0x98>)
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008cfc:	480d      	ldr	r0, [pc, #52]	; (8008d34 <MX_ADC1_Init+0x98>)
 8008cfe:	f7f7 fca7 	bl	8000650 <HAL_ADC_Init>
 8008d02:	4603      	mov	r3, r0
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d001      	beq.n	8008d0c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8008d08:	f000 fe1a 	bl	8009940 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8008d0c:	2307      	movs	r3, #7
 8008d0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8008d10:	2301      	movs	r3, #1
 8008d12:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8008d14:	2300      	movs	r3, #0
 8008d16:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008d18:	463b      	mov	r3, r7
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	4805      	ldr	r0, [pc, #20]	; (8008d34 <MX_ADC1_Init+0x98>)
 8008d1e:	f7f7 fcdb 	bl	80006d8 <HAL_ADC_ConfigChannel>
 8008d22:	4603      	mov	r3, r0
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d001      	beq.n	8008d2c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8008d28:	f000 fe0a 	bl	8009940 <Error_Handler>
  }

}
 8008d2c:	bf00      	nop
 8008d2e:	3710      	adds	r7, #16
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}
 8008d34:	200002d4 	.word	0x200002d4
 8008d38:	40012000 	.word	0x40012000
 8008d3c:	0f000001 	.word	0x0f000001

08008d40 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b08a      	sub	sp, #40	; 0x28
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d48:	f107 0314 	add.w	r3, r7, #20
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	601a      	str	r2, [r3, #0]
 8008d50:	605a      	str	r2, [r3, #4]
 8008d52:	609a      	str	r2, [r3, #8]
 8008d54:	60da      	str	r2, [r3, #12]
 8008d56:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a17      	ldr	r2, [pc, #92]	; (8008dbc <HAL_ADC_MspInit+0x7c>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d127      	bne.n	8008db2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8008d62:	2300      	movs	r3, #0
 8008d64:	613b      	str	r3, [r7, #16]
 8008d66:	4b16      	ldr	r3, [pc, #88]	; (8008dc0 <HAL_ADC_MspInit+0x80>)
 8008d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d6a:	4a15      	ldr	r2, [pc, #84]	; (8008dc0 <HAL_ADC_MspInit+0x80>)
 8008d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d70:	6453      	str	r3, [r2, #68]	; 0x44
 8008d72:	4b13      	ldr	r3, [pc, #76]	; (8008dc0 <HAL_ADC_MspInit+0x80>)
 8008d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d7a:	613b      	str	r3, [r7, #16]
 8008d7c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d7e:	2300      	movs	r3, #0
 8008d80:	60fb      	str	r3, [r7, #12]
 8008d82:	4b0f      	ldr	r3, [pc, #60]	; (8008dc0 <HAL_ADC_MspInit+0x80>)
 8008d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d86:	4a0e      	ldr	r2, [pc, #56]	; (8008dc0 <HAL_ADC_MspInit+0x80>)
 8008d88:	f043 0301 	orr.w	r3, r3, #1
 8008d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8008d8e:	4b0c      	ldr	r3, [pc, #48]	; (8008dc0 <HAL_ADC_MspInit+0x80>)
 8008d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d92:	f003 0301 	and.w	r3, r3, #1
 8008d96:	60fb      	str	r3, [r7, #12]
 8008d98:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA7     ------> ADC1_IN7 
    */
    GPIO_InitStruct.Pin = ICART_Pin;
 8008d9a:	2380      	movs	r3, #128	; 0x80
 8008d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008d9e:	2303      	movs	r3, #3
 8008da0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008da2:	2300      	movs	r3, #0
 8008da4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ICART_GPIO_Port, &GPIO_InitStruct);
 8008da6:	f107 0314 	add.w	r3, r7, #20
 8008daa:	4619      	mov	r1, r3
 8008dac:	4805      	ldr	r0, [pc, #20]	; (8008dc4 <HAL_ADC_MspInit+0x84>)
 8008dae:	f7f7 fff1 	bl	8000d94 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8008db2:	bf00      	nop
 8008db4:	3728      	adds	r7, #40	; 0x28
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}
 8008dba:	bf00      	nop
 8008dbc:	40012000 	.word	0x40012000
 8008dc0:	40023800 	.word	0x40023800
 8008dc4:	40020000 	.word	0x40020000

08008dc8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b082      	sub	sp, #8
 8008dcc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8008dd2:	f000 f879 	bl	8008ec8 <BSP_SD_IsDetected>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	d001      	beq.n	8008de0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	e012      	b.n	8008e06 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8008de0:	480b      	ldr	r0, [pc, #44]	; (8008e10 <BSP_SD_Init+0x48>)
 8008de2:	f7fa fbb7 	bl	8003554 <HAL_SD_Init>
 8008de6:	4603      	mov	r3, r0
 8008de8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8008dea:	79fb      	ldrb	r3, [r7, #7]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d109      	bne.n	8008e04 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8008df0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008df4:	4806      	ldr	r0, [pc, #24]	; (8008e10 <BSP_SD_Init+0x48>)
 8008df6:	f7fb f987 	bl	8004108 <HAL_SD_ConfigWideBusOperation>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d001      	beq.n	8008e04 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8008e00:	2301      	movs	r3, #1
 8008e02:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8008e04:	79fb      	ldrb	r3, [r7, #7]
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3708      	adds	r7, #8
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	20000918 	.word	0x20000918

08008e14 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b088      	sub	sp, #32
 8008e18:	af02      	add	r7, sp, #8
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	607a      	str	r2, [r7, #4]
 8008e20:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8008e22:	2300      	movs	r3, #0
 8008e24:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	9300      	str	r3, [sp, #0]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	68ba      	ldr	r2, [r7, #8]
 8008e2e:	68f9      	ldr	r1, [r7, #12]
 8008e30:	4806      	ldr	r0, [pc, #24]	; (8008e4c <BSP_SD_ReadBlocks+0x38>)
 8008e32:	f7fa fc17 	bl	8003664 <HAL_SD_ReadBlocks>
 8008e36:	4603      	mov	r3, r0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d001      	beq.n	8008e40 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8008e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3718      	adds	r7, #24
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	20000918 	.word	0x20000918

08008e50 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b088      	sub	sp, #32
 8008e54:	af02      	add	r7, sp, #8
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	607a      	str	r2, [r7, #4]
 8008e5c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	9300      	str	r3, [sp, #0]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	68ba      	ldr	r2, [r7, #8]
 8008e6a:	68f9      	ldr	r1, [r7, #12]
 8008e6c:	4806      	ldr	r0, [pc, #24]	; (8008e88 <BSP_SD_WriteBlocks+0x38>)
 8008e6e:	f7fa fd8f 	bl	8003990 <HAL_SD_WriteBlocks>
 8008e72:	4603      	mov	r3, r0
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d001      	beq.n	8008e7c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8008e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3718      	adds	r7, #24
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	bf00      	nop
 8008e88:	20000918 	.word	0x20000918

08008e8c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008e90:	4805      	ldr	r0, [pc, #20]	; (8008ea8 <BSP_SD_GetCardState+0x1c>)
 8008e92:	f7fb f9b5 	bl	8004200 <HAL_SD_GetCardState>
 8008e96:	4603      	mov	r3, r0
 8008e98:	2b04      	cmp	r3, #4
 8008e9a:	bf14      	ite	ne
 8008e9c:	2301      	movne	r3, #1
 8008e9e:	2300      	moveq	r3, #0
 8008ea0:	b2db      	uxtb	r3, r3
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	20000918 	.word	0x20000918

08008eac <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b082      	sub	sp, #8
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8008eb4:	6879      	ldr	r1, [r7, #4]
 8008eb6:	4803      	ldr	r0, [pc, #12]	; (8008ec4 <BSP_SD_GetCardInfo+0x18>)
 8008eb8:	f7fb f8fa 	bl	80040b0 <HAL_SD_GetCardInfo>
}
 8008ebc:	bf00      	nop
 8008ebe:	3708      	adds	r7, #8
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	20000918 	.word	0x20000918

08008ec8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8008ed2:	f000 f853 	bl	8008f7c <BSP_PlatformIsDetected>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d101      	bne.n	8008ee0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8008edc:	2300      	movs	r3, #0
 8008ede:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8008ee0:	79fb      	ldrb	r3, [r7, #7]
 8008ee2:	b2db      	uxtb	r3, r3
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3708      	adds	r7, #8
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8008ef0:	4b06      	ldr	r3, [pc, #24]	; (8008f0c <MX_CRC_Init+0x20>)
 8008ef2:	4a07      	ldr	r2, [pc, #28]	; (8008f10 <MX_CRC_Init+0x24>)
 8008ef4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8008ef6:	4805      	ldr	r0, [pc, #20]	; (8008f0c <MX_CRC_Init+0x20>)
 8008ef8:	f7f7 ff2d 	bl	8000d56 <HAL_CRC_Init>
 8008efc:	4603      	mov	r3, r0
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d001      	beq.n	8008f06 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8008f02:	f000 fd1d 	bl	8009940 <Error_Handler>
  }

}
 8008f06:	bf00      	nop
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	2000031c 	.word	0x2000031c
 8008f10:	40023000 	.word	0x40023000

08008f14 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b085      	sub	sp, #20
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a0b      	ldr	r2, [pc, #44]	; (8008f50 <HAL_CRC_MspInit+0x3c>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d10d      	bne.n	8008f42 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8008f26:	2300      	movs	r3, #0
 8008f28:	60fb      	str	r3, [r7, #12]
 8008f2a:	4b0a      	ldr	r3, [pc, #40]	; (8008f54 <HAL_CRC_MspInit+0x40>)
 8008f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f2e:	4a09      	ldr	r2, [pc, #36]	; (8008f54 <HAL_CRC_MspInit+0x40>)
 8008f30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008f34:	6313      	str	r3, [r2, #48]	; 0x30
 8008f36:	4b07      	ldr	r3, [pc, #28]	; (8008f54 <HAL_CRC_MspInit+0x40>)
 8008f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f3e:	60fb      	str	r3, [r7, #12]
 8008f40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8008f42:	bf00      	nop
 8008f44:	3714      	adds	r7, #20
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr
 8008f4e:	bf00      	nop
 8008f50:	40023000 	.word	0x40023000
 8008f54:	40023800 	.word	0x40023800

08008f58 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008f5c:	4904      	ldr	r1, [pc, #16]	; (8008f70 <MX_FATFS_Init+0x18>)
 8008f5e:	4805      	ldr	r0, [pc, #20]	; (8008f74 <MX_FATFS_Init+0x1c>)
 8008f60:	f7ff fc26 	bl	80087b0 <FATFS_LinkDriver>
 8008f64:	4603      	mov	r3, r0
 8008f66:	461a      	mov	r2, r3
 8008f68:	4b03      	ldr	r3, [pc, #12]	; (8008f78 <MX_FATFS_Init+0x20>)
 8008f6a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8008f6c:	bf00      	nop
 8008f6e:	bd80      	pop	{r7, pc}
 8008f70:	20000328 	.word	0x20000328
 8008f74:	0800b178 	.word	0x0800b178
 8008f78:	20000324 	.word	0x20000324

08008f7c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b082      	sub	sp, #8
 8008f80:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8008f82:	2301      	movs	r3, #1
 8008f84:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8008f86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008f8a:	4806      	ldr	r0, [pc, #24]	; (8008fa4 <BSP_PlatformIsDetected+0x28>)
 8008f8c:	f7f8 f894 	bl	80010b8 <HAL_GPIO_ReadPin>
 8008f90:	4603      	mov	r3, r0
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d001      	beq.n	8008f9a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8008f96:	2300      	movs	r3, #0
 8008f98:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8008f9a:	79fb      	ldrb	r3, [r7, #7]
}  
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3708      	adds	r7, #8
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	40021800 	.word	0x40021800

08008fa8 <MX_FSMC_Init>:
NOR_HandleTypeDef hnor3;
SRAM_HandleTypeDef hsram4;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b08e      	sub	sp, #56	; 0x38
 8008fac:	af00      	add	r7, sp, #0
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8008fae:	f107 031c 	add.w	r3, r7, #28
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	601a      	str	r2, [r3, #0]
 8008fb6:	605a      	str	r2, [r3, #4]
 8008fb8:	609a      	str	r2, [r3, #8]
 8008fba:	60da      	str	r2, [r3, #12]
 8008fbc:	611a      	str	r2, [r3, #16]
 8008fbe:	615a      	str	r2, [r3, #20]
 8008fc0:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8008fc2:	463b      	mov	r3, r7
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	601a      	str	r2, [r3, #0]
 8008fc8:	605a      	str	r2, [r3, #4]
 8008fca:	609a      	str	r2, [r3, #8]
 8008fcc:	60da      	str	r2, [r3, #12]
 8008fce:	611a      	str	r2, [r3, #16]
 8008fd0:	615a      	str	r2, [r3, #20]
 8008fd2:	619a      	str	r2, [r3, #24]

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FSMC_NORSRAM_DEVICE;
 8008fd4:	4ba4      	ldr	r3, [pc, #656]	; (8009268 <MX_FSMC_Init+0x2c0>)
 8008fd6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8008fda:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8008fdc:	4ba2      	ldr	r3, [pc, #648]	; (8009268 <MX_FSMC_Init+0x2c0>)
 8008fde:	4aa3      	ldr	r2, [pc, #652]	; (800926c <MX_FSMC_Init+0x2c4>)
 8008fe0:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8008fe2:	4ba1      	ldr	r3, [pc, #644]	; (8009268 <MX_FSMC_Init+0x2c0>)
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8008fe8:	4b9f      	ldr	r3, [pc, #636]	; (8009268 <MX_FSMC_Init+0x2c0>)
 8008fea:	2200      	movs	r2, #0
 8008fec:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FSMC_MEMORY_TYPE_NOR;
 8008fee:	4b9e      	ldr	r3, [pc, #632]	; (8009268 <MX_FSMC_Init+0x2c0>)
 8008ff0:	2208      	movs	r2, #8
 8008ff2:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_8;
 8008ff4:	4b9c      	ldr	r3, [pc, #624]	; (8009268 <MX_FSMC_Init+0x2c0>)
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8008ffa:	4b9b      	ldr	r3, [pc, #620]	; (8009268 <MX_FSMC_Init+0x2c0>)
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8009000:	4b99      	ldr	r3, [pc, #612]	; (8009268 <MX_FSMC_Init+0x2c0>)
 8009002:	2200      	movs	r2, #0
 8009004:	61da      	str	r2, [r3, #28]
  hnor1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8009006:	4b98      	ldr	r3, [pc, #608]	; (8009268 <MX_FSMC_Init+0x2c0>)
 8009008:	2200      	movs	r2, #0
 800900a:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800900c:	4b96      	ldr	r3, [pc, #600]	; (8009268 <MX_FSMC_Init+0x2c0>)
 800900e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009012:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8009014:	4b94      	ldr	r3, [pc, #592]	; (8009268 <MX_FSMC_Init+0x2c0>)
 8009016:	2200      	movs	r2, #0
 8009018:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 800901a:	4b93      	ldr	r3, [pc, #588]	; (8009268 <MX_FSMC_Init+0x2c0>)
 800901c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009020:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8009022:	4b91      	ldr	r3, [pc, #580]	; (8009268 <MX_FSMC_Init+0x2c0>)
 8009024:	2200      	movs	r2, #0
 8009026:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8009028:	4b8f      	ldr	r3, [pc, #572]	; (8009268 <MX_FSMC_Init+0x2c0>)
 800902a:	2200      	movs	r2, #0
 800902c:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800902e:	4b8e      	ldr	r3, [pc, #568]	; (8009268 <MX_FSMC_Init+0x2c0>)
 8009030:	2200      	movs	r2, #0
 8009032:	63da      	str	r2, [r3, #60]	; 0x3c
  hnor1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8009034:	4b8c      	ldr	r3, [pc, #560]	; (8009268 <MX_FSMC_Init+0x2c0>)
 8009036:	2200      	movs	r2, #0
 8009038:	641a      	str	r2, [r3, #64]	; 0x40
  hnor1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800903a:	4b8b      	ldr	r3, [pc, #556]	; (8009268 <MX_FSMC_Init+0x2c0>)
 800903c:	2200      	movs	r2, #0
 800903e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8009040:	230f      	movs	r3, #15
 8009042:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8009044:	230f      	movs	r3, #15
 8009046:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 255;
 8009048:	23ff      	movs	r3, #255	; 0xff
 800904a:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 800904c:	230f      	movs	r3, #15
 800904e:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8009050:	2310      	movs	r3, #16
 8009052:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8009054:	2311      	movs	r3, #17
 8009056:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_B;
 8009058:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800905c:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 15;
 800905e:	230f      	movs	r3, #15
 8009060:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8009062:	230f      	movs	r3, #15
 8009064:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 255;
 8009066:	23ff      	movs	r3, #255	; 0xff
 8009068:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 15;
 800906a:	230f      	movs	r3, #15
 800906c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800906e:	2310      	movs	r3, #16
 8009070:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8009072:	2311      	movs	r3, #17
 8009074:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_B;
 8009076:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800907a:	61bb      	str	r3, [r7, #24]

  if (HAL_NOR_Init(&hnor1, &Timing, &ExtTiming) != HAL_OK)
 800907c:	463a      	mov	r2, r7
 800907e:	f107 031c 	add.w	r3, r7, #28
 8009082:	4619      	mov	r1, r3
 8009084:	4878      	ldr	r0, [pc, #480]	; (8009268 <MX_FSMC_Init+0x2c0>)
 8009086:	f7f8 f971 	bl	800136c <HAL_NOR_Init>
 800908a:	4603      	mov	r3, r0
 800908c:	2b00      	cmp	r3, #0
 800908e:	d001      	beq.n	8009094 <MX_FSMC_Init+0xec>
  {
    Error_Handler( );
 8009090:	f000 fc56 	bl	8009940 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 8009094:	4b76      	ldr	r3, [pc, #472]	; (8009270 <MX_FSMC_Init+0x2c8>)
 8009096:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800909a:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800909c:	4b74      	ldr	r3, [pc, #464]	; (8009270 <MX_FSMC_Init+0x2c8>)
 800909e:	4a73      	ldr	r2, [pc, #460]	; (800926c <MX_FSMC_Init+0x2c4>)
 80090a0:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK2;
 80090a2:	4b73      	ldr	r3, [pc, #460]	; (8009270 <MX_FSMC_Init+0x2c8>)
 80090a4:	2202      	movs	r2, #2
 80090a6:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80090a8:	4b71      	ldr	r3, [pc, #452]	; (8009270 <MX_FSMC_Init+0x2c8>)
 80090aa:	2200      	movs	r2, #0
 80090ac:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80090ae:	4b70      	ldr	r3, [pc, #448]	; (8009270 <MX_FSMC_Init+0x2c8>)
 80090b0:	2200      	movs	r2, #0
 80090b2:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_8;
 80090b4:	4b6e      	ldr	r3, [pc, #440]	; (8009270 <MX_FSMC_Init+0x2c8>)
 80090b6:	2200      	movs	r2, #0
 80090b8:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80090ba:	4b6d      	ldr	r3, [pc, #436]	; (8009270 <MX_FSMC_Init+0x2c8>)
 80090bc:	2200      	movs	r2, #0
 80090be:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80090c0:	4b6b      	ldr	r3, [pc, #428]	; (8009270 <MX_FSMC_Init+0x2c8>)
 80090c2:	2200      	movs	r2, #0
 80090c4:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80090c6:	4b6a      	ldr	r3, [pc, #424]	; (8009270 <MX_FSMC_Init+0x2c8>)
 80090c8:	2200      	movs	r2, #0
 80090ca:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80090cc:	4b68      	ldr	r3, [pc, #416]	; (8009270 <MX_FSMC_Init+0x2c8>)
 80090ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80090d2:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80090d4:	4b66      	ldr	r3, [pc, #408]	; (8009270 <MX_FSMC_Init+0x2c8>)
 80090d6:	2200      	movs	r2, #0
 80090d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80090da:	4b65      	ldr	r3, [pc, #404]	; (8009270 <MX_FSMC_Init+0x2c8>)
 80090dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80090e0:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80090e2:	4b63      	ldr	r3, [pc, #396]	; (8009270 <MX_FSMC_Init+0x2c8>)
 80090e4:	2200      	movs	r2, #0
 80090e6:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80090e8:	4b61      	ldr	r3, [pc, #388]	; (8009270 <MX_FSMC_Init+0x2c8>)
 80090ea:	2200      	movs	r2, #0
 80090ec:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80090ee:	4b60      	ldr	r3, [pc, #384]	; (8009270 <MX_FSMC_Init+0x2c8>)
 80090f0:	2200      	movs	r2, #0
 80090f2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 80090f4:	4b5e      	ldr	r3, [pc, #376]	; (8009270 <MX_FSMC_Init+0x2c8>)
 80090f6:	2200      	movs	r2, #0
 80090f8:	641a      	str	r2, [r3, #64]	; 0x40
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80090fa:	4b5d      	ldr	r3, [pc, #372]	; (8009270 <MX_FSMC_Init+0x2c8>)
 80090fc:	2200      	movs	r2, #0
 80090fe:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8009100:	230f      	movs	r3, #15
 8009102:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8009104:	230f      	movs	r3, #15
 8009106:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 255;
 8009108:	23ff      	movs	r3, #255	; 0xff
 800910a:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 800910c:	230f      	movs	r3, #15
 800910e:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8009110:	2310      	movs	r3, #16
 8009112:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8009114:	2311      	movs	r3, #17
 8009116:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8009118:	2300      	movs	r3, #0
 800911a:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 15;
 800911c:	230f      	movs	r3, #15
 800911e:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8009120:	230f      	movs	r3, #15
 8009122:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 255;
 8009124:	23ff      	movs	r3, #255	; 0xff
 8009126:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 15;
 8009128:	230f      	movs	r3, #15
 800912a:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800912c:	2310      	movs	r3, #16
 800912e:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8009130:	2311      	movs	r3, #17
 8009132:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8009134:	2300      	movs	r3, #0
 8009136:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram2, &Timing, &ExtTiming) != HAL_OK)
 8009138:	463a      	mov	r2, r7
 800913a:	f107 031c 	add.w	r3, r7, #28
 800913e:	4619      	mov	r1, r3
 8009140:	484b      	ldr	r0, [pc, #300]	; (8009270 <MX_FSMC_Init+0x2c8>)
 8009142:	f7fb fbe4 	bl	800490e <HAL_SRAM_Init>
 8009146:	4603      	mov	r3, r0
 8009148:	2b00      	cmp	r3, #0
 800914a:	d001      	beq.n	8009150 <MX_FSMC_Init+0x1a8>
  {
    Error_Handler( );
 800914c:	f000 fbf8 	bl	8009940 <Error_Handler>
  }

  /** Perform the NOR3 memory initialization sequence
  */
  hnor3.Instance = FSMC_NORSRAM_DEVICE;
 8009150:	4b48      	ldr	r3, [pc, #288]	; (8009274 <MX_FSMC_Init+0x2cc>)
 8009152:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8009156:	601a      	str	r2, [r3, #0]
  hnor3.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8009158:	4b46      	ldr	r3, [pc, #280]	; (8009274 <MX_FSMC_Init+0x2cc>)
 800915a:	4a44      	ldr	r2, [pc, #272]	; (800926c <MX_FSMC_Init+0x2c4>)
 800915c:	605a      	str	r2, [r3, #4]
  /* hnor3.Init */
  hnor3.Init.NSBank = FSMC_NORSRAM_BANK3;
 800915e:	4b45      	ldr	r3, [pc, #276]	; (8009274 <MX_FSMC_Init+0x2cc>)
 8009160:	2204      	movs	r2, #4
 8009162:	609a      	str	r2, [r3, #8]
  hnor3.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8009164:	4b43      	ldr	r3, [pc, #268]	; (8009274 <MX_FSMC_Init+0x2cc>)
 8009166:	2200      	movs	r2, #0
 8009168:	60da      	str	r2, [r3, #12]
  hnor3.Init.MemoryType = FSMC_MEMORY_TYPE_NOR;
 800916a:	4b42      	ldr	r3, [pc, #264]	; (8009274 <MX_FSMC_Init+0x2cc>)
 800916c:	2208      	movs	r2, #8
 800916e:	611a      	str	r2, [r3, #16]
  hnor3.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8009170:	4b40      	ldr	r3, [pc, #256]	; (8009274 <MX_FSMC_Init+0x2cc>)
 8009172:	2210      	movs	r2, #16
 8009174:	615a      	str	r2, [r3, #20]
  hnor3.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8009176:	4b3f      	ldr	r3, [pc, #252]	; (8009274 <MX_FSMC_Init+0x2cc>)
 8009178:	2200      	movs	r2, #0
 800917a:	619a      	str	r2, [r3, #24]
  hnor3.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800917c:	4b3d      	ldr	r3, [pc, #244]	; (8009274 <MX_FSMC_Init+0x2cc>)
 800917e:	2200      	movs	r2, #0
 8009180:	61da      	str	r2, [r3, #28]
  hnor3.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8009182:	4b3c      	ldr	r3, [pc, #240]	; (8009274 <MX_FSMC_Init+0x2cc>)
 8009184:	2200      	movs	r2, #0
 8009186:	625a      	str	r2, [r3, #36]	; 0x24
  hnor3.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8009188:	4b3a      	ldr	r3, [pc, #232]	; (8009274 <MX_FSMC_Init+0x2cc>)
 800918a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800918e:	629a      	str	r2, [r3, #40]	; 0x28
  hnor3.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8009190:	4b38      	ldr	r3, [pc, #224]	; (8009274 <MX_FSMC_Init+0x2cc>)
 8009192:	2200      	movs	r2, #0
 8009194:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor3.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8009196:	4b37      	ldr	r3, [pc, #220]	; (8009274 <MX_FSMC_Init+0x2cc>)
 8009198:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800919c:	631a      	str	r2, [r3, #48]	; 0x30
  hnor3.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800919e:	4b35      	ldr	r3, [pc, #212]	; (8009274 <MX_FSMC_Init+0x2cc>)
 80091a0:	2200      	movs	r2, #0
 80091a2:	635a      	str	r2, [r3, #52]	; 0x34
  hnor3.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80091a4:	4b33      	ldr	r3, [pc, #204]	; (8009274 <MX_FSMC_Init+0x2cc>)
 80091a6:	2200      	movs	r2, #0
 80091a8:	639a      	str	r2, [r3, #56]	; 0x38
  hnor3.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80091aa:	4b32      	ldr	r3, [pc, #200]	; (8009274 <MX_FSMC_Init+0x2cc>)
 80091ac:	2200      	movs	r2, #0
 80091ae:	63da      	str	r2, [r3, #60]	; 0x3c
  hnor3.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 80091b0:	4b30      	ldr	r3, [pc, #192]	; (8009274 <MX_FSMC_Init+0x2cc>)
 80091b2:	2200      	movs	r2, #0
 80091b4:	641a      	str	r2, [r3, #64]	; 0x40
  hnor3.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80091b6:	4b2f      	ldr	r3, [pc, #188]	; (8009274 <MX_FSMC_Init+0x2cc>)
 80091b8:	2200      	movs	r2, #0
 80091ba:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 80091bc:	230f      	movs	r3, #15
 80091be:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80091c0:	230f      	movs	r3, #15
 80091c2:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 255;
 80091c4:	23ff      	movs	r3, #255	; 0xff
 80091c6:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 80091c8:	230f      	movs	r3, #15
 80091ca:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80091cc:	2310      	movs	r3, #16
 80091ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80091d0:	2311      	movs	r3, #17
 80091d2:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_B;
 80091d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80091d8:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 15;
 80091da:	230f      	movs	r3, #15
 80091dc:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80091de:	230f      	movs	r3, #15
 80091e0:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 255;
 80091e2:	23ff      	movs	r3, #255	; 0xff
 80091e4:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 15;
 80091e6:	230f      	movs	r3, #15
 80091e8:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80091ea:	2310      	movs	r3, #16
 80091ec:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80091ee:	2311      	movs	r3, #17
 80091f0:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_B;
 80091f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80091f6:	61bb      	str	r3, [r7, #24]

  if (HAL_NOR_Init(&hnor3, &Timing, &ExtTiming) != HAL_OK)
 80091f8:	463a      	mov	r2, r7
 80091fa:	f107 031c 	add.w	r3, r7, #28
 80091fe:	4619      	mov	r1, r3
 8009200:	481c      	ldr	r0, [pc, #112]	; (8009274 <MX_FSMC_Init+0x2cc>)
 8009202:	f7f8 f8b3 	bl	800136c <HAL_NOR_Init>
 8009206:	4603      	mov	r3, r0
 8009208:	2b00      	cmp	r3, #0
 800920a:	d001      	beq.n	8009210 <MX_FSMC_Init+0x268>
  {
    Error_Handler( );
 800920c:	f000 fb98 	bl	8009940 <Error_Handler>
  }

  /** Perform the SRAM4 memory initialization sequence
  */
  hsram4.Instance = FSMC_NORSRAM_DEVICE;
 8009210:	4b19      	ldr	r3, [pc, #100]	; (8009278 <MX_FSMC_Init+0x2d0>)
 8009212:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8009216:	601a      	str	r2, [r3, #0]
  hsram4.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8009218:	4b17      	ldr	r3, [pc, #92]	; (8009278 <MX_FSMC_Init+0x2d0>)
 800921a:	4a14      	ldr	r2, [pc, #80]	; (800926c <MX_FSMC_Init+0x2c4>)
 800921c:	605a      	str	r2, [r3, #4]
  /* hsram4.Init */
  hsram4.Init.NSBank = FSMC_NORSRAM_BANK4;
 800921e:	4b16      	ldr	r3, [pc, #88]	; (8009278 <MX_FSMC_Init+0x2d0>)
 8009220:	2206      	movs	r2, #6
 8009222:	609a      	str	r2, [r3, #8]
  hsram4.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8009224:	4b14      	ldr	r3, [pc, #80]	; (8009278 <MX_FSMC_Init+0x2d0>)
 8009226:	2200      	movs	r2, #0
 8009228:	60da      	str	r2, [r3, #12]
  hsram4.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800922a:	4b13      	ldr	r3, [pc, #76]	; (8009278 <MX_FSMC_Init+0x2d0>)
 800922c:	2200      	movs	r2, #0
 800922e:	611a      	str	r2, [r3, #16]
  hsram4.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8009230:	4b11      	ldr	r3, [pc, #68]	; (8009278 <MX_FSMC_Init+0x2d0>)
 8009232:	2210      	movs	r2, #16
 8009234:	615a      	str	r2, [r3, #20]
  hsram4.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8009236:	4b10      	ldr	r3, [pc, #64]	; (8009278 <MX_FSMC_Init+0x2d0>)
 8009238:	2200      	movs	r2, #0
 800923a:	619a      	str	r2, [r3, #24]
  hsram4.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800923c:	4b0e      	ldr	r3, [pc, #56]	; (8009278 <MX_FSMC_Init+0x2d0>)
 800923e:	2200      	movs	r2, #0
 8009240:	61da      	str	r2, [r3, #28]
  hsram4.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8009242:	4b0d      	ldr	r3, [pc, #52]	; (8009278 <MX_FSMC_Init+0x2d0>)
 8009244:	2200      	movs	r2, #0
 8009246:	625a      	str	r2, [r3, #36]	; 0x24
  hsram4.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8009248:	4b0b      	ldr	r3, [pc, #44]	; (8009278 <MX_FSMC_Init+0x2d0>)
 800924a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800924e:	629a      	str	r2, [r3, #40]	; 0x28
  hsram4.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8009250:	4b09      	ldr	r3, [pc, #36]	; (8009278 <MX_FSMC_Init+0x2d0>)
 8009252:	2200      	movs	r2, #0
 8009254:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram4.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8009256:	4b08      	ldr	r3, [pc, #32]	; (8009278 <MX_FSMC_Init+0x2d0>)
 8009258:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800925c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram4.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800925e:	4b06      	ldr	r3, [pc, #24]	; (8009278 <MX_FSMC_Init+0x2d0>)
 8009260:	2200      	movs	r2, #0
 8009262:	635a      	str	r2, [r3, #52]	; 0x34
 8009264:	e00a      	b.n	800927c <MX_FSMC_Init+0x2d4>
 8009266:	bf00      	nop
 8009268:	2000078c 	.word	0x2000078c
 800926c:	a0000104 	.word	0xa0000104
 8009270:	200007d8 	.word	0x200007d8
 8009274:	20000878 	.word	0x20000878
 8009278:	20000828 	.word	0x20000828
  hsram4.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800927c:	4b1b      	ldr	r3, [pc, #108]	; (80092ec <MX_FSMC_Init+0x344>)
 800927e:	2200      	movs	r2, #0
 8009280:	639a      	str	r2, [r3, #56]	; 0x38
  hsram4.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8009282:	4b1a      	ldr	r3, [pc, #104]	; (80092ec <MX_FSMC_Init+0x344>)
 8009284:	2200      	movs	r2, #0
 8009286:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram4.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8009288:	4b18      	ldr	r3, [pc, #96]	; (80092ec <MX_FSMC_Init+0x344>)
 800928a:	2200      	movs	r2, #0
 800928c:	641a      	str	r2, [r3, #64]	; 0x40
  hsram4.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800928e:	4b17      	ldr	r3, [pc, #92]	; (80092ec <MX_FSMC_Init+0x344>)
 8009290:	2200      	movs	r2, #0
 8009292:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8009294:	230f      	movs	r3, #15
 8009296:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8009298:	230f      	movs	r3, #15
 800929a:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 255;
 800929c:	23ff      	movs	r3, #255	; 0xff
 800929e:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 80092a0:	230f      	movs	r3, #15
 80092a2:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80092a4:	2310      	movs	r3, #16
 80092a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80092a8:	2311      	movs	r3, #17
 80092aa:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80092ac:	2300      	movs	r3, #0
 80092ae:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 15;
 80092b0:	230f      	movs	r3, #15
 80092b2:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80092b4:	230f      	movs	r3, #15
 80092b6:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 255;
 80092b8:	23ff      	movs	r3, #255	; 0xff
 80092ba:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 15;
 80092bc:	230f      	movs	r3, #15
 80092be:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80092c0:	2310      	movs	r3, #16
 80092c2:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80092c4:	2311      	movs	r3, #17
 80092c6:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80092c8:	2300      	movs	r3, #0
 80092ca:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram4, &Timing, &ExtTiming) != HAL_OK)
 80092cc:	463a      	mov	r2, r7
 80092ce:	f107 031c 	add.w	r3, r7, #28
 80092d2:	4619      	mov	r1, r3
 80092d4:	4805      	ldr	r0, [pc, #20]	; (80092ec <MX_FSMC_Init+0x344>)
 80092d6:	f7fb fb1a 	bl	800490e <HAL_SRAM_Init>
 80092da:	4603      	mov	r3, r0
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d001      	beq.n	80092e4 <MX_FSMC_Init+0x33c>
  {
    Error_Handler( );
 80092e0:	f000 fb2e 	bl	8009940 <Error_Handler>
  }

}
 80092e4:	bf00      	nop
 80092e6:	3738      	adds	r7, #56	; 0x38
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}
 80092ec:	20000828 	.word	0x20000828

080092f0 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b086      	sub	sp, #24
 80092f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80092f6:	1d3b      	adds	r3, r7, #4
 80092f8:	2200      	movs	r2, #0
 80092fa:	601a      	str	r2, [r3, #0]
 80092fc:	605a      	str	r2, [r3, #4]
 80092fe:	609a      	str	r2, [r3, #8]
 8009300:	60da      	str	r2, [r3, #12]
 8009302:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8009304:	4b2c      	ldr	r3, [pc, #176]	; (80093b8 <HAL_FSMC_MspInit+0xc8>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d151      	bne.n	80093b0 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 800930c:	4b2a      	ldr	r3, [pc, #168]	; (80093b8 <HAL_FSMC_MspInit+0xc8>)
 800930e:	2201      	movs	r2, #1
 8009310:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8009312:	2300      	movs	r3, #0
 8009314:	603b      	str	r3, [r7, #0]
 8009316:	4b29      	ldr	r3, [pc, #164]	; (80093bc <HAL_FSMC_MspInit+0xcc>)
 8009318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800931a:	4a28      	ldr	r2, [pc, #160]	; (80093bc <HAL_FSMC_MspInit+0xcc>)
 800931c:	f043 0301 	orr.w	r3, r3, #1
 8009320:	6393      	str	r3, [r2, #56]	; 0x38
 8009322:	4b26      	ldr	r3, [pc, #152]	; (80093bc <HAL_FSMC_MspInit+0xcc>)
 8009324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009326:	f003 0301 	and.w	r3, r3, #1
 800932a:	603b      	str	r3, [r7, #0]
 800932c:	683b      	ldr	r3, [r7, #0]
  PG14   ------> FSMC_A25
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 800932e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009332:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009334:	2302      	movs	r3, #2
 8009336:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009338:	2300      	movs	r3, #0
 800933a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800933c:	2303      	movs	r3, #3
 800933e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8009340:	230c      	movs	r3, #12
 8009342:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009344:	1d3b      	adds	r3, r7, #4
 8009346:	4619      	mov	r1, r3
 8009348:	481d      	ldr	r0, [pc, #116]	; (80093c0 <HAL_FSMC_MspInit+0xd0>)
 800934a:	f7f7 fd23 	bl	8000d94 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800934e:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8009352:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009354:	2302      	movs	r3, #2
 8009356:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009358:	2300      	movs	r3, #0
 800935a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800935c:	2303      	movs	r3, #3
 800935e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8009360:	230c      	movs	r3, #12
 8009362:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009364:	1d3b      	adds	r3, r7, #4
 8009366:	4619      	mov	r1, r3
 8009368:	4816      	ldr	r0, [pc, #88]	; (80093c4 <HAL_FSMC_MspInit+0xd4>)
 800936a:	f7f7 fd13 	bl	8000d94 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800936e:	f247 633f 	movw	r3, #30271	; 0x763f
 8009372:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|nCE1_Pin|nCE2_Pin 
                          |nCE3_Pin|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009374:	2302      	movs	r3, #2
 8009376:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009378:	2300      	movs	r3, #0
 800937a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800937c:	2303      	movs	r3, #3
 800937e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8009380:	230c      	movs	r3, #12
 8009382:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009384:	1d3b      	adds	r3, r7, #4
 8009386:	4619      	mov	r1, r3
 8009388:	480f      	ldr	r0, [pc, #60]	; (80093c8 <HAL_FSMC_MspInit+0xd8>)
 800938a:	f7f7 fd03 	bl	8000d94 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800938e:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 8009392:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_0|GPIO_PIN_1|nRD_Pin|nWR_Pin 
                          |nCE0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009394:	2302      	movs	r3, #2
 8009396:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009398:	2300      	movs	r3, #0
 800939a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800939c:	2303      	movs	r3, #3
 800939e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80093a0:	230c      	movs	r3, #12
 80093a2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80093a4:	1d3b      	adds	r3, r7, #4
 80093a6:	4619      	mov	r1, r3
 80093a8:	4808      	ldr	r0, [pc, #32]	; (80093cc <HAL_FSMC_MspInit+0xdc>)
 80093aa:	f7f7 fcf3 	bl	8000d94 <HAL_GPIO_Init>
 80093ae:	e000      	b.n	80093b2 <HAL_FSMC_MspInit+0xc2>
    return;
 80093b0:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80093b2:	3718      	adds	r7, #24
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	2000022c 	.word	0x2000022c
 80093bc:	40023800 	.word	0x40023800
 80093c0:	40021000 	.word	0x40021000
 80093c4:	40021400 	.word	0x40021400
 80093c8:	40021800 	.word	0x40021800
 80093cc:	40020c00 	.word	0x40020c00

080093d0 <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* norHandle){
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FSMC_MspInit();
 80093d8:	f7ff ff8a 	bl	80092f0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 80093dc:	bf00      	nop
 80093de:	3708      	adds	r7, #8
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}

080093e4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b082      	sub	sp, #8
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80093ec:	f7ff ff80 	bl	80092f0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80093f0:	bf00      	nop
 80093f2:	3708      	adds	r7, #8
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <MX_GPIO_Init>:
     PB0   ------> SharedStack_PB0
     PB1   ------> SharedStack_PB1
     PC6   ------> SharedStack_PC6
*/
void MX_GPIO_Init(void)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b08e      	sub	sp, #56	; 0x38
 80093fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80093fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009402:	2200      	movs	r2, #0
 8009404:	601a      	str	r2, [r3, #0]
 8009406:	605a      	str	r2, [r3, #4]
 8009408:	609a      	str	r2, [r3, #8]
 800940a:	60da      	str	r2, [r3, #12]
 800940c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800940e:	2300      	movs	r3, #0
 8009410:	623b      	str	r3, [r7, #32]
 8009412:	4ba6      	ldr	r3, [pc, #664]	; (80096ac <MX_GPIO_Init+0x2b4>)
 8009414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009416:	4aa5      	ldr	r2, [pc, #660]	; (80096ac <MX_GPIO_Init+0x2b4>)
 8009418:	f043 0310 	orr.w	r3, r3, #16
 800941c:	6313      	str	r3, [r2, #48]	; 0x30
 800941e:	4ba3      	ldr	r3, [pc, #652]	; (80096ac <MX_GPIO_Init+0x2b4>)
 8009420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009422:	f003 0310 	and.w	r3, r3, #16
 8009426:	623b      	str	r3, [r7, #32]
 8009428:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800942a:	2300      	movs	r3, #0
 800942c:	61fb      	str	r3, [r7, #28]
 800942e:	4b9f      	ldr	r3, [pc, #636]	; (80096ac <MX_GPIO_Init+0x2b4>)
 8009430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009432:	4a9e      	ldr	r2, [pc, #632]	; (80096ac <MX_GPIO_Init+0x2b4>)
 8009434:	f043 0304 	orr.w	r3, r3, #4
 8009438:	6313      	str	r3, [r2, #48]	; 0x30
 800943a:	4b9c      	ldr	r3, [pc, #624]	; (80096ac <MX_GPIO_Init+0x2b4>)
 800943c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800943e:	f003 0304 	and.w	r3, r3, #4
 8009442:	61fb      	str	r3, [r7, #28]
 8009444:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8009446:	2300      	movs	r3, #0
 8009448:	61bb      	str	r3, [r7, #24]
 800944a:	4b98      	ldr	r3, [pc, #608]	; (80096ac <MX_GPIO_Init+0x2b4>)
 800944c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800944e:	4a97      	ldr	r2, [pc, #604]	; (80096ac <MX_GPIO_Init+0x2b4>)
 8009450:	f043 0320 	orr.w	r3, r3, #32
 8009454:	6313      	str	r3, [r2, #48]	; 0x30
 8009456:	4b95      	ldr	r3, [pc, #596]	; (80096ac <MX_GPIO_Init+0x2b4>)
 8009458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800945a:	f003 0320 	and.w	r3, r3, #32
 800945e:	61bb      	str	r3, [r7, #24]
 8009460:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009462:	2300      	movs	r3, #0
 8009464:	617b      	str	r3, [r7, #20]
 8009466:	4b91      	ldr	r3, [pc, #580]	; (80096ac <MX_GPIO_Init+0x2b4>)
 8009468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800946a:	4a90      	ldr	r2, [pc, #576]	; (80096ac <MX_GPIO_Init+0x2b4>)
 800946c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009470:	6313      	str	r3, [r2, #48]	; 0x30
 8009472:	4b8e      	ldr	r3, [pc, #568]	; (80096ac <MX_GPIO_Init+0x2b4>)
 8009474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800947a:	617b      	str	r3, [r7, #20]
 800947c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800947e:	2300      	movs	r3, #0
 8009480:	613b      	str	r3, [r7, #16]
 8009482:	4b8a      	ldr	r3, [pc, #552]	; (80096ac <MX_GPIO_Init+0x2b4>)
 8009484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009486:	4a89      	ldr	r2, [pc, #548]	; (80096ac <MX_GPIO_Init+0x2b4>)
 8009488:	f043 0301 	orr.w	r3, r3, #1
 800948c:	6313      	str	r3, [r2, #48]	; 0x30
 800948e:	4b87      	ldr	r3, [pc, #540]	; (80096ac <MX_GPIO_Init+0x2b4>)
 8009490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009492:	f003 0301 	and.w	r3, r3, #1
 8009496:	613b      	str	r3, [r7, #16]
 8009498:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800949a:	2300      	movs	r3, #0
 800949c:	60fb      	str	r3, [r7, #12]
 800949e:	4b83      	ldr	r3, [pc, #524]	; (80096ac <MX_GPIO_Init+0x2b4>)
 80094a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094a2:	4a82      	ldr	r2, [pc, #520]	; (80096ac <MX_GPIO_Init+0x2b4>)
 80094a4:	f043 0302 	orr.w	r3, r3, #2
 80094a8:	6313      	str	r3, [r2, #48]	; 0x30
 80094aa:	4b80      	ldr	r3, [pc, #512]	; (80096ac <MX_GPIO_Init+0x2b4>)
 80094ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ae:	f003 0302 	and.w	r3, r3, #2
 80094b2:	60fb      	str	r3, [r7, #12]
 80094b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80094b6:	2300      	movs	r3, #0
 80094b8:	60bb      	str	r3, [r7, #8]
 80094ba:	4b7c      	ldr	r3, [pc, #496]	; (80096ac <MX_GPIO_Init+0x2b4>)
 80094bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094be:	4a7b      	ldr	r2, [pc, #492]	; (80096ac <MX_GPIO_Init+0x2b4>)
 80094c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094c4:	6313      	str	r3, [r2, #48]	; 0x30
 80094c6:	4b79      	ldr	r3, [pc, #484]	; (80096ac <MX_GPIO_Init+0x2b4>)
 80094c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094ce:	60bb      	str	r3, [r7, #8]
 80094d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80094d2:	2300      	movs	r3, #0
 80094d4:	607b      	str	r3, [r7, #4]
 80094d6:	4b75      	ldr	r3, [pc, #468]	; (80096ac <MX_GPIO_Init+0x2b4>)
 80094d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094da:	4a74      	ldr	r2, [pc, #464]	; (80096ac <MX_GPIO_Init+0x2b4>)
 80094dc:	f043 0308 	orr.w	r3, r3, #8
 80094e0:	6313      	str	r3, [r2, #48]	; 0x30
 80094e2:	4b72      	ldr	r3, [pc, #456]	; (80096ac <MX_GPIO_Init+0x2b4>)
 80094e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094e6:	f003 0308 	and.w	r3, r3, #8
 80094ea:	607b      	str	r3, [r7, #4]
 80094ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED3_Pin|LED2_Pin|LED1_Pin|LED0_Pin 
 80094ee:	2200      	movs	r2, #0
 80094f0:	f240 111f 	movw	r1, #287	; 0x11f
 80094f4:	486e      	ldr	r0, [pc, #440]	; (80096b0 <MX_GPIO_Init+0x2b8>)
 80094f6:	f7f7 fdf7 	bl	80010e8 <HAL_GPIO_WritePin>
                          |nOUT_EN0_Pin|VSEL0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GP3_Pin|VSEL1_Pin, GPIO_PIN_RESET);
 80094fa:	2200      	movs	r2, #0
 80094fc:	21a0      	movs	r1, #160	; 0xa0
 80094fe:	486d      	ldr	r0, [pc, #436]	; (80096b4 <MX_GPIO_Init+0x2bc>)
 8009500:	f7f7 fdf2 	bl	80010e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nOUT_EN1_GPIO_Port, nOUT_EN1_Pin, GPIO_PIN_RESET);
 8009504:	2200      	movs	r2, #0
 8009506:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800950a:	486b      	ldr	r0, [pc, #428]	; (80096b8 <MX_GPIO_Init+0x2c0>)
 800950c:	f7f7 fdec 	bl	80010e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, SEL0_Pin|SEL1_Pin, GPIO_PIN_RESET);
 8009510:	2200      	movs	r2, #0
 8009512:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8009516:	4869      	ldr	r0, [pc, #420]	; (80096bc <MX_GPIO_Init+0x2c4>)
 8009518:	f7f7 fde6 	bl	80010e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOOT_EN_GPIO_Port, BOOT_EN_Pin, GPIO_PIN_RESET);
 800951c:	2200      	movs	r2, #0
 800951e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009522:	4867      	ldr	r0, [pc, #412]	; (80096c0 <MX_GPIO_Init+0x2c8>)
 8009524:	f7f7 fde0 	bl	80010e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = nDTCT_Pin|GP2_Pin|GP8_Pin;
 8009528:	f242 0350 	movw	r3, #8272	; 0x2050
 800952c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800952e:	2300      	movs	r3, #0
 8009530:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009532:	2300      	movs	r3, #0
 8009534:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800953a:	4619      	mov	r1, r3
 800953c:	485d      	ldr	r0, [pc, #372]	; (80096b4 <MX_GPIO_Init+0x2bc>)
 800953e:	f7f7 fc29 	bl	8000d94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1 
                           PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1 
 8009542:	f24c 030f 	movw	r3, #49167	; 0xc00f
 8009546:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009548:	2303      	movs	r3, #3
 800954a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800954c:	2300      	movs	r3, #0
 800954e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009554:	4619      	mov	r1, r3
 8009556:	4857      	ldr	r0, [pc, #348]	; (80096b4 <MX_GPIO_Init+0x2bc>)
 8009558:	f7f7 fc1c 	bl	8000d94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF8 PF9 
                           PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
 800955c:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8009560:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009562:	2303      	movs	r3, #3
 8009564:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009566:	2300      	movs	r3, #0
 8009568:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800956a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800956e:	4619      	mov	r1, r3
 8009570:	4851      	ldr	r0, [pc, #324]	; (80096b8 <MX_GPIO_Init+0x2c0>)
 8009572:	f7f7 fc0f 	bl	8000d94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin|LED1_Pin|LED0_Pin 
 8009576:	f240 131f 	movw	r3, #287	; 0x11f
 800957a:	627b      	str	r3, [r7, #36]	; 0x24
                          |nOUT_EN0_Pin|VSEL0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800957c:	2301      	movs	r3, #1
 800957e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009580:	2300      	movs	r3, #0
 8009582:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009584:	2300      	movs	r3, #0
 8009586:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800958c:	4619      	mov	r1, r3
 800958e:	4848      	ldr	r0, [pc, #288]	; (80096b0 <MX_GPIO_Init+0x2b8>)
 8009590:	f7f7 fc00 	bl	8000d94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_9|GPIO_PIN_10;
 8009594:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 8009598:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800959a:	2303      	movs	r3, #3
 800959c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800959e:	2300      	movs	r3, #0
 80095a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80095a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80095a6:	4619      	mov	r1, r3
 80095a8:	4841      	ldr	r0, [pc, #260]	; (80096b0 <MX_GPIO_Init+0x2b8>)
 80095aa:	f7f7 fbf3 	bl	8000d94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = GP3_Pin|VSEL1_Pin;
 80095ae:	23a0      	movs	r3, #160	; 0xa0
 80095b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80095b2:	2301      	movs	r3, #1
 80095b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095b6:	2300      	movs	r3, #0
 80095b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80095ba:	2300      	movs	r3, #0
 80095bc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80095be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80095c2:	4619      	mov	r1, r3
 80095c4:	483b      	ldr	r0, [pc, #236]	; (80096b4 <MX_GPIO_Init+0x2bc>)
 80095c6:	f7f7 fbe5 	bl	8000d94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GP0_Pin|GP1_Pin|BOOT1_Pin|nSDWP_Pin;
 80095ca:	f240 2307 	movw	r3, #519	; 0x207
 80095ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80095d0:	2300      	movs	r3, #0
 80095d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095d4:	2300      	movs	r3, #0
 80095d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80095d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80095dc:	4619      	mov	r1, r3
 80095de:	4838      	ldr	r0, [pc, #224]	; (80096c0 <MX_GPIO_Init+0x2c8>)
 80095e0:	f7f7 fbd8 	bl	8000d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nOUT_EN1_Pin;
 80095e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80095e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80095ea:	2301      	movs	r3, #1
 80095ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095ee:	2300      	movs	r3, #0
 80095f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80095f2:	2300      	movs	r3, #0
 80095f4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(nOUT_EN1_GPIO_Port, &GPIO_InitStruct);
 80095f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80095fa:	4619      	mov	r1, r3
 80095fc:	482e      	ldr	r0, [pc, #184]	; (80096b8 <MX_GPIO_Init+0x2c0>)
 80095fe:	f7f7 fbc9 	bl	8000d94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG6 PG11 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_11;
 8009602:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8009606:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009608:	2303      	movs	r3, #3
 800960a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800960c:	2300      	movs	r3, #0
 800960e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009610:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009614:	4619      	mov	r1, r3
 8009616:	4829      	ldr	r0, [pc, #164]	; (80096bc <MX_GPIO_Init+0x2c4>)
 8009618:	f7f7 fbbc 	bl	8000d94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = SEL0_Pin|SEL1_Pin;
 800961c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8009620:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009622:	2301      	movs	r3, #1
 8009624:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009626:	2300      	movs	r3, #0
 8009628:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800962a:	2300      	movs	r3, #0
 800962c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800962e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009632:	4619      	mov	r1, r3
 8009634:	4821      	ldr	r0, [pc, #132]	; (80096bc <MX_GPIO_Init+0x2c4>)
 8009636:	f7f7 fbad 	bl	8000d94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 800963a:	2348      	movs	r3, #72	; 0x48
 800963c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800963e:	2303      	movs	r3, #3
 8009640:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009642:	2300      	movs	r3, #0
 8009644:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800964a:	4619      	mov	r1, r3
 800964c:	481d      	ldr	r0, [pc, #116]	; (80096c4 <MX_GPIO_Init+0x2cc>)
 800964e:	f7f7 fba1 	bl	8000d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nSDCD_Pin;
 8009652:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009656:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009658:	2300      	movs	r3, #0
 800965a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800965c:	2300      	movs	r3, #0
 800965e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(nSDCD_GPIO_Port, &GPIO_InitStruct);
 8009660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009664:	4619      	mov	r1, r3
 8009666:	4815      	ldr	r0, [pc, #84]	; (80096bc <MX_GPIO_Init+0x2c4>)
 8009668:	f7f7 fb94 	bl	8000d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800966c:	2320      	movs	r3, #32
 800966e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009670:	2303      	movs	r3, #3
 8009672:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009674:	2300      	movs	r3, #0
 8009676:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800967c:	4619      	mov	r1, r3
 800967e:	4810      	ldr	r0, [pc, #64]	; (80096c0 <MX_GPIO_Init+0x2c8>)
 8009680:	f7f7 fb88 	bl	8000d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT_EN_Pin;
 8009684:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009688:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800968a:	2301      	movs	r3, #1
 800968c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800968e:	2300      	movs	r3, #0
 8009690:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009692:	2300      	movs	r3, #0
 8009694:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BOOT_EN_GPIO_Port, &GPIO_InitStruct);
 8009696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800969a:	4619      	mov	r1, r3
 800969c:	4808      	ldr	r0, [pc, #32]	; (80096c0 <MX_GPIO_Init+0x2c8>)
 800969e:	f7f7 fb79 	bl	8000d94 <HAL_GPIO_Init>

}
 80096a2:	bf00      	nop
 80096a4:	3738      	adds	r7, #56	; 0x38
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
 80096aa:	bf00      	nop
 80096ac:	40023800 	.word	0x40023800
 80096b0:	40020000 	.word	0x40020000
 80096b4:	40020800 	.word	0x40020800
 80096b8:	40021400 	.word	0x40021400
 80096bc:	40021800 	.word	0x40021800
 80096c0:	40020400 	.word	0x40020400
 80096c4:	40020c00 	.word	0x40020c00

080096c8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80096cc:	4b12      	ldr	r3, [pc, #72]	; (8009718 <MX_I2C1_Init+0x50>)
 80096ce:	4a13      	ldr	r2, [pc, #76]	; (800971c <MX_I2C1_Init+0x54>)
 80096d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80096d2:	4b11      	ldr	r3, [pc, #68]	; (8009718 <MX_I2C1_Init+0x50>)
 80096d4:	4a12      	ldr	r2, [pc, #72]	; (8009720 <MX_I2C1_Init+0x58>)
 80096d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80096d8:	4b0f      	ldr	r3, [pc, #60]	; (8009718 <MX_I2C1_Init+0x50>)
 80096da:	2200      	movs	r2, #0
 80096dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80096de:	4b0e      	ldr	r3, [pc, #56]	; (8009718 <MX_I2C1_Init+0x50>)
 80096e0:	2200      	movs	r2, #0
 80096e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80096e4:	4b0c      	ldr	r3, [pc, #48]	; (8009718 <MX_I2C1_Init+0x50>)
 80096e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80096ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80096ec:	4b0a      	ldr	r3, [pc, #40]	; (8009718 <MX_I2C1_Init+0x50>)
 80096ee:	2200      	movs	r2, #0
 80096f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80096f2:	4b09      	ldr	r3, [pc, #36]	; (8009718 <MX_I2C1_Init+0x50>)
 80096f4:	2200      	movs	r2, #0
 80096f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80096f8:	4b07      	ldr	r3, [pc, #28]	; (8009718 <MX_I2C1_Init+0x50>)
 80096fa:	2200      	movs	r2, #0
 80096fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80096fe:	4b06      	ldr	r3, [pc, #24]	; (8009718 <MX_I2C1_Init+0x50>)
 8009700:	2200      	movs	r2, #0
 8009702:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009704:	4804      	ldr	r0, [pc, #16]	; (8009718 <MX_I2C1_Init+0x50>)
 8009706:	f7f7 fd09 	bl	800111c <HAL_I2C_Init>
 800970a:	4603      	mov	r3, r0
 800970c:	2b00      	cmp	r3, #0
 800970e:	d001      	beq.n	8009714 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8009710:	f000 f916 	bl	8009940 <Error_Handler>
  }

}
 8009714:	bf00      	nop
 8009716:	bd80      	pop	{r7, pc}
 8009718:	200008c4 	.word	0x200008c4
 800971c:	40005400 	.word	0x40005400
 8009720:	000186a0 	.word	0x000186a0

08009724 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b08a      	sub	sp, #40	; 0x28
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800972c:	f107 0314 	add.w	r3, r7, #20
 8009730:	2200      	movs	r2, #0
 8009732:	601a      	str	r2, [r3, #0]
 8009734:	605a      	str	r2, [r3, #4]
 8009736:	609a      	str	r2, [r3, #8]
 8009738:	60da      	str	r2, [r3, #12]
 800973a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4a19      	ldr	r2, [pc, #100]	; (80097a8 <HAL_I2C_MspInit+0x84>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d12b      	bne.n	800979e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009746:	2300      	movs	r3, #0
 8009748:	613b      	str	r3, [r7, #16]
 800974a:	4b18      	ldr	r3, [pc, #96]	; (80097ac <HAL_I2C_MspInit+0x88>)
 800974c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800974e:	4a17      	ldr	r2, [pc, #92]	; (80097ac <HAL_I2C_MspInit+0x88>)
 8009750:	f043 0302 	orr.w	r3, r3, #2
 8009754:	6313      	str	r3, [r2, #48]	; 0x30
 8009756:	4b15      	ldr	r3, [pc, #84]	; (80097ac <HAL_I2C_MspInit+0x88>)
 8009758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800975a:	f003 0302 	and.w	r3, r3, #2
 800975e:	613b      	str	r3, [r7, #16]
 8009760:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL1_Pin|SDA1_Pin;
 8009762:	23c0      	movs	r3, #192	; 0xc0
 8009764:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009766:	2312      	movs	r3, #18
 8009768:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800976a:	2301      	movs	r3, #1
 800976c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800976e:	2303      	movs	r3, #3
 8009770:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8009772:	2304      	movs	r3, #4
 8009774:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009776:	f107 0314 	add.w	r3, r7, #20
 800977a:	4619      	mov	r1, r3
 800977c:	480c      	ldr	r0, [pc, #48]	; (80097b0 <HAL_I2C_MspInit+0x8c>)
 800977e:	f7f7 fb09 	bl	8000d94 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009782:	2300      	movs	r3, #0
 8009784:	60fb      	str	r3, [r7, #12]
 8009786:	4b09      	ldr	r3, [pc, #36]	; (80097ac <HAL_I2C_MspInit+0x88>)
 8009788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800978a:	4a08      	ldr	r2, [pc, #32]	; (80097ac <HAL_I2C_MspInit+0x88>)
 800978c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009790:	6413      	str	r3, [r2, #64]	; 0x40
 8009792:	4b06      	ldr	r3, [pc, #24]	; (80097ac <HAL_I2C_MspInit+0x88>)
 8009794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009796:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800979a:	60fb      	str	r3, [r7, #12]
 800979c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800979e:	bf00      	nop
 80097a0:	3728      	adds	r7, #40	; 0x28
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop
 80097a8:	40005400 	.word	0x40005400
 80097ac:	40023800 	.word	0x40023800
 80097b0:	40020400 	.word	0x40020400

080097b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b086      	sub	sp, #24
 80097b8:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80097ba:	f7f6 feb5 	bl	8000528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80097be:	f000 f81d 	bl	80097fc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80097c2:	f7ff fe19 	bl	80093f8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80097c6:	f7ff fa69 	bl	8008c9c <MX_ADC1_Init>
  MX_CRC_Init();
 80097ca:	f7ff fb8f 	bl	8008eec <MX_CRC_Init>
  MX_FSMC_Init();
 80097ce:	f7ff fbeb 	bl	8008fa8 <MX_FSMC_Init>
  MX_I2C1_Init();
 80097d2:	f7ff ff79 	bl	80096c8 <MX_I2C1_Init>
  MX_SDIO_SD_Init();
 80097d6:	f000 f99f 	bl	8009b18 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 80097da:	f000 fa25 	bl	8009c28 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 80097de:	f000 fb85 	bl	8009eec <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80097e2:	f7ff fbb9 	bl	8008f58 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 80097e6:	f000 fbf3 	bl	8009fd0 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  UMD UMDapp;
 80097ea:	1d3b      	adds	r3, r7, #4
 80097ec:	4618      	mov	r0, r3
 80097ee:	f7fe fff5 	bl	80087dc <_ZN3UMDC1Ev>
	  UMDapp.run();
 80097f2:	1d3b      	adds	r3, r7, #4
 80097f4:	4618      	mov	r0, r3
 80097f6:	f7ff f859 	bl	80088ac <_ZN3UMD3runEv>
  }
 80097fa:	e7f6      	b.n	80097ea <main+0x36>

080097fc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b0aa      	sub	sp, #168	; 0xa8
 8009800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009802:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009806:	2234      	movs	r2, #52	; 0x34
 8009808:	2100      	movs	r1, #0
 800980a:	4618      	mov	r0, r3
 800980c:	f001 fb09 	bl	800ae22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009810:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009814:	2200      	movs	r2, #0
 8009816:	601a      	str	r2, [r3, #0]
 8009818:	605a      	str	r2, [r3, #4]
 800981a:	609a      	str	r2, [r3, #8]
 800981c:	60da      	str	r2, [r3, #12]
 800981e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009820:	f107 0308 	add.w	r3, r7, #8
 8009824:	2258      	movs	r2, #88	; 0x58
 8009826:	2100      	movs	r1, #0
 8009828:	4618      	mov	r0, r3
 800982a:	f001 fafa 	bl	800ae22 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800982e:	2300      	movs	r3, #0
 8009830:	607b      	str	r3, [r7, #4]
 8009832:	4b41      	ldr	r3, [pc, #260]	; (8009938 <_Z18SystemClock_Configv+0x13c>)
 8009834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009836:	4a40      	ldr	r2, [pc, #256]	; (8009938 <_Z18SystemClock_Configv+0x13c>)
 8009838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800983c:	6413      	str	r3, [r2, #64]	; 0x40
 800983e:	4b3e      	ldr	r3, [pc, #248]	; (8009938 <_Z18SystemClock_Configv+0x13c>)
 8009840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009846:	607b      	str	r3, [r7, #4]
 8009848:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800984a:	2300      	movs	r3, #0
 800984c:	603b      	str	r3, [r7, #0]
 800984e:	4b3b      	ldr	r3, [pc, #236]	; (800993c <_Z18SystemClock_Configv+0x140>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4a3a      	ldr	r2, [pc, #232]	; (800993c <_Z18SystemClock_Configv+0x140>)
 8009854:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009858:	6013      	str	r3, [r2, #0]
 800985a:	4b38      	ldr	r3, [pc, #224]	; (800993c <_Z18SystemClock_Configv+0x140>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009862:	603b      	str	r3, [r7, #0]
 8009864:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009866:	2301      	movs	r3, #1
 8009868:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800986a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800986e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009870:	2302      	movs	r3, #2
 8009872:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009876:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800987a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 8;
 800987e:	2308      	movs	r3, #8
 8009880:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 200;
 8009884:	23c8      	movs	r3, #200	; 0xc8
 8009886:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800988a:	2302      	movs	r3, #2
 800988c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8009890:	2302      	movs	r3, #2
 8009892:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 8009896:	2302      	movs	r3, #2
 8009898:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800989c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80098a0:	4618      	mov	r0, r3
 80098a2:	f7f9 fc15 	bl	80030d0 <HAL_RCC_OscConfig>
 80098a6:	4603      	mov	r3, r0
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	bf14      	ite	ne
 80098ac:	2301      	movne	r3, #1
 80098ae:	2300      	moveq	r3, #0
 80098b0:	b2db      	uxtb	r3, r3
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d001      	beq.n	80098ba <_Z18SystemClock_Configv+0xbe>
  {
    Error_Handler();
 80098b6:	f000 f843 	bl	8009940 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80098ba:	230f      	movs	r3, #15
 80098bc:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80098be:	2302      	movs	r3, #2
 80098c0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80098c2:	2300      	movs	r3, #0
 80098c4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80098c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80098cc:	2300      	movs	r3, #0
 80098ce:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80098d0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80098d4:	2103      	movs	r1, #3
 80098d6:	4618      	mov	r0, r3
 80098d8:	f7f8 ff80 	bl	80027dc <HAL_RCC_ClockConfig>
 80098dc:	4603      	mov	r3, r0
 80098de:	2b00      	cmp	r3, #0
 80098e0:	bf14      	ite	ne
 80098e2:	2301      	movne	r3, #1
 80098e4:	2300      	moveq	r3, #0
 80098e6:	b2db      	uxtb	r3, r3
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d001      	beq.n	80098f0 <_Z18SystemClock_Configv+0xf4>
  {
    Error_Handler();
 80098ec:	f000 f828 	bl	8009940 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80098f0:	2360      	movs	r3, #96	; 0x60
 80098f2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80098f4:	23c0      	movs	r3, #192	; 0xc0
 80098f6:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 80098f8:	2308      	movs	r3, #8
 80098fa:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80098fc:	2302      	movs	r3, #2
 80098fe:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 4;
 8009900:	2304      	movs	r3, #4
 8009902:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLI2SQ;
 8009904:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009908:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800990a:	2300      	movs	r3, #0
 800990c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 800990e:	2300      	movs	r3, #0
 8009910:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009912:	f107 0308 	add.w	r3, r7, #8
 8009916:	4618      	mov	r0, r3
 8009918:	f7f9 f94e 	bl	8002bb8 <HAL_RCCEx_PeriphCLKConfig>
 800991c:	4603      	mov	r3, r0
 800991e:	2b00      	cmp	r3, #0
 8009920:	bf14      	ite	ne
 8009922:	2301      	movne	r3, #1
 8009924:	2300      	moveq	r3, #0
 8009926:	b2db      	uxtb	r3, r3
 8009928:	2b00      	cmp	r3, #0
 800992a:	d001      	beq.n	8009930 <_Z18SystemClock_Configv+0x134>
  {
    Error_Handler();
 800992c:	f000 f808 	bl	8009940 <Error_Handler>
  }
}
 8009930:	bf00      	nop
 8009932:	37a8      	adds	r7, #168	; 0xa8
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}
 8009938:	40023800 	.word	0x40023800
 800993c:	40007000 	.word	0x40007000

08009940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009940:	b480      	push	{r7}
 8009942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8009944:	bf00      	nop
 8009946:	46bd      	mov	sp, r7
 8009948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994c:	4770      	bx	lr
	...

08009950 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b082      	sub	sp, #8
 8009954:	af00      	add	r7, sp, #0
 8009956:	4603      	mov	r3, r0
 8009958:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800995a:	4b0b      	ldr	r3, [pc, #44]	; (8009988 <SD_CheckStatus+0x38>)
 800995c:	2201      	movs	r2, #1
 800995e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009960:	f7ff fa94 	bl	8008e8c <BSP_SD_GetCardState>
 8009964:	4603      	mov	r3, r0
 8009966:	2b00      	cmp	r3, #0
 8009968:	d107      	bne.n	800997a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800996a:	4b07      	ldr	r3, [pc, #28]	; (8009988 <SD_CheckStatus+0x38>)
 800996c:	781b      	ldrb	r3, [r3, #0]
 800996e:	b2db      	uxtb	r3, r3
 8009970:	f023 0301 	bic.w	r3, r3, #1
 8009974:	b2da      	uxtb	r2, r3
 8009976:	4b04      	ldr	r3, [pc, #16]	; (8009988 <SD_CheckStatus+0x38>)
 8009978:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800997a:	4b03      	ldr	r3, [pc, #12]	; (8009988 <SD_CheckStatus+0x38>)
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	b2db      	uxtb	r3, r3
}
 8009980:	4618      	mov	r0, r3
 8009982:	3708      	adds	r7, #8
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}
 8009988:	20000117 	.word	0x20000117

0800998c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b082      	sub	sp, #8
 8009990:	af00      	add	r7, sp, #0
 8009992:	4603      	mov	r3, r0
 8009994:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 8009996:	4b0b      	ldr	r3, [pc, #44]	; (80099c4 <SD_initialize+0x38>)
 8009998:	2201      	movs	r2, #1
 800999a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800999c:	f7ff fa14 	bl	8008dc8 <BSP_SD_Init>
 80099a0:	4603      	mov	r3, r0
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d107      	bne.n	80099b6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80099a6:	79fb      	ldrb	r3, [r7, #7]
 80099a8:	4618      	mov	r0, r3
 80099aa:	f7ff ffd1 	bl	8009950 <SD_CheckStatus>
 80099ae:	4603      	mov	r3, r0
 80099b0:	461a      	mov	r2, r3
 80099b2:	4b04      	ldr	r3, [pc, #16]	; (80099c4 <SD_initialize+0x38>)
 80099b4:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 80099b6:	4b03      	ldr	r3, [pc, #12]	; (80099c4 <SD_initialize+0x38>)
 80099b8:	781b      	ldrb	r3, [r3, #0]
 80099ba:	b2db      	uxtb	r3, r3
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3708      	adds	r7, #8
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	20000117 	.word	0x20000117

080099c8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b082      	sub	sp, #8
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	4603      	mov	r3, r0
 80099d0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80099d2:	79fb      	ldrb	r3, [r7, #7]
 80099d4:	4618      	mov	r0, r3
 80099d6:	f7ff ffbb 	bl	8009950 <SD_CheckStatus>
 80099da:	4603      	mov	r3, r0
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3708      	adds	r7, #8
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b086      	sub	sp, #24
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	60b9      	str	r1, [r7, #8]
 80099ec:	607a      	str	r2, [r7, #4]
 80099ee:	603b      	str	r3, [r7, #0]
 80099f0:	4603      	mov	r3, r0
 80099f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80099f4:	2301      	movs	r3, #1
 80099f6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80099f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80099fc:	683a      	ldr	r2, [r7, #0]
 80099fe:	6879      	ldr	r1, [r7, #4]
 8009a00:	68b8      	ldr	r0, [r7, #8]
 8009a02:	f7ff fa07 	bl	8008e14 <BSP_SD_ReadBlocks>
 8009a06:	4603      	mov	r3, r0
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d107      	bne.n	8009a1c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8009a0c:	bf00      	nop
 8009a0e:	f7ff fa3d 	bl	8008e8c <BSP_SD_GetCardState>
 8009a12:	4603      	mov	r3, r0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d1fa      	bne.n	8009a0e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8009a1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3718      	adds	r7, #24
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}

08009a26 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009a26:	b580      	push	{r7, lr}
 8009a28:	b086      	sub	sp, #24
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	60b9      	str	r1, [r7, #8]
 8009a2e:	607a      	str	r2, [r7, #4]
 8009a30:	603b      	str	r3, [r7, #0]
 8009a32:	4603      	mov	r3, r0
 8009a34:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009a36:	2301      	movs	r3, #1
 8009a38:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8009a3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a3e:	683a      	ldr	r2, [r7, #0]
 8009a40:	6879      	ldr	r1, [r7, #4]
 8009a42:	68b8      	ldr	r0, [r7, #8]
 8009a44:	f7ff fa04 	bl	8008e50 <BSP_SD_WriteBlocks>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d107      	bne.n	8009a5e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8009a4e:	bf00      	nop
 8009a50:	f7ff fa1c 	bl	8008e8c <BSP_SD_GetCardState>
 8009a54:	4603      	mov	r3, r0
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d1fa      	bne.n	8009a50 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8009a5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3718      	adds	r7, #24
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b08c      	sub	sp, #48	; 0x30
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	4603      	mov	r3, r0
 8009a70:	603a      	str	r2, [r7, #0]
 8009a72:	71fb      	strb	r3, [r7, #7]
 8009a74:	460b      	mov	r3, r1
 8009a76:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009a7e:	4b25      	ldr	r3, [pc, #148]	; (8009b14 <SD_ioctl+0xac>)
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	b2db      	uxtb	r3, r3
 8009a84:	f003 0301 	and.w	r3, r3, #1
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d001      	beq.n	8009a90 <SD_ioctl+0x28>
 8009a8c:	2303      	movs	r3, #3
 8009a8e:	e03c      	b.n	8009b0a <SD_ioctl+0xa2>

  switch (cmd)
 8009a90:	79bb      	ldrb	r3, [r7, #6]
 8009a92:	2b03      	cmp	r3, #3
 8009a94:	d834      	bhi.n	8009b00 <SD_ioctl+0x98>
 8009a96:	a201      	add	r2, pc, #4	; (adr r2, 8009a9c <SD_ioctl+0x34>)
 8009a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a9c:	08009aad 	.word	0x08009aad
 8009aa0:	08009ab5 	.word	0x08009ab5
 8009aa4:	08009acd 	.word	0x08009acd
 8009aa8:	08009ae7 	.word	0x08009ae7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009aac:	2300      	movs	r3, #0
 8009aae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009ab2:	e028      	b.n	8009b06 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009ab4:	f107 030c 	add.w	r3, r7, #12
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f7ff f9f7 	bl	8008eac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009aca:	e01c      	b.n	8009b06 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009acc:	f107 030c 	add.w	r3, r7, #12
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f7ff f9eb 	bl	8008eac <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad8:	b29a      	uxth	r2, r3
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009ae4:	e00f      	b.n	8009b06 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009ae6:	f107 030c 	add.w	r3, r7, #12
 8009aea:	4618      	mov	r0, r3
 8009aec:	f7ff f9de 	bl	8008eac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af2:	0a5a      	lsrs	r2, r3, #9
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009af8:	2300      	movs	r3, #0
 8009afa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009afe:	e002      	b.n	8009b06 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009b00:	2304      	movs	r3, #4
 8009b02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009b06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3730      	adds	r7, #48	; 0x30
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop
 8009b14:	20000117 	.word	0x20000117

08009b18 <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 8009b1c:	4b0c      	ldr	r3, [pc, #48]	; (8009b50 <MX_SDIO_SD_Init+0x38>)
 8009b1e:	4a0d      	ldr	r2, [pc, #52]	; (8009b54 <MX_SDIO_SD_Init+0x3c>)
 8009b20:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8009b22:	4b0b      	ldr	r3, [pc, #44]	; (8009b50 <MX_SDIO_SD_Init+0x38>)
 8009b24:	2200      	movs	r2, #0
 8009b26:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8009b28:	4b09      	ldr	r3, [pc, #36]	; (8009b50 <MX_SDIO_SD_Init+0x38>)
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8009b2e:	4b08      	ldr	r3, [pc, #32]	; (8009b50 <MX_SDIO_SD_Init+0x38>)
 8009b30:	2200      	movs	r2, #0
 8009b32:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8009b34:	4b06      	ldr	r3, [pc, #24]	; (8009b50 <MX_SDIO_SD_Init+0x38>)
 8009b36:	2200      	movs	r2, #0
 8009b38:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8009b3a:	4b05      	ldr	r3, [pc, #20]	; (8009b50 <MX_SDIO_SD_Init+0x38>)
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8009b40:	4b03      	ldr	r3, [pc, #12]	; (8009b50 <MX_SDIO_SD_Init+0x38>)
 8009b42:	2200      	movs	r2, #0
 8009b44:	619a      	str	r2, [r3, #24]

}
 8009b46:	bf00      	nop
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr
 8009b50:	20000918 	.word	0x20000918
 8009b54:	40012c00 	.word	0x40012c00

08009b58 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b08a      	sub	sp, #40	; 0x28
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b60:	f107 0314 	add.w	r3, r7, #20
 8009b64:	2200      	movs	r2, #0
 8009b66:	601a      	str	r2, [r3, #0]
 8009b68:	605a      	str	r2, [r3, #4]
 8009b6a:	609a      	str	r2, [r3, #8]
 8009b6c:	60da      	str	r2, [r3, #12]
 8009b6e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4a28      	ldr	r2, [pc, #160]	; (8009c18 <HAL_SD_MspInit+0xc0>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d14a      	bne.n	8009c10 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	613b      	str	r3, [r7, #16]
 8009b7e:	4b27      	ldr	r3, [pc, #156]	; (8009c1c <HAL_SD_MspInit+0xc4>)
 8009b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b82:	4a26      	ldr	r2, [pc, #152]	; (8009c1c <HAL_SD_MspInit+0xc4>)
 8009b84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009b88:	6453      	str	r3, [r2, #68]	; 0x44
 8009b8a:	4b24      	ldr	r3, [pc, #144]	; (8009c1c <HAL_SD_MspInit+0xc4>)
 8009b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b92:	613b      	str	r3, [r7, #16]
 8009b94:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009b96:	2300      	movs	r3, #0
 8009b98:	60fb      	str	r3, [r7, #12]
 8009b9a:	4b20      	ldr	r3, [pc, #128]	; (8009c1c <HAL_SD_MspInit+0xc4>)
 8009b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b9e:	4a1f      	ldr	r2, [pc, #124]	; (8009c1c <HAL_SD_MspInit+0xc4>)
 8009ba0:	f043 0304 	orr.w	r3, r3, #4
 8009ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8009ba6:	4b1d      	ldr	r3, [pc, #116]	; (8009c1c <HAL_SD_MspInit+0xc4>)
 8009ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009baa:	f003 0304 	and.w	r3, r3, #4
 8009bae:	60fb      	str	r3, [r7, #12]
 8009bb0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	60bb      	str	r3, [r7, #8]
 8009bb6:	4b19      	ldr	r3, [pc, #100]	; (8009c1c <HAL_SD_MspInit+0xc4>)
 8009bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bba:	4a18      	ldr	r2, [pc, #96]	; (8009c1c <HAL_SD_MspInit+0xc4>)
 8009bbc:	f043 0308 	orr.w	r3, r3, #8
 8009bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8009bc2:	4b16      	ldr	r3, [pc, #88]	; (8009c1c <HAL_SD_MspInit+0xc4>)
 8009bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bc6:	f003 0308 	and.w	r3, r3, #8
 8009bca:	60bb      	str	r3, [r7, #8]
 8009bcc:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8009bce:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8009bd2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009bd4:	2302      	movs	r3, #2
 8009bd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009bdc:	2303      	movs	r3, #3
 8009bde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8009be0:	230c      	movs	r3, #12
 8009be2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009be4:	f107 0314 	add.w	r3, r7, #20
 8009be8:	4619      	mov	r1, r3
 8009bea:	480d      	ldr	r0, [pc, #52]	; (8009c20 <HAL_SD_MspInit+0xc8>)
 8009bec:	f7f7 f8d2 	bl	8000d94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8009bf0:	2304      	movs	r3, #4
 8009bf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009bf4:	2302      	movs	r3, #2
 8009bf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009bfc:	2303      	movs	r3, #3
 8009bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8009c00:	230c      	movs	r3, #12
 8009c02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009c04:	f107 0314 	add.w	r3, r7, #20
 8009c08:	4619      	mov	r1, r3
 8009c0a:	4806      	ldr	r0, [pc, #24]	; (8009c24 <HAL_SD_MspInit+0xcc>)
 8009c0c:	f7f7 f8c2 	bl	8000d94 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8009c10:	bf00      	nop
 8009c12:	3728      	adds	r7, #40	; 0x28
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	40012c00 	.word	0x40012c00
 8009c1c:	40023800 	.word	0x40023800
 8009c20:	40020800 	.word	0x40020800
 8009c24:	40020c00 	.word	0x40020c00

08009c28 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8009c2c:	4b17      	ldr	r3, [pc, #92]	; (8009c8c <MX_SPI2_Init+0x64>)
 8009c2e:	4a18      	ldr	r2, [pc, #96]	; (8009c90 <MX_SPI2_Init+0x68>)
 8009c30:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8009c32:	4b16      	ldr	r3, [pc, #88]	; (8009c8c <MX_SPI2_Init+0x64>)
 8009c34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009c38:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8009c3a:	4b14      	ldr	r3, [pc, #80]	; (8009c8c <MX_SPI2_Init+0x64>)
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8009c40:	4b12      	ldr	r3, [pc, #72]	; (8009c8c <MX_SPI2_Init+0x64>)
 8009c42:	2200      	movs	r2, #0
 8009c44:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009c46:	4b11      	ldr	r3, [pc, #68]	; (8009c8c <MX_SPI2_Init+0x64>)
 8009c48:	2200      	movs	r2, #0
 8009c4a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009c4c:	4b0f      	ldr	r3, [pc, #60]	; (8009c8c <MX_SPI2_Init+0x64>)
 8009c4e:	2200      	movs	r2, #0
 8009c50:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8009c52:	4b0e      	ldr	r3, [pc, #56]	; (8009c8c <MX_SPI2_Init+0x64>)
 8009c54:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009c58:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009c5a:	4b0c      	ldr	r3, [pc, #48]	; (8009c8c <MX_SPI2_Init+0x64>)
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009c60:	4b0a      	ldr	r3, [pc, #40]	; (8009c8c <MX_SPI2_Init+0x64>)
 8009c62:	2200      	movs	r2, #0
 8009c64:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8009c66:	4b09      	ldr	r3, [pc, #36]	; (8009c8c <MX_SPI2_Init+0x64>)
 8009c68:	2200      	movs	r2, #0
 8009c6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009c6c:	4b07      	ldr	r3, [pc, #28]	; (8009c8c <MX_SPI2_Init+0x64>)
 8009c6e:	2200      	movs	r2, #0
 8009c70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8009c72:	4b06      	ldr	r3, [pc, #24]	; (8009c8c <MX_SPI2_Init+0x64>)
 8009c74:	220a      	movs	r2, #10
 8009c76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8009c78:	4804      	ldr	r0, [pc, #16]	; (8009c8c <MX_SPI2_Init+0x64>)
 8009c7a:	f7fa fde4 	bl	8004846 <HAL_SPI_Init>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d001      	beq.n	8009c88 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8009c84:	f7ff fe5c 	bl	8009940 <Error_Handler>
  }

}
 8009c88:	bf00      	nop
 8009c8a:	bd80      	pop	{r7, pc}
 8009c8c:	2000099c 	.word	0x2000099c
 8009c90:	40003800 	.word	0x40003800

08009c94 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b08a      	sub	sp, #40	; 0x28
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c9c:	f107 0314 	add.w	r3, r7, #20
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	601a      	str	r2, [r3, #0]
 8009ca4:	605a      	str	r2, [r3, #4]
 8009ca6:	609a      	str	r2, [r3, #8]
 8009ca8:	60da      	str	r2, [r3, #12]
 8009caa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4a19      	ldr	r2, [pc, #100]	; (8009d18 <HAL_SPI_MspInit+0x84>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d12c      	bne.n	8009d10 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	613b      	str	r3, [r7, #16]
 8009cba:	4b18      	ldr	r3, [pc, #96]	; (8009d1c <HAL_SPI_MspInit+0x88>)
 8009cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cbe:	4a17      	ldr	r2, [pc, #92]	; (8009d1c <HAL_SPI_MspInit+0x88>)
 8009cc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8009cc6:	4b15      	ldr	r3, [pc, #84]	; (8009d1c <HAL_SPI_MspInit+0x88>)
 8009cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009cce:	613b      	str	r3, [r7, #16]
 8009cd0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	60fb      	str	r3, [r7, #12]
 8009cd6:	4b11      	ldr	r3, [pc, #68]	; (8009d1c <HAL_SPI_MspInit+0x88>)
 8009cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cda:	4a10      	ldr	r2, [pc, #64]	; (8009d1c <HAL_SPI_MspInit+0x88>)
 8009cdc:	f043 0302 	orr.w	r3, r3, #2
 8009ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8009ce2:	4b0e      	ldr	r3, [pc, #56]	; (8009d1c <HAL_SPI_MspInit+0x88>)
 8009ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ce6:	f003 0302 	and.w	r3, r3, #2
 8009cea:	60fb      	str	r3, [r7, #12]
 8009cec:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8009cee:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8009cf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009cf4:	2302      	movs	r3, #2
 8009cf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009cfc:	2303      	movs	r3, #3
 8009cfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009d00:	2305      	movs	r3, #5
 8009d02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009d04:	f107 0314 	add.w	r3, r7, #20
 8009d08:	4619      	mov	r1, r3
 8009d0a:	4805      	ldr	r0, [pc, #20]	; (8009d20 <HAL_SPI_MspInit+0x8c>)
 8009d0c:	f7f7 f842 	bl	8000d94 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8009d10:	bf00      	nop
 8009d12:	3728      	adds	r7, #40	; 0x28
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}
 8009d18:	40003800 	.word	0x40003800
 8009d1c:	40023800 	.word	0x40023800
 8009d20:	40020400 	.word	0x40020400

08009d24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b083      	sub	sp, #12
 8009d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	607b      	str	r3, [r7, #4]
 8009d2e:	4b10      	ldr	r3, [pc, #64]	; (8009d70 <HAL_MspInit+0x4c>)
 8009d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d32:	4a0f      	ldr	r2, [pc, #60]	; (8009d70 <HAL_MspInit+0x4c>)
 8009d34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009d38:	6453      	str	r3, [r2, #68]	; 0x44
 8009d3a:	4b0d      	ldr	r3, [pc, #52]	; (8009d70 <HAL_MspInit+0x4c>)
 8009d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d42:	607b      	str	r3, [r7, #4]
 8009d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009d46:	2300      	movs	r3, #0
 8009d48:	603b      	str	r3, [r7, #0]
 8009d4a:	4b09      	ldr	r3, [pc, #36]	; (8009d70 <HAL_MspInit+0x4c>)
 8009d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d4e:	4a08      	ldr	r2, [pc, #32]	; (8009d70 <HAL_MspInit+0x4c>)
 8009d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d54:	6413      	str	r3, [r2, #64]	; 0x40
 8009d56:	4b06      	ldr	r3, [pc, #24]	; (8009d70 <HAL_MspInit+0x4c>)
 8009d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d5e:	603b      	str	r3, [r7, #0]
 8009d60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009d62:	bf00      	nop
 8009d64:	370c      	adds	r7, #12
 8009d66:	46bd      	mov	sp, r7
 8009d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6c:	4770      	bx	lr
 8009d6e:	bf00      	nop
 8009d70:	40023800 	.word	0x40023800

08009d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009d74:	b480      	push	{r7}
 8009d76:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009d78:	bf00      	nop
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr

08009d82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009d82:	b480      	push	{r7}
 8009d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009d86:	e7fe      	b.n	8009d86 <HardFault_Handler+0x4>

08009d88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009d8c:	e7fe      	b.n	8009d8c <MemManage_Handler+0x4>

08009d8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009d8e:	b480      	push	{r7}
 8009d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009d92:	e7fe      	b.n	8009d92 <BusFault_Handler+0x4>

08009d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009d94:	b480      	push	{r7}
 8009d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009d98:	e7fe      	b.n	8009d98 <UsageFault_Handler+0x4>

08009d9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009d9a:	b480      	push	{r7}
 8009d9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009d9e:	bf00      	nop
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr

08009da8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009da8:	b480      	push	{r7}
 8009daa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009dac:	bf00      	nop
 8009dae:	46bd      	mov	sp, r7
 8009db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db4:	4770      	bx	lr

08009db6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009db6:	b480      	push	{r7}
 8009db8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009dba:	bf00      	nop
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr

08009dc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009dc8:	f7f6 fc00 	bl	80005cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009dcc:	bf00      	nop
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8009dd4:	4802      	ldr	r0, [pc, #8]	; (8009de0 <OTG_FS_IRQHandler+0x10>)
 8009dd6:	f7f7 fc76 	bl	80016c6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8009dda:	bf00      	nop
 8009ddc:	bd80      	pop	{r7, pc}
 8009dde:	bf00      	nop
 8009de0:	200016dc 	.word	0x200016dc

08009de4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8009de4:	b480      	push	{r7}
 8009de6:	af00      	add	r7, sp, #0
	return 1;
 8009de8:	2301      	movs	r3, #1
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr

08009df4 <_kill>:

int _kill(int pid, int sig)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b082      	sub	sp, #8
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8009dfe:	f000 ffcb 	bl	800ad98 <__errno>
 8009e02:	4602      	mov	r2, r0
 8009e04:	2316      	movs	r3, #22
 8009e06:	6013      	str	r3, [r2, #0]
	return -1;
 8009e08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3708      	adds	r7, #8
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <_exit>:

void _exit (int status)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b082      	sub	sp, #8
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8009e1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f7ff ffe7 	bl	8009df4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8009e26:	e7fe      	b.n	8009e26 <_exit+0x12>

08009e28 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8009e30:	4b11      	ldr	r3, [pc, #68]	; (8009e78 <_sbrk+0x50>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d102      	bne.n	8009e3e <_sbrk+0x16>
		heap_end = &end;
 8009e38:	4b0f      	ldr	r3, [pc, #60]	; (8009e78 <_sbrk+0x50>)
 8009e3a:	4a10      	ldr	r2, [pc, #64]	; (8009e7c <_sbrk+0x54>)
 8009e3c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8009e3e:	4b0e      	ldr	r3, [pc, #56]	; (8009e78 <_sbrk+0x50>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8009e44:	4b0c      	ldr	r3, [pc, #48]	; (8009e78 <_sbrk+0x50>)
 8009e46:	681a      	ldr	r2, [r3, #0]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	4413      	add	r3, r2
 8009e4c:	466a      	mov	r2, sp
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d907      	bls.n	8009e62 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8009e52:	f000 ffa1 	bl	800ad98 <__errno>
 8009e56:	4602      	mov	r2, r0
 8009e58:	230c      	movs	r3, #12
 8009e5a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8009e5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e60:	e006      	b.n	8009e70 <_sbrk+0x48>
	}

	heap_end += incr;
 8009e62:	4b05      	ldr	r3, [pc, #20]	; (8009e78 <_sbrk+0x50>)
 8009e64:	681a      	ldr	r2, [r3, #0]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	4413      	add	r3, r2
 8009e6a:	4a03      	ldr	r2, [pc, #12]	; (8009e78 <_sbrk+0x50>)
 8009e6c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3710      	adds	r7, #16
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	20000230 	.word	0x20000230
 8009e7c:	20001ce8 	.word	0x20001ce8

08009e80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009e80:	b480      	push	{r7}
 8009e82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009e84:	4b16      	ldr	r3, [pc, #88]	; (8009ee0 <SystemInit+0x60>)
 8009e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e8a:	4a15      	ldr	r2, [pc, #84]	; (8009ee0 <SystemInit+0x60>)
 8009e8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009e90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8009e94:	4b13      	ldr	r3, [pc, #76]	; (8009ee4 <SystemInit+0x64>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	4a12      	ldr	r2, [pc, #72]	; (8009ee4 <SystemInit+0x64>)
 8009e9a:	f043 0301 	orr.w	r3, r3, #1
 8009e9e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009ea0:	4b10      	ldr	r3, [pc, #64]	; (8009ee4 <SystemInit+0x64>)
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8009ea6:	4b0f      	ldr	r3, [pc, #60]	; (8009ee4 <SystemInit+0x64>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4a0e      	ldr	r2, [pc, #56]	; (8009ee4 <SystemInit+0x64>)
 8009eac:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8009eb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009eb4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8009eb6:	4b0b      	ldr	r3, [pc, #44]	; (8009ee4 <SystemInit+0x64>)
 8009eb8:	4a0b      	ldr	r2, [pc, #44]	; (8009ee8 <SystemInit+0x68>)
 8009eba:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8009ebc:	4b09      	ldr	r3, [pc, #36]	; (8009ee4 <SystemInit+0x64>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a08      	ldr	r2, [pc, #32]	; (8009ee4 <SystemInit+0x64>)
 8009ec2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009ec6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8009ec8:	4b06      	ldr	r3, [pc, #24]	; (8009ee4 <SystemInit+0x64>)
 8009eca:	2200      	movs	r2, #0
 8009ecc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009ece:	4b04      	ldr	r3, [pc, #16]	; (8009ee0 <SystemInit+0x60>)
 8009ed0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009ed4:	609a      	str	r2, [r3, #8]
#endif
}
 8009ed6:	bf00      	nop
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ede:	4770      	bx	lr
 8009ee0:	e000ed00 	.word	0xe000ed00
 8009ee4:	40023800 	.word	0x40023800
 8009ee8:	24003010 	.word	0x24003010

08009eec <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8009ef0:	4b11      	ldr	r3, [pc, #68]	; (8009f38 <MX_USART3_UART_Init+0x4c>)
 8009ef2:	4a12      	ldr	r2, [pc, #72]	; (8009f3c <MX_USART3_UART_Init+0x50>)
 8009ef4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8009ef6:	4b10      	ldr	r3, [pc, #64]	; (8009f38 <MX_USART3_UART_Init+0x4c>)
 8009ef8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009efc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8009efe:	4b0e      	ldr	r3, [pc, #56]	; (8009f38 <MX_USART3_UART_Init+0x4c>)
 8009f00:	2200      	movs	r2, #0
 8009f02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8009f04:	4b0c      	ldr	r3, [pc, #48]	; (8009f38 <MX_USART3_UART_Init+0x4c>)
 8009f06:	2200      	movs	r2, #0
 8009f08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8009f0a:	4b0b      	ldr	r3, [pc, #44]	; (8009f38 <MX_USART3_UART_Init+0x4c>)
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8009f10:	4b09      	ldr	r3, [pc, #36]	; (8009f38 <MX_USART3_UART_Init+0x4c>)
 8009f12:	220c      	movs	r2, #12
 8009f14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009f16:	4b08      	ldr	r3, [pc, #32]	; (8009f38 <MX_USART3_UART_Init+0x4c>)
 8009f18:	2200      	movs	r2, #0
 8009f1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8009f1c:	4b06      	ldr	r3, [pc, #24]	; (8009f38 <MX_USART3_UART_Init+0x4c>)
 8009f1e:	2200      	movs	r2, #0
 8009f20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8009f22:	4805      	ldr	r0, [pc, #20]	; (8009f38 <MX_USART3_UART_Init+0x4c>)
 8009f24:	f7fa fd37 	bl	8004996 <HAL_UART_Init>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d001      	beq.n	8009f32 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8009f2e:	f7ff fd07 	bl	8009940 <Error_Handler>
  }

}
 8009f32:	bf00      	nop
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	bf00      	nop
 8009f38:	200009f4 	.word	0x200009f4
 8009f3c:	40004800 	.word	0x40004800

08009f40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b08a      	sub	sp, #40	; 0x28
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f48:	f107 0314 	add.w	r3, r7, #20
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	601a      	str	r2, [r3, #0]
 8009f50:	605a      	str	r2, [r3, #4]
 8009f52:	609a      	str	r2, [r3, #8]
 8009f54:	60da      	str	r2, [r3, #12]
 8009f56:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a19      	ldr	r2, [pc, #100]	; (8009fc4 <HAL_UART_MspInit+0x84>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d12c      	bne.n	8009fbc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8009f62:	2300      	movs	r3, #0
 8009f64:	613b      	str	r3, [r7, #16]
 8009f66:	4b18      	ldr	r3, [pc, #96]	; (8009fc8 <HAL_UART_MspInit+0x88>)
 8009f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f6a:	4a17      	ldr	r2, [pc, #92]	; (8009fc8 <HAL_UART_MspInit+0x88>)
 8009f6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009f70:	6413      	str	r3, [r2, #64]	; 0x40
 8009f72:	4b15      	ldr	r3, [pc, #84]	; (8009fc8 <HAL_UART_MspInit+0x88>)
 8009f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f7a:	613b      	str	r3, [r7, #16]
 8009f7c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009f7e:	2300      	movs	r3, #0
 8009f80:	60fb      	str	r3, [r7, #12]
 8009f82:	4b11      	ldr	r3, [pc, #68]	; (8009fc8 <HAL_UART_MspInit+0x88>)
 8009f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f86:	4a10      	ldr	r2, [pc, #64]	; (8009fc8 <HAL_UART_MspInit+0x88>)
 8009f88:	f043 0302 	orr.w	r3, r3, #2
 8009f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8009f8e:	4b0e      	ldr	r3, [pc, #56]	; (8009fc8 <HAL_UART_MspInit+0x88>)
 8009f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f92:	f003 0302 	and.w	r3, r3, #2
 8009f96:	60fb      	str	r3, [r7, #12]
 8009f98:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8009f9a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009fa0:	2302      	movs	r3, #2
 8009fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009fa8:	2303      	movs	r3, #3
 8009faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8009fac:	2307      	movs	r3, #7
 8009fae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009fb0:	f107 0314 	add.w	r3, r7, #20
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	4805      	ldr	r0, [pc, #20]	; (8009fcc <HAL_UART_MspInit+0x8c>)
 8009fb8:	f7f6 feec 	bl	8000d94 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8009fbc:	bf00      	nop
 8009fbe:	3728      	adds	r7, #40	; 0x28
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}
 8009fc4:	40004800 	.word	0x40004800
 8009fc8:	40023800 	.word	0x40023800
 8009fcc:	40020400 	.word	0x40020400

08009fd0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	4912      	ldr	r1, [pc, #72]	; (800a020 <MX_USB_DEVICE_Init+0x50>)
 8009fd8:	4812      	ldr	r0, [pc, #72]	; (800a024 <MX_USB_DEVICE_Init+0x54>)
 8009fda:	f7fd fb43 	bl	8007664 <USBD_Init>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d001      	beq.n	8009fe8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009fe4:	f7ff fcac 	bl	8009940 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009fe8:	490f      	ldr	r1, [pc, #60]	; (800a028 <MX_USB_DEVICE_Init+0x58>)
 8009fea:	480e      	ldr	r0, [pc, #56]	; (800a024 <MX_USB_DEVICE_Init+0x54>)
 8009fec:	f7fd fb65 	bl	80076ba <USBD_RegisterClass>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d001      	beq.n	8009ffa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009ff6:	f7ff fca3 	bl	8009940 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009ffa:	490c      	ldr	r1, [pc, #48]	; (800a02c <MX_USB_DEVICE_Init+0x5c>)
 8009ffc:	4809      	ldr	r0, [pc, #36]	; (800a024 <MX_USB_DEVICE_Init+0x54>)
 8009ffe:	f7fd fa93 	bl	8007528 <USBD_CDC_RegisterInterface>
 800a002:	4603      	mov	r3, r0
 800a004:	2b00      	cmp	r3, #0
 800a006:	d001      	beq.n	800a00c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a008:	f7ff fc9a 	bl	8009940 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a00c:	4805      	ldr	r0, [pc, #20]	; (800a024 <MX_USB_DEVICE_Init+0x54>)
 800a00e:	f7fd fb6e 	bl	80076ee <USBD_Start>
 800a012:	4603      	mov	r3, r0
 800a014:	2b00      	cmp	r3, #0
 800a016:	d001      	beq.n	800a01c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a018:	f7ff fc92 	bl	8009940 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a01c:	bf00      	nop
 800a01e:	bd80      	pop	{r7, pc}
 800a020:	20000134 	.word	0x20000134
 800a024:	20000a34 	.word	0x20000a34
 800a028:	20000014 	.word	0x20000014
 800a02c:	20000124 	.word	0x20000124

0800a030 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b082      	sub	sp, #8
 800a034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	int i;
	for(i=0; i<(USB_BUFFER_SIZE/2); i++){
 800a036:	2300      	movs	r3, #0
 800a038:	607b      	str	r3, [r7, #4]
 800a03a:	e007      	b.n	800a04c <CDC_Init_FS+0x1c>
		usbbuf.data.word[i] = 0;
 800a03c:	4a14      	ldr	r2, [pc, #80]	; (800a090 <CDC_Init_FS+0x60>)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2100      	movs	r1, #0
 800a042:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(i=0; i<(USB_BUFFER_SIZE/2); i++){
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	3301      	adds	r3, #1
 800a04a:	607b      	str	r3, [r7, #4]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a052:	dbf3      	blt.n	800a03c <CDC_Init_FS+0xc>
	}
	usbbuf.ip = 0;
 800a054:	4b0e      	ldr	r3, [pc, #56]	; (800a090 <CDC_Init_FS+0x60>)
 800a056:	2200      	movs	r2, #0
 800a058:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
	usbbuf.op = 0;
 800a05c:	4b0c      	ldr	r3, [pc, #48]	; (800a090 <CDC_Init_FS+0x60>)
 800a05e:	2200      	movs	r2, #0
 800a060:	f8a3 2802 	strh.w	r2, [r3, #2050]	; 0x802
	usbbuf.status = USB_RX_EMPTY;
 800a064:	4b0a      	ldr	r3, [pc, #40]	; (800a090 <CDC_Init_FS+0x60>)
 800a066:	2200      	movs	r2, #0
 800a068:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
	usbbuf.packets = 0;
 800a06c:	4b08      	ldr	r3, [pc, #32]	; (800a090 <CDC_Init_FS+0x60>)
 800a06e:	2200      	movs	r2, #0
 800a070:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808

  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a074:	2200      	movs	r2, #0
 800a076:	4907      	ldr	r1, [pc, #28]	; (800a094 <CDC_Init_FS+0x64>)
 800a078:	4807      	ldr	r0, [pc, #28]	; (800a098 <CDC_Init_FS+0x68>)
 800a07a:	f7fd fa6c 	bl	8007556 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a07e:	4907      	ldr	r1, [pc, #28]	; (800a09c <CDC_Init_FS+0x6c>)
 800a080:	4805      	ldr	r0, [pc, #20]	; (800a098 <CDC_Init_FS+0x68>)
 800a082:	f7fd fa82 	bl	800758a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a086:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3708      	adds	r7, #8
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}
 800a090:	20000cd0 	.word	0x20000cd0
 800a094:	200015dc 	.word	0x200015dc
 800a098:	20000a34 	.word	0x20000a34
 800a09c:	200014dc 	.word	0x200014dc

0800a0a0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a0a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ae:	4770      	bx	lr

0800a0b0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b083      	sub	sp, #12
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	6039      	str	r1, [r7, #0]
 800a0ba:	71fb      	strb	r3, [r7, #7]
 800a0bc:	4613      	mov	r3, r2
 800a0be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a0c0:	79fb      	ldrb	r3, [r7, #7]
 800a0c2:	2b23      	cmp	r3, #35	; 0x23
 800a0c4:	f200 8098 	bhi.w	800a1f8 <CDC_Control_FS+0x148>
 800a0c8:	a201      	add	r2, pc, #4	; (adr r2, 800a0d0 <CDC_Control_FS+0x20>)
 800a0ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ce:	bf00      	nop
 800a0d0:	0800a1f9 	.word	0x0800a1f9
 800a0d4:	0800a1f9 	.word	0x0800a1f9
 800a0d8:	0800a1f9 	.word	0x0800a1f9
 800a0dc:	0800a1f9 	.word	0x0800a1f9
 800a0e0:	0800a1f9 	.word	0x0800a1f9
 800a0e4:	0800a1f9 	.word	0x0800a1f9
 800a0e8:	0800a1f9 	.word	0x0800a1f9
 800a0ec:	0800a1f9 	.word	0x0800a1f9
 800a0f0:	0800a1f9 	.word	0x0800a1f9
 800a0f4:	0800a1f9 	.word	0x0800a1f9
 800a0f8:	0800a1f9 	.word	0x0800a1f9
 800a0fc:	0800a1f9 	.word	0x0800a1f9
 800a100:	0800a1f9 	.word	0x0800a1f9
 800a104:	0800a1f9 	.word	0x0800a1f9
 800a108:	0800a1f9 	.word	0x0800a1f9
 800a10c:	0800a1f9 	.word	0x0800a1f9
 800a110:	0800a1f9 	.word	0x0800a1f9
 800a114:	0800a1f9 	.word	0x0800a1f9
 800a118:	0800a1f9 	.word	0x0800a1f9
 800a11c:	0800a1f9 	.word	0x0800a1f9
 800a120:	0800a1f9 	.word	0x0800a1f9
 800a124:	0800a1f9 	.word	0x0800a1f9
 800a128:	0800a1f9 	.word	0x0800a1f9
 800a12c:	0800a1f9 	.word	0x0800a1f9
 800a130:	0800a1f9 	.word	0x0800a1f9
 800a134:	0800a1f9 	.word	0x0800a1f9
 800a138:	0800a1f9 	.word	0x0800a1f9
 800a13c:	0800a1f9 	.word	0x0800a1f9
 800a140:	0800a1f9 	.word	0x0800a1f9
 800a144:	0800a1f9 	.word	0x0800a1f9
 800a148:	0800a1f9 	.word	0x0800a1f9
 800a14c:	0800a1f9 	.word	0x0800a1f9
 800a150:	0800a161 	.word	0x0800a161
 800a154:	0800a1a5 	.word	0x0800a1a5
 800a158:	0800a1f9 	.word	0x0800a1f9
 800a15c:	0800a1f9 	.word	0x0800a1f9
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24));
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	781b      	ldrb	r3, [r3, #0]
 800a164:	461a      	mov	r2, r3
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	3301      	adds	r3, #1
 800a16a:	781b      	ldrb	r3, [r3, #0]
 800a16c:	021b      	lsls	r3, r3, #8
 800a16e:	431a      	orrs	r2, r3
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	3302      	adds	r3, #2
 800a174:	781b      	ldrb	r3, [r3, #0]
 800a176:	041b      	lsls	r3, r3, #16
 800a178:	431a      	orrs	r2, r3
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	3303      	adds	r3, #3
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	061b      	lsls	r3, r3, #24
 800a182:	4313      	orrs	r3, r2
 800a184:	461a      	mov	r2, r3
 800a186:	4b20      	ldr	r3, [pc, #128]	; (800a208 <CDC_Control_FS+0x158>)
 800a188:	601a      	str	r2, [r3, #0]
		LineCoding.format     = pbuf[4];
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	791a      	ldrb	r2, [r3, #4]
 800a18e:	4b1e      	ldr	r3, [pc, #120]	; (800a208 <CDC_Control_FS+0x158>)
 800a190:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	795a      	ldrb	r2, [r3, #5]
 800a196:	4b1c      	ldr	r3, [pc, #112]	; (800a208 <CDC_Control_FS+0x158>)
 800a198:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype   = pbuf[6];
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	799a      	ldrb	r2, [r3, #6]
 800a19e:	4b1a      	ldr	r3, [pc, #104]	; (800a208 <CDC_Control_FS+0x158>)
 800a1a0:	719a      	strb	r2, [r3, #6]
    break;
 800a1a2:	e02a      	b.n	800a1fa <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800a1a4:	4b18      	ldr	r3, [pc, #96]	; (800a208 <CDC_Control_FS+0x158>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	b2da      	uxtb	r2, r3
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800a1ae:	4b16      	ldr	r3, [pc, #88]	; (800a208 <CDC_Control_FS+0x158>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	0a1a      	lsrs	r2, r3, #8
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	3301      	adds	r3, #1
 800a1b8:	b2d2      	uxtb	r2, r2
 800a1ba:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800a1bc:	4b12      	ldr	r3, [pc, #72]	; (800a208 <CDC_Control_FS+0x158>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	0c1a      	lsrs	r2, r3, #16
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	3302      	adds	r3, #2
 800a1c6:	b2d2      	uxtb	r2, r2
 800a1c8:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800a1ca:	4b0f      	ldr	r3, [pc, #60]	; (800a208 <CDC_Control_FS+0x158>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	0e1a      	lsrs	r2, r3, #24
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	3303      	adds	r3, #3
 800a1d4:	b2d2      	uxtb	r2, r2
 800a1d6:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	3304      	adds	r3, #4
 800a1dc:	4a0a      	ldr	r2, [pc, #40]	; (800a208 <CDC_Control_FS+0x158>)
 800a1de:	7912      	ldrb	r2, [r2, #4]
 800a1e0:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	3305      	adds	r3, #5
 800a1e6:	4a08      	ldr	r2, [pc, #32]	; (800a208 <CDC_Control_FS+0x158>)
 800a1e8:	7952      	ldrb	r2, [r2, #5]
 800a1ea:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	3306      	adds	r3, #6
 800a1f0:	4a05      	ldr	r2, [pc, #20]	; (800a208 <CDC_Control_FS+0x158>)
 800a1f2:	7992      	ldrb	r2, [r2, #6]
 800a1f4:	701a      	strb	r2, [r3, #0]

    break;
 800a1f6:	e000      	b.n	800a1fa <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a1f8:	bf00      	nop
  }

  return (USBD_OK);
 800a1fa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	370c      	adds	r7, #12
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr
 800a208:	2000011c 	.word	0x2000011c

0800a20c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b084      	sub	sp, #16
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	int i;
	uint8_t* rxbuf = Buf;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	60bb      	str	r3, [r7, #8]

	//count total packets for application runtime
	usbbuf.packets++;
 800a21a:	4b25      	ldr	r3, [pc, #148]	; (800a2b0 <CDC_Receive_FS+0xa4>)
 800a21c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800a220:	3301      	adds	r3, #1
 800a222:	4a23      	ldr	r2, [pc, #140]	; (800a2b0 <CDC_Receive_FS+0xa4>)
 800a224:	f8c2 3808 	str.w	r3, [r2, #2056]	; 0x808

	// receive the data
	for(i=0; i<(*Len); i++){
 800a228:	2300      	movs	r3, #0
 800a22a:	60fb      	str	r3, [r7, #12]
 800a22c:	e02e      	b.n	800a28c <CDC_Receive_FS+0x80>

		//is the buffer full?
		if( usbbuf.op == ( usbbuf.ip & USB_BUFFER_MASK ) + 1 ){
 800a22e:	4b20      	ldr	r3, [pc, #128]	; (800a2b0 <CDC_Receive_FS+0xa4>)
 800a230:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 800a234:	461a      	mov	r2, r3
 800a236:	4b1e      	ldr	r3, [pc, #120]	; (800a2b0 <CDC_Receive_FS+0xa4>)
 800a238:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 800a23c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a240:	3301      	adds	r3, #1
 800a242:	429a      	cmp	r2, r3
 800a244:	d104      	bne.n	800a250 <CDC_Receive_FS+0x44>
			usbbuf.status = USB_RX_FULL;
 800a246:	4b1a      	ldr	r3, [pc, #104]	; (800a2b0 <CDC_Receive_FS+0xa4>)
 800a248:	22ff      	movs	r2, #255	; 0xff
 800a24a:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
 800a24e:	e01a      	b.n	800a286 <CDC_Receive_FS+0x7a>
		}else{
			//copy into usbbuf byte buffer
			usbbuf.data.byte[usbbuf.ip++] = *(rxbuf++);
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	1c5a      	adds	r2, r3, #1
 800a254:	60ba      	str	r2, [r7, #8]
 800a256:	4a16      	ldr	r2, [pc, #88]	; (800a2b0 <CDC_Receive_FS+0xa4>)
 800a258:	f8b2 2800 	ldrh.w	r2, [r2, #2048]	; 0x800
 800a25c:	1c51      	adds	r1, r2, #1
 800a25e:	b288      	uxth	r0, r1
 800a260:	4913      	ldr	r1, [pc, #76]	; (800a2b0 <CDC_Receive_FS+0xa4>)
 800a262:	f8a1 0800 	strh.w	r0, [r1, #2048]	; 0x800
 800a266:	7819      	ldrb	r1, [r3, #0]
 800a268:	4b11      	ldr	r3, [pc, #68]	; (800a2b0 <CDC_Receive_FS+0xa4>)
 800a26a:	5499      	strb	r1, [r3, r2]
			usbbuf.status = USB_RX_AVAIL;
 800a26c:	4b10      	ldr	r3, [pc, #64]	; (800a2b0 <CDC_Receive_FS+0xa4>)
 800a26e:	2201      	movs	r2, #1
 800a270:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
			//wrap around
			usbbuf.ip &= USB_BUFFER_MASK;
 800a274:	4b0e      	ldr	r3, [pc, #56]	; (800a2b0 <CDC_Receive_FS+0xa4>)
 800a276:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 800a27a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a27e:	b29a      	uxth	r2, r3
 800a280:	4b0b      	ldr	r3, [pc, #44]	; (800a2b0 <CDC_Receive_FS+0xa4>)
 800a282:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
	for(i=0; i<(*Len); i++){
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	3301      	adds	r3, #1
 800a28a:	60fb      	str	r3, [r7, #12]
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	681a      	ldr	r2, [r3, #0]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	429a      	cmp	r2, r3
 800a294:	d8cb      	bhi.n	800a22e <CDC_Receive_FS+0x22>
		}
	}

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a296:	6879      	ldr	r1, [r7, #4]
 800a298:	4806      	ldr	r0, [pc, #24]	; (800a2b4 <CDC_Receive_FS+0xa8>)
 800a29a:	f7fd f976 	bl	800758a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a29e:	4805      	ldr	r0, [pc, #20]	; (800a2b4 <CDC_Receive_FS+0xa8>)
 800a2a0:	f7fd f9b6 	bl	8007610 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a2a4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3710      	adds	r7, #16
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
 800a2ae:	bf00      	nop
 800a2b0:	20000cd0 	.word	0x20000cd0
 800a2b4:	20000a34 	.word	0x20000a34

0800a2b8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	460b      	mov	r3, r1
 800a2c2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a2c8:	4b0d      	ldr	r3, [pc, #52]	; (800a300 <CDC_Transmit_FS+0x48>)
 800a2ca:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a2ce:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d001      	beq.n	800a2de <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a2da:	2301      	movs	r3, #1
 800a2dc:	e00b      	b.n	800a2f6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a2de:	887b      	ldrh	r3, [r7, #2]
 800a2e0:	461a      	mov	r2, r3
 800a2e2:	6879      	ldr	r1, [r7, #4]
 800a2e4:	4806      	ldr	r0, [pc, #24]	; (800a300 <CDC_Transmit_FS+0x48>)
 800a2e6:	f7fd f936 	bl	8007556 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a2ea:	4805      	ldr	r0, [pc, #20]	; (800a300 <CDC_Transmit_FS+0x48>)
 800a2ec:	f7fd f961 	bl	80075b2 <USBD_CDC_TransmitPacket>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a2f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3710      	adds	r7, #16
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}
 800a2fe:	bf00      	nop
 800a300:	20000a34 	.word	0x20000a34

0800a304 <CDC_ReadBuffer_Single>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t CDC_ReadBuffer_Single(void){
 800a304:	b480      	push	{r7}
 800a306:	b083      	sub	sp, #12
 800a308:	af00      	add	r7, sp, #0

	uint8_t data;

	data = usbbuf.data.byte[usbbuf.op++];
 800a30a:	4b14      	ldr	r3, [pc, #80]	; (800a35c <CDC_ReadBuffer_Single+0x58>)
 800a30c:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 800a310:	1c5a      	adds	r2, r3, #1
 800a312:	b291      	uxth	r1, r2
 800a314:	4a11      	ldr	r2, [pc, #68]	; (800a35c <CDC_ReadBuffer_Single+0x58>)
 800a316:	f8a2 1802 	strh.w	r1, [r2, #2050]	; 0x802
 800a31a:	461a      	mov	r2, r3
 800a31c:	4b0f      	ldr	r3, [pc, #60]	; (800a35c <CDC_ReadBuffer_Single+0x58>)
 800a31e:	5c9b      	ldrb	r3, [r3, r2]
 800a320:	71fb      	strb	r3, [r7, #7]
	usbbuf.op &= USB_BUFFER_MASK;
 800a322:	4b0e      	ldr	r3, [pc, #56]	; (800a35c <CDC_ReadBuffer_Single+0x58>)
 800a324:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 800a328:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a32c:	b29a      	uxth	r2, r3
 800a32e:	4b0b      	ldr	r3, [pc, #44]	; (800a35c <CDC_ReadBuffer_Single+0x58>)
 800a330:	f8a3 2802 	strh.w	r2, [r3, #2050]	; 0x802
	if( usbbuf.op == usbbuf.ip ){
 800a334:	4b09      	ldr	r3, [pc, #36]	; (800a35c <CDC_ReadBuffer_Single+0x58>)
 800a336:	f8b3 2802 	ldrh.w	r2, [r3, #2050]	; 0x802
 800a33a:	4b08      	ldr	r3, [pc, #32]	; (800a35c <CDC_ReadBuffer_Single+0x58>)
 800a33c:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 800a340:	429a      	cmp	r2, r3
 800a342:	d103      	bne.n	800a34c <CDC_ReadBuffer_Single+0x48>
		usbbuf.status = USB_RX_EMPTY;
 800a344:	4b05      	ldr	r3, [pc, #20]	; (800a35c <CDC_ReadBuffer_Single+0x58>)
 800a346:	2200      	movs	r2, #0
 800a348:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
	}
	return data;
 800a34c:	79fb      	ldrb	r3, [r7, #7]
}
 800a34e:	4618      	mov	r0, r3
 800a350:	370c      	adds	r7, #12
 800a352:	46bd      	mov	sp, r7
 800a354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a358:	4770      	bx	lr
 800a35a:	bf00      	nop
 800a35c:	20000cd0 	.word	0x20000cd0

0800a360 <CDC_BytesAvailable>:
	// return early if no more bytes are available
	usbbuf.status = USB_RX_EMPTY;
	return count;
}

uint16_t CDC_BytesAvailable(void){
 800a360:	b480      	push	{r7}
 800a362:	af00      	add	r7, sp, #0
	return ( usbbuf.ip - usbbuf.op ) & USB_BUFFER_MASK;
 800a364:	4b07      	ldr	r3, [pc, #28]	; (800a384 <CDC_BytesAvailable+0x24>)
 800a366:	f8b3 2800 	ldrh.w	r2, [r3, #2048]	; 0x800
 800a36a:	4b06      	ldr	r3, [pc, #24]	; (800a384 <CDC_BytesAvailable+0x24>)
 800a36c:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 800a370:	1ad3      	subs	r3, r2, r3
 800a372:	b29b      	uxth	r3, r3
 800a374:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a378:	b29b      	uxth	r3, r3
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	46bd      	mov	sp, r7
 800a37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a382:	4770      	bx	lr
 800a384:	20000cd0 	.word	0x20000cd0

0800a388 <CDC_BytesAvailableTimeout>:

uint16_t CDC_BytesAvailableTimeout(uint32_t timeout_ms, uint16_t bytes_required){
 800a388:	b580      	push	{r7, lr}
 800a38a:	b084      	sub	sp, #16
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	460b      	mov	r3, r1
 800a392:	807b      	strh	r3, [r7, #2]
	uint32_t start_ms = HAL_GetTick();
 800a394:	f7f6 f92e 	bl	80005f4 <HAL_GetTick>
 800a398:	60f8      	str	r0, [r7, #12]
	uint16_t bytes_rx = 0;
 800a39a:	2300      	movs	r3, #0
 800a39c:	817b      	strh	r3, [r7, #10]
	while( (HAL_GetTick() - start_ms) < timeout_ms ){
 800a39e:	e010      	b.n	800a3c2 <CDC_BytesAvailableTimeout+0x3a>
		bytes_rx = ( usbbuf.ip - usbbuf.op ) & USB_BUFFER_MASK;
 800a3a0:	4b0e      	ldr	r3, [pc, #56]	; (800a3dc <CDC_BytesAvailableTimeout+0x54>)
 800a3a2:	f8b3 2800 	ldrh.w	r2, [r3, #2048]	; 0x800
 800a3a6:	4b0d      	ldr	r3, [pc, #52]	; (800a3dc <CDC_BytesAvailableTimeout+0x54>)
 800a3a8:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 800a3ac:	1ad3      	subs	r3, r2, r3
 800a3ae:	b29b      	uxth	r3, r3
 800a3b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a3b4:	817b      	strh	r3, [r7, #10]
		if( bytes_rx >= bytes_required ){
 800a3b6:	897a      	ldrh	r2, [r7, #10]
 800a3b8:	887b      	ldrh	r3, [r7, #2]
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d301      	bcc.n	800a3c2 <CDC_BytesAvailableTimeout+0x3a>
			return bytes_rx;
 800a3be:	897b      	ldrh	r3, [r7, #10]
 800a3c0:	e008      	b.n	800a3d4 <CDC_BytesAvailableTimeout+0x4c>
	while( (HAL_GetTick() - start_ms) < timeout_ms ){
 800a3c2:	f7f6 f917 	bl	80005f4 <HAL_GetTick>
 800a3c6:	4602      	mov	r2, r0
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	1ad3      	subs	r3, r2, r3
 800a3cc:	687a      	ldr	r2, [r7, #4]
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d8e6      	bhi.n	800a3a0 <CDC_BytesAvailableTimeout+0x18>
		}
	}
	return 0;
 800a3d2:	2300      	movs	r3, #0
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3710      	adds	r7, #16
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}
 800a3dc:	20000cd0 	.word	0x20000cd0

0800a3e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b08a      	sub	sp, #40	; 0x28
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a3e8:	f107 0314 	add.w	r3, r7, #20
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	601a      	str	r2, [r3, #0]
 800a3f0:	605a      	str	r2, [r3, #4]
 800a3f2:	609a      	str	r2, [r3, #8]
 800a3f4:	60da      	str	r2, [r3, #12]
 800a3f6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a400:	d13a      	bne.n	800a478 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a402:	2300      	movs	r3, #0
 800a404:	613b      	str	r3, [r7, #16]
 800a406:	4b1e      	ldr	r3, [pc, #120]	; (800a480 <HAL_PCD_MspInit+0xa0>)
 800a408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a40a:	4a1d      	ldr	r2, [pc, #116]	; (800a480 <HAL_PCD_MspInit+0xa0>)
 800a40c:	f043 0301 	orr.w	r3, r3, #1
 800a410:	6313      	str	r3, [r2, #48]	; 0x30
 800a412:	4b1b      	ldr	r3, [pc, #108]	; (800a480 <HAL_PCD_MspInit+0xa0>)
 800a414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a416:	f003 0301 	and.w	r3, r3, #1
 800a41a:	613b      	str	r3, [r7, #16]
 800a41c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a41e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a422:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a424:	2302      	movs	r3, #2
 800a426:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a428:	2300      	movs	r3, #0
 800a42a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a42c:	2303      	movs	r3, #3
 800a42e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a430:	230a      	movs	r3, #10
 800a432:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a434:	f107 0314 	add.w	r3, r7, #20
 800a438:	4619      	mov	r1, r3
 800a43a:	4812      	ldr	r0, [pc, #72]	; (800a484 <HAL_PCD_MspInit+0xa4>)
 800a43c:	f7f6 fcaa 	bl	8000d94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a440:	4b0f      	ldr	r3, [pc, #60]	; (800a480 <HAL_PCD_MspInit+0xa0>)
 800a442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a444:	4a0e      	ldr	r2, [pc, #56]	; (800a480 <HAL_PCD_MspInit+0xa0>)
 800a446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a44a:	6353      	str	r3, [r2, #52]	; 0x34
 800a44c:	2300      	movs	r3, #0
 800a44e:	60fb      	str	r3, [r7, #12]
 800a450:	4b0b      	ldr	r3, [pc, #44]	; (800a480 <HAL_PCD_MspInit+0xa0>)
 800a452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a454:	4a0a      	ldr	r2, [pc, #40]	; (800a480 <HAL_PCD_MspInit+0xa0>)
 800a456:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a45a:	6453      	str	r3, [r2, #68]	; 0x44
 800a45c:	4b08      	ldr	r3, [pc, #32]	; (800a480 <HAL_PCD_MspInit+0xa0>)
 800a45e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a460:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a464:	60fb      	str	r3, [r7, #12]
 800a466:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a468:	2200      	movs	r2, #0
 800a46a:	2100      	movs	r1, #0
 800a46c:	2043      	movs	r0, #67	; 0x43
 800a46e:	f7f6 fc3c 	bl	8000cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a472:	2043      	movs	r0, #67	; 0x43
 800a474:	f7f6 fc55 	bl	8000d22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a478:	bf00      	nop
 800a47a:	3728      	adds	r7, #40	; 0x28
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}
 800a480:	40023800 	.word	0x40023800
 800a484:	40020000 	.word	0x40020000

0800a488 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b082      	sub	sp, #8
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a49c:	4619      	mov	r1, r3
 800a49e:	4610      	mov	r0, r2
 800a4a0:	f7fd f96e 	bl	8007780 <USBD_LL_SetupStage>
}
 800a4a4:	bf00      	nop
 800a4a6:	3708      	adds	r7, #8
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b082      	sub	sp, #8
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	460b      	mov	r3, r1
 800a4b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a4be:	78fa      	ldrb	r2, [r7, #3]
 800a4c0:	6879      	ldr	r1, [r7, #4]
 800a4c2:	4613      	mov	r3, r2
 800a4c4:	00db      	lsls	r3, r3, #3
 800a4c6:	1a9b      	subs	r3, r3, r2
 800a4c8:	009b      	lsls	r3, r3, #2
 800a4ca:	440b      	add	r3, r1
 800a4cc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a4d0:	681a      	ldr	r2, [r3, #0]
 800a4d2:	78fb      	ldrb	r3, [r7, #3]
 800a4d4:	4619      	mov	r1, r3
 800a4d6:	f7fd f99e 	bl	8007816 <USBD_LL_DataOutStage>
}
 800a4da:	bf00      	nop
 800a4dc:	3708      	adds	r7, #8
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}

0800a4e2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b082      	sub	sp, #8
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
 800a4ea:	460b      	mov	r3, r1
 800a4ec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a4f4:	78fa      	ldrb	r2, [r7, #3]
 800a4f6:	6879      	ldr	r1, [r7, #4]
 800a4f8:	4613      	mov	r3, r2
 800a4fa:	00db      	lsls	r3, r3, #3
 800a4fc:	1a9b      	subs	r3, r3, r2
 800a4fe:	009b      	lsls	r3, r3, #2
 800a500:	440b      	add	r3, r1
 800a502:	3348      	adds	r3, #72	; 0x48
 800a504:	681a      	ldr	r2, [r3, #0]
 800a506:	78fb      	ldrb	r3, [r7, #3]
 800a508:	4619      	mov	r1, r3
 800a50a:	f7fd f9f5 	bl	80078f8 <USBD_LL_DataInStage>
}
 800a50e:	bf00      	nop
 800a510:	3708      	adds	r7, #8
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}

0800a516 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a516:	b580      	push	{r7, lr}
 800a518:	b082      	sub	sp, #8
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a524:	4618      	mov	r0, r3
 800a526:	f7fd fb03 	bl	8007b30 <USBD_LL_SOF>
}
 800a52a:	bf00      	nop
 800a52c:	3708      	adds	r7, #8
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}

0800a532 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800a532:	b580      	push	{r7, lr}
 800a534:	b084      	sub	sp, #16
 800a536:	af00      	add	r7, sp, #0
 800a538:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a53a:	2301      	movs	r3, #1
 800a53c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	68db      	ldr	r3, [r3, #12]
 800a542:	2b02      	cmp	r3, #2
 800a544:	d001      	beq.n	800a54a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a546:	f7ff f9fb 	bl	8009940 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a550:	7bfa      	ldrb	r2, [r7, #15]
 800a552:	4611      	mov	r1, r2
 800a554:	4618      	mov	r0, r3
 800a556:	f7fd fab5 	bl	8007ac4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a560:	4618      	mov	r0, r3
 800a562:	f7fd fa6e 	bl	8007a42 <USBD_LL_Reset>
}
 800a566:	bf00      	nop
 800a568:	3710      	adds	r7, #16
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
	...

0800a570 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b082      	sub	sp, #8
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a57e:	4618      	mov	r0, r3
 800a580:	f7fd fab0 	bl	8007ae4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	6812      	ldr	r2, [r2, #0]
 800a592:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a596:	f043 0301 	orr.w	r3, r3, #1
 800a59a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6a1b      	ldr	r3, [r3, #32]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d005      	beq.n	800a5b0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a5a4:	4b04      	ldr	r3, [pc, #16]	; (800a5b8 <HAL_PCD_SuspendCallback+0x48>)
 800a5a6:	691b      	ldr	r3, [r3, #16]
 800a5a8:	4a03      	ldr	r2, [pc, #12]	; (800a5b8 <HAL_PCD_SuspendCallback+0x48>)
 800a5aa:	f043 0306 	orr.w	r3, r3, #6
 800a5ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a5b0:	bf00      	nop
 800a5b2:	3708      	adds	r7, #8
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}
 800a5b8:	e000ed00 	.word	0xe000ed00

0800a5bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b082      	sub	sp, #8
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f7fd fa9f 	bl	8007b0e <USBD_LL_Resume>
}
 800a5d0:	bf00      	nop
 800a5d2:	3708      	adds	r7, #8
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b082      	sub	sp, #8
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	460b      	mov	r3, r1
 800a5e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a5ea:	78fa      	ldrb	r2, [r7, #3]
 800a5ec:	4611      	mov	r1, r2
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f7fd fac5 	bl	8007b7e <USBD_LL_IsoOUTIncomplete>
}
 800a5f4:	bf00      	nop
 800a5f6:	3708      	adds	r7, #8
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}

0800a5fc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b082      	sub	sp, #8
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
 800a604:	460b      	mov	r3, r1
 800a606:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a60e:	78fa      	ldrb	r2, [r7, #3]
 800a610:	4611      	mov	r1, r2
 800a612:	4618      	mov	r0, r3
 800a614:	f7fd faa6 	bl	8007b64 <USBD_LL_IsoINIncomplete>
}
 800a618:	bf00      	nop
 800a61a:	3708      	adds	r7, #8
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b082      	sub	sp, #8
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a62e:	4618      	mov	r0, r3
 800a630:	f7fd fab2 	bl	8007b98 <USBD_LL_DevConnected>
}
 800a634:	bf00      	nop
 800a636:	3708      	adds	r7, #8
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b082      	sub	sp, #8
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a64a:	4618      	mov	r0, r3
 800a64c:	f7fd faaf 	bl	8007bae <USBD_LL_DevDisconnected>
}
 800a650:	bf00      	nop
 800a652:	3708      	adds	r7, #8
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}

0800a658 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b082      	sub	sp, #8
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	781b      	ldrb	r3, [r3, #0]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d13f      	bne.n	800a6e8 <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a668:	4a22      	ldr	r2, [pc, #136]	; (800a6f4 <USBD_LL_Init+0x9c>)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	4a20      	ldr	r2, [pc, #128]	; (800a6f4 <USBD_LL_Init+0x9c>)
 800a674:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a678:	4b1e      	ldr	r3, [pc, #120]	; (800a6f4 <USBD_LL_Init+0x9c>)
 800a67a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a67e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800a680:	4b1c      	ldr	r3, [pc, #112]	; (800a6f4 <USBD_LL_Init+0x9c>)
 800a682:	2206      	movs	r2, #6
 800a684:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a686:	4b1b      	ldr	r3, [pc, #108]	; (800a6f4 <USBD_LL_Init+0x9c>)
 800a688:	2202      	movs	r2, #2
 800a68a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a68c:	4b19      	ldr	r3, [pc, #100]	; (800a6f4 <USBD_LL_Init+0x9c>)
 800a68e:	2200      	movs	r2, #0
 800a690:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a692:	4b18      	ldr	r3, [pc, #96]	; (800a6f4 <USBD_LL_Init+0x9c>)
 800a694:	2202      	movs	r2, #2
 800a696:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a698:	4b16      	ldr	r3, [pc, #88]	; (800a6f4 <USBD_LL_Init+0x9c>)
 800a69a:	2200      	movs	r2, #0
 800a69c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a69e:	4b15      	ldr	r3, [pc, #84]	; (800a6f4 <USBD_LL_Init+0x9c>)
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a6a4:	4b13      	ldr	r3, [pc, #76]	; (800a6f4 <USBD_LL_Init+0x9c>)
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800a6aa:	4b12      	ldr	r3, [pc, #72]	; (800a6f4 <USBD_LL_Init+0x9c>)
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a6b0:	4b10      	ldr	r3, [pc, #64]	; (800a6f4 <USBD_LL_Init+0x9c>)
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a6b6:	4b0f      	ldr	r3, [pc, #60]	; (800a6f4 <USBD_LL_Init+0x9c>)
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a6bc:	480d      	ldr	r0, [pc, #52]	; (800a6f4 <USBD_LL_Init+0x9c>)
 800a6be:	f7f6 feab 	bl	8001418 <HAL_PCD_Init>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d001      	beq.n	800a6cc <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 800a6c8:	f7ff f93a 	bl	8009940 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a6cc:	2180      	movs	r1, #128	; 0x80
 800a6ce:	4809      	ldr	r0, [pc, #36]	; (800a6f4 <USBD_LL_Init+0x9c>)
 800a6d0:	f7f8 f843 	bl	800275a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a6d4:	2240      	movs	r2, #64	; 0x40
 800a6d6:	2100      	movs	r1, #0
 800a6d8:	4806      	ldr	r0, [pc, #24]	; (800a6f4 <USBD_LL_Init+0x9c>)
 800a6da:	f7f7 fff7 	bl	80026cc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a6de:	2280      	movs	r2, #128	; 0x80
 800a6e0:	2101      	movs	r1, #1
 800a6e2:	4804      	ldr	r0, [pc, #16]	; (800a6f4 <USBD_LL_Init+0x9c>)
 800a6e4:	f7f7 fff2 	bl	80026cc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a6e8:	2300      	movs	r3, #0
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3708      	adds	r7, #8
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}
 800a6f2:	bf00      	nop
 800a6f4:	200016dc 	.word	0x200016dc

0800a6f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b084      	sub	sp, #16
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a700:	2300      	movs	r3, #0
 800a702:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a704:	2300      	movs	r3, #0
 800a706:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a70e:	4618      	mov	r0, r3
 800a710:	f7f6 ffa6 	bl	8001660 <HAL_PCD_Start>
 800a714:	4603      	mov	r3, r0
 800a716:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800a718:	7bfb      	ldrb	r3, [r7, #15]
 800a71a:	4618      	mov	r0, r3
 800a71c:	f000 f92e 	bl	800a97c <USBD_Get_USB_Status>
 800a720:	4603      	mov	r3, r0
 800a722:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800a724:	7bbb      	ldrb	r3, [r7, #14]
}
 800a726:	4618      	mov	r0, r3
 800a728:	3710      	adds	r7, #16
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}

0800a72e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a72e:	b580      	push	{r7, lr}
 800a730:	b084      	sub	sp, #16
 800a732:	af00      	add	r7, sp, #0
 800a734:	6078      	str	r0, [r7, #4]
 800a736:	4608      	mov	r0, r1
 800a738:	4611      	mov	r1, r2
 800a73a:	461a      	mov	r2, r3
 800a73c:	4603      	mov	r3, r0
 800a73e:	70fb      	strb	r3, [r7, #3]
 800a740:	460b      	mov	r3, r1
 800a742:	70bb      	strb	r3, [r7, #2]
 800a744:	4613      	mov	r3, r2
 800a746:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a748:	2300      	movs	r3, #0
 800a74a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a74c:	2300      	movs	r3, #0
 800a74e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a756:	78bb      	ldrb	r3, [r7, #2]
 800a758:	883a      	ldrh	r2, [r7, #0]
 800a75a:	78f9      	ldrb	r1, [r7, #3]
 800a75c:	f7f7 fba8 	bl	8001eb0 <HAL_PCD_EP_Open>
 800a760:	4603      	mov	r3, r0
 800a762:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a764:	7bfb      	ldrb	r3, [r7, #15]
 800a766:	4618      	mov	r0, r3
 800a768:	f000 f908 	bl	800a97c <USBD_Get_USB_Status>
 800a76c:	4603      	mov	r3, r0
 800a76e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800a770:	7bbb      	ldrb	r3, [r7, #14]
}
 800a772:	4618      	mov	r0, r3
 800a774:	3710      	adds	r7, #16
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}

0800a77a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a77a:	b580      	push	{r7, lr}
 800a77c:	b084      	sub	sp, #16
 800a77e:	af00      	add	r7, sp, #0
 800a780:	6078      	str	r0, [r7, #4]
 800a782:	460b      	mov	r3, r1
 800a784:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a786:	2300      	movs	r3, #0
 800a788:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a78a:	2300      	movs	r3, #0
 800a78c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a794:	78fa      	ldrb	r2, [r7, #3]
 800a796:	4611      	mov	r1, r2
 800a798:	4618      	mov	r0, r3
 800a79a:	f7f7 fbf1 	bl	8001f80 <HAL_PCD_EP_Close>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800a7a2:	7bfb      	ldrb	r3, [r7, #15]
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f000 f8e9 	bl	800a97c <USBD_Get_USB_Status>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800a7ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3710      	adds	r7, #16
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b084      	sub	sp, #16
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	460b      	mov	r3, r1
 800a7c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a7d2:	78fa      	ldrb	r2, [r7, #3]
 800a7d4:	4611      	mov	r1, r2
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f7f7 fcc9 	bl	800216e <HAL_PCD_EP_SetStall>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7e0:	7bfb      	ldrb	r3, [r7, #15]
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f000 f8ca 	bl	800a97c <USBD_Get_USB_Status>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800a7ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3710      	adds	r7, #16
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}

0800a7f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7f6:	b580      	push	{r7, lr}
 800a7f8:	b084      	sub	sp, #16
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	6078      	str	r0, [r7, #4]
 800a7fe:	460b      	mov	r3, r1
 800a800:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a802:	2300      	movs	r3, #0
 800a804:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a806:	2300      	movs	r3, #0
 800a808:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a810:	78fa      	ldrb	r2, [r7, #3]
 800a812:	4611      	mov	r1, r2
 800a814:	4618      	mov	r0, r3
 800a816:	f7f7 fd0e 	bl	8002236 <HAL_PCD_EP_ClrStall>
 800a81a:	4603      	mov	r3, r0
 800a81c:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800a81e:	7bfb      	ldrb	r3, [r7, #15]
 800a820:	4618      	mov	r0, r3
 800a822:	f000 f8ab 	bl	800a97c <USBD_Get_USB_Status>
 800a826:	4603      	mov	r3, r0
 800a828:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800a82a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3710      	adds	r7, #16
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}

0800a834 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a834:	b480      	push	{r7}
 800a836:	b085      	sub	sp, #20
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	460b      	mov	r3, r1
 800a83e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a846:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800a848:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	da0b      	bge.n	800a868 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800a850:	78fb      	ldrb	r3, [r7, #3]
 800a852:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a856:	68f9      	ldr	r1, [r7, #12]
 800a858:	4613      	mov	r3, r2
 800a85a:	00db      	lsls	r3, r3, #3
 800a85c:	1a9b      	subs	r3, r3, r2
 800a85e:	009b      	lsls	r3, r3, #2
 800a860:	440b      	add	r3, r1
 800a862:	333e      	adds	r3, #62	; 0x3e
 800a864:	781b      	ldrb	r3, [r3, #0]
 800a866:	e00b      	b.n	800a880 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800a868:	78fb      	ldrb	r3, [r7, #3]
 800a86a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a86e:	68f9      	ldr	r1, [r7, #12]
 800a870:	4613      	mov	r3, r2
 800a872:	00db      	lsls	r3, r3, #3
 800a874:	1a9b      	subs	r3, r3, r2
 800a876:	009b      	lsls	r3, r3, #2
 800a878:	440b      	add	r3, r1
 800a87a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a87e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a880:	4618      	mov	r0, r3
 800a882:	3714      	adds	r7, #20
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr

0800a88c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b084      	sub	sp, #16
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	460b      	mov	r3, r1
 800a896:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a898:	2300      	movs	r3, #0
 800a89a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a89c:	2300      	movs	r3, #0
 800a89e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a8a6:	78fa      	ldrb	r2, [r7, #3]
 800a8a8:	4611      	mov	r1, r2
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f7f7 fadb 	bl	8001e66 <HAL_PCD_SetAddress>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8b4:	7bfb      	ldrb	r3, [r7, #15]
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f000 f860 	bl	800a97c <USBD_Get_USB_Status>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800a8c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3710      	adds	r7, #16
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}

0800a8ca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a8ca:	b580      	push	{r7, lr}
 800a8cc:	b086      	sub	sp, #24
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	60f8      	str	r0, [r7, #12]
 800a8d2:	607a      	str	r2, [r7, #4]
 800a8d4:	461a      	mov	r2, r3
 800a8d6:	460b      	mov	r3, r1
 800a8d8:	72fb      	strb	r3, [r7, #11]
 800a8da:	4613      	mov	r3, r2
 800a8dc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a8ec:	893b      	ldrh	r3, [r7, #8]
 800a8ee:	7af9      	ldrb	r1, [r7, #11]
 800a8f0:	687a      	ldr	r2, [r7, #4]
 800a8f2:	f7f7 fbf2 	bl	80020da <HAL_PCD_EP_Transmit>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800a8fa:	7dfb      	ldrb	r3, [r7, #23]
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f000 f83d 	bl	800a97c <USBD_Get_USB_Status>
 800a902:	4603      	mov	r3, r0
 800a904:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800a906:	7dbb      	ldrb	r3, [r7, #22]
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3718      	adds	r7, #24
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b086      	sub	sp, #24
 800a914:	af00      	add	r7, sp, #0
 800a916:	60f8      	str	r0, [r7, #12]
 800a918:	607a      	str	r2, [r7, #4]
 800a91a:	461a      	mov	r2, r3
 800a91c:	460b      	mov	r3, r1
 800a91e:	72fb      	strb	r3, [r7, #11]
 800a920:	4613      	mov	r3, r2
 800a922:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a924:	2300      	movs	r3, #0
 800a926:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a928:	2300      	movs	r3, #0
 800a92a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a932:	893b      	ldrh	r3, [r7, #8]
 800a934:	7af9      	ldrb	r1, [r7, #11]
 800a936:	687a      	ldr	r2, [r7, #4]
 800a938:	f7f7 fb6c 	bl	8002014 <HAL_PCD_EP_Receive>
 800a93c:	4603      	mov	r3, r0
 800a93e:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800a940:	7dfb      	ldrb	r3, [r7, #23]
 800a942:	4618      	mov	r0, r3
 800a944:	f000 f81a 	bl	800a97c <USBD_Get_USB_Status>
 800a948:	4603      	mov	r3, r0
 800a94a:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800a94c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3718      	adds	r7, #24
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}

0800a956 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a956:	b580      	push	{r7, lr}
 800a958:	b082      	sub	sp, #8
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	6078      	str	r0, [r7, #4]
 800a95e:	460b      	mov	r3, r1
 800a960:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a968:	78fa      	ldrb	r2, [r7, #3]
 800a96a:	4611      	mov	r1, r2
 800a96c:	4618      	mov	r0, r3
 800a96e:	f7f7 fb9c 	bl	80020aa <HAL_PCD_EP_GetRxCount>
 800a972:	4603      	mov	r3, r0
}
 800a974:	4618      	mov	r0, r3
 800a976:	3708      	adds	r7, #8
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b085      	sub	sp, #20
 800a980:	af00      	add	r7, sp, #0
 800a982:	4603      	mov	r3, r0
 800a984:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a986:	2300      	movs	r3, #0
 800a988:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a98a:	79fb      	ldrb	r3, [r7, #7]
 800a98c:	2b03      	cmp	r3, #3
 800a98e:	d817      	bhi.n	800a9c0 <USBD_Get_USB_Status+0x44>
 800a990:	a201      	add	r2, pc, #4	; (adr r2, 800a998 <USBD_Get_USB_Status+0x1c>)
 800a992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a996:	bf00      	nop
 800a998:	0800a9a9 	.word	0x0800a9a9
 800a99c:	0800a9af 	.word	0x0800a9af
 800a9a0:	0800a9b5 	.word	0x0800a9b5
 800a9a4:	0800a9bb 	.word	0x0800a9bb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	73fb      	strb	r3, [r7, #15]
    break;
 800a9ac:	e00b      	b.n	800a9c6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a9ae:	2302      	movs	r3, #2
 800a9b0:	73fb      	strb	r3, [r7, #15]
    break;
 800a9b2:	e008      	b.n	800a9c6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	73fb      	strb	r3, [r7, #15]
    break;
 800a9b8:	e005      	b.n	800a9c6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a9ba:	2302      	movs	r3, #2
 800a9bc:	73fb      	strb	r3, [r7, #15]
    break;
 800a9be:	e002      	b.n	800a9c6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a9c0:	2302      	movs	r3, #2
 800a9c2:	73fb      	strb	r3, [r7, #15]
    break;
 800a9c4:	bf00      	nop
  }
  return usb_status;
 800a9c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3714      	adds	r7, #20
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr

0800a9d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b083      	sub	sp, #12
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	4603      	mov	r3, r0
 800a9dc:	6039      	str	r1, [r7, #0]
 800a9de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	2212      	movs	r2, #18
 800a9e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a9e6:	4b03      	ldr	r3, [pc, #12]	; (800a9f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	370c      	adds	r7, #12
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr
 800a9f4:	20000150 	.word	0x20000150

0800a9f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b083      	sub	sp, #12
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	4603      	mov	r3, r0
 800aa00:	6039      	str	r1, [r7, #0]
 800aa02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	2204      	movs	r2, #4
 800aa08:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aa0a:	4b03      	ldr	r3, [pc, #12]	; (800aa18 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	370c      	adds	r7, #12
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr
 800aa18:	20000164 	.word	0x20000164

0800aa1c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b082      	sub	sp, #8
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	4603      	mov	r3, r0
 800aa24:	6039      	str	r1, [r7, #0]
 800aa26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aa28:	79fb      	ldrb	r3, [r7, #7]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d105      	bne.n	800aa3a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aa2e:	683a      	ldr	r2, [r7, #0]
 800aa30:	4907      	ldr	r1, [pc, #28]	; (800aa50 <USBD_FS_ProductStrDescriptor+0x34>)
 800aa32:	4808      	ldr	r0, [pc, #32]	; (800aa54 <USBD_FS_ProductStrDescriptor+0x38>)
 800aa34:	f7fd fd92 	bl	800855c <USBD_GetString>
 800aa38:	e004      	b.n	800aa44 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aa3a:	683a      	ldr	r2, [r7, #0]
 800aa3c:	4904      	ldr	r1, [pc, #16]	; (800aa50 <USBD_FS_ProductStrDescriptor+0x34>)
 800aa3e:	4805      	ldr	r0, [pc, #20]	; (800aa54 <USBD_FS_ProductStrDescriptor+0x38>)
 800aa40:	f7fd fd8c 	bl	800855c <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa44:	4b02      	ldr	r3, [pc, #8]	; (800aa50 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	3708      	adds	r7, #8
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}
 800aa4e:	bf00      	nop
 800aa50:	20001ae4 	.word	0x20001ae4
 800aa54:	0800b130 	.word	0x0800b130

0800aa58 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b082      	sub	sp, #8
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	4603      	mov	r3, r0
 800aa60:	6039      	str	r1, [r7, #0]
 800aa62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aa64:	683a      	ldr	r2, [r7, #0]
 800aa66:	4904      	ldr	r1, [pc, #16]	; (800aa78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800aa68:	4804      	ldr	r0, [pc, #16]	; (800aa7c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800aa6a:	f7fd fd77 	bl	800855c <USBD_GetString>
  return USBD_StrDesc;
 800aa6e:	4b02      	ldr	r3, [pc, #8]	; (800aa78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3708      	adds	r7, #8
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}
 800aa78:	20001ae4 	.word	0x20001ae4
 800aa7c:	0800b148 	.word	0x0800b148

0800aa80 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b082      	sub	sp, #8
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	4603      	mov	r3, r0
 800aa88:	6039      	str	r1, [r7, #0]
 800aa8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	221a      	movs	r2, #26
 800aa90:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800aa92:	f000 f843 	bl	800ab1c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800aa96:	4b02      	ldr	r3, [pc, #8]	; (800aaa0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	3708      	adds	r7, #8
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}
 800aaa0:	20000168 	.word	0x20000168

0800aaa4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b082      	sub	sp, #8
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	4603      	mov	r3, r0
 800aaac:	6039      	str	r1, [r7, #0]
 800aaae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800aab0:	79fb      	ldrb	r3, [r7, #7]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d105      	bne.n	800aac2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aab6:	683a      	ldr	r2, [r7, #0]
 800aab8:	4907      	ldr	r1, [pc, #28]	; (800aad8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aaba:	4808      	ldr	r0, [pc, #32]	; (800aadc <USBD_FS_ConfigStrDescriptor+0x38>)
 800aabc:	f7fd fd4e 	bl	800855c <USBD_GetString>
 800aac0:	e004      	b.n	800aacc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aac2:	683a      	ldr	r2, [r7, #0]
 800aac4:	4904      	ldr	r1, [pc, #16]	; (800aad8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aac6:	4805      	ldr	r0, [pc, #20]	; (800aadc <USBD_FS_ConfigStrDescriptor+0x38>)
 800aac8:	f7fd fd48 	bl	800855c <USBD_GetString>
  }
  return USBD_StrDesc;
 800aacc:	4b02      	ldr	r3, [pc, #8]	; (800aad8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3708      	adds	r7, #8
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}
 800aad6:	bf00      	nop
 800aad8:	20001ae4 	.word	0x20001ae4
 800aadc:	0800b15c 	.word	0x0800b15c

0800aae0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b082      	sub	sp, #8
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	4603      	mov	r3, r0
 800aae8:	6039      	str	r1, [r7, #0]
 800aaea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aaec:	79fb      	ldrb	r3, [r7, #7]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d105      	bne.n	800aafe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aaf2:	683a      	ldr	r2, [r7, #0]
 800aaf4:	4907      	ldr	r1, [pc, #28]	; (800ab14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aaf6:	4808      	ldr	r0, [pc, #32]	; (800ab18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aaf8:	f7fd fd30 	bl	800855c <USBD_GetString>
 800aafc:	e004      	b.n	800ab08 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aafe:	683a      	ldr	r2, [r7, #0]
 800ab00:	4904      	ldr	r1, [pc, #16]	; (800ab14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ab02:	4805      	ldr	r0, [pc, #20]	; (800ab18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ab04:	f7fd fd2a 	bl	800855c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab08:	4b02      	ldr	r3, [pc, #8]	; (800ab14 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3708      	adds	r7, #8
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
 800ab12:	bf00      	nop
 800ab14:	20001ae4 	.word	0x20001ae4
 800ab18:	0800b168 	.word	0x0800b168

0800ab1c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b084      	sub	sp, #16
 800ab20:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ab22:	4b0f      	ldr	r3, [pc, #60]	; (800ab60 <Get_SerialNum+0x44>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ab28:	4b0e      	ldr	r3, [pc, #56]	; (800ab64 <Get_SerialNum+0x48>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ab2e:	4b0e      	ldr	r3, [pc, #56]	; (800ab68 <Get_SerialNum+0x4c>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ab34:	68fa      	ldr	r2, [r7, #12]
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	4413      	add	r3, r2
 800ab3a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d009      	beq.n	800ab56 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ab42:	2208      	movs	r2, #8
 800ab44:	4909      	ldr	r1, [pc, #36]	; (800ab6c <Get_SerialNum+0x50>)
 800ab46:	68f8      	ldr	r0, [r7, #12]
 800ab48:	f000 f814 	bl	800ab74 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ab4c:	2204      	movs	r2, #4
 800ab4e:	4908      	ldr	r1, [pc, #32]	; (800ab70 <Get_SerialNum+0x54>)
 800ab50:	68b8      	ldr	r0, [r7, #8]
 800ab52:	f000 f80f 	bl	800ab74 <IntToUnicode>
  }
}
 800ab56:	bf00      	nop
 800ab58:	3710      	adds	r7, #16
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}
 800ab5e:	bf00      	nop
 800ab60:	1fff7a10 	.word	0x1fff7a10
 800ab64:	1fff7a14 	.word	0x1fff7a14
 800ab68:	1fff7a18 	.word	0x1fff7a18
 800ab6c:	2000016a 	.word	0x2000016a
 800ab70:	2000017a 	.word	0x2000017a

0800ab74 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ab74:	b480      	push	{r7}
 800ab76:	b087      	sub	sp, #28
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	60f8      	str	r0, [r7, #12]
 800ab7c:	60b9      	str	r1, [r7, #8]
 800ab7e:	4613      	mov	r3, r2
 800ab80:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ab82:	2300      	movs	r3, #0
 800ab84:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ab86:	2300      	movs	r3, #0
 800ab88:	75fb      	strb	r3, [r7, #23]
 800ab8a:	e027      	b.n	800abdc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	0f1b      	lsrs	r3, r3, #28
 800ab90:	2b09      	cmp	r3, #9
 800ab92:	d80b      	bhi.n	800abac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	0f1b      	lsrs	r3, r3, #28
 800ab98:	b2da      	uxtb	r2, r3
 800ab9a:	7dfb      	ldrb	r3, [r7, #23]
 800ab9c:	005b      	lsls	r3, r3, #1
 800ab9e:	4619      	mov	r1, r3
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	440b      	add	r3, r1
 800aba4:	3230      	adds	r2, #48	; 0x30
 800aba6:	b2d2      	uxtb	r2, r2
 800aba8:	701a      	strb	r2, [r3, #0]
 800abaa:	e00a      	b.n	800abc2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	0f1b      	lsrs	r3, r3, #28
 800abb0:	b2da      	uxtb	r2, r3
 800abb2:	7dfb      	ldrb	r3, [r7, #23]
 800abb4:	005b      	lsls	r3, r3, #1
 800abb6:	4619      	mov	r1, r3
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	440b      	add	r3, r1
 800abbc:	3237      	adds	r2, #55	; 0x37
 800abbe:	b2d2      	uxtb	r2, r2
 800abc0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	011b      	lsls	r3, r3, #4
 800abc6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800abc8:	7dfb      	ldrb	r3, [r7, #23]
 800abca:	005b      	lsls	r3, r3, #1
 800abcc:	3301      	adds	r3, #1
 800abce:	68ba      	ldr	r2, [r7, #8]
 800abd0:	4413      	add	r3, r2
 800abd2:	2200      	movs	r2, #0
 800abd4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800abd6:	7dfb      	ldrb	r3, [r7, #23]
 800abd8:	3301      	adds	r3, #1
 800abda:	75fb      	strb	r3, [r7, #23]
 800abdc:	7dfa      	ldrb	r2, [r7, #23]
 800abde:	79fb      	ldrb	r3, [r7, #7]
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d3d3      	bcc.n	800ab8c <IntToUnicode+0x18>
  }
}
 800abe4:	bf00      	nop
 800abe6:	371c      	adds	r7, #28
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 800abf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ac28 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800abf4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800abf6:	e003      	b.n	800ac00 <LoopCopyDataInit>

0800abf8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800abf8:	4b0c      	ldr	r3, [pc, #48]	; (800ac2c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800abfa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800abfc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800abfe:	3104      	adds	r1, #4

0800ac00 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800ac00:	480b      	ldr	r0, [pc, #44]	; (800ac30 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800ac02:	4b0c      	ldr	r3, [pc, #48]	; (800ac34 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800ac04:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800ac06:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800ac08:	d3f6      	bcc.n	800abf8 <CopyDataInit>
  ldr  r2, =_sbss
 800ac0a:	4a0b      	ldr	r2, [pc, #44]	; (800ac38 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800ac0c:	e002      	b.n	800ac14 <LoopFillZerobss>

0800ac0e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800ac0e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800ac10:	f842 3b04 	str.w	r3, [r2], #4

0800ac14 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800ac14:	4b09      	ldr	r3, [pc, #36]	; (800ac3c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800ac16:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800ac18:	d3f9      	bcc.n	800ac0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800ac1a:	f7ff f931 	bl	8009e80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ac1e:	f000 f8c1 	bl	800ada4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ac22:	f7fe fdc7 	bl	80097b4 <main>
  bx  lr    
 800ac26:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800ac28:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800ac2c:	0800b1f8 	.word	0x0800b1f8
  ldr  r0, =_sdata
 800ac30:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800ac34:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 800ac38:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 800ac3c:	20001ce8 	.word	0x20001ce8

0800ac40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ac40:	e7fe      	b.n	800ac40 <ADC_IRQHandler>

0800ac42 <_ZdlPv>:
 800ac42:	f000 b8db 	b.w	800adfc <free>

0800ac46 <_ZNSaIcEC1Ev>:
 800ac46:	4770      	bx	lr

0800ac48 <_ZNSaIcED1Ev>:
 800ac48:	4770      	bx	lr

0800ac4a <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 800ac4a:	b10a      	cbz	r2, 800ac50 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 800ac4c:	f000 b8de 	b.w	800ae0c <memcpy>
 800ac50:	4770      	bx	lr
	...

0800ac54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800ac54:	b508      	push	{r3, lr}
 800ac56:	680b      	ldr	r3, [r1, #0]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	da02      	bge.n	800ac62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 800ac5c:	4809      	ldr	r0, [pc, #36]	; (800ac84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 800ac5e:	f000 f88a 	bl	800ad76 <_ZSt20__throw_length_errorPKc>
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d908      	bls.n	800ac78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 800ac66:	0052      	lsls	r2, r2, #1
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d205      	bcs.n	800ac78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 800ac6c:	2a00      	cmp	r2, #0
 800ac6e:	bfb6      	itet	lt
 800ac70:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800ac74:	600a      	strge	r2, [r1, #0]
 800ac76:	600b      	strlt	r3, [r1, #0]
 800ac78:	6808      	ldr	r0, [r1, #0]
 800ac7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ac7e:	3001      	adds	r0, #1
 800ac80:	f000 b85c 	b.w	800ad3c <_Znwj>
 800ac84:	0800b1ce 	.word	0x0800b1ce

0800ac88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800ac88:	4603      	mov	r3, r0
 800ac8a:	f853 0b08 	ldr.w	r0, [r3], #8
 800ac8e:	4298      	cmp	r0, r3
 800ac90:	d001      	beq.n	800ac96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800ac92:	f7ff bfd6 	b.w	800ac42 <_ZdlPv>
 800ac96:	4770      	bx	lr

0800ac98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800ac98:	2a01      	cmp	r2, #1
 800ac9a:	b510      	push	{r4, lr}
 800ac9c:	d102      	bne.n	800aca4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 800ac9e:	780a      	ldrb	r2, [r1, #0]
 800aca0:	7002      	strb	r2, [r0, #0]
 800aca2:	bd10      	pop	{r4, pc}
 800aca4:	f7ff ffd1 	bl	800ac4a <_ZNSt11char_traitsIcE4copyEPcPKcj>
 800aca8:	e7fb      	b.n	800aca2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

0800acaa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800acaa:	b508      	push	{r3, lr}
 800acac:	1a52      	subs	r2, r2, r1
 800acae:	f7ff fff3 	bl	800ac98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800acb2:	bd08      	pop	{r3, pc}

0800acb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800acb4:	b510      	push	{r4, lr}
 800acb6:	4604      	mov	r4, r0
 800acb8:	f7ff ffe6 	bl	800ac88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800acbc:	4620      	mov	r0, r4
 800acbe:	bd10      	pop	{r4, pc}

0800acc0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 800acc0:	6840      	ldr	r0, [r0, #4]
 800acc2:	4770      	bx	lr

0800acc4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800acc4:	6800      	ldr	r0, [r0, #0]
 800acc6:	4770      	bx	lr

0800acc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800acc8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800acca:	4604      	mov	r4, r0
 800accc:	4616      	mov	r6, r2
 800acce:	460d      	mov	r5, r1
 800acd0:	b919      	cbnz	r1, 800acda <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800acd2:	b112      	cbz	r2, 800acda <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800acd4:	480d      	ldr	r0, [pc, #52]	; (800ad0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800acd6:	f000 f84b 	bl	800ad70 <_ZSt19__throw_logic_errorPKc>
 800acda:	1b73      	subs	r3, r6, r5
 800acdc:	2b0f      	cmp	r3, #15
 800acde:	9301      	str	r3, [sp, #4]
 800ace0:	d907      	bls.n	800acf2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800ace2:	2200      	movs	r2, #0
 800ace4:	a901      	add	r1, sp, #4
 800ace6:	4620      	mov	r0, r4
 800ace8:	f7ff ffb4 	bl	800ac54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800acec:	9b01      	ldr	r3, [sp, #4]
 800acee:	6020      	str	r0, [r4, #0]
 800acf0:	60a3      	str	r3, [r4, #8]
 800acf2:	4632      	mov	r2, r6
 800acf4:	4629      	mov	r1, r5
 800acf6:	6820      	ldr	r0, [r4, #0]
 800acf8:	f7ff ffd7 	bl	800acaa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800acfc:	9b01      	ldr	r3, [sp, #4]
 800acfe:	6822      	ldr	r2, [r4, #0]
 800ad00:	6063      	str	r3, [r4, #4]
 800ad02:	2100      	movs	r1, #0
 800ad04:	54d1      	strb	r1, [r2, r3]
 800ad06:	b002      	add	sp, #8
 800ad08:	bd70      	pop	{r4, r5, r6, pc}
 800ad0a:	bf00      	nop
 800ad0c:	0800b1a4 	.word	0x0800b1a4

0800ad10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 800ad10:	b538      	push	{r3, r4, r5, lr}
 800ad12:	f100 0308 	add.w	r3, r0, #8
 800ad16:	4604      	mov	r4, r0
 800ad18:	6003      	str	r3, [r0, #0]
 800ad1a:	460d      	mov	r5, r1
 800ad1c:	b159      	cbz	r1, 800ad36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800ad1e:	4608      	mov	r0, r1
 800ad20:	f7f5 fa7a 	bl	8000218 <strlen>
 800ad24:	182a      	adds	r2, r5, r0
 800ad26:	4620      	mov	r0, r4
 800ad28:	f04f 0300 	mov.w	r3, #0
 800ad2c:	4629      	mov	r1, r5
 800ad2e:	f7ff ffcb 	bl	800acc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800ad32:	4620      	mov	r0, r4
 800ad34:	bd38      	pop	{r3, r4, r5, pc}
 800ad36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad3a:	e7f4      	b.n	800ad26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0800ad3c <_Znwj>:
 800ad3c:	b510      	push	{r4, lr}
 800ad3e:	2800      	cmp	r0, #0
 800ad40:	bf14      	ite	ne
 800ad42:	4604      	movne	r4, r0
 800ad44:	2401      	moveq	r4, #1
 800ad46:	4620      	mov	r0, r4
 800ad48:	f000 f850 	bl	800adec <malloc>
 800ad4c:	b930      	cbnz	r0, 800ad5c <_Znwj+0x20>
 800ad4e:	f000 f807 	bl	800ad60 <_ZSt15get_new_handlerv>
 800ad52:	b908      	cbnz	r0, 800ad58 <_Znwj+0x1c>
 800ad54:	f000 f812 	bl	800ad7c <abort>
 800ad58:	4780      	blx	r0
 800ad5a:	e7f4      	b.n	800ad46 <_Znwj+0xa>
 800ad5c:	bd10      	pop	{r4, pc}
	...

0800ad60 <_ZSt15get_new_handlerv>:
 800ad60:	4b02      	ldr	r3, [pc, #8]	; (800ad6c <_ZSt15get_new_handlerv+0xc>)
 800ad62:	6818      	ldr	r0, [r3, #0]
 800ad64:	f3bf 8f5b 	dmb	ish
 800ad68:	4770      	bx	lr
 800ad6a:	bf00      	nop
 800ad6c:	20000234 	.word	0x20000234

0800ad70 <_ZSt19__throw_logic_errorPKc>:
 800ad70:	b508      	push	{r3, lr}
 800ad72:	f000 f803 	bl	800ad7c <abort>

0800ad76 <_ZSt20__throw_length_errorPKc>:
 800ad76:	b508      	push	{r3, lr}
 800ad78:	f000 f800 	bl	800ad7c <abort>

0800ad7c <abort>:
 800ad7c:	b508      	push	{r3, lr}
 800ad7e:	2006      	movs	r0, #6
 800ad80:	f000 f938 	bl	800aff4 <raise>
 800ad84:	2001      	movs	r0, #1
 800ad86:	f7ff f845 	bl	8009e14 <_exit>

0800ad8a <atexit>:
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	4601      	mov	r1, r0
 800ad8e:	461a      	mov	r2, r3
 800ad90:	4618      	mov	r0, r3
 800ad92:	f000 b94b 	b.w	800b02c <__register_exitproc>
	...

0800ad98 <__errno>:
 800ad98:	4b01      	ldr	r3, [pc, #4]	; (800ada0 <__errno+0x8>)
 800ad9a:	6818      	ldr	r0, [r3, #0]
 800ad9c:	4770      	bx	lr
 800ad9e:	bf00      	nop
 800ada0:	20000184 	.word	0x20000184

0800ada4 <__libc_init_array>:
 800ada4:	b570      	push	{r4, r5, r6, lr}
 800ada6:	4e0d      	ldr	r6, [pc, #52]	; (800addc <__libc_init_array+0x38>)
 800ada8:	4c0d      	ldr	r4, [pc, #52]	; (800ade0 <__libc_init_array+0x3c>)
 800adaa:	1ba4      	subs	r4, r4, r6
 800adac:	10a4      	asrs	r4, r4, #2
 800adae:	2500      	movs	r5, #0
 800adb0:	42a5      	cmp	r5, r4
 800adb2:	d109      	bne.n	800adc8 <__libc_init_array+0x24>
 800adb4:	4e0b      	ldr	r6, [pc, #44]	; (800ade4 <__libc_init_array+0x40>)
 800adb6:	4c0c      	ldr	r4, [pc, #48]	; (800ade8 <__libc_init_array+0x44>)
 800adb8:	f000 f99e 	bl	800b0f8 <_init>
 800adbc:	1ba4      	subs	r4, r4, r6
 800adbe:	10a4      	asrs	r4, r4, #2
 800adc0:	2500      	movs	r5, #0
 800adc2:	42a5      	cmp	r5, r4
 800adc4:	d105      	bne.n	800add2 <__libc_init_array+0x2e>
 800adc6:	bd70      	pop	{r4, r5, r6, pc}
 800adc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800adcc:	4798      	blx	r3
 800adce:	3501      	adds	r5, #1
 800add0:	e7ee      	b.n	800adb0 <__libc_init_array+0xc>
 800add2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800add6:	4798      	blx	r3
 800add8:	3501      	adds	r5, #1
 800adda:	e7f2      	b.n	800adc2 <__libc_init_array+0x1e>
 800addc:	0800b1f0 	.word	0x0800b1f0
 800ade0:	0800b1f0 	.word	0x0800b1f0
 800ade4:	0800b1f0 	.word	0x0800b1f0
 800ade8:	0800b1f4 	.word	0x0800b1f4

0800adec <malloc>:
 800adec:	4b02      	ldr	r3, [pc, #8]	; (800adf8 <malloc+0xc>)
 800adee:	4601      	mov	r1, r0
 800adf0:	6818      	ldr	r0, [r3, #0]
 800adf2:	f000 b86d 	b.w	800aed0 <_malloc_r>
 800adf6:	bf00      	nop
 800adf8:	20000184 	.word	0x20000184

0800adfc <free>:
 800adfc:	4b02      	ldr	r3, [pc, #8]	; (800ae08 <free+0xc>)
 800adfe:	4601      	mov	r1, r0
 800ae00:	6818      	ldr	r0, [r3, #0]
 800ae02:	f000 b817 	b.w	800ae34 <_free_r>
 800ae06:	bf00      	nop
 800ae08:	20000184 	.word	0x20000184

0800ae0c <memcpy>:
 800ae0c:	b510      	push	{r4, lr}
 800ae0e:	1e43      	subs	r3, r0, #1
 800ae10:	440a      	add	r2, r1
 800ae12:	4291      	cmp	r1, r2
 800ae14:	d100      	bne.n	800ae18 <memcpy+0xc>
 800ae16:	bd10      	pop	{r4, pc}
 800ae18:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae20:	e7f7      	b.n	800ae12 <memcpy+0x6>

0800ae22 <memset>:
 800ae22:	4402      	add	r2, r0
 800ae24:	4603      	mov	r3, r0
 800ae26:	4293      	cmp	r3, r2
 800ae28:	d100      	bne.n	800ae2c <memset+0xa>
 800ae2a:	4770      	bx	lr
 800ae2c:	f803 1b01 	strb.w	r1, [r3], #1
 800ae30:	e7f9      	b.n	800ae26 <memset+0x4>
	...

0800ae34 <_free_r>:
 800ae34:	b538      	push	{r3, r4, r5, lr}
 800ae36:	4605      	mov	r5, r0
 800ae38:	2900      	cmp	r1, #0
 800ae3a:	d045      	beq.n	800aec8 <_free_r+0x94>
 800ae3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae40:	1f0c      	subs	r4, r1, #4
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	bfb8      	it	lt
 800ae46:	18e4      	addlt	r4, r4, r3
 800ae48:	f000 f954 	bl	800b0f4 <__malloc_lock>
 800ae4c:	4a1f      	ldr	r2, [pc, #124]	; (800aecc <_free_r+0x98>)
 800ae4e:	6813      	ldr	r3, [r2, #0]
 800ae50:	4610      	mov	r0, r2
 800ae52:	b933      	cbnz	r3, 800ae62 <_free_r+0x2e>
 800ae54:	6063      	str	r3, [r4, #4]
 800ae56:	6014      	str	r4, [r2, #0]
 800ae58:	4628      	mov	r0, r5
 800ae5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae5e:	f000 b94a 	b.w	800b0f6 <__malloc_unlock>
 800ae62:	42a3      	cmp	r3, r4
 800ae64:	d90c      	bls.n	800ae80 <_free_r+0x4c>
 800ae66:	6821      	ldr	r1, [r4, #0]
 800ae68:	1862      	adds	r2, r4, r1
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	bf04      	itt	eq
 800ae6e:	681a      	ldreq	r2, [r3, #0]
 800ae70:	685b      	ldreq	r3, [r3, #4]
 800ae72:	6063      	str	r3, [r4, #4]
 800ae74:	bf04      	itt	eq
 800ae76:	1852      	addeq	r2, r2, r1
 800ae78:	6022      	streq	r2, [r4, #0]
 800ae7a:	6004      	str	r4, [r0, #0]
 800ae7c:	e7ec      	b.n	800ae58 <_free_r+0x24>
 800ae7e:	4613      	mov	r3, r2
 800ae80:	685a      	ldr	r2, [r3, #4]
 800ae82:	b10a      	cbz	r2, 800ae88 <_free_r+0x54>
 800ae84:	42a2      	cmp	r2, r4
 800ae86:	d9fa      	bls.n	800ae7e <_free_r+0x4a>
 800ae88:	6819      	ldr	r1, [r3, #0]
 800ae8a:	1858      	adds	r0, r3, r1
 800ae8c:	42a0      	cmp	r0, r4
 800ae8e:	d10b      	bne.n	800aea8 <_free_r+0x74>
 800ae90:	6820      	ldr	r0, [r4, #0]
 800ae92:	4401      	add	r1, r0
 800ae94:	1858      	adds	r0, r3, r1
 800ae96:	4282      	cmp	r2, r0
 800ae98:	6019      	str	r1, [r3, #0]
 800ae9a:	d1dd      	bne.n	800ae58 <_free_r+0x24>
 800ae9c:	6810      	ldr	r0, [r2, #0]
 800ae9e:	6852      	ldr	r2, [r2, #4]
 800aea0:	605a      	str	r2, [r3, #4]
 800aea2:	4401      	add	r1, r0
 800aea4:	6019      	str	r1, [r3, #0]
 800aea6:	e7d7      	b.n	800ae58 <_free_r+0x24>
 800aea8:	d902      	bls.n	800aeb0 <_free_r+0x7c>
 800aeaa:	230c      	movs	r3, #12
 800aeac:	602b      	str	r3, [r5, #0]
 800aeae:	e7d3      	b.n	800ae58 <_free_r+0x24>
 800aeb0:	6820      	ldr	r0, [r4, #0]
 800aeb2:	1821      	adds	r1, r4, r0
 800aeb4:	428a      	cmp	r2, r1
 800aeb6:	bf04      	itt	eq
 800aeb8:	6811      	ldreq	r1, [r2, #0]
 800aeba:	6852      	ldreq	r2, [r2, #4]
 800aebc:	6062      	str	r2, [r4, #4]
 800aebe:	bf04      	itt	eq
 800aec0:	1809      	addeq	r1, r1, r0
 800aec2:	6021      	streq	r1, [r4, #0]
 800aec4:	605c      	str	r4, [r3, #4]
 800aec6:	e7c7      	b.n	800ae58 <_free_r+0x24>
 800aec8:	bd38      	pop	{r3, r4, r5, pc}
 800aeca:	bf00      	nop
 800aecc:	20000238 	.word	0x20000238

0800aed0 <_malloc_r>:
 800aed0:	b570      	push	{r4, r5, r6, lr}
 800aed2:	1ccd      	adds	r5, r1, #3
 800aed4:	f025 0503 	bic.w	r5, r5, #3
 800aed8:	3508      	adds	r5, #8
 800aeda:	2d0c      	cmp	r5, #12
 800aedc:	bf38      	it	cc
 800aede:	250c      	movcc	r5, #12
 800aee0:	2d00      	cmp	r5, #0
 800aee2:	4606      	mov	r6, r0
 800aee4:	db01      	blt.n	800aeea <_malloc_r+0x1a>
 800aee6:	42a9      	cmp	r1, r5
 800aee8:	d903      	bls.n	800aef2 <_malloc_r+0x22>
 800aeea:	230c      	movs	r3, #12
 800aeec:	6033      	str	r3, [r6, #0]
 800aeee:	2000      	movs	r0, #0
 800aef0:	bd70      	pop	{r4, r5, r6, pc}
 800aef2:	f000 f8ff 	bl	800b0f4 <__malloc_lock>
 800aef6:	4a21      	ldr	r2, [pc, #132]	; (800af7c <_malloc_r+0xac>)
 800aef8:	6814      	ldr	r4, [r2, #0]
 800aefa:	4621      	mov	r1, r4
 800aefc:	b991      	cbnz	r1, 800af24 <_malloc_r+0x54>
 800aefe:	4c20      	ldr	r4, [pc, #128]	; (800af80 <_malloc_r+0xb0>)
 800af00:	6823      	ldr	r3, [r4, #0]
 800af02:	b91b      	cbnz	r3, 800af0c <_malloc_r+0x3c>
 800af04:	4630      	mov	r0, r6
 800af06:	f000 f83d 	bl	800af84 <_sbrk_r>
 800af0a:	6020      	str	r0, [r4, #0]
 800af0c:	4629      	mov	r1, r5
 800af0e:	4630      	mov	r0, r6
 800af10:	f000 f838 	bl	800af84 <_sbrk_r>
 800af14:	1c43      	adds	r3, r0, #1
 800af16:	d124      	bne.n	800af62 <_malloc_r+0x92>
 800af18:	230c      	movs	r3, #12
 800af1a:	6033      	str	r3, [r6, #0]
 800af1c:	4630      	mov	r0, r6
 800af1e:	f000 f8ea 	bl	800b0f6 <__malloc_unlock>
 800af22:	e7e4      	b.n	800aeee <_malloc_r+0x1e>
 800af24:	680b      	ldr	r3, [r1, #0]
 800af26:	1b5b      	subs	r3, r3, r5
 800af28:	d418      	bmi.n	800af5c <_malloc_r+0x8c>
 800af2a:	2b0b      	cmp	r3, #11
 800af2c:	d90f      	bls.n	800af4e <_malloc_r+0x7e>
 800af2e:	600b      	str	r3, [r1, #0]
 800af30:	50cd      	str	r5, [r1, r3]
 800af32:	18cc      	adds	r4, r1, r3
 800af34:	4630      	mov	r0, r6
 800af36:	f000 f8de 	bl	800b0f6 <__malloc_unlock>
 800af3a:	f104 000b 	add.w	r0, r4, #11
 800af3e:	1d23      	adds	r3, r4, #4
 800af40:	f020 0007 	bic.w	r0, r0, #7
 800af44:	1ac3      	subs	r3, r0, r3
 800af46:	d0d3      	beq.n	800aef0 <_malloc_r+0x20>
 800af48:	425a      	negs	r2, r3
 800af4a:	50e2      	str	r2, [r4, r3]
 800af4c:	e7d0      	b.n	800aef0 <_malloc_r+0x20>
 800af4e:	428c      	cmp	r4, r1
 800af50:	684b      	ldr	r3, [r1, #4]
 800af52:	bf16      	itet	ne
 800af54:	6063      	strne	r3, [r4, #4]
 800af56:	6013      	streq	r3, [r2, #0]
 800af58:	460c      	movne	r4, r1
 800af5a:	e7eb      	b.n	800af34 <_malloc_r+0x64>
 800af5c:	460c      	mov	r4, r1
 800af5e:	6849      	ldr	r1, [r1, #4]
 800af60:	e7cc      	b.n	800aefc <_malloc_r+0x2c>
 800af62:	1cc4      	adds	r4, r0, #3
 800af64:	f024 0403 	bic.w	r4, r4, #3
 800af68:	42a0      	cmp	r0, r4
 800af6a:	d005      	beq.n	800af78 <_malloc_r+0xa8>
 800af6c:	1a21      	subs	r1, r4, r0
 800af6e:	4630      	mov	r0, r6
 800af70:	f000 f808 	bl	800af84 <_sbrk_r>
 800af74:	3001      	adds	r0, #1
 800af76:	d0cf      	beq.n	800af18 <_malloc_r+0x48>
 800af78:	6025      	str	r5, [r4, #0]
 800af7a:	e7db      	b.n	800af34 <_malloc_r+0x64>
 800af7c:	20000238 	.word	0x20000238
 800af80:	2000023c 	.word	0x2000023c

0800af84 <_sbrk_r>:
 800af84:	b538      	push	{r3, r4, r5, lr}
 800af86:	4c06      	ldr	r4, [pc, #24]	; (800afa0 <_sbrk_r+0x1c>)
 800af88:	2300      	movs	r3, #0
 800af8a:	4605      	mov	r5, r0
 800af8c:	4608      	mov	r0, r1
 800af8e:	6023      	str	r3, [r4, #0]
 800af90:	f7fe ff4a 	bl	8009e28 <_sbrk>
 800af94:	1c43      	adds	r3, r0, #1
 800af96:	d102      	bne.n	800af9e <_sbrk_r+0x1a>
 800af98:	6823      	ldr	r3, [r4, #0]
 800af9a:	b103      	cbz	r3, 800af9e <_sbrk_r+0x1a>
 800af9c:	602b      	str	r3, [r5, #0]
 800af9e:	bd38      	pop	{r3, r4, r5, pc}
 800afa0:	20001ce4 	.word	0x20001ce4

0800afa4 <_raise_r>:
 800afa4:	291f      	cmp	r1, #31
 800afa6:	b538      	push	{r3, r4, r5, lr}
 800afa8:	4604      	mov	r4, r0
 800afaa:	460d      	mov	r5, r1
 800afac:	d904      	bls.n	800afb8 <_raise_r+0x14>
 800afae:	2316      	movs	r3, #22
 800afb0:	6003      	str	r3, [r0, #0]
 800afb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800afb6:	bd38      	pop	{r3, r4, r5, pc}
 800afb8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800afba:	b112      	cbz	r2, 800afc2 <_raise_r+0x1e>
 800afbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800afc0:	b94b      	cbnz	r3, 800afd6 <_raise_r+0x32>
 800afc2:	4620      	mov	r0, r4
 800afc4:	f000 f830 	bl	800b028 <_getpid_r>
 800afc8:	462a      	mov	r2, r5
 800afca:	4601      	mov	r1, r0
 800afcc:	4620      	mov	r0, r4
 800afce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afd2:	f000 b817 	b.w	800b004 <_kill_r>
 800afd6:	2b01      	cmp	r3, #1
 800afd8:	d00a      	beq.n	800aff0 <_raise_r+0x4c>
 800afda:	1c59      	adds	r1, r3, #1
 800afdc:	d103      	bne.n	800afe6 <_raise_r+0x42>
 800afde:	2316      	movs	r3, #22
 800afe0:	6003      	str	r3, [r0, #0]
 800afe2:	2001      	movs	r0, #1
 800afe4:	e7e7      	b.n	800afb6 <_raise_r+0x12>
 800afe6:	2400      	movs	r4, #0
 800afe8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800afec:	4628      	mov	r0, r5
 800afee:	4798      	blx	r3
 800aff0:	2000      	movs	r0, #0
 800aff2:	e7e0      	b.n	800afb6 <_raise_r+0x12>

0800aff4 <raise>:
 800aff4:	4b02      	ldr	r3, [pc, #8]	; (800b000 <raise+0xc>)
 800aff6:	4601      	mov	r1, r0
 800aff8:	6818      	ldr	r0, [r3, #0]
 800affa:	f7ff bfd3 	b.w	800afa4 <_raise_r>
 800affe:	bf00      	nop
 800b000:	20000184 	.word	0x20000184

0800b004 <_kill_r>:
 800b004:	b538      	push	{r3, r4, r5, lr}
 800b006:	4c07      	ldr	r4, [pc, #28]	; (800b024 <_kill_r+0x20>)
 800b008:	2300      	movs	r3, #0
 800b00a:	4605      	mov	r5, r0
 800b00c:	4608      	mov	r0, r1
 800b00e:	4611      	mov	r1, r2
 800b010:	6023      	str	r3, [r4, #0]
 800b012:	f7fe feef 	bl	8009df4 <_kill>
 800b016:	1c43      	adds	r3, r0, #1
 800b018:	d102      	bne.n	800b020 <_kill_r+0x1c>
 800b01a:	6823      	ldr	r3, [r4, #0]
 800b01c:	b103      	cbz	r3, 800b020 <_kill_r+0x1c>
 800b01e:	602b      	str	r3, [r5, #0]
 800b020:	bd38      	pop	{r3, r4, r5, pc}
 800b022:	bf00      	nop
 800b024:	20001ce4 	.word	0x20001ce4

0800b028 <_getpid_r>:
 800b028:	f7fe bedc 	b.w	8009de4 <_getpid>

0800b02c <__register_exitproc>:
 800b02c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b030:	4d2c      	ldr	r5, [pc, #176]	; (800b0e4 <__register_exitproc+0xb8>)
 800b032:	682c      	ldr	r4, [r5, #0]
 800b034:	4607      	mov	r7, r0
 800b036:	460e      	mov	r6, r1
 800b038:	4691      	mov	r9, r2
 800b03a:	4698      	mov	r8, r3
 800b03c:	b934      	cbnz	r4, 800b04c <__register_exitproc+0x20>
 800b03e:	4b2a      	ldr	r3, [pc, #168]	; (800b0e8 <__register_exitproc+0xbc>)
 800b040:	4c2a      	ldr	r4, [pc, #168]	; (800b0ec <__register_exitproc+0xc0>)
 800b042:	602c      	str	r4, [r5, #0]
 800b044:	b113      	cbz	r3, 800b04c <__register_exitproc+0x20>
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800b04c:	6863      	ldr	r3, [r4, #4]
 800b04e:	2b1f      	cmp	r3, #31
 800b050:	dd3d      	ble.n	800b0ce <__register_exitproc+0xa2>
 800b052:	4b27      	ldr	r3, [pc, #156]	; (800b0f0 <__register_exitproc+0xc4>)
 800b054:	b91b      	cbnz	r3, 800b05e <__register_exitproc+0x32>
 800b056:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b05a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b05e:	208c      	movs	r0, #140	; 0x8c
 800b060:	f7ff fec4 	bl	800adec <malloc>
 800b064:	4604      	mov	r4, r0
 800b066:	2800      	cmp	r0, #0
 800b068:	d0f5      	beq.n	800b056 <__register_exitproc+0x2a>
 800b06a:	2300      	movs	r3, #0
 800b06c:	682a      	ldr	r2, [r5, #0]
 800b06e:	6002      	str	r2, [r0, #0]
 800b070:	6043      	str	r3, [r0, #4]
 800b072:	6028      	str	r0, [r5, #0]
 800b074:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 800b078:	b30f      	cbz	r7, 800b0be <__register_exitproc+0x92>
 800b07a:	f44f 7084 	mov.w	r0, #264	; 0x108
 800b07e:	f7ff feb5 	bl	800adec <malloc>
 800b082:	2800      	cmp	r0, #0
 800b084:	d0e7      	beq.n	800b056 <__register_exitproc+0x2a>
 800b086:	2300      	movs	r3, #0
 800b088:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 800b08c:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 800b090:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800b094:	6862      	ldr	r2, [r4, #4]
 800b096:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 800b09a:	2301      	movs	r3, #1
 800b09c:	4093      	lsls	r3, r2
 800b09e:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 800b0a2:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 800b0a6:	431a      	orrs	r2, r3
 800b0a8:	2f02      	cmp	r7, #2
 800b0aa:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 800b0ae:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 800b0b2:	bf02      	ittt	eq
 800b0b4:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 800b0b8:	4313      	orreq	r3, r2
 800b0ba:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 800b0be:	6863      	ldr	r3, [r4, #4]
 800b0c0:	1c5a      	adds	r2, r3, #1
 800b0c2:	3302      	adds	r3, #2
 800b0c4:	6062      	str	r2, [r4, #4]
 800b0c6:	2000      	movs	r0, #0
 800b0c8:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 800b0cc:	e7c5      	b.n	800b05a <__register_exitproc+0x2e>
 800b0ce:	2f00      	cmp	r7, #0
 800b0d0:	d0f5      	beq.n	800b0be <__register_exitproc+0x92>
 800b0d2:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800b0d6:	2800      	cmp	r0, #0
 800b0d8:	d1dc      	bne.n	800b094 <__register_exitproc+0x68>
 800b0da:	4b05      	ldr	r3, [pc, #20]	; (800b0f0 <__register_exitproc+0xc4>)
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d0ba      	beq.n	800b056 <__register_exitproc+0x2a>
 800b0e0:	e7cb      	b.n	800b07a <__register_exitproc+0x4e>
 800b0e2:	bf00      	nop
 800b0e4:	200002cc 	.word	0x200002cc
 800b0e8:	00000000 	.word	0x00000000
 800b0ec:	20000240 	.word	0x20000240
 800b0f0:	0800aded 	.word	0x0800aded

0800b0f4 <__malloc_lock>:
 800b0f4:	4770      	bx	lr

0800b0f6 <__malloc_unlock>:
 800b0f6:	4770      	bx	lr

0800b0f8 <_init>:
 800b0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0fa:	bf00      	nop
 800b0fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0fe:	bc08      	pop	{r3}
 800b100:	469e      	mov	lr, r3
 800b102:	4770      	bx	lr

0800b104 <_fini>:
 800b104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b106:	bf00      	nop
 800b108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b10a:	bc08      	pop	{r3}
 800b10c:	469e      	mov	lr, r3
 800b10e:	4770      	bx	lr
